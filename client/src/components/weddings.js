// WeddingDatesPage.jsx
import React, { useState } from 'react';
import '../styles/wedding.css';

const WeddingPage = () => {
  const [weddings, setWeddings] = useState([]);
  const [form, setForm] = useState({
    groomName: '',
    groomFather: '',
    groomGrandfather: '',
    groomFamily: '',
    brideFather: '',
    brideGrandfather: '',
    brideFamily: '',
    partyDate: '',
    dinnerDate: '',
    closingDate: '',
    place: ''
  });
  const [showList, setShowList] = useState(false);
  const [range, setRange] = useState({ start: '', end: '' });
  const [freeDays, setFreeDays] = useState([]);

  const handleChange = e => {
    const { name, value } = e.target;
    setForm(f => ({ ...f, [name]: value }));
  };

  const handleAdd = e => {
    e.preventDefault();
    setWeddings(w => [...w, { ...form }]);
    setForm({
      groomName: '', groomFather: '', groomGrandfather: '', groomFamily: '',
      brideFather: '', brideGrandfather: '', brideFamily: '',
      partyDate: '', dinnerDate: '', closingDate: '', place: ''
    });
  };

  const handleCheck = e => {
    e.preventDefault();
    if (!range.start || !range.end) return;
    const sd = new Date(range.start), ed = new Date(range.end);
    const allDates = [];
    for (let d = new Date(sd); d <= ed; d.setDate(d.getDate()+1)) {
      allDates.push(d.toISOString().slice(0,10));
    }
    const occupied = new Set();
    weddings.forEach(w => {
      [w.partyDate, w.dinnerDate, w.closingDate].forEach(d => {
        if (d >= range.start && d <= range.end) occupied.add(d);
      });
    });
    const free = allDates.filter(d => !occupied.has(d));
    setFreeDays(free);
  };

  return (
    <div className="wd-container">
        
        <div className='description'>
          <h1>ุฃุนุฑุงุณูุง</h1>
          <p>ูุฐู ุงูุตูุญุฉ ูุฎุตุตุฉ ูุชูุซูู ูุนุฑุถ ุชูุงุฑูุฎ ุงูุฃุนุฑุงุณ ุงูุฎุงุตุฉ ุจุณููุงู ูุตุฑ ุฃููุงุฏ ุจูุจูุฑุ
             ุญูุซ ูููู ูููุณุชุฎุฏููู ุฅุฏุฎุงู ูุนูููุงุช ุชูุตูููุฉ ุญูู ูู ุนุฑุณุ ูุซู ุงุณู ุงูุนุฑูุณ ูููุณูุจูุ
             ูุฃุตูู ุงูุนุฑูุณุ ุจุงูุฅุถุงูุฉ ุฅูู ุชูุงุฑูุฎ ุงูุญููุงุช ุงููุฎุชููุฉ (ุณูุฑูุฉ ุงููุณุงุกุ ุงูุนุดุงุกุ ,ุงูุฌุญูุฉ).
              ููุง ูููู ุฅุถุงูุฉ ูุตู ุงุฎุชูุงุฑู ูููุงู ุฅูุงูุฉ ุงูุนุฑุณ. ุจุนุฏ ุฅุฏุฎุงู ุงูุจูุงูุงุชุ ูููู ุงุณุชุนุฑุงุถ ูุงุฆูุฉ ุงูุฃุนุฑุงุณ ูู ุดูู ุจุทุงูุงุช ูุฑุชุจุฉ ูุฃูููุฉุ
               ููุง ุชููุฑ ุงูุตูุญุฉ ุฃุฏุงุฉ ุฐููุฉ ุชุชูุญ ูููุณุชุฎุฏู ุงูุชุญูู ูู ุงููุชุฑุงุช ุงูุฒูููุฉ ุงูุชู ูุง ุชุญุชูู ุนูู ุฃู ุฃุนุฑุงุณุ
               ููุง ูุณุงุนุฏ ูู ุงุฎุชูุงุฑ ุชูุงุฑูุฎ ููุงุณุจุฉ ูุชูุธูู ููุงุณุจุงุช ูุณุชูุจููุฉ ุฏูู ุชุนุงุฑุถ.








</p>
        </div>
        {/* Full-Width Form */}
        <form className="wd-form" onSubmit={handleAdd}>
          <div className="fieldsets-row">
            <fieldset>
              <legend>ุจูุงูุงุช ุงูุนุฑูุณ</legend>
              <input name="groomName" onChange={handleChange} value={form.groomName} placeholder="ุงูุงุณู" required />
              <input name="groomFather" onChange={handleChange} value={form.groomFather} placeholder="ุงุณู ุงูุฃุจ" required />
              <input name="groomGrandfather" onChange={handleChange} value={form.groomGrandfather} placeholder="ุงุณู ุงูุฌุฏ" required />
              <input name="groomFamily" onChange={handleChange} value={form.groomFamily} placeholder="ุงุณู ุงูุนุงุฆูุฉ" required />
            </fieldset>

            <fieldset>
              <legend>ุจูุงูุงุช ุงูุนุฑูุณ</legend>
              <input name="brideFather" onChange={handleChange} value={form.brideFather} placeholder="ุงุณู ุงูุฃุจ" required />
              <input name="brideGrandfather" onChange={handleChange} value={form.brideGrandfather} placeholder="ุงุณู ุงูุฌุฏ" required />
              <input name="brideFamily" onChange={handleChange} value={form.brideFamily} placeholder="ุงุณู ุงูุนุงุฆูุฉ" required />
            </fieldset>

            <fieldset>
              <legend>ุชูุงุฑูุฎ ุงูุญูู</legend>
              <label>ุญูู ุงููุณุงุก<input type="date" name="partyDate" onChange={handleChange} value={form.partyDate} required /></label>
              <label>ุงูุนุดุงุก<input type="date" name="dinnerDate" onChange={handleChange} value={form.dinnerDate} required /></label>
              <label>ุฎุฑูุฌ ุงูููุชูุฑ (ุงูููุฑุชูุฌ)<input type="date" name="closingDate" onChange={handleChange} value={form.closingDate} required /></label>
            </fieldset>
          </div>

          <textarea name="place" onChange={handleChange} value={form.place} placeholder="ูุตู ุงูููุงู (ุงุฎุชูุงุฑู)" />

          <div className="btn-group">
            <button type="submit" className="btn add">ุฅุถุงูุฉ ุงูุนุฑุณ</button>
            <button type="button" className="btn list" onClick={() => setShowList(s => !s)}>
              {showList ? 'ุฅุฎูุงุก ุงููู' : 'ุนุฑุถ ูู ุงูุฃุนุฑุงุณ'}
            </button>
          </div>
        </form>

        {/* Display Section */}
        <div className="wd-section">
          {showList && (
            <div className="wd-list">
              <h2>ูุงุฆูุฉ ุงูุฃุนุฑุงุณ</h2>
              <div className="wd-cards-grid">
                {weddings.map((w, i) => (
                  <div key={i} className="wd-card">
                    <h3>ุงูุนุฑุณ #{i + 1}</h3>
                    <p><strong>ุงูุนุฑูุณ:</strong> {w.groomName} ุจู {w.groomFather} ุจู {w.groomGrandfather} ({w.groomFamily})</p>
                    <p><strong>ุงูุนุฑูุณ ูู:</strong> {w.brideFather} ุจู {w.brideGrandfather} ({w.brideFamily})</p>
                    <p><strong>ุณูุฑูุฉ ุงููุณุงุก:</strong> {w.partyDate} | <strong>ููููุฉ ุงูุนุดุงุก:</strong> {w.dinnerDate} | <strong>ุงูุฌุญูุฉ:</strong> {w.closingDate}</p>
                    {w.place && <p className="place">๐๏ธ {w.place}</p>}
                  </div>
                ))}
              </div>
            </div>

          )}

          <form className="wd-check" onSubmit={handleCheck}>
            <h2>ุชุญูู ูู ุงูุฃูุงู ุงููุงุฑุบุฉ</h2>
            <label>ูู <input type="date" value={range.start} onChange={e => setRange(r => ({ ...r, start: e.target.value }))} required /></label>
            <label>ุฅูู <input type="date" value={range.end} onChange={e => setRange(r => ({ ...r, end: e.target.value }))} required /></label>
            <button type="submit" className="btn check">ุชุญูู</button>
          </form>

          {freeDays.length > 0 && (
            <div className="wd-free">
              <h3>ุนุฏุฏ ุงูุฃูุงู ุงููุงุฑุบุฉ: {freeDays.length}</h3>
              <ul>
                {freeDays.map(d => <li key={d}>{d}</li>)}
              </ul>
            </div>
          )}
        </div>
      </div>

  );
};

export default WeddingPage;
