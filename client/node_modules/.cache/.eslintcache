[{"D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\index.js":"1","D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\App.js":"2","D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\components\\FamilyTree.js":"3","D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\components\\SearchPage.js":"4","D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\components\\RelationChecker.js":"5","D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\components\\StatisticsDashboard.js":"6"},{"size":290,"mtime":1744565996798,"results":"7","hashOfConfig":"8"},{"size":2505,"mtime":1745792564286,"results":"9","hashOfConfig":"8"},{"size":7049,"mtime":1746059399454,"results":"10","hashOfConfig":"8"},{"size":27615,"mtime":1746118108912,"results":"11","hashOfConfig":"8"},{"size":30851,"mtime":1746058126358,"results":"12","hashOfConfig":"8"},{"size":7608,"mtime":1745969933149,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"15oweee",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\index.js",[],["29","30"],"D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\App.js",[],"D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\components\\FamilyTree.js",["31","32"],"import React, { useEffect, useState , useRef } from 'react';\r\nimport Tree from 'react-d3-tree';\r\nimport './FamilyTree.css';\r\nrequire('dotenv').config();\r\n\r\nconst translations = require('./translation.json');\r\n\r\nconst neo4jURI = process.env.REACT_APP_NEO4J_URI;\r\nconst neo4jUser = process.env.REACT_APP_NEO4J_USER;\r\nconst neo4jPassword = process.env.REACT_APP_NEO4J_PASSWORD;\r\n\r\nconst driver = require('neo4j-driver').driver(\r\n    neo4jURI,\r\n    require('neo4j-driver').auth.basic(neo4jUser, neo4jPassword)\r\n);\r\n\r\n\r\nconst session = driver.session();\r\n\r\nlet uniqueKeyCounter = 0;\r\nexport const translateName = (name) => {\r\n  return translations[name] || name;\r\n};\r\n\r\nconst renderFamilyTree = (person, parentId = null, level = 0) => {\r\n  const uniqueKey = `${person.name}-${person.lastName}-${parentId}-${level}-${uniqueKeyCounter++}`;\r\n\r\n  return (\r\n    <div key={uniqueKey}>\r\n      <div>\r\n        <strong>{person.name} {person.lastName}</strong>\r\n      </div>\r\n      {person.children && person.children.length > 0 && (\r\n        <div style={{ marginLeft: '20px' }}>\r\n          {person.children.map((child) => renderFamilyTree(child, person.id, level + 1))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst fetchFamilyTree = async () => {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/family-tree');\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Server error');\r\n    }\r\n\r\n    const data = await response.json(); // Parse JSON if response is valid\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching family tree:', error.message);\r\n    return [];\r\n  }\r\n};\r\n\r\nconst formatFamilyTreeData = (person) => {\r\n  const children = person.children && person.children.length > 0\r\n    ? person.children.map(formatFamilyTreeData) // Recursively format children\r\n    : [];\r\n\r\n  return {\r\n    name: `${person.name} ${person.lastName}`,\r\n    children: children // Include children for each person\r\n  };\r\n};\r\n\r\nconst getChildrenOfFather = (fatherId, allPeople) => {\r\n  const father = allPeople.filter(father => father.id === fatherId)[0];  \r\n  return father && father.children ? father.children : [];  \r\n};\r\n\r\nconst buildTree = (person, allPeople) => {\r\n  if (!person) return null;\r\n\r\n  const children = getChildrenOfFather(person.id, allPeople)\r\n    .map(child => buildTree(child, allPeople))\r\n    .filter(Boolean); \r\n\r\n    \r\n    return {\r\n      id: person.id,\r\n      name: translateName(person.name),\r\n      children: children.length > 0 ? children : undefined,\r\n    };\r\n};\r\n\r\nconst getGenderbyID = async (personID) => {\r\n  const session = driver.session(); // Open a session\r\n\r\n  try {\r\n    // Fix the parameter name to match the query variable\r\n    const result = await session.run(\r\n      `MATCH (p:Person) WHERE id(p) = $personId \r\n      RETURN p.gender AS gender`,\r\n      { personId: personID } // Ensure the key matches the query's parameter\r\n    );\r\n    \r\n    if (result.records.length > 0) {\r\n      const gender = result.records[0].get('gender');\r\n      return gender; // Return the gender value\r\n    } else {\r\n      console.log(`No person found with the ID ${personID}`);\r\n      return null; // Return null when no person is found\r\n    }\r\n  } catch (error) {\r\n    console.error('Error retrieving gender:', error);\r\n    return null; // Return null in case of an error\r\n  } finally {\r\n    await session.close(); // Always close the session after the query\r\n  }\r\n};\r\n\r\nconst FamilyTree = ({ searchQuery }) => {\r\n  const treeContainerRef = useRef(null);\r\n  const [familyTree, setFamilyTree] = useState(null);\r\n  const [husbandId, setHusbandId] = useState(null);\r\n  const [translate, setTranslate] = useState({ x: 0, y: 0 });\r\n  const nodePositions = useRef({});\r\n\r\n  const handleWomanClick = async (person) => {\r\n    const gender = await getGenderbyID(person.id);\r\n    if (gender !== \"Female\") return;\r\n\r\n    try {\r\n      const result = await session.run(\r\n        `\r\n        MATCH (w:Person)-[:WIFE_OF]-(h:Person)\r\n        WHERE id(w) = $womanId\r\n        RETURN id(h) as HusbandID\r\n        LIMIT 1\r\n      `,\r\n        { womanId: person.id }\r\n      );\r\n\r\n      if (result.records.length > 0) {\r\n        const husband = result.records[0].get(\"HusbandID\").toNumber();\r\n        const coords = nodePositions.current[husband];\r\n        const container = treeContainerRef.current;\r\n\r\n        if (coords && container) {\r\n          const bounds = container.getBoundingClientRect();\r\n          setTranslate({\r\n            x: bounds.width / 2 - coords.x,\r\n            y: bounds.height / 2 - coords.y,\r\n          });\r\n        }\r\n\r\n        setHusbandId(husband);\r\n      } else {\r\n        console.log(\"No husband found for\", person.name);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching husband:\", error);\r\n    } finally {\r\n      await session.close();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const loadFamilyTree = async () => {\r\n      try {\r\n        const people = await fetchFamilyTree();\r\n        if (Array.isArray(people) && people.length > 0) {\r\n          const rootPerson = people.find((p) => p.id === 17); // ROOT\r\n          const treeData = buildTree(rootPerson, people);\r\n          setFamilyTree(treeData);\r\n        } else {\r\n          console.warn(\"Empty or invalid people data\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error loading family tree:\", error);\r\n      }\r\n    };\r\n\r\n    loadFamilyTree();\r\n  }, []);\r\n\r\n  if (!familyTree) return <div>Loading...</div>;\r\n  console.log(familyTree);\r\n  return (\r\n    <div\r\n      id=\"treeWrapper\"\r\n      ref={treeContainerRef}\r\n      style={{ width: \"100vw\", height: \"100vh\" }}\r\n    >\r\n      <Tree\r\n        data={familyTree}\r\n        orientation=\"vertical\"\r\n        pathFunc=\"step\"\r\n        translate={translate}\r\n        nodeSize={{ x: 100, y: 100 }} // Adjust node size if needed\r\n        separation={{ siblings: 1, nonSiblings: 2 }} // Adjust separation between nodes\r\n        renderCustomNodeElement={({ nodeDatum, hierarchyPointNode }) => {\r\n          const isHusband = nodeDatum.id === husbandId;\r\n\r\n          // Record node position\r\n          nodePositions.current[nodeDatum.id] = {\r\n            x: hierarchyPointNode.x,\r\n            y: hierarchyPointNode.y,\r\n          };\r\n\r\n          return (\r\n            <g\r\n              onClick={() => handleWomanClick(nodeDatum)}\r\n              style={{ cursor: \"pointer\" }}\r\n            >\r\n              <title>{nodeDatum.id}</title>\r\n              <rect\r\n                x=\"-50\"\r\n                y=\"-20\"\r\n                width=\"100\"\r\n                height=\"40\"\r\n                fill={isHusband ? \"lightgreen\" : \"#a8e6cf \"}\r\n                stroke=\"black\"\r\n                strokeWidth=\"2\"\r\n                rx=\"8\"\r\n              />\r\n              <text\r\n                x=\"0\"\r\n                y=\"5\"\r\n                fontSize=\"24\"\r\n                textAnchor=\"middle\"\r\n                fill=\"black\"\r\n              >\r\n                {nodeDatum.name}\r\n              </text>\r\n            </g>\r\n          );\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FamilyTree;","D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\components\\SearchPage.js",["33","34"],"D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\components\\RelationChecker.js",["35","36"],"import React, { useState } from 'react';\r\nimport './RelationChecker.css';\r\nconst translations = require('./translation.json');\r\nrequire('dotenv').config();\r\n\r\nconst neo4jURI = process.env.REACT_APP_NEO4J_URI;\r\nconst neo4jUser = process.env.REACT_APP_NEO4J_USER;\r\nconst neo4jPassword = process.env.REACT_APP_NEO4J_PASSWORD;\r\n\r\nconst driver = require('neo4j-driver').driver(\r\n    neo4jURI,\r\n    require('neo4j-driver').auth.basic(neo4jUser, neo4jPassword)\r\n);\r\nconst session = driver.session();\r\n\r\nconst getPersonMatches = async (name, fatherName = \"\", grandfatherName = \"\", lastName) => {\r\n  let query = \"\";\r\n\r\n  if (grandfatherName) {\r\n    query = `\r\n      MATCH (grandfather:Person {name: $grandfatherName})-[:FATHER_OF]->(father:Person {name: $fatherName})-[:FATHER_OF]->(p:Person {name: $name, lastName: $lastName})\r\n      RETURN id(p) AS personID, p.name AS personName, p.lastName AS familyName, father.name AS fatherName, grandfather.name AS grandfatherName\r\n    `;\r\n  } \r\n  else if (fatherName) {\r\n    query = `\r\n      MATCH (father:Person {name: $fatherName})-[:FATHER_OF]->(p:Person {name: $name, lastName: $lastName})\r\n      OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n      RETURN id(p) AS personID, p.name AS personName, p.lastName AS familyName, father.name AS fatherName, grandfather.name AS grandfatherName\r\n    `;\r\n  } \r\n  else {\r\n    query = `\r\n      MATCH (p:Person {name: $name, lastName: $lastName})\r\n      OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(p)\r\n      OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n      RETURN id(p) AS personID, p.name AS personName, p.lastName AS familyName, father.name AS fatherName, grandfather.name AS grandfatherName\r\n    `;\r\n  }\r\n\r\n  const params = { name, lastName, fatherName, grandfatherName };\r\n  const result = await session.run(query, params);\r\n\r\n  return result.records.map(record => ({\r\n    id: record.get('personID').toNumber(),\r\n    name: record.get('personName'),\r\n    father: record.get('fatherName') || \"Unknown\",\r\n    grandfather: record.get('grandfatherName') || \"Unknown\",\r\n    lastName: record.get('familyName')\r\n  }));\r\n};\r\n\r\n\r\n// Function that split english translated name that may contain ben to full name only parts.\r\nfunction splitName(fullName) {\r\n  const parts = fullName.replace(/ ben /gi, ' ').split(/\\s+/);\r\n  if (parts.length === 2) {\r\n    return {\r\n      personName: parts[0],\r\n      fatherName: \"\",\r\n      grandfatherName: \"\",\r\n      familyName: parts[1]\r\n    };\r\n  } else if (parts.length === 3) {\r\n    return {\r\n      personName: parts[0],\r\n      fatherName: parts[1],\r\n      grandfatherName: \"\",\r\n      familyName: parts[2]\r\n    };\r\n  } else if (parts.length === 4) {\r\n    return {\r\n      personName: parts[0],\r\n      fatherName: parts[1],\r\n      grandfatherName: parts[2],\r\n      familyName: parts[3]\r\n    };\r\n  }\r\n  // Default case if structure doesn't match\r\n  return { personName: parts[0], fatherName: \"\", grandfatherName: \"\", familyName: parts[1] };\r\n}\r\n\r\nconst getRelationship = async (person1FullName, person2FullName) => {\r\n  const isArabic = (text) => /[\\u0600-\\u06FF]/.test(text);\r\n  // const isEnglish = (text) => /^[A-Za-z\\s]+$/.test(text);\r\n  let translatedName1, translatedName2;\r\n\r\n  if (isArabic(person1FullName)){\r\n    translatedName1 = translateName(person1FullName, false);\r\n  }\r\n  else{\r\n    translatedName1 = person1FullName;\r\n  }\r\n  if (isArabic(person2FullName)){\r\n    translatedName2 = translateName(person2FullName, false);\r\n  }\r\n  else{\r\n    translatedName2 = person2FullName;\r\n  }\r\n  \r\n  const { personName: person1Name, fatherName: person1FatherName, grandfatherName: person1GrandfatherName, familyName: person1LastName } = splitName(translatedName1);\r\n  const { personName: person2Name, fatherName: person2FatherName, grandfatherName: person2GrandfatherName, familyName: person2LastName } = splitName(translatedName2);\r\n  const person1Matches = await getPersonMatches(person1Name, person1FatherName, person1GrandfatherName, person1LastName);\r\n  const person2Matches = await getPersonMatches(person2Name, person2FatherName, person2GrandfatherName, person2LastName);\r\n\r\n  console.log(\"P1 matches : \", person1Matches);\r\n  console.log(\"P2 matches : \", person2Matches);\r\n\r\n  let person1ID, person2ID;\r\n  if (person1Matches.length > 1 || person2Matches.length > 1) {\r\n    return {\r\n      error: 'non-unique-name',\r\n      message: 'تم العثور على عدة أشخاص بنفس الاسم. الرجاء اختيار الصحيح.',\r\n      duplicates: {\r\n        person1: person1Matches.length > 1 ? person1Matches : [],\r\n        person2: person2Matches.length > 1 ? person2Matches : []\r\n      }\r\n    };\r\n  }\r\n  else{\r\n    person1ID = person1Matches[0].id;\r\n    person2ID = person2Matches[0].id;\r\n  }\r\n\r\n  const gender1 = await getGender(person1ID);\r\n  const gender2 = await getGender(person2ID);\r\n  try {\r\n\r\n    // Function that return the ancestors of a given person starting with the person itself and going up to the root.\r\n    const getAncestors = async (personID) => {\r\n      const result = await session.run(`\r\n        MATCH path = (ancestor:Person)-[:FATHER_OF|MOTHER_OF*]->(child:Person)\r\n        WHERE id(child) = $personID\r\n        WITH ancestor, id(ancestor) AS ID, length(path) AS level\r\n        RETURN DISTINCT ID, ancestor.name AS name, ancestor.lastName AS lastName, level\r\n        ORDER BY level ASC\r\n      `, { personID });\r\n    \r\n      const personResult = await session.run(`\r\n        MATCH (p:Person)\r\n        WHERE id(p) = $personID\r\n        RETURN id(p) AS ID, p.name AS name, p.lastName AS lastName\r\n      `, { personID });\r\n    \r\n      const person = personResult.records[0];\r\n    \r\n      return [\r\n        {\r\n          id: person.get('ID').toNumber(),\r\n          name: person.get('name'),\r\n          lastName: person.get('lastName'),\r\n          level: 0\r\n        },\r\n        ...result.records.map(record => ({\r\n          id: record.get('ID').toNumber(),\r\n          name: record.get('name'),\r\n          lastName: record.get('lastName'),\r\n          level: record.get('level').toNumber()\r\n        }))\r\n      ];\r\n    };\r\n\r\n    // Get the ancestors for both persons\r\n    // const maxLevels = 4; \r\n    let person1Ancestors = await getAncestors(person1ID);\r\n    let person2Ancestors = await getAncestors(person2ID);\r\n    \r\n    console.log(`Person 1 Ancestors: ${person1Ancestors.map(a => a.name).join(' ben ')}`);\r\n    console.log(`Person 2 Ancestors: ${person2Ancestors.map(a => a.name).join(' ben ')}`);\r\n\r\n    const person1AncestorsIds = person1Ancestors.map(a => a.id);\r\n    const person2AncestorsIds = person2Ancestors.map(a => a.id);\r\n    const translatedName1 = translateName(person1FullName);\r\n    const translatedName2 = translateName(person2FullName);\r\n\r\n\r\n    // Check for common ancestors between the two persons\r\n    for (let i = 0; i < person1Ancestors.length; i++) {\r\n      for (let j = 0; j < person2Ancestors.length; j++) {\r\n        if (person1Ancestors[i].id === person2Ancestors[j].id) {\r\n          var p1Level = person1Ancestors[i].level;\r\n          var p2Level = person2Ancestors[j].level;\r\n          \r\n          console.log(`Level: (${p1Level}, ${p2Level})`);\r\n\r\n          if (p1Level === 0 && p2Level === 1) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${translatedName1} هو والد ${translatedName2}`);\r\n              return `${translatedName1} هو والد ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${translatedName1} هي والدة ${translatedName2}`);\r\n              return `${translatedName1} هي والدة ${translatedName2}`;\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 1 && p2Level === 0) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${translatedName1} هو ابن ${translatedName2}`);\r\n              return `${translatedName1} هو ابن ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${translatedName1} هي إبنة ${person2FullName}`);\r\n              return `${translatedName1} هي إبنة ${translatedName2}`;\r\n            }\r\n          } \r\n\r\n          else if (p1Level === 2 && p2Level === 0) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${person1FullName} هو حفيد ${person2FullName}`);\r\n              return `${translatedName1} هو حفيد ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} هي حفيدة ${person2FullName}.`);\r\n              return `${translatedName1} هي حفيدة ${translatedName2}`;\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 0 && p2Level === 2) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${person1FullName} هو جدّ ${person2FullName}'.`);\r\n              return `${translatedName1} هو جدّ ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} هي جدّة ${person2FullName}.`);\r\n              return `${translatedName1} هي جدّة ${translatedName2}`;\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 3 && p2Level === 0) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${person1FullName} هو إبن حفيد ${person2FullName}.`);\r\n              return `${translatedName1} هو إبن حفيد ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} هي إبنة حفيدة ${person2FullName}.`);\r\n              return `${translatedName1} هي إبنة حفيدة ${translatedName2}`;\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 0 && p2Level === 3) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${person1FullName} هو جد والد ${person2FullName}`);\r\n              return `${translatedName1} و جد والد ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName}هي جدة والدة ${person2FullName}`);\r\n              return `${translatedName1} هي جدة والدة ${translatedName2}`;\r\n            }\r\n          } \r\n          \r\n          else if (p1Level === 1 && p2Level === 1) {\r\n            if (gender1 === 'Male' && gender2 === 'Male'){\r\n              console.log(`${person1FullName} و ${person2FullName} إخوة.`);\r\n              return `${translatedName1} و ${translatedName2} إخوة`;\r\n            }\r\n            else if (gender1 === 'Female' && gender2 === 'Female'){\r\n              console.log(`${person1FullName} و ${person2FullName} أخوات.`);\r\n              return `${translatedName1} و ${translatedName2} أخوات`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} و ${person2FullName} إخوة.`);\r\n              return `${translatedName1} و ${translatedName2} إخوة`;\r\n            }\r\n          } \r\n          \r\n          else if (p1Level === 2 && p2Level === 1) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${translatedName1} هو ابن أخ ${translatedName2}`);\r\n              return `${translatedName1} هو ابن أخ ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} هي إبنة أخ ${person2FullName}.`);\r\n              return `${translatedName1} هي إبن أخ ${translatedName2}`;\r\n            }\r\n          } \r\n          \r\n          else if (p1Level === 1 && p2Level === 2) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${person1FullName} هو عم ${person2FullName}.`);\r\n              return `${translatedName1} هو عم ${translatedName2}'`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} هي عمّة ${person2FullName}.`);\r\n              return `${translatedName1} هي عمّة ${translatedName2}`;\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 2 && p2Level === 2) {\r\n            console.log(`${person1FullName} و ${person2FullName} أولاد العم.`);\r\n          \r\n            const p1AncestorFullName = getAncestorFullName(person1Ancestors, 1);\r\n            const p1AncestorGender = await getGender(p1AncestorFullName);\r\n\r\n            const p2AncestorFullName = getAncestorFullName(person2Ancestors, 1);\r\n            const p2AncestorGender = await getGender(p2AncestorFullName);\r\n            console.log(p1AncestorFullName);\r\n\r\n            if (gender1 === 'Male') { \r\n              if (p1AncestorGender === 'Male') { \r\n                if (p2AncestorGender === 'Male'){  // ولد عمه\r\n                  console.log(`${person1FullName} هو إبن عم ${person2FullName}.`);\r\n                  return `${translatedName1} إبن عم ${translatedName2}`;\r\n                }\r\n                else{ // ولد عمته\r\n                  console.log(`${person1FullName} هو إبن عمّة ${person2FullName}.`);\r\n                  return `${translatedName1} هو إبن عمّة ${translatedName2}`;\r\n                }\r\n              } \r\n              else {  \r\n                if (p2AncestorGender === 'Male'){  // ولد خاله\r\n                  console.log(`${person1FullName} هو إبن خال ${person2FullName}.`);\r\n                  return `${translatedName1} هو إبن خال ${translatedName2}'`;\r\n                }\r\n                else{ // ولد خالته\r\n                  console.log(`${person1FullName} هو إبن خالة ${person2FullName}.`);\r\n                  return `${translatedName1} هو إبن خالة ${translatedName2}`;\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (p1AncestorGender === 'Male') { \r\n                if (p2AncestorGender === 'Male'){  // بنت عمه\r\n                  console.log(`${person1FullName} هي إبنة عمّ ${person2FullName}.`);\r\n                  return `${translatedName1} هي إبنة عمّ ${translatedName2}`;\r\n                }\r\n                else{ // بنت عمته\r\n                  console.log(`${person1FullName} هي إبنة عمّة ${person2FullName}.`);\r\n                  return `${translatedName1} هي إبنة عمّة ${translatedName2}`;\r\n                }\r\n              } \r\n              else {  \r\n                if (p2AncestorGender === 'Male'){  // بنت خاله\r\n                  console.log(`${person1FullName} هي إبنة خال ${person2FullName}.`);\r\n                  return `${translatedName1} هي إبنة خال ${translatedName2}`;\r\n                }\r\n                else{ // بنت خالته\r\n                  console.log(`${person1FullName} هي إبنة خالة ${person2FullName}.`);\r\n                  return `${translatedName1} هي إبنة خالة ${translatedName2}`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 2 && p2Level === 3) {          \r\n            const p1AncestorFullName = getAncestorFullName(person1Ancestors, 1);\r\n            const p1AncestorGender = await getGender(p1AncestorFullName);\r\n\r\n            const p2AncestorFullName = getAncestorFullName(person2Ancestors, 1);\r\n            const p2AncestorGender = await getGender(p2AncestorFullName);\r\n\r\n            if (gender1 === 'Male') { \r\n              \r\n              if (p1AncestorGender === 'Male') {  // father's side\r\n                if (p2AncestorGender === 'Male') {  // father's brother's son\r\n                  console.log(`${person1FullName} هو إبن عم والد ${person2FullName}.`);\r\n                  return `${translatedName1} هو إبن عم والد ${translatedName2}`;\r\n                } else { \r\n                  console.log(`${person1FullName} هو إبن عمة والد ${person2FullName}.`);\r\n                  return `${translatedName1} هو إبن همة والد ${translatedName2}`;\r\n                }\r\n              } else {  // mother's side\r\n                if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                  console.log(`${person1FullName} هو إبن عم أم ${person2FullName}.`);\r\n                  return `${translatedName1} هو إبن عم أم ${translatedName2}.`;\r\n                } else {  // mother's brother's daughter\r\n                  console.log(`${person1FullName} هو إبن عمّة أم ${person2FullName}.`);\r\n                  return `${translatedName1} هو إبن عمّة أم ${translatedName2}`;\r\n                }\r\n              }\r\n            } else {  // If person1 is female\r\n            \r\n              if (p1AncestorGender === 'Male') {  // father's side\r\n                if (p2AncestorGender === 'Male') {  // father's brother's son\r\n                  console.log(`${person1FullName} هي إبنة عم والد ${person2FullName}.`);\r\n                  return `${translatedName1} هي إبنة عم والد ${translatedName2}`;\r\n                } else {  // father's brother's daughter\r\n                  console.log(`${person1FullName} هي إبنة عمة والد ${person2FullName}.`);\r\n                  return `${translatedName1} هي إبنة عمة والد ${translatedName2}`;\r\n                }\r\n              } else {  // mother's side\r\n                if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                  console.log(`${person1FullName} هي إبنة عم والدة ${person2FullName}.`);\r\n                  return `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\r\n                } else {  // mother's brother's daughter\r\n                  console.log(`${person1FullName} هي إبنة عمة والدة ${person2FullName}.`);\r\n                  return `${translatedName1} هي إبنة عمة والدة ${translatedName2}`;\r\n                }\r\n              }\r\n            }\r\n            \r\n          }\r\n          \r\n          else if (p1Level === 3 && p2Level === 2) {          \r\n            const p1AncestorFullName = getAncestorFullName(person1Ancestors, 1);\r\n            const p1AncestorGender = await getGender(person1AncestorsIds[1]);\r\n\r\n            const p2AncestorFullName = getAncestorFullName(person2Ancestors, 1);\r\n            const p2AncestorGender = await getGender(person2AncestorsIds[1]);\r\n\r\n            if (p1AncestorGender === 'Male') {  // father's side\r\n              if (p2AncestorGender === 'Male') {  // father's brother's son\r\n                console.log(`والد ${person1FullName} هو إبن عم ${person2FullName}`);\r\n                return `والد ${translatedName1} هو إبن عم ${translatedName2}`;\r\n              } else { \r\n                console.log(`والد ${person1FullName} هو إبن خال ${person2FullName}.`);\r\n                return `والد ${translatedName1} هو إبن خال ${translatedName2}`;\r\n              }\r\n            } \r\n            else {  // mother's side\r\n              if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                console.log(`والدة ${person1FullName} هي إبنة عم ${person2FullName}.`);\r\n                return `والدة ${translatedName1} هي إبنة عم ${translatedName2}`;\r\n              } else {  // mother's brother's daughter\r\n                console.log(`والدة ${person1FullName} هي إبنة خال ${person2FullName}.`);\r\n                return `والدة ${translatedName1} هي إبنة خال  ${translatedName2}`;\r\n              }\r\n            }\r\n            \r\n            \r\n          }\r\n          else if (p1Level === 3 && p2Level === 3) {          \r\n            \r\n            const p1AncestorGender = await getGender(person1AncestorsIds[1]);\r\n\r\n            const p1GreatAncestorGender = await getGender(person1AncestorsIds[2]);\r\n\r\n            const p2AncestorGender = await getGender(person2AncestorsIds[1]);\r\n\r\n            const p2GreatAncestorGender = await getGender(person2AncestorsIds[2]);\r\n            // Ancestor changes paternal/maternal\r\n            // Great Ancestor changes grandfather/grandmother\r\n            if (p1AncestorGender === 'Male') { \r\n              if (p2AncestorGender === 'Male'){\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`جدّ ${person1FullName} من الأب و جد ${person2FullName} من الأب إخوة.`);\r\n                    return `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s paternal grandmother are siblings.`);\r\n                    return `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s paternal grandfather are siblings.`);\r\n                    return `جدّة ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s paternal grandmother are sisters.`);\r\n                    return `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                }\r\n              }\r\n              else {\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s maternal grandfather are brothers.`);\r\n                    return `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s maternal grandmother are siblings.`);\r\n                    return `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s maternal grandfather are siblings.`);\r\n                    return `جدّة ${translatedName1} من الأب و جد${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s maternal grandmother are sisters.`);\r\n                    return `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (p2AncestorGender === 'Male'){\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s paternal grandfather are brothers.`);\r\n                    return `جدّ ${translatedName1} من الأم و جد${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s paternal grandmother are siblings.`);\r\n                    return `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s paternal grandfather are siblings.`);\r\n                    return `جدّة ${translatedName1} من الأم و جد ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s paternal grandmother are sisters.`);\r\n                    return `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب أخوات.`;\r\n                  }\r\n                }\r\n              }\r\n              else {\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s maternal grandfather are brothers.`);\r\n                    return `جدّ ${translatedName1} من الأم و جد ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s maternal grandmother are siblings.`);\r\n                    return `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s maternal grandfather are siblings.`);\r\n                    return `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s maternal grandmother are sisters.`);\r\n                    return `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            \r\n          }\r\n        }\r\n      }\r\n    }\r\n    console.log('No direct relation found.');\r\n    return 'No direct relation found';\r\n  } catch (error) {\r\n    console.error('Error in relationship lookup:', error);\r\n    return 'Error in relationship lookup';\r\n  }\r\n};\r\n\r\nconst getGender = async (personID) => {\r\n  const session = driver.session(); // Open a session\r\n\r\n  try {\r\n    const result = await session.run(\r\n      `MATCH (p:Person) \r\n      WHERE id(p) = $personID\r\n      \r\n      RETURN p.gender AS gender`,\r\n      { personID }\r\n    );\r\n    \r\n    if (result.records.length > 0) {\r\n      const gender = result.records[0].get('gender');\r\n      return gender; // Return the gender value\r\n    } else {\r\n      console.log(`No person found with the ID ${personID}`);\r\n      return null; // Return null when no person is found\r\n    }\r\n  } catch (error) {\r\n    console.error('Error retrieving gender:', error);\r\n    return null; // Return null in case of an error\r\n  } finally {\r\n    await session.close(); // Always close the session after the query\r\n  }\r\n};\r\n\r\nconst getAncestorFullName = (personAncestors, level) => {\r\n  // Check if the ancestor exists at the given level\r\n  if (!personAncestors[level - 1] || !personAncestors[level - 1].properties) {\r\n    return `Unknown (Level: ${level})`;\r\n  }\r\n\r\n  const ancestor = personAncestors[level - 1].properties;\r\n  const name = ancestor.name || \"Unknown\"; // Default to \"Unknown\" if name is missing\r\n  const lastName = ancestor.lastName || \"Unknown\"; // Default to \"Unknown\" if lastName is missing\r\n\r\n  return `${name} ${lastName}`;\r\n};\r\n\r\nexport const translateName = (fullName, language = true) => {\r\n  const nameParts = fullName.split(' ');\r\n\r\n  // Build reverse translation map if needed\r\n  const reverseTranslations = Object.fromEntries(\r\n    Object.entries(translations).map(([key, value]) => [value, key])\r\n  );\r\n\r\n  const dict = language ? translations : reverseTranslations;\r\n\r\n  const translatedParts = nameParts.map(part => dict[part] || part);\r\n\r\n  return translatedParts.join(' ');\r\n};\r\n\r\n\r\nconst RelationPage = () => {\r\n  const [person1, setPerson1] = useState('');\r\n  const [person2, setPerson2] = useState('');\r\n  const [relationship, setRelationship] = useState('');\r\n  const [duplicates, setDuplicates] = useState({ person1: [], person2: [] });\r\n\r\n  const fetchRelationship = async (name1, name2) => {\r\n    \r\n    const relationshipResult = await getRelationship(name1, name2);\r\n    console.log(relationshipResult);\r\n    return relationshipResult;\r\n  };\r\n\r\n  const FetchRelationship = async (e) => {\r\n    e.preventDefault();\r\n  \r\n    const result = await fetchRelationship(person1, person2);\r\n  \r\n    if (result.error === 'non-unique-name') {\r\n      setDuplicates(result.duplicates);\r\n      setRelationship(result.message); // optional message\r\n    } else {\r\n      setDuplicates({ person1: [], person2: [] }); // clear if no dups\r\n      setRelationship(result);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"relation-page\">\r\n      {/* Left-side: Duplicates List */}\r\n      {(duplicates.person1.length > 0 || duplicates.person2.length > 0) && (\r\n        <div className=\"dups_list\">\r\n          {duplicates.person1.length > 0 && (\r\n            <>\r\n              <h3>: أكتب الاسم الكامل للشخص الصحيح </h3>\r\n              <ul>\r\n                {duplicates.person1.map((p, idx) => (\r\n                  <li key={`p1-${idx}`}>\r\n                    {`${translateName(p.name)} بن ${translateName(p.father)} بن ${translateName(p.grandfather)} ${translateName(p.lastName)}`}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </>\r\n          )}\r\n  \r\n          {duplicates.person2.length > 0 && (\r\n            <>\r\n              <h3>اختر الشخص الصحيح \"{person2}\"</h3>\r\n              <ul>\r\n                {duplicates.person2.map((p, idx) => (\r\n                  <li key={`p2-${idx}`}>\r\n                    {`${translateName(p.name)} بن ${translateName(p.father)} بن ${translateName(p.grandfather)} ${translateName(p.lastName)}`}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n  \r\n      {/* Right-side: Main content */}\r\n      <div className=\"main-content\">\r\n        <h2>ماهي العلاقة بينهما؟</h2>\r\n        <form onSubmit={FetchRelationship}>\r\n          <input\r\n            id=\"name1\"\r\n            type=\"text\"\r\n            placeholder=\"الإسم الكامل الأول\"\r\n            value={person1}\r\n            onChange={(e) => setPerson1(e.target.value)}\r\n          />\r\n          <input\r\n            id=\"name2\"\r\n            type=\"text\"\r\n            placeholder=\"الإسم الكامل الثاني\"\r\n            value={person2}\r\n            onChange={(e) => setPerson2(e.target.value)}\r\n          />\r\n          <button type=\"submit\">تحقق من العلاقة</button><br />\r\n        </form>\r\n  \r\n        <p id=\"relationHolder\">{relationship}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RelationPage;\r\n","D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\components\\StatisticsDashboard.js",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":25,"column":7,"nodeType":"43","messageId":"44","endLine":25,"endColumn":23},{"ruleId":"41","severity":1,"message":"45","line":58,"column":7,"nodeType":"43","messageId":"44","endLine":58,"endColumn":27},{"ruleId":"41","severity":1,"message":"46","line":1,"column":27,"nodeType":"43","messageId":"44","endLine":1,"endColumn":36},{"ruleId":"41","severity":1,"message":"47","line":89,"column":10,"nodeType":"43","messageId":"44","endLine":89,"endColumn":21},{"ruleId":"41","severity":1,"message":"48","line":395,"column":19,"nodeType":"43","messageId":"44","endLine":395,"endColumn":37},{"ruleId":"41","severity":1,"message":"49","line":398,"column":19,"nodeType":"43","messageId":"44","endLine":398,"endColumn":37},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"no-unused-vars","'renderFamilyTree' is assigned a value but never used.","Identifier","unusedVar","'formatFamilyTreeData' is assigned a value but never used.","'useEffect' is defined but never used.","'treeVisible' is assigned a value but never used.","'p1AncestorFullName' is assigned a value but never used.","'p2AncestorFullName' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]