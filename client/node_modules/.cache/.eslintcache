[{"D:\\Study\\Projects\\Copy 4\\client\\src\\index.js":"1","D:\\Study\\Projects\\Copy 4\\client\\src\\App.js":"2","D:\\Study\\Projects\\Copy 4\\client\\src\\components\\FamilyTree.js":"3","D:\\Study\\Projects\\Copy 4\\client\\src\\components\\weddings.js":"4","D:\\Study\\Projects\\Copy 4\\client\\src\\components\\SearchPage.js":"5","D:\\Study\\Projects\\Copy 4\\client\\src\\components\\RelationChecker.js":"6","D:\\Study\\Projects\\Copy 4\\client\\src\\components\\StatisticsDashboard.js":"7","D:\\Study\\Projects\\Copy 4\\client\\src\\components\\mainPage.js":"8"},{"size":290,"mtime":1746984908578,"results":"9","hashOfConfig":"10"},{"size":4514,"mtime":1747225487612,"results":"11","hashOfConfig":"10"},{"size":16369,"mtime":1747168619741,"results":"12","hashOfConfig":"10"},{"size":7180,"mtime":1747120336287,"results":"13","hashOfConfig":"10"},{"size":38360,"mtime":1747233614513,"results":"14","hashOfConfig":"10"},{"size":93797,"mtime":1747226088452,"results":"15","hashOfConfig":"10"},{"size":41599,"mtime":1747233855103,"results":"16","hashOfConfig":"10"},{"size":5893,"mtime":1747117620158,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"10xng0",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"D:\\Study\\Projects\\Copy 4\\client\\src\\index.js",[],["38","39"],"D:\\Study\\Projects\\Copy 4\\client\\src\\App.js",[],"D:\\Study\\Projects\\Copy 4\\client\\src\\components\\FamilyTree.js",["40","41","42","43","44"],"import React, { useEffect, useState , useRef, use } from 'react';\r\nimport Tree from 'react-d3-tree';\r\nimport './FamilyTree.css';\r\nimport neo4j from 'neo4j-driver';\r\n\r\nrequire('dotenv').config();\r\n\r\nconst translations = require('./translation.json');\r\nconst compundNames = require('./compundNames.json');\r\nconst neo4jURI = process.env.REACT_APP_NEO4J_URI;\r\nconst neo4jUser = process.env.REACT_APP_NEO4J_USER; \r\nconst neo4jPassword = process.env.REACT_APP_NEO4J_PASSWORD;\r\nconst driver = neo4j.driver(\r\n  neo4jURI, \r\n  neo4j.auth.basic(neo4jUser, neo4jPassword)\r\n);\r\n\r\nlet uniqueKeyCounter = 0;\r\nexport const translateName = (name) => {\r\n  return translations[name] || compundNames[name] || name;\r\n};\r\n\r\nconst renderFamilyTree = (person, parentId = null, level = 0) => {\r\n  const uniqueKey = `${person.name}-${person.lastName}-${parentId}-${level}-${uniqueKeyCounter++}`;\r\n\r\n  return (\r\n    <div key={uniqueKey}>\r\n      <div>\r\n        <strong>{person.name} {person.lastName}</strong>\r\n      </div>\r\n      {person.children && person.children.length > 0 && (\r\n        <div style={{ marginLeft: '20px' }}>\r\n          {person.children.map((child) => renderFamilyTree(child, person.id, level + 1))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst fetchFamilyTree = async () => {\r\n  const session = driver.session();\r\n  try {\r\n    const query = `\r\n      MATCH (root:Person)\r\n      WHERE id(root) = 17\r\n      CALL {\r\n        WITH root\r\n        MATCH (root)-[:FATHER_OF|MOTHER_OF*]->(descendant)\r\n        RETURN collect(DISTINCT descendant) AS allDescendants\r\n      }\r\n      WITH root, allDescendants\r\n      UNWIND [root] + allDescendants AS person\r\n      OPTIONAL MATCH (person)-[:FATHER_OF|MOTHER_OF*]->(child)\r\n      WITH person, collect(child) AS children\r\n      RETURN {\r\n        id: id(person),\r\n        name: person.name,\r\n        lastName: person.lastName,\r\n        children: [child IN children | {\r\n          id: id(child),\r\n          name: child.name,\r\n          lastName: child.lastName\r\n        }]\r\n      } AS treeNode\r\n    `;\r\n\r\n    const result = await session.run(query);\r\n\r\n    const familyTree = result.records.map(record => {\r\n      const node = record.get('treeNode');\r\n      return {\r\n        id: Number(node.id),\r\n        name: node.name,\r\n        lastName: node.lastName,\r\n        children: node.children.map(child => ({\r\n          id: Number(child.id),\r\n          name: child.name,\r\n          lastName: child.lastName\r\n        }))\r\n      };\r\n    });\r\n\r\n    return familyTree; // Return the formatted tree data as JSON\r\n  } catch (error) {\r\n    console.error('Error fetching family tree:', error);\r\n    return []; // Return an empty array in case of error\r\n  } finally {\r\n    session.close();\r\n  }\r\n};\r\n\r\nconst formatFamilyTreeData = (person) => {\r\n  const children = person.children && person.children.length > 0\r\n    ? person.children.map(formatFamilyTreeData) // Recursively format children\r\n    : [];\r\n\r\n  return {\r\n    name: `${person.name} ${person.lastName}`,\r\n    children: children // Include children for each person\r\n  };\r\n};\r\n\r\nconst getChildrenOfFather = (fatherId, allPeople) => {\r\n  const father = allPeople.filter(father => father.id === fatherId)[0];  \r\n  return father && father.children ? father.children : [];  \r\n};\r\n\r\nconst buildTree = (person, allPeople) => {\r\n  if (!person) return null;\r\n\r\n  const children = getChildrenOfFather(person.id, allPeople)\r\n    .map(child => buildTree(child, allPeople))\r\n    .filter(Boolean); \r\n\r\n    \r\n    return {\r\n      id: person.id,\r\n      name: translateName(person.name),\r\n      children: children.length > 0 ? children : undefined,\r\n    };\r\n};\r\n\r\nconst getGenderbyID = async (personID) => {\r\n  const session = driver.session();\r\n  try {\r\n    // Fix the parameter name to match the query variable\r\n    const result = await session.run(\r\n      `MATCH (p:Person) WHERE id(p) = $personId \r\n      RETURN p.gender AS gender`,\r\n      { personId: personID } // Ensure the key matches the query's parameter\r\n    );\r\n    \r\n    if (result.records.length > 0) {\r\n      const gender = result.records[0].get('gender');\r\n      return gender; // Return the gender value\r\n    } else {\r\n      console.log(`No person found with the ID ${personID}`);\r\n      return null; // Return null when no person is found\r\n    }\r\n  } catch (error) {\r\n    console.error('Error retrieving gender:', error);\r\n    return null; // Return null in case of an error\r\n  } finally {\r\n    await session.close(); // Always close the session after the query\r\n  }\r\n};\r\n\r\nconst FamilyTree = ({ searchQuery }) => {\r\n  const treeContainerRef = useRef(null);\r\n  const [familyTree, setFamilyTree] = useState(null);\r\n  const [husbandId, setHusbandId] = useState(null);\r\n  const [showTree, setShowTree] = useState(true);\r\n  const [loading, setLoading] = useState(true);  \r\n  const [translate, setTranslate] = useState({x : 0, y : 0});\r\n  const nodePositions = useRef({});\r\n\r\n  const handleWomanClick = async (person) => {\r\n    const session = driver.session();\r\n    const gender = await getGenderbyID(person.id);\r\n    if (gender !== \"Female\") return;\r\n\r\n    try {\r\n      const result = await session.run(\r\n        `\r\n        MATCH (w:Person)-[:WIFE_OF]-(h:Person)\r\n        WHERE id(w) = $womanId\r\n        RETURN id(h) as HusbandID\r\n        LIMIT 1\r\n      `,\r\n        { womanId: person.id }\r\n      );\r\n\r\n      if (result.records.length > 0) {\r\n        const husband = result.records[0].get(\"HusbandID\").toNumber();\r\n        const coords = nodePositions.current[husband];\r\n        const container = treeContainerRef.current;\r\n\r\n        if (coords && container) {\r\n          const bounds = container.getBoundingClientRect();\r\n          setTranslate({\r\n            x: bounds.width / 2 - coords.x,\r\n            y: bounds.height / 2 - coords.y,\r\n          });\r\n        }\r\n\r\n        setHusbandId(husband);\r\n      } else {\r\n        console.log(\"No husband found for\", person.name);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching husband:\", error);\r\n    } finally {\r\n      await session.close();\r\n    }\r\n  };\r\n\r\n  const handlePersonTreeDisplay = async () => {\r\n    const inputID = document.getElementById('rootID').value;\r\n    const ID = parseInt(inputID, 10);\r\n\r\n    if (isNaN(ID)) {\r\n      alert(\"❗ الرجاء إدخال رقم صحيح للشخص.\");\r\n      return;\r\n    }\r\n    loadFamilyTree(ID);\r\n  };\r\n\r\n  const handleRootTreeClick = async () => {\r\n    loadFamilyTree(17);\r\n  };\r\n\r\n  const loadFamilyTree = async (rootID) => {\r\n    \r\n    try {\r\n      setLoading(true);\r\n      const people = await fetchFamilyTree();\r\n      if (Array.isArray(people) && people.length > 0) {\r\n        const rootPerson = people.find((p) => p.id === rootID);\r\n        const treeData = buildTree(rootPerson, people);\r\n        console.log(treeData);\r\n        setFamilyTree(treeData);\r\n        setShowTree(true);\r\n        setLoading(false);\r\n      } else {\r\n        console.warn(\"Empty or invalid people data\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error loading family tree:\", error);\r\n    } finally{\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"treePage\">\r\n      <header>\r\n        <h2>شجرة عائلة قصر أولاد بوبكر</h2>\r\n        <div className=\"description\">\r\n          <p>في هذه الصفحة، يمكنك تصفح شجرة عرش قصر أولاد بوبكر بشكل كامل ومفصل.\r\n             تبدأ الشجرة من الجد الأول بوبكر، الذي يمثل الجذور الأساسية لهذا العرش العريق،\r\n             مرورًا بالأجيال التي تلت ذلك حتى الوصول إلى الجيل الحالي.\r\n             يمكنك استكشاف تاريخ العائلة عبر الأجيال المختلفة،\r\n             والتعرف على الأفراد الذين شكلوا جزءًا من هذه الشجرة العائلية على مر العصور.\r\n             هذه الصفحة تتيح لك رؤية العلاقات بين الأفراد وكيف تطورت العائلة على مر الزمن،\r\n             مما يعزز فهمك للتاريخ العائلي والعلاقات الاجتماعية بين الأفراد في هذا العرش.</p>\r\n\r\n        </div>\r\n        <div className=\"filterChoice\">\r\n          <div className=\"card filter-left\">\r\n            <form className=\"filterChoiceForm\">\r\n              <p>زر \"شجرة العائلة منذ الجد الأول\" يتيح لك عرض شجرة العائلة بدءًا من الجد الأول للعائلة،\r\n                 وهو الجذر الذي تتفرع منه جميع الأجيال التالية.\r\n                 عند الضغط على هذا الزر، سيتم تحميل شجرة العائلة بالكامل بدءًا من ذلك الشخص،\r\n                 مما يتيح لك استكشاف الروابط العائلية بين الأفراد عبر الأجيال المختلفة،\r\n                 وتعرف أكثر على تاريخ العائلة وعلاقاتها.</p>\r\n              <button type=\"button\" className=\"btn-root\" onClick={handleRootTreeClick}>\r\n                شجرة العائلة منذ الجد الأول\r\n              </button>\r\n            </form>\r\n          </div>\r\n          \r\n          <div className=\"card filter-right\">\r\n            <p>\r\n              للحصول على رقم الهوية (رقم التسلسل) للشخص، يجب عليك التوجه إلى صفحة البحث ثم البحث عن الشخص المطلوب.\r\n              بعد إجراء البحث، سيظهر رقم التسلسل (رقم الهوية) مباشرةً فوق الاسم الكامل للشخص في قسم النتائج. يمكنك نسخ\r\n              هذا الرقم ومن ثم لصقه هنا لرؤية شجرة العائلة بدءًا من ذلك الشخص.\r\n            </p>\r\n            <input id=\"rootID\" type=\"number\" placeholder=\"أدخل رقم الشخص\" />\r\n            <button className=\"btn-person\" type=\"button\" onClick={handlePersonTreeDisplay}>\r\n              شجرة العائلة ابتداءا من شخص معين\r\n            </button>\r\n          </div>\r\n          \r\n          <div className=\"card personSearch\">\r\n          <p>هذه القسم يتيح لك رؤية مكان الشخص داخل شجرة العائلة.\r\n             كل ما عليك فعله هو إدخال رقم هوية الشخص (رقم التسلسل) في الخانة المخصصة. للحصول على رقم الهوية،\r\n              توجه إلى صفحة البحث وابحث عن الشخص المطلوب.\r\n              بعد إجراء البحث،\r\n              ستجد رقم التسلسل يظهر فوق اسم الشخص في نتائج البحث. قم بنسخ هذا الرقم وأدخله هنا لرؤية مكانه داخل الشجرة.</p>\r\n\r\n            <input id=\"personsearchName\" type=\"text\" placeholder=\"ابحث عن شخص في الشجرة\" />\r\n            <button type='button' className='btn-search'>إبحث عن شخص في شجرة العائلة</button>\r\n          </div>\r\n        </div>\r\n\r\n\r\n        \r\n      </header>\r\n      {loading && !showTree && !familyTree && (\r\n        <div className=\"loading-indicator\">\r\n          <p>جار تحميل الشجرة...</p>\r\n          <div className=\"spinner\"></div> {/* Loading spinner */}\r\n        </div>\r\n      )}\r\n      {showTree && familyTree && (\r\n        <div\r\n          id=\"treeWrapper\"\r\n          ref={treeContainerRef}\r\n          style={{\r\n            width: \"100%\", // Ensure full width of the parent container\r\n            height: \"100vh\", // Full height of the viewport\r\n            overflow: 'auto', // Allow scrolling if the tree overflows\r\n            padding: '20px', // Add some padding around the tree\r\n            boxSizing: 'border-box', // Ensure padding is included in the size calculations\r\n            position: 'relative', // Allow absolute positioning of title\r\n            display: 'flex', // Allow flexbox for centering\r\n            justifyContent: 'center', // Center the content horizontally\r\n            alignItems: 'center', // Center the content vertically\r\n          }}\r\n        >\r\n          <Tree\r\n            data={familyTree}\r\n            orientation=\"vertical\"\r\n            pathFunc=\"step\"\r\n            translate={{ x: 500, y: 50 }} // Adjust vertical spacing, change this if needed\r\n            scale={0.00001} // Scale down tree to fit within the container\r\n            nodeSize={{ x: 100, y: 100 }} // Adjust node size if needed\r\n            separation={{ siblings: 1.1, nonSiblings: 1.5 }} // Adjust separation between nodes\r\n            renderCustomNodeElement={({ nodeDatum, hierarchyPointNode }) => {\r\n              const isHusband = nodeDatum.id === husbandId;\r\n              nodePositions.current[nodeDatum.id] = {\r\n                x: hierarchyPointNode.x,\r\n                y: hierarchyPointNode.y,\r\n              };\r\n\r\n              return (\r\n                <g\r\n                  onClick={() => handleWomanClick(nodeDatum)}\r\n                  style={{ cursor: \"pointer\" }}\r\n                > \r\n                  <title>{nodeDatum.id}</title>\r\n                  <rect\r\n                    x=\"-50\"\r\n                    y=\"-20\"\r\n                    width=\"100\"\r\n                    height=\"40\"\r\n                    fill={isHusband ? \"#66bb6a\" : \"#4fc3f7\"}\r\n                    stroke=\"black\"\r\n                    strokeWidth=\"2\"\r\n                    rx=\"8\"\r\n                  />\r\n                  <text\r\n                    x=\"0\"\r\n                    y=\"5\"\r\n                    style={{\r\n                      fontSize: \"22px\",\r\n                      fontFamily: 'Cairo',\r\n                      dominantBaseline: 'middle',\r\n                      letterSpacing: '1px',\r\n                      strokeWidth: '0px',\r\n                      textAnchor: \"middle\",\r\n                      fill: \"white\",\r\n                    }}\r\n                  >\r\n                    {nodeDatum.name}\r\n                  </text>\r\n                </g>\r\n              );\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      <div className='footerTips'>\r\n        <div className=\"card\">\r\n          <h4>نصيحة 4: لا تضيع الوقت في البحث المكرر</h4>\r\n          <p>إذا كنت بحاجة إلى الرجوع لنفس الشخص في الشجرة، احفظ الرقم التسلسلي لاستخدامه مباشرة في المستقبل لتسريع البحث.</p>\r\n        </div>\r\n        <div className=\"card\">\r\n          <h4>نصيحة 3: مفتاح الشجرة – تمييز الأفراد بالألوان</h4>\r\n          <p>لتسهيل التصفح، يتم تمييز الرجال، النساء، والأزواج بألوان مختلفة. الرجال باللون الأزرق، النساء باللون الوردي، والأزواج بألوان متقاربة لتمثيل العلاقات الزوجية:</p>\r\n          <div class=\"color-key\">\r\n            <div class=\"color-box men\"></div> <span>رجال</span>\r\n            <div class=\"color-box women\"></div> <span>نساء</span>\r\n            <div class=\"color-box married\"></div> <span>أزواج</span>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"card\">\r\n          <h4>نصيحة 2: التفاعل مع الأشجار</h4>\r\n          <p>عندما يتم النقر على امرأة، سيتم عرض موقع زوجها على الشجرة، أما إذا تم النقر على الزوج، فسيتم عرض موقع زوجته على الشجرة. هذا يساعدك على استكشاف العلاقات بين الزوجين داخل شجرة العائلة بشكل أسرع وأكثر فعالية.</p>\r\n        </div>\r\n        \r\n        \r\n        <div className=\"card\">\r\n          <h4>نصيحة 1: كيفية البحث في الشجرة</h4>\r\n          <p>لاستعراض شجرة العائلة من شخص معين، قم باستخدام الرقم التسلسلي للشخص في مربع البحث. ابحث عن الشخص عن طريق صحفة البحث عن الأشخاص، ثم قم بنسخ الرقم من قسم النتائج.</p>\r\n        </div>\r\n        \r\n        \r\n      </div>\r\n\r\n\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default FamilyTree;","D:\\Study\\Projects\\Copy 4\\client\\src\\components\\weddings.js",[],"D:\\Study\\Projects\\Copy 4\\client\\src\\components\\SearchPage.js",["45","46","47","48","49","50","51"],"D:\\Study\\Projects\\Copy 4\\client\\src\\components\\RelationChecker.js",["52","53"],"import React, { useEffect, useState } from 'react';\r\nimport Tree from 'react-d3-tree';\r\nimport './RelationChecker.css';\r\nconst translations = require('./translation.json');\r\nconst compoundNames = require('./compundNames.json');\r\nrequire('dotenv').config();\r\n\r\nconst neo4jURI = process.env.REACT_APP_NEO4J_URI;\r\nconst neo4jUser = process.env.REACT_APP_NEO4J_USER;\r\nconst neo4jPassword = process.env.REACT_APP_NEO4J_PASSWORD;\r\n\r\nconst driver = require('neo4j-driver').driver(\r\n    neo4jURI,\r\n    require('neo4j-driver').auth.basic(neo4jUser, neo4jPassword)\r\n);\r\nconst session = driver.session();\r\n\r\nfunction countBenAndBent(str) {\r\n  const words = str.trim().split(/\\s+/);\r\n  if (words.length < 3) return 0;\r\n  const interior = words.slice(1, -1);\r\n  return interior.filter(w => w === 'بن' || w === 'بنت').length;\r\n};\r\n\r\nfunction isCompoundName(name) {\r\n  return Object.values(compoundNames).includes(name);\r\n};\r\n\r\nfunction splitName(fullName) {\r\n  if (typeof fullName !== 'string') {\r\n    console.error(\"fullName is not a string:\", fullName);\r\n    return [];\r\n  }\r\n  const parts = fullName.replace(/\\s*(بن|بنت)\\s*/gi, ' ').trim().split(/\\s+/);\r\n  const bentCount = countBenAndBent(fullName);\r\n  console.log(bentCount, parts);\r\n  if (isCompoundName(parts[0] + \" \" + parts[1])) {\r\n    console.log(\"It's a compound name!\");\r\n  }\r\n  let compundName;\r\n\r\n  if (parts.length === 2) {\r\n    if (bentCount === 0) {\r\n      if (isCompoundName(parts[0]+ \" \" + parts[1])){\r\n        compundName = `${parts[0]} ${parts[1]}`;\r\n        return {\r\n          personName: compundName,\r\n          fatherName: \"\",\r\n          grandfatherName: \"\",\r\n          familyName: \"\"\r\n        };\r\n      }\r\n      else{\r\n        return {\r\n          personName: parts[0],\r\n          fatherName: \"\",\r\n          grandfatherName: \"\",\r\n          familyName: parts[1]\r\n        };\r\n      }\r\n    } \r\n    else if (bentCount === 1) {\r\n      return {\r\n        personName: parts[0],\r\n        fatherName: parts[1],\r\n        grandfatherName: \"\",\r\n        familyName: \"\"\r\n      };\r\n    }\r\n  } \r\n\r\n  else if (parts.length === 3) {\r\n    if (bentCount === 0) {\r\n        return {\r\n          personName: `${parts[0]} ${parts[1]}`,\r\n          fatherName: \"\",\r\n          grandfatherName: \"\",\r\n          familyName: parts[2]\r\n        };\r\n    }\r\n    else if (bentCount === 1) {\r\n      if (isCompoundName(parts[0]+ \" \" + parts[1])){\r\n        console.log(\"COMPUND DETECTED\");\r\n        compundName = `${parts[0]} ${parts[1]}`;\r\n        return {\r\n          personName: compundName,\r\n          fatherName: parts[2],\r\n          grandfatherName: \"\",\r\n          familyName: \"\"\r\n        };\r\n      }\r\n      else if (isCompoundName(parts[1]+ \" \" + parts[2])){\r\n          console.log(\"COMPUND DETECTED\");\r\n          compundName = `${parts[1]} ${parts[2]}`;\r\n          return {\r\n            personName: parts[0],\r\n            fatherName: compundName,\r\n            grandfatherName: \"\",\r\n            familyName: \"\"\r\n          };\r\n        }\r\n      else{\r\n        return {\r\n          personName: parts[0],\r\n          fatherName: parts[1],\r\n          grandfatherName: \"\",\r\n          familyName: parts[2]\r\n        };\r\n      }\r\n\r\n    }\r\n    else if (bentCount === 2) {\r\n      return {\r\n        personName: parts[0],\r\n        fatherName: parts[1],\r\n        grandfatherName: parts[2],\r\n        familyName: \"\"\r\n      };\r\n    }\r\n  }\r\n  else if (parts.length === 4) {\r\n    if (bentCount === 1) {\r\n      if (isCompoundName(parts[0]+ \" \" + parts[1]) && isCompoundName(parts[2]+ \" \" + parts[3])){\r\n        return {\r\n          personName: `${parts[0]} ${parts[1]}`,\r\n          fatherName: `${parts[2]} ${parts[3]}`,\r\n          grandfatherName: \"\",\r\n          familyName: \"\"\r\n        };\r\n      }\r\n      if (isCompoundName(parts[0]+ \" \" + parts[1])){\r\n        return {\r\n          personName: `${parts[0]} ${parts[1]}`,\r\n          fatherName: parts[2],\r\n          grandfatherName: \"\",\r\n          familyName: parts[3]\r\n        };\r\n      }\r\n      if (isCompoundName(parts[1]+ \" \" + parts[2])){\r\n        return {\r\n          personName: parts[0],\r\n          fatherName: `${parts[1]} ${parts[2]}`,\r\n          grandfatherName: \"\",\r\n          familyName: parts[3]\r\n        };\r\n      }\r\n    }\r\n    else if (bentCount === 2){\r\n        if (isCompoundName(parts[0]+ \" \" + parts[1])){\r\n          return {\r\n            personName: `${parts[0]} ${parts[1]}`,\r\n            fatherName: parts[2],\r\n            grandfatherName: parts[3],\r\n            familyName: \"\"\r\n          };\r\n        }\r\n        if (isCompoundName(parts[1] + \" \" + parts[2])){\r\n          return {\r\n            personName: parts[0],\r\n            fatherName: `${parts[1]} ${parts[2]}`,\r\n            grandfatherName: parts[3],\r\n            familyName: \"\"\r\n          };\r\n        }\r\n        else if(!isCompoundName(parts[0]+ \" \" + parts[1]) && !isCompoundName(parts[1] + \" \" + parts[2])) {\r\n          return {\r\n            personName: parts[0],\r\n            fatherName: parts[1],\r\n            grandfatherName: parts[2],\r\n            familyName: parts[3]\r\n          };\r\n        }\r\n    }\r\n  }\r\n  else if (parts.length === 5) {\r\n    if (bentCount === 2){\r\n      if (isCompoundName(parts[0]+ \" \" + parts[1])){\r\n        return {\r\n          personName: `${parts[0]} ${parts[1]}`,\r\n          fatherName: parts[2],\r\n          grandfatherName: parts[3],\r\n          familyName: parts[4]\r\n        };\r\n      }\r\n      if (isCompoundName(parts[1] + \" \" + parts[2])){\r\n        return {\r\n          personName: parts[0],\r\n          fatherName: `${parts[1]} ${parts[2]}`,\r\n          grandfatherName: parts[3],\r\n          familyName: parts[4]\r\n        };\r\n      }\r\n      if (isCompoundName(parts[0] + \" \" + parts[1]) && isCompoundName(parts[2]+ \" \" + parts[3])){\r\n        return {\r\n          personName: `${parts[0]} ${parts[1]}`,\r\n          fatherName: `${parts[2]} ${parts[3]}`,\r\n          grandfatherName: parts[4],\r\n          familyName: \"\"\r\n        };\r\n      }\r\n    }\r\n  }\r\n  else if (parts.length === 6) {\r\n    if (bentCount === 2){\r\n      if (isCompoundName(parts[0] + \" \" + parts[1]) && isCompoundName(parts[2]+ \" \" + parts[3]) && isCompoundName(parts[4]+ \" \" + parts[5])){\r\n        return {\r\n          personName: `${parts[0]} ${parts[1]}`,\r\n          fatherName: `${parts[2]} ${parts[3]}`,\r\n          grandfatherName: `${parts[4]} ${parts[5]}`,\r\n          familyName: \"\"\r\n        };\r\n      }\r\n    }\r\n  }\r\n  else if (parts.length === 7) {\r\n      if (isCompoundName(parts[0] + \" \" + parts[1]) && isCompoundName(parts[2]+ \" \" + parts[3]) && isCompoundName(parts[4]+ \" \" + parts[5])){\r\n        return {\r\n          personName: `${parts[0]} ${parts[1]}`,\r\n          fatherName: `${parts[2]} ${parts[3]}`,\r\n          grandfatherName: `${parts[4]} ${parts[5]}`,\r\n          familyName: parts[6]\r\n        };\r\n      }\r\n  }\r\n  return { personName: parts[0], fatherName: \"\", grandfatherName: \"\", familyName: parts[1] || \"\" };\r\n};\r\n\r\nfunction buildTreePath(path) {\r\n  if (path.length === 0) return null;\r\n\r\n  return path.reduceRight((acc, person) => {\r\n    return {\r\n      id: (person.id).toNumber(),\r\n      name: `${person.name} ${person.lastName}`,\r\n      children: acc ? [acc] : []\r\n    };\r\n  }, null);\r\n};\r\n\r\nfunction mergePaths(pathToP1, pathToP2) {\r\n  if (pathToP1.length === 0 && pathToP2.length === 0) return null;\r\n  const ancestor = pathToP1[0]; \r\n  const branch1 = pathToP1.slice(1);\r\n  const branch2 = pathToP2.slice(1);\r\n\r\n  const children = [];\r\n  if (branch1.length > 0) {\r\n    children.push(buildTreePath(branch1));\r\n  }\r\n  if (branch2.length > 0) {\r\n    children.push(buildTreePath(branch2));\r\n  }\r\n  return {\r\n    id: (ancestor.id).toNumber(),\r\n    name: `${ancestor.name} ${ancestor.lastName}`,\r\n    children: children.length > 0 ? children : undefined\r\n  }\r\n}\r\n\r\nexport const translateName = (fullName, language = true) => {\r\n  const reverseTranslations = Object.fromEntries(\r\n    Object.entries(translations).map(([key, value]) => [value, key])\r\n  );\r\n  const reverseCompound = Object.fromEntries(\r\n    Object.entries(compoundNames).map(([key, value]) => [value, key])\r\n  );\r\n\r\n  const dict = language ? translations : reverseTranslations;\r\n  const compoundDict = language ? compoundNames : reverseCompound;\r\n\r\n  const normalized = fullName.trim().replace(/\\s+/g, ' ');\r\n  if (compoundDict[normalized]) {\r\n    return compoundDict[normalized];\r\n  }\r\n\r\n  const nameParts = normalized.split(' ');\r\n  const translatedParts = nameParts.map(part => dict[part] || part);\r\n\r\n  return translatedParts.join(' ');\r\n};\r\n\r\n\r\nconst RelationPage = () => {\r\n  const [person1, setPerson1] = useState('');\r\n  const [person2, setPerson2] = useState('');\r\n  const [relationship, setRelationship] = useState('');\r\n  const [duplicates, setDuplicates] = useState({ person1: [], person2: [] });\r\n  const [error, setError] = useState(null);\r\n  const [selectedPerson1, setSelectedPerson1] = useState('');\r\n  const [selectedPerson2, setSelectedPerson2] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingMessage, setLoadingMessage] = useState(\"\");\r\n\r\n  const fetchRelationship = async (e, customPerson1 = person1, customPerson2 = person2) => {\r\n  if (e) e.preventDefault();\r\n\r\n  console.log(\"🚀 fetchRelationship START\");\r\n  console.log(\"➡️ person1:\", customPerson1);\r\n  console.log(\"➡️ person2:\", customPerson2);\r\n\r\n  if (!customPerson1 || !customPerson2) {\r\n    console.error(\"❌ One of the names is undefined or empty\");\r\n    setError(true);\r\n    setRelationship({ relationshipDescription: 'أدخل اسمي الشخصين بشكل صحيح', relationshipScore: null });\r\n    return;\r\n  }\r\n\r\n  setLoading(true);\r\n  setError(false);\r\n  setLoadingMessage(\"🔎 بداية البحث عن العلاقة...\");\r\n\r\n  try {\r\n    const result = await getRelationship(customPerson1, customPerson2);\r\n\r\n    console.log(\"✅ Result received:\", result);\r\n\r\n    if (result.error === 'non-unique-name') {\r\n      setSelectedPerson1(null);\r\n      setSelectedPerson2(null);\r\n      setDuplicates(result.duplicates ?? { person1: [], person2: [] });\r\n      setRelationship(result.message);\r\n      return;\r\n    }\r\n\r\n    setDuplicates({ person1: [], person2: [] });\r\n    setRelationship({\r\n      relationshipDescription: result.relation,\r\n      relationshipPerson1Details: result.person1 ?? null,\r\n      relationshipPerson2Details: result.person2 ?? null,\r\n      relationshipScore: result.score ?? null,\r\n      relationshipLevels: result.levelsTuple ?? null,\r\n      relationshipGenerationGap: result.generation ?? null,\r\n      relationshipExplanationType: result.explanation?.type ?? null,\r\n      relationshipExplanationDesc: result.explanation?.explanation ?? null,\r\n      relationshipType: result.relationshipType ?? null,\r\n      commonAncestor: result.ancestor ?? null,\r\n      ancestorstreeData: result.treeData ?? null,\r\n      person1ID: result.person1ID ?? null,\r\n      person2ID: result.person2ID ?? null\r\n    });\r\n  } catch (error) {\r\n    console.error('❌ Error fetching relationship:', error);\r\n    setRelationship({ relationshipDescription: 'حدث خطأ أثناء البحث', relationshipScore: null });\r\n    setError(true);\r\n  } finally {\r\n    console.log(\"🛑 fetchRelationship END\");\r\n    setLoading(false);\r\n  }\r\n};\r\n\r\n  const findRelationship = async (person1ID, person2ID, gender1, gender2, translatedName1, translatedName2, person1Matches, person2Matches) => {\r\n    let relationshipType;\r\n    let relation = '', score = 0;\r\n    let explanation;\r\n    let relationshipExplanation = [\r\n      {\r\n        type: \"العائلة\",\r\n        explanation: \"هؤلاء الشخصين مرتبطين من خلال العائلة ذو الدرجة الأولى.\"\r\n      },\r\n      {\r\n        type: \"العائلة المقربة\",\r\n        explanation: \"هؤلاء الشخصين مرتبطين من خلال أعمام وأخوال مشتركين.\"\r\n      },\r\n      {\r\n        type: \"العائلة الموسعة\",\r\n        explanation: \"هؤلاء الشخصين مرتبطين من خلال أعمام أو أخوال الأب ، أو أجداد الأب و الأم.\"\r\n      },\r\n      {\r\n        type: \"قرابة الزواج\",\r\n        explanation: \"هذان الشخصان مرتبطان من خلال الزواج.\"\r\n      },\r\n      {\r\n        type: \"صهر / نسيب\",\r\n        explanation: \"هذان الشخصان مرتبطان عبر الزواج وليس النسب الدموي.\"\r\n      },\r\n      {\r\n        type: \"لا توجد علاقة\",\r\n        explanation: \"لم يتم العثور على أي صلة قرابة بين الشخصين في قاعدة البيانات.\"\r\n      },\r\n      {\r\n        type: \"نفس الشخص\",\r\n        explanation: \"الاسمين يشيران إلى نفس الشخص.\"\r\n      }\r\n    ];\r\n\r\n    let marraigeRecord = await checkMarriage(person1ID, person2ID, gender1, gender2);\r\n      if (marraigeRecord.areMarried === true){\r\n        let relation = '';\r\n        let score = 100;\r\n        if (gender1 === 'Male'){\r\n          relation = `${translatedName1} هو زوج ${translatedName2}`;\r\n        }\r\n        else{\r\n          relation = `${translatedName1} هي زوجة ${translatedName2}`;\r\n        }\r\n        setLoading(false);\r\n        console.log(relation);\r\n        relationshipType = \"Marriage\";\r\n        explanation = relationshipType[4];\r\n        return {relation, score, relationshipType, explanation, person1: person1Matches[0], person2: person2Matches[0]}\r\n      } \r\n      else {\r\n        console.log(\"Checking relations\");\r\n        let relationRecord = await getAncestors(person1ID, person2ID);\r\n        if (relationRecord === null){\r\n          console.log(\"There's no common ancestor between these.\");\r\n          let relation = await getMarriageRelation(session, person1ID, person2ID, translatedName1, translatedName2, gender1, gender2);\r\n          console.log(relation);\r\n          if (relation){\r\n            console.log(\"Relaition found.\");\r\n            relationshipType = \"Marriage-related\";\r\n            explanation = relationshipType[3];\r\n            return {relation, relationshipType, explanation, person1: person1Matches[0], person2: person2Matches[0]};\r\n          }\r\n          else {\r\n            setError(\"لا يوجد اي قاسم مشترك أو علاقة مشتركة بين هاذين الشخصين.\");\r\n            setError(true);\r\n            return 'لا توجد اي علاقة بين هاذين الشخصين';\r\n          } \r\n        }\r\n        else{\r\n          const ancestorID = relationRecord.id;\r\n          const ancestorName = relationRecord.name ? translateName(relationRecord.name) : '';\r\n          const ancestorLastName = relationRecord.lastName ? translateName(relationRecord.lastName) : '';\r\n          const ancestorFatherName = relationRecord.fatherName ? translateName(relationRecord.fatherName) : '';\r\n          const ancestorGrandFatherName = relationRecord.grandfatherName ? translateName(relationRecord.grandfatherName) : '';\r\n          const ancestorGender = relationRecord.gender;\r\n          let levelFromP1, levelFromP2, pathFromAncestorToP1, pathFromAncestorToP2;\r\n          let spouseOfAncestor = relationRecord.spouseOfAncestor;\r\n          const ancestor = {ancestorID, \r\n                          ancestorName, ancestorFatherName, ancestorGrandFatherName, ancestorLastName, ancestorGender};\r\n          console.log(ancestor);\r\n          ({\r\n            levelFromP1, \r\n            levelFromP2,\r\n            spouseOfAncestor,\r\n            pathFromAncestorToP1, \r\n            pathFromAncestorToP2 \r\n          } = relationRecord);\r\n          let pathToP1 = pathFromAncestorToP1;\r\n          let pathToP2 = pathFromAncestorToP2;\r\n          if ((spouseOfAncestor !== null) && (ancestorID !== person1ID) && (ancestorID !== person2ID)) {\r\n              pathToP1[0] = {\r\n                  id: spouseOfAncestor.id,\r\n                  name: spouseOfAncestor.name,\r\n                  lastName: spouseOfAncestor.lastName,\r\n                  gender: spouseOfAncestor.gender\r\n              };\r\n              pathToP2[0] = {\r\n                  id: spouseOfAncestor.id,\r\n                  name: spouseOfAncestor.name,\r\n                  lastName: spouseOfAncestor.lastName,\r\n                  gender: spouseOfAncestor.gender\r\n              };\r\n          }\r\n          \r\n          const treeData = mergePaths(pathToP1, pathToP2);\r\n          console.log(pathFromAncestorToP1.reverse().map(a => a.name).join(\" ben \"));\r\n          console.log(pathFromAncestorToP2.reverse().map(a => a.name).join(\" ben \"));\r\n      \r\n          var p1Level = levelFromP1;\r\n          var p2Level = levelFromP2;\r\n          const gender1 = pathToP1[0].gender;\r\n          const gender2 = pathToP2[0].gender;\r\n          \r\n          console.log(`Level: (${p1Level}, ${p2Level})`);\r\n          setLoadingMessage(\"جاري البحث عن العلاقة بين الشخصين\");\r\n          if (p1Level === 0 && p2Level === 1) {\r\n            if (gender1 === 'Male'){\r\n              relation = `${translatedName1} هو والد ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي والدة ${translatedName2}`;\r\n            }\r\n            score = 100;\r\n            explanation = relationshipType[0];\r\n          }\r\n      \r\n          else if (p1Level === 1 && p2Level === 0) {\r\n            if (gender1 === 'Male'){\r\n              relation = `${translatedName1} هو ابن ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي إبنة ${translatedName2}`;\r\n            }\r\n            score = 100;\r\n            explanation = relationshipExplanation[0];\r\n          } \r\n      \r\n          else if (p1Level === 2 && p2Level === 0) {\r\n            if (gender1 === 'Male'){\r\n              relation = `${translatedName1} هو حفيد ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي حفيدة ${translatedName2}`;\r\n            }\r\n            score = 90;\r\n            explanation = relationshipExplanation[0];\r\n          }\r\n\r\n          else if (p1Level === 0 && p2Level === 2) {\r\n            if (gender1 === 'Male'){\r\n              relation = `${translatedName1} هو جدّ ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي جدّة ${translatedName2}`;\r\n            }\r\n            score = 90;\r\n            explanation = relationshipExplanation[0];\r\n          }\r\n      \r\n          else if (p1Level === 3 && p2Level === 0) {\r\n            if (gender1 === 'Male'){\r\n              relation = `${translatedName1} هو إبن حفيد ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي إبنة حفيدة ${translatedName2}`;\r\n            }\r\n            score = 75;\r\n            explanation = relationshipExplanation[1];\r\n          }\r\n      \r\n          else if (p1Level === 0 && p2Level === 3) {\r\n            if (gender1 === 'Male'){\r\n              relation = `${translatedName1} و جد والد ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي جدة والدة ${translatedName2}`;\r\n            }\r\n            score = 80;\r\n            explanation = relationshipExplanation[0];\r\n          } \r\n          \r\n          else if (p1Level === 0 && p2Level === 4){ // ADD FROM MOTHER FROM FATHER GRANDFATHER \r\n            const p2GreatAncestorGender = pathToP1[2].gender;\r\n            if (gender1 === 'Male'){\r\n              if (p2GreatAncestorGender === 'Male'){\r\n                relation = `${translatedName1} هو جد جد ${translatedName2}`;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هو جد جدة ${translatedName2}`;\r\n              }\r\n            }\r\n            else{\r\n              if (p2GreatAncestorGender === 'Male'){\r\n                relation = `${translatedName1} هي جدة جد ${translatedName2}`;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هي جدة جدة ${translatedName2}`;\r\n              }\r\n            }\r\n            score = 70;\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n\r\n          else if (p1Level === 4 && p2Level === 0){ // ADD FROM MOTHER FROM FATHER GRANDFATHER \r\n            const p1GreatAncestorGender = pathToP1[2].gender;\r\n            if (gender1 === 'Male'){\r\n              if (p1GreatAncestorGender === 'Male'){\r\n                relation = `${translatedName1} هو حفيد حفيد ${translatedName2}`;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هو حفيد حفيدة ${translatedName2}`;\r\n              }\r\n            }\r\n            else{\r\n              if (p1GreatAncestorGender === 'Male'){\r\n                relation = `${translatedName1} هي حفيدة حفيد ${translatedName2}`;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هي حفيدة حفيد ${translatedName2}`;\r\n              }\r\n            }\r\n            score = 70;\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n\r\n          else if (p1Level === 1 && p2Level === 1) {\r\n            if (gender1 === 'Male' && gender2 === 'Male'){\r\n              relation = `${translatedName1} و ${translatedName2} إخوة`;\r\n            }\r\n            else if (gender1 === 'Female' && gender2 === 'Female'){\r\n              relation = `${translatedName1} و ${translatedName2} أخوات`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} و ${translatedName2} إخوة`;\r\n            }\r\n            score = 98;\r\n            explanation = relationshipExplanation[0];\r\n          } \r\n          \r\n          else if (p1Level === 2 && p2Level === 1) {\r\n            const p1AncestorGender = pathToP1[1].gender;\r\n            if (gender1 === 'Male'){\r\n              if (p1AncestorGender === 'Male'){\r\n                relation = `${translatedName1} هو ابن أخ ${translatedName2}`;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هو ابن أخت ${translatedName2}`;\r\n              }\r\n              score = 93;\r\n            }\r\n            else{\r\n              if (p1AncestorGender === 'Male'){\r\n                relation = `${translatedName1} هي ابنة أخ ${translatedName2}`;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هي ابنة أخت ${translatedName2}`;\r\n              }\r\n              score = 93;\r\n              explanation = relationshipExplanation[1];\r\n            }\r\n          } \r\n          \r\n          else if (p1Level === 1 && p2Level === 2) {\r\n            const p2AncestorGender = pathToP2[1].gender;\r\n            if (gender1 === 'Male'){\r\n              if (p2AncestorGender === 'Male'){\r\n                relation = `${translatedName1} هو عم ${translatedName2}`;\r\n                score = 95;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هو خال ${translatedName2}`;\r\n                score = 94;\r\n              }\r\n            }\r\n            else{\r\n              if (p2AncestorGender === 'Male'){\r\n                relation = `${translatedName1} هي عمة ${translatedName2}`;\r\n                score = 95;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هي خالة ${translatedName2}`;\r\n                score = 94;\r\n              }\r\n            }\r\n            explanation = relationshipExplanation[1];\r\n          }\r\n          \r\n          else if (p1Level === 1 && p2Level === 3){\r\n            const p2AncestorGender = pathToP2[1].gender;\r\n            const p2GreatAncestorGender = pathToP2[2].gender;\r\n\r\n            if (gender1 === 'Male'){\r\n              if (p2AncestorGender === 'Male'){\r\n                if (p2GreatAncestorGender === 'Male'){\r\n                  relation = `${translatedName1} هو عم والد ${translatedName2}`;\r\n                  score = 80;\r\n                }\r\n                else {\r\n                  relation = `${translatedName1} هو خال والد ${translatedName2}`;\r\n                  score = 75;\r\n                }\r\n              }\r\n              else{\r\n                if (p2GreatAncestorGender === 'Male'){\r\n                  relation = `${translatedName1} هو عم والدة ${translatedName2}`;\r\n                  score = 80;\r\n                }\r\n                else {\r\n                  relation = `${translatedName1} هو خال والدة ${translatedName2}`;\r\n                  score = 70;\r\n                }\r\n              }\r\n            } \r\n            else{\r\n              if (p2AncestorGender === 'Male'){\r\n                if (p2GreatAncestorGender === 'Male'){\r\n                  relation = `${translatedName1} هي عمة والد ${translatedName2}`;\r\n                  score = 80;\r\n                }\r\n                else {\r\n                  relation = `${translatedName1} هي خالة والد ${translatedName2}`;\r\n                  score = 75\r\n                }\r\n              }\r\n              else{\r\n                if (p2GreatAncestorGender === 'Male'){\r\n                  relation = `${translatedName1} هي عمة والدة ${translatedName2}`;\r\n                  score = 80;\r\n                }\r\n                else {\r\n                  relation = `${translatedName1} هي خالة والدة ${translatedName2}`;\r\n                  score = 75;\r\n                }\r\n              }\r\n            }\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n\r\n          else if (p1Level === 1 && p2Level === 4) {\r\n            const p2AncestorGender = pathToP2[1].gender;\r\n            const p2GreatAncestorGender = pathToP2[2].gender;\r\n            const p2GreatGrandAncestorGender = pathToP2[3].gender;\r\n            \r\n            if (gender1 === 'Male') {\r\n              if (p2AncestorGender === 'Male') {\r\n                if (p2GreatAncestorGender === 'Male') {\r\n                  if (p2GreatGrandAncestorGender === 'Male') {\r\n                    relation = `${translatedName1} هو عم جد والد ${translatedName2}`;\r\n                    score = 85;\r\n                  } else {\r\n                    relation = `${translatedName1} هو عم جد والد ${translatedName2}`;\r\n                    score = 80;\r\n                  }\r\n                } else {\r\n                  relation = `${translatedName1} هو خال جد والد ${translatedName2}`;\r\n                  score = 75;\r\n                }\r\n              } else {\r\n                if (p2GreatAncestorGender === 'Male') {\r\n                  relation = `${translatedName1} هو عم جد والدة ${translatedName2}`;\r\n                  score = 85;\r\n                } else {\r\n                  relation = `${translatedName1} هو خال جد والدة ${translatedName2}`;\r\n                  score = 70;\r\n                }\r\n              }\r\n            } else {\r\n              if (p2AncestorGender === 'Male') {\r\n                if (p2GreatAncestorGender === 'Male') {\r\n                  if (p2GreatGrandAncestorGender === 'Male') {\r\n                    relation = `${translatedName1} هي عمة جد والد ${translatedName2}`;\r\n                    score = 85;\r\n                  } else {\r\n                    relation = `${translatedName1} هي عمة جد والد ${translatedName2}`;\r\n                    score = 80;\r\n                  }\r\n                } else {\r\n                  relation = `${translatedName1} هي خالة جد والد ${translatedName2}`;\r\n                  score = 75;\r\n                }\r\n              } else {\r\n                if (p2GreatAncestorGender === 'Male') {\r\n                  relation = `${translatedName1} هي عمة جد والدة ${translatedName2}`;\r\n                  score = 85;\r\n                } else {\r\n                  relation = `${translatedName1} هي خالة جد والدة ${translatedName2}`;\r\n                  score = 70;\r\n                }\r\n              }\r\n            }\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n          \r\n          else if (p1Level === 2 && p2Level === 4) {\r\n            const p2AncestorGender = pathToP2[1].gender;\r\n            const p2GreatAncestorGender = pathToP2[2].gender; \r\n\r\n            if (gender1 === 'Male') {\r\n              if (p2AncestorGender === 'Male') {\r\n                if (p2GreatAncestorGender === 'Male') {\r\n                  relation = `${translatedName1} هو جد الأول وجد جد ${translatedName2} إخوة`;\r\n                  score = 90;\r\n                } else {\r\n                  relation = `${translatedName1} هو جد الأول وجدة جد ${translatedName2} إخوة`;\r\n                  score = 70;\r\n                }\r\n              } else {\r\n                if (p2GreatAncestorGender === 'Male') {\r\n                  relation = `${translatedName1} هو جد الأول وجدة جد ${translatedName2} إخوة`;\r\n                  score = 70;\r\n                } else {\r\n                  relation = `${translatedName1} هو جد الأول وجدة جد ${translatedName2} إخوة`;\r\n                  score = 70;\r\n                }\r\n              }\r\n            } \r\n            else {\r\n              if (p2AncestorGender === 'Male') {\r\n                if (p2GreatAncestorGender === 'Male') {\r\n                  relation = `${translatedName1} هي جدة الأول وجد جد ${translatedName2} إخوة`;\r\n                  score = 70;\r\n                } else {\r\n                  relation = `${translatedName1} هي جدة الأول وجدة جد ${translatedName2} إخوة`;\r\n                  score = 70;\r\n                }\r\n              } else {\r\n                if (p2GreatAncestorGender === 'Male') {\r\n                  relation = `${translatedName1} هي جدة الأول وجدة جد ${translatedName2} إخوة`;\r\n                  score = 70;\r\n                } else {\r\n                  relation = `${translatedName1} هي جدة الأول وجدة جد ${translatedName2} إخوة`;\r\n                  score = 70;\r\n                }\r\n              }\r\n            }\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n\r\n          else if (p1Level === 3 && p2Level === 1){\r\n            const p1GreatAncestorGender = pathToP1[2].gender;\r\n            if (gender1 === 'Male'){\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  relation = `${translatedName1} هو حفيد اخ ${translatedName2}`;\r\n                  score = 65;\r\n                }\r\n                else {\r\n                  relation = `${translatedName1} هو حفيد اخت ${translatedName2}`;\r\n                  score = 65;\r\n                }\r\n            } \r\n            else{\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  relation = `${translatedName1} هي حفيدة اخ ${translatedName2}`;\r\n                  score = 65;\r\n                }\r\n                else {\r\n                  relation = `${translatedName1} هي حفيدة اخت ${translatedName2}`;\r\n                  score = 65;\r\n                }\r\n            }\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n\r\n          else if (p1Level === 2 && p2Level === 2) {    \r\n            const p1AncestorGender = pathToP1[1].gender;\r\n            const p2AncestorGender = pathToP2[1].gender;\r\n      \r\n            if (gender1 === 'Male') { \r\n              if (p2AncestorGender === 'Male') { \r\n                if (p1AncestorGender === 'Male'){  // ولد عمه\r\n                  relation = `${translatedName1} إبن عم ${translatedName2}`;\r\n                  score = 90;\r\n                }\r\n                else{\r\n                  relation = `${translatedName1} هو إبن عمّة ${translatedName2}`;\r\n                  score = 89;\r\n\r\n                }\r\n              } \r\n              else {  \r\n                if (p1AncestorGender === 'Male'){  // ولد خاله\r\n                  relation = `${translatedName1} هو إبن خال ${translatedName2}`;\r\n                  score = 88;\r\n                }\r\n                else{\r\n                  relation = `${translatedName1} هو إبن خالة ${translatedName2}`;\r\n                  score = 86;\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (p1AncestorGender === 'Male') { \r\n                if (p2AncestorGender === 'Male'){  // بنت عمه\r\n                  relation = `${translatedName1} هي إبنة عمّ ${translatedName2}`;\r\n                  score = 90;\r\n                }\r\n                else{\r\n                  relation = `${translatedName1} هي إبنة عمّة ${translatedName2}`;\r\n                  score = 89;\r\n                }\r\n              } \r\n              else {  \r\n                if (p2AncestorGender === 'Male'){  // بنت خاله\r\n                  relation = `${translatedName1} هي إبنة خال ${translatedName2}`;\r\n                  score = 88;\r\n                }\r\n                else{\r\n                  relation = `${translatedName1} هي إبنة خالة ${translatedName2}`;\r\n                  score = 86;\r\n                }\r\n              }\r\n            }\r\n            explanation = relationshipExplanation[1];\r\n          }\r\n      \r\n          else if (p1Level === 2 && p2Level === 3) {         \r\n      \r\n            const p1AncestorGender = pathToP1[1].gender;\r\n            const p2AncestorGender = pathToP2[1].gender;\r\n\r\n            if (gender1 === 'Male') { \r\n              if (p1AncestorGender === 'Male') {\r\n                if (p2AncestorGender === 'Male') {\r\n                  relation = `${translatedName1} هو إبن عم والد ${translatedName2}`;\r\n                  score = 80;\r\n                } \r\n                else { \r\n                  relation = `${translatedName1} هو إبن خال والدة ${translatedName2}`;\r\n                  score = 78;\r\n                }\r\n              } \r\n              else {  // mother's side\r\n                if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                  relation = `${translatedName1} هو إبن عم والد ${translatedName2}.`;\r\n                  score = 74;\r\n                } \r\n                else {  // mother's brother's daughter\r\n                  relation = `${translatedName1} هو إبن عمّة والدة ${translatedName2}`;\r\n                  score = 72;\r\n                }\r\n              }\r\n            } \r\n            else {  // If person1 is female\r\n              if (p1AncestorGender === 'Male') {  // father's side\r\n                if (p2AncestorGender === 'Male') {  // father's brother's son\r\n                  relation = `${translatedName1} هي إبنة عم والد ${translatedName2}`;\r\n                  score = 80;\r\n                } else {  // father's brother's daughter\r\n                  relation = `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\r\n                  score = 78;\r\n                }\r\n              } else {  // mother's side\r\n                if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                  relation = `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\r\n                  score = 74;\r\n                } else {  // mother's brother's daughter\r\n                  relation = `${translatedName1} هي إبنة عمة والدة ${translatedName2}`;\r\n                  score = 72;\r\n                }\r\n              }\r\n            }\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n          \r\n          else if (p1Level === 4 && p2Level === 2) {\r\n            const p1GreatAncestorGender = pathToP1[3].gender;  // P1 Great Ancestor\r\n            const p2AncestorGender = pathToP2[1].gender;  // P2 Ancestor\r\n            if (p1GreatAncestorGender){\r\n                  if (p2AncestorGender === 'Male') {\r\n                      if (p1GreatAncestorGender === 'Male') {\r\n                          relation = `جد ${translatedName1} هو إبن عم ${translatedName2}`;\r\n                          score = 65;\r\n                      } else {\r\n                          relation = `جد ${translatedName1} هو إبن عمّة ${translatedName2}`;\r\n                          score = 65;\r\n                      }\r\n                  } else {\r\n                      if (p1GreatAncestorGender === 'Male') {\r\n                          relation = `جد ${translatedName1} هو إبن خال ${translatedName2}`;\r\n                          score = 65;\r\n                      } else {\r\n                          relation = `جد ${translatedName1} هو إبن خالة ${translatedName2}`;\r\n                          score = 65;\r\n                      }\r\n                  }\r\n            } \r\n            else {\r\n                if (p2AncestorGender === 'Male') {\r\n                    if (p1GreatAncestorGender === 'Male') {\r\n                        relation = `جدة ${translatedName1} هي إبنة عم ${translatedName2}`;\r\n                        score = 65;\r\n                    } else {\r\n                        relation = `جدة ${translatedName1} هي إبنة عمّة ${translatedName2}`;\r\n                        score = 65;\r\n                    }\r\n                } else {\r\n                    if (p1GreatAncestorGender === 'Male') {\r\n                        relation = `جدة ${translatedName1} هي إبنة خال ${translatedName2}`;\r\n                        score = 65;\r\n                    } else {\r\n                        relation = `جدة ${translatedName1} هي إبنة خالة ${translatedName2}`;\r\n                        score = 65;\r\n                    }\r\n                }\r\n            }\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n          \r\n          else if (p1Level === 3 && p2Level === 2) {          \r\n            const p1AncestorGender = pathToP1[1].gender;\r\n            const p2AncestorGender = pathToP2[1].gender;\r\n            const p1GreatAncestorGender = pathToP1[2].gender;\r\n\r\n            if (p1AncestorGender === 'Male') {  // father's side\r\n              if (p2AncestorGender === 'Male') {  // father's brother's son\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  relation = `والد ${translatedName1} هو إبن عم ${translatedName2}`;\r\n                }\r\n                else{\r\n                  relation = `والد ${translatedName1} هو إبن عمة ${translatedName2}`;\r\n                }\r\n              } else { \r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  relation = `والد ${translatedName1} هو إبن خال ${translatedName2}`;\r\n                }\r\n                else{\r\n                  relation = `والد ${translatedName1} هو إبن خالة ${translatedName2}`;\r\n                }\r\n              }\r\n            } \r\n            else {  // mother's side\r\n              if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  relation = `والدة ${translatedName1} هي إبنة عم ${translatedName2}`;\r\n                }\r\n                else{\r\n                  relation = `والدة ${translatedName1} هي إبنة عمة ${translatedName2}`;\r\n                }\r\n                \r\n              } else {\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  relation = `والدة ${translatedName1} هي إبنة خال ${translatedName2}`;\r\n                }\r\n                else{\r\n                  relation = `والدة ${translatedName1} هي إبنة خالة ${translatedName2}`;\r\n                }\r\n              }\r\n            }\r\n            score = 60;\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n\r\n          else if (p1Level === 3 && p2Level === 3) {          \r\n            \r\n            const p1AncestorGender = pathToP1[1].gender;\r\n            const p2AncestorGender = pathToP2[1].gender;\r\n            const p1GreatAncestorGender = pathToP1[2].gender;\r\n            const p2GreatAncestorGender = pathToP2[2].gender;\r\n\r\n            if (p1AncestorGender === 'Male') { \r\n              if (p2AncestorGender === 'Male'){\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّة ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                }\r\n              }\r\n              else {\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّة ${translatedName1} من الأب و جد${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (p2AncestorGender === 'Male'){\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّ ${translatedName1} من الأم و جد${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّة ${translatedName1} من الأم و جد ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب أخوات.`;\r\n                  }\r\n                }\r\n              }\r\n              else {\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّ ${translatedName1} من الأم و جد ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n\r\n          else if (p1Level === 4 && p2Level === 3) {\r\n            const p1AncestorGender = pathToP2[0].gender;  // First ancestor of p2\r\n            const p2GreatAncestorGender = pathToP2[1].gender;  // Second ancestor of p2\r\n            const p1GreatGreatAncestorGender = pathToP2[2].gender;  // Third ancestor of p2\r\n\r\n            if (p1GreatGreatAncestorGender === 'Male') {\r\n                // Case when p1 is male\r\n                if (p1AncestorGender === 'Male') {\r\n                    if (p2GreatAncestorGender === 'Male') {\r\n                        relation = `جد اب ${translatedName1} و جد ${translatedName2} اخوة`;\r\n                        score = 75;\r\n                    } else {\r\n                        relation = `جد اب ${translatedName1} و جدة ${translatedName2} اخوة`;\r\n                        score = 75;\r\n                    }\r\n                } else {\r\n                    if (p2GreatAncestorGender === 'Male') {\r\n                        relation = `جد أم ${translatedName1} و جد ${translatedName2} اخوة`;\r\n                        score = 75;\r\n                    } else {\r\n                        relation = `جد أم ${translatedName1} و جدة ${translatedName2} اخوة`;\r\n                        score = 75;\r\n                    }\r\n                }\r\n            } \r\n            else {\r\n                // Case when p1 is female\r\n                if (p1AncestorGender === 'Male') {\r\n                    if (p2GreatAncestorGender === 'Male') {\r\n                        relation = `جدة اب ${translatedName1} و جد ${translatedName2} اخوة`;\r\n                        score = 85;\r\n                    } else {\r\n                        relation = `جدة اب ${translatedName1} و جدة ${translatedName2} اخوة`;\r\n                        score = 80;\r\n                    }\r\n                } else {\r\n                    if (p2GreatAncestorGender === 'Male') {\r\n                        relation = `جدة أم ${translatedName1} و جد ${translatedName2} اخوة`;\r\n                        score = 75;\r\n                    } else {\r\n                        relation = `جدة أم ${translatedName1} و جدة ${translatedName2} اخوة`;\r\n                        score = 70;\r\n                    }\r\n                }\r\n            }\r\n          explanation = relationshipExplanation[2];\r\n          }\r\n\r\n          else if (p1Level === 3 && p2Level === 4) {\r\n            const p2AncestorGender = pathToP2[0].gender;  // First ancestor of p2\r\n            const p1GreatAncestorGender = pathToP2[1].gender;  // Second ancestor of p2\r\n            const p2GreatGreatAncestorGender = pathToP2[2].gender;  // Third ancestor of p2\r\n\r\n            if (p1GreatAncestorGender === 'Male') {\r\n                // Case when p1 is male\r\n                if (p2AncestorGender === 'Male') {\r\n                    if (p2GreatGreatAncestorGender === 'Male') {\r\n                        relation = `جد ${translatedName1} و جد أب ${translatedName2} اخوة`;\r\n                        score = 85;\r\n                    } else {\r\n                        relation = `جد ${translatedName1} و جدة أب ${translatedName2} اخوة`;\r\n                        score = 80;\r\n                    }\r\n                } else {\r\n                    if (p2GreatGreatAncestorGender === 'Male') {\r\n                        relation = `جد ${translatedName1} و جد أم ${translatedName2} اخوة`;\r\n                        score = 75;\r\n                    } else {\r\n                        relation = `جد ${translatedName1} و جدة أم ${translatedName2} اخوة`;\r\n                        score = 70;\r\n                    }\r\n                }\r\n            } \r\n            else {\r\n                // Case when p1 is female\r\n                if (p2AncestorGender === 'Male') {\r\n                    if (p2GreatGreatAncestorGender === 'Male') {\r\n                        relation = `جدة ${translatedName1} و جد أب ${translatedName2} اخوة`;\r\n                        score = 85;\r\n                    } else {\r\n                        relation = `جدة ${translatedName1} و جدة أب ${translatedName2} أخوات`;\r\n                        score = 80;\r\n                    }\r\n                } else {\r\n                    if (p2GreatGreatAncestorGender === 'Male') {\r\n                        relation = `جدة ${translatedName1} و جد أم ${translatedName2} اخوة`;\r\n                        score = 75;\r\n                    } else {\r\n                        relation = `جدة ${translatedName1} و جدة أم ${translatedName2} أخوات`;\r\n                        score = 70;\r\n                    }\r\n                }\r\n            }\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n\r\n          else if (p1Level === 4 && p2Level === 1) {\r\n            const p1GreatAncestorGender = pathToP1[2].gender;\r\n            const p1GreatGrandAncestorGender = pathToP1[3].gender;\r\n            \r\n            if (gender1 === 'Male'){\r\n                if (p1GreatAncestorGender === 'Male') {\r\n                  if (p1GreatGrandAncestorGender === 'Male') {\r\n                    relation = `${translatedName1} هو حفيد إبن أخ ${translatedName2}`;\r\n                    score = 85;\r\n                  } else {\r\n                    relation = `${translatedName1} هو حفيد إبن أخت ${translatedName2}`;\r\n                    score = 80;\r\n                  }\r\n                } \r\n                else {\r\n                  if (p1GreatGrandAncestorGender === 'Male') {\r\n                    relation = `${translatedName1} هو حفيد إبنة أخ ${translatedName2}`;\r\n                    score = 85;\r\n                  } else {\r\n                    relation = `${translatedName1} هو حفيد إبنة أخت ${translatedName2}`;\r\n                    score = 80;\r\n                  }\r\n                }\r\n            } \r\n            else {\r\n              if (p1GreatAncestorGender === 'Male') {\r\n                  if (p1GreatGrandAncestorGender === 'Male') {\r\n                    relation = `${translatedName1} هي حفيدة إبن أخ ${translatedName2}`;\r\n                    score = 85;\r\n                  } else {\r\n                    relation = `${translatedName1} هي حفيدة إبن أخت ${translatedName2}`;\r\n                    score = 80;\r\n                  }\r\n                } \r\n                else {\r\n                  if (p1GreatGrandAncestorGender === 'Male') {\r\n                    relation = `${translatedName1} هي حفيدة إبنة أخ ${translatedName2}`;\r\n                    score = 85;\r\n                  } else {\r\n                    relation = `${translatedName1} هي حفيدة إبنة أخت ${translatedName2}`;\r\n                    score = 80;\r\n                  }\r\n                }\r\n            }\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n\r\n          else if (p1Level === 4 && p2Level === 4) {\r\n            const p1AncestorGender = pathToP2[1].gender;\r\n            const p2AncestorGender = pathToP1[1].gender;\r\n            const p1GreatGreatAncestorGender = pathToP1[3].gender;\r\n            const p2GreatGreatAncestorGender = pathToP2[3].gender;\r\n\r\n            if (p1GreatGreatAncestorGender === 'Male') {\r\n              if (p1AncestorGender === 'Male') {\r\n                  if (p2AncestorGender === 'Male') {\r\n                    if (p2GreatGreatAncestorGender === 'Male'){\r\n                      relation = `جد أب ${translatedName1} و جد أب ${translatedName2} اخوة`;\r\n                      score = 85;\r\n                    } else {\r\n                        relation = `جد أب ${translatedName1} و جدة أب ${translatedName2} اخوة`;\r\n                        score = 80;\r\n                    }\r\n                  } \r\n                  else{\r\n                    if (p2GreatGreatAncestorGender === 'Male'){\r\n                      relation = `جد أم ${translatedName1} و جد أم ${translatedName2} اخوة`;\r\n                      score = 85;\r\n                    } else {\r\n                        relation = `جد أم ${translatedName1} و جدة أم ${translatedName2} اخوة`;\r\n                        score = 80;\r\n                    }\r\n                  } \r\n              } \r\n              else {\r\n                if (p2AncestorGender === 'Male') {\r\n                  if (p2GreatGreatAncestorGender === 'Male'){\r\n                    relation = `جد أب ${translatedName1} و جد أب ${translatedName2} اخوة`;\r\n                    score = 85;\r\n                  } else {\r\n                      relation = `جد أب ${translatedName1} و جدة أب ${translatedName2} اخوة`;\r\n                      score = 80;\r\n                  }\r\n                } \r\n                else{\r\n                  if (p2GreatGreatAncestorGender === 'Male'){\r\n                    relation = `جد أم ${translatedName1} و جد أم ${translatedName2} اخوة`;\r\n                    score = 85;\r\n                  } \r\n                  else {\r\n                    relation = `جد أم ${translatedName1} و جدة أم ${translatedName2} اخوة`;\r\n                    score = 80;\r\n                }\r\n              }\r\n          }\r\n      } \r\n      else {\r\n          if (p1AncestorGender === 'Male') {\r\n              if (p2AncestorGender === 'Male') {\r\n                if (p2GreatGreatAncestorGender === 'Male'){\r\n                  relation = `جدة أب ${translatedName1} و جد أب ${translatedName2} اخوة`;\r\n                  score = 85;\r\n                } else {\r\n                    relation = `جدة أب ${translatedName1} و جدة أب ${translatedName2} اخوة`;\r\n                    score = 80;\r\n                }\r\n              } else{\r\n                if (p2GreatGreatAncestorGender === 'Male'){\r\n                  relation = `جدة أم ${translatedName1} و جد أم ${translatedName2} اخوة`;\r\n                  score = 85;\r\n                } else {\r\n                    relation = `جدة أم ${translatedName1} و جدة أم ${translatedName2} اخوة`;\r\n                    score = 80;\r\n                }\r\n              } \r\n          } else {\r\n              if (p2AncestorGender === 'Male') {\r\n                if (p2GreatGreatAncestorGender === 'Male'){\r\n                  relation = `جدة أب ${translatedName1} و جد أب ${translatedName2} اخوة`;\r\n                  score = 85;\r\n                } else {\r\n                    relation = `جدة أب ${translatedName1} و جدة أب ${translatedName2} اخوة`;\r\n                    score = 80;\r\n                }\r\n              } else{\r\n                if (p2GreatGreatAncestorGender === 'Male'){\r\n                  relation = `جدة أم ${translatedName1} و جد أم ${translatedName2} اخوة`;\r\n                  score = 85;\r\n                } else {\r\n                    relation = `جدة أم ${translatedName1} و جدة أم ${translatedName2} اخوة`;\r\n                    score = 80;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n\r\n          else {\r\n            setLoading(false);\r\n            console.log('No direct relation found.');\r\n            relation = await getMarriageRelation(session, person1ID, person2ID, translatedName1, translatedName2, gender1, gender2);\r\n            relationshipType = \"Marriage-related\";\r\n            return {  relation, score, \r\n                      generation:Math.abs(p1Level-p2Level), \r\n                      levelsTuple: {levelFromP1, levelFromP2},\r\n                      explanation,\r\n                      ancestor,\r\n                      relationshipType,\r\n                      treeData,\r\n                      person1ID,\r\n                      person2ID,\r\n                      person1: person1Matches[0], person2: person2Matches[0]};\r\n          }\r\n          if (relation != ''){\r\n              setLoading(false);\r\n              console.log(relation);\r\n              relationshipType = \"Blood\";\r\n              return {relation, score, \r\n                      generation:Math.abs(p1Level-p2Level), \r\n                      levelsTuple: {levelFromP1, levelFromP2},\r\n                      explanation,\r\n                      ancestor,\r\n                      relationshipType,\r\n                      treeData,\r\n                      person1ID,\r\n                      person2ID,\r\n                      person1: person1Matches[0], person2: person2Matches[0]};\r\n            }\r\n        }\r\n      }\r\n    }\r\n\r\n  const checkMarriage = async (person1ID, person2ID, gender1, gender2) => {\r\n    if (gender1 === gender2) {return {areMarried : false}}\r\n        setLoadingMessage(\"جاري البحث عن علاقة زواج\");\r\n        const result = await session.run(`\r\n          MATCH (Husband:Person)-[:HUSBAND_OF]->(Wife:Person)\r\n          MATCH (Wife)-[:WIFE_OF]->(Husband)\r\n          WHERE (id(Wife) = $person1ID AND id(Husband) = $person2ID) \r\n            OR (id(Wife) = $person2ID AND id(Husband) = $person1ID)\r\n          RETURN Husband AS P1, Wife AS P2\r\n        `, { person1ID, person2ID });\r\n\r\n        if (result.records.length === 0) {\r\n          return { areMarried: false };\r\n        }\r\n        const record = result.records[0];\r\n        const P1 = record.get(\"P1\").properties;\r\n        const P2 = record.get(\"P2\").properties;\r\n        return record.length === 0 ? {areMarried : false} : {areMarried : true, P1, P2};\r\n  };\r\n\r\n  async function getMarriageRelation(session, person1ID, person2ID, translatedName1, translatedName2, gender1, gender2) {\r\n    console.log('🔍 Checking marriage-based relationship between', translatedName1, 'and', translatedName2);\r\n\r\n    // Step 1: Person's own family\r\n    const ownFamilyQuery = `\r\n      MATCH (P:Person)\r\n      WHERE id(P) = $personId\r\n\r\n      // Person's Father and Mother\r\n      OPTIONAL MATCH (Father:Person)-[:FATHER_OF]->(P)\r\n      OPTIONAL MATCH (Mother:Person)-[:MOTHER_OF]->(P)\r\n\r\n      // Person's Siblings\r\n      OPTIONAL MATCH (Father)-[:FATHER_OF]->(Sibling:Person)\r\n      WHERE Sibling <> P\r\n\r\n      // Spouses of Siblings\r\n      OPTIONAL MATCH (Sibling)-[:HUSBAND_OF|:WIFE_OF]->(SiblingSpouse:Person)\r\n\r\n      // Person's Children\r\n      OPTIONAL MATCH (P)-[:MOTHER_OF|:FATHER_OF]->(Child:Person)\r\n\r\n      // Spouses of Children\r\n      OPTIONAL MATCH (Child)-[:HUSBAND_OF|:WIFE_OF]->(ChildSpouse:Person)\r\n\r\n      RETURN \r\n        id(Father) AS fatherId,\r\n        id(Mother) AS motherId,\r\n        collect(DISTINCT id(Sibling)) AS siblingIds,\r\n        collect(DISTINCT id(SiblingSpouse)) AS siblingSpouseIds,\r\n        collect(DISTINCT id(Child)) AS childIds,\r\n        collect(DISTINCT id(ChildSpouse)) AS childSpouseIds\r\n    `;\r\n\r\n    const ownResult = await session.run(ownFamilyQuery, { personId: person1ID });\r\n    const ownRecord = ownResult.records[0];\r\n\r\n    const fatherId = ownRecord.get(\"fatherId\")?.toNumber() ?? null;\r\n    const motherId = ownRecord.get(\"motherId\")?.toNumber() ?? null;\r\n    const siblingIds = (ownRecord.get(\"siblingIds\") ?? []).map(id => id.toNumber());\r\n    const siblingSpouseIds = (ownRecord.get(\"siblingSpouseIds\") ?? []).map(id => id.toNumber());\r\n    const childIds = (ownRecord.get(\"childIds\") ?? []).map(id => id.toNumber());\r\n    const fchildrenSpouseIds = (ownRecord.get(\"childSpouseIds\") ?? []).map(id => id.toNumber());\r\n\r\n    console.log('👨‍👩‍👧 Own Family:');\r\n    console.log('Father ID:', fatherId);\r\n    console.log('Mother ID:', motherId);\r\n    console.log('Sibling IDs:', siblingIds);\r\n    console.log('Sibling Spouse IDs:', siblingSpouseIds);\r\n    console.log('Childs IDs:', childIds);\r\n    console.log('Children Spouse IDs:', fchildrenSpouseIds);\r\n\r\n    // Step 2: Spouse's family\r\n    const spouseFamilyQuery = `\r\n      MATCH (P:Person)-[:HUSBAND_OF|:WIFE_OF]->(Spouse:Person)\r\n      WHERE id(P) = $personId\r\n\r\n      OPTIONAL MATCH (SFather:Person)-[:FATHER_OF]->(Spouse)\r\n      OPTIONAL MATCH (SMother:Person)-[:MOTHER_OF]->(Spouse)\r\n      OPTIONAL MATCH (SFather)-[:FATHER_OF]->(SSibling:Person)\r\n      WHERE SSibling <> Spouse\r\n\r\n      OPTIONAL MATCH (SSibling)-[:HUSBAND_OF|:WIFE_OF]->(SSiblingSpouse:Person)\r\n\r\n      // Get children of the spouse\r\n      OPTIONAL MATCH (Spouse)-[:MOTHER_OF|:FATHER_OF]->(Child:Person)\r\n      OPTIONAL MATCH (Child)-[:HUSBAND_OF|:WIFE_OF]->(ChildSpouse:Person)\r\n\r\n      RETURN \r\n        id(SFather) AS sFatherId,\r\n        id(SMother) AS sMotherId,\r\n        collect(DISTINCT id(SSibling)) AS sSiblingIds,\r\n        collect(DISTINCT id(SSiblingSpouse)) AS sSiblingSpouseIds,\r\n        collect(DISTINCT id(Child)) AS childIds,\r\n        collect(DISTINCT id(ChildSpouse)) AS childSpouseIds\r\n    `;\r\n\r\n    const spouseResult = await session.run(spouseFamilyQuery, { personId: person1ID });\r\n    const spouseRecord = spouseResult.records[0];\r\n\r\n    const sFatherId = spouseRecord?.get(\"sFatherId\")?.toNumber() ?? null;\r\n    const sMotherId = spouseRecord?.get(\"sMotherId\")?.toNumber() ?? null;\r\n    const sSiblingIds = (spouseRecord?.get(\"sSiblingIds\") ?? []).map(id => id.toNumber());\r\n    const sSiblingSpouseIds = (spouseRecord?.get(\"sSiblingSpouseIds\") ?? []).map(id => id.toNumber());\r\n    const childrenSpouseIds = (spouseRecord?.get(\"childSpouseIds\") ?? []).map(id => id.toNumber());\r\n\r\n    console.log('🧑‍🤝‍🧑 Spouse Family:');\r\n    console.log('Spouse Father ID:', sFatherId);\r\n    console.log('Spouse Mother ID:', sMotherId);\r\n    console.log('Spouse Sibling IDs:', sSiblingIds);\r\n    console.log('Spouse Sibling Spouse IDs:', sSiblingSpouseIds);\r\n    console.log('Children Spouse IDs:', childrenSpouseIds);\r\n\r\n    // Step 3: Matching\r\n    const match = (id) => {\r\n      return id !== null && id === person2ID;\r\n    };\r\n\r\n    const isIn = (list) => {\r\n      const result = list.some(id => id === person2ID);\r\n      return result;\r\n    };\r\n\r\n\r\n    // Sibling check\r\n    if (isIn(sSiblingIds)) {\r\n      console.log('✅ Match: Sibling');\r\n      if (gender1 === 'Male') {\r\n        return `${translatedName1} هو زوج اخت ${translatedName2}`;\r\n      } else {\r\n        return `${translatedName1} هي زوجة اخ ${translatedName2}`;\r\n      }\r\n    }\r\n\r\n    // Sibling Spouse check\r\n    if (isIn(siblingSpouseIds)) {\r\n      console.log('✅ Match: Spouse Siblings');\r\n      // Male person with male sibling-in-law (spouse of the sibling)\r\n      if (gender1 === 'Male') {\r\n        if(gender2 === 'Male'){\r\n          return `${translatedName1} هو اخ زوجة ${translatedName2}`;\r\n        }\r\n        else{\r\n          return `${translatedName1} هو اخ زوج ${translatedName2}`;\r\n        }\r\n      } else {\r\n        // Female person with female sibling-in-law (spouse of the sibling)\r\n        if(gender2 === 'Male'){\r\n        return `${translatedName1} هي اخت زوج ${translatedName2}`;\r\n        }\r\n        else{\r\n          return `${translatedName1} هو اخ زوجة ${translatedName2}`;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Children Spouses check\r\n    if (isIn(fchildrenSpouseIds)) {\r\n      console.log('✅ Match: Children Spouses');\r\n      if (gender1 === 'Male') {\r\n        return `${translatedName1} هو أب زوجة ${translatedName2}`;\r\n      } else {\r\n        return `${translatedName1} هي أم زوجة ${translatedName2}`;\r\n      }\r\n    }\r\n\r\n    // Further check for Children Spouses (with childrenSpouseIds mapping and match)\r\n    if (match(sFatherId) || match(sMotherId)) {\r\n      console.log('✅ Match: Children Spouses (extended)');\r\n      if (gender1 === 'Male') {\r\n        console.log(`${translatedName1} هو زوج ابنة ${translatedName2}`);\r\n        return `${translatedName1} هو زوج ابنة ${translatedName2}`;\r\n      } else {\r\n        console.log(`${translatedName1} هي زوجة ابن ${translatedName2} | ${translatedName1} هي كنة ${translatedName2}`);\r\n        return `${translatedName1} هي زوجة ابن ${translatedName2} | ${translatedName1} هي كنة ${translatedName2}`;\r\n      }\r\n    }\r\n    \r\n    return \"لا توجد علاقة واضحة\";\r\n  }\r\n\r\n  const getAncestors = async (person1ID, person2ID) => {\r\n        setLoadingMessage(\"جاري البحث عن الأجداد المشتركة\");\r\n        const result = await session.run(`\r\n          MATCH path1 = (common:Person)-[:FATHER_OF|MOTHER_OF*0..12]->(p1:Person)\r\n          WHERE id(p1) = $person1ID\r\n\r\n          MATCH path2 = (common)-[:FATHER_OF|MOTHER_OF*0..12]->(p2:Person)\r\n          WHERE id(p2) = $person2ID\r\n            AND id(p1) <> id(p2)\r\n\r\n          WITH common, path1, path2, length(path1) AS level1, length(path2) AS level2\r\n\r\n          // Prioritize father ancestors by explicitly matching FATHER_OF first, then MOTHER_OF\r\n          OPTIONAL MATCH (cGF:Person)-[:FATHER_OF]->(cF:Person)-[:FATHER_OF]->(common)\r\n\r\n          // Check if the common ancestor is married and get the husband if married\r\n          OPTIONAL MATCH (common)-[:WIFE_OF]->(husband:Person)\r\n\r\n          // Include spouse information\r\n          WITH common, cF, cGF, husband, path1, path2, level1, level2\r\n\r\n          ORDER BY (level1 + level2) ASC\r\n          LIMIT 1\r\n\r\n          RETURN \r\n            // If common ancestor is female and married, return the husband's name\r\n            common.name AS commonAncestorName,\r\n            cF.name AS commonAncestorFatherName,\r\n            cGF.name AS commonAncestorGrandFatherName,\r\n            common.lastName AS commonAncestorLastName,\r\n            id(common) AS commonAncestorID,\r\n\r\n            common.gender AS commonAncestorGender,\r\n            level1 AS generationsFromP1,\r\n            level2 AS generationsFromP2,\r\n\r\n            // Include spouse information if married\r\n            CASE \r\n              WHEN husband IS NOT NULL THEN { id: id(husband), name: husband.name, lastName: husband.lastName, gender: husband.gender }\r\n              ELSE null\r\n            END AS spouseOfAncestor,\r\n\r\n            [n IN nodes(path1) | { id: id(n), name: n.name, lastName: n.lastName, gender: n.gender }] AS pathToP1,\r\n            [n IN nodes(path2) | { id: id(n), name: n.name, lastName: n.lastName, gender: n.gender }] AS pathToP2\r\n\r\n\r\n        `, { person1ID, person2ID });\r\n\r\n        const record = result.records[0];\r\n        if (result.records.length === 0){\r\n            return null;\r\n        }\r\n        return {\r\n            id: record.get('commonAncestorID').toNumber(),\r\n            name: record.get('commonAncestorName'),\r\n            lastName: record.get('commonAncestorLastName'),\r\n            fatherName: record.get('commonAncestorFatherName'),\r\n            grandfatherName: record.get('commonAncestorGrandFatherName'),\r\n            gender: record.get('commonAncestorGender'),\r\n            spouseOfAncestor: record.get('spouseOfAncestor'),\r\n            levelFromP1: record.get('generationsFromP1').toNumber(),\r\n            levelFromP2: record.get('generationsFromP2').toNumber(),\r\n            pathFromAncestorToP1: record.get('pathToP1'),\r\n            pathFromAncestorToP2: record.get('pathToP2')\r\n        };\r\n  };\r\n\r\n  const getPersonMatches = async (personName, fatherName = \"\", grandfatherName = \"\", familyName) => {\r\n\r\n    let cypherQuery = ``;\r\n    const queryParamsObject = {};\r\n  \r\n    if (personName){\r\n      if (fatherName) {\r\n        if (grandfatherName) {\r\n          if (familyName) {\r\n            cypherQuery += `\r\n              MATCH (grandfather:Person)-[:FATHER_OF]->(father:Person)-[:FATHER_OF]->(child:Person)\r\n              WHERE child.name = $personName AND \r\n                    father.name = $fatherName AND \r\n                    grandfather.name = $grandfatherName AND \r\n                    child.lastName = $familyName\r\n              RETURN \r\n                id(child) AS childID,\r\n                child.name AS childName, \r\n                father.name AS fatherName, \r\n                grandfather.name AS grandfatherName, \r\n                child.lastName AS familyName,\r\n                child.gender AS gender,\r\n                child.YoB AS YoB,\r\n                child.YoD AS YoD\r\n            `;\r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n            queryParamsObject.grandfatherName = grandfatherName;\r\n            queryParamsObject.familyName = familyName;\r\n          } \r\n          else {\r\n            cypherQuery += `\r\n              MATCH (grandfather:Person)-[:FATHER_OF]->(father:Person)-[:FATHER_OF]->(child:Person)\r\n              WHERE child.name = $personName AND \r\n                    father.name = $fatherName AND\r\n                    grandfather.name = $grandfatherName\r\n              RETURN \r\n                    id(child) AS childID, \r\n                    child.name AS childName, \r\n                    father.name AS fatherName, \r\n                    grandfather.name AS grandfatherName,\r\n                    child.lastName AS familyName,\r\n                    child.gender AS gender,\r\n                    child.YoB AS YoB,\r\n                    child.YoD AS YoD\r\n              `;\r\n            \r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n            queryParamsObject.grandfatherName = grandfatherName;\r\n          }\r\n          \r\n        } else {\r\n          if (familyName){\r\n            cypherQuery += `\r\n            MATCH (father:Person)-[:FATHER_OF]->(child:Person)\r\n            WHERE child.name = $personName AND \r\n                  father.name = $fatherName AND\r\n                  child.lastName = $familyName\r\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n            RETURN  \r\n              id(child) AS childID,\r\n              child.name AS childName, \r\n              father.name AS fatherName,\r\n              grandfather.name AS grandfatherName,\r\n              child.lastName AS familyName,\r\n              child.gender AS gender,\r\n              child.YoB AS YoB,\r\n              child.YoD AS YoD\r\n            `;\r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n            queryParamsObject.familyName = familyName;\r\n          }\r\n          else{\r\n            cypherQuery += `\r\n            MATCH (father:Person)-[:FATHER_OF]->(child:Person)\r\n            \r\n            WHERE child.name = $personName AND \r\n                  father.name = $fatherName\r\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n            RETURN  id(child) AS childID, \r\n                    child.name AS childName, \r\n                    father.name AS fatherName, \r\n                    grandfather.name AS grandfatherName,\r\n                    child.lastName AS familyName,\r\n                    child.gender AS gender,\r\n                    child.YoB AS YoB,\r\n                    child.YoD AS YoD\r\n            `;\r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n          }\r\n          }\r\n      }\r\n      else {\r\n        if (familyName){\r\n          cypherQuery += `\r\n          MATCH (child:Person)\r\n          WHERE child.name = $personName AND child.lastName = $familyName\r\n          OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(child)\r\n          OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n          RETURN \r\n            id(child) AS childID,\r\n            child.name AS childName, \r\n            father.name AS fatherName,\r\n            grandfather.name AS grandfatherName,\r\n            child.lastName AS familyName,\r\n            child.gender AS gender,\r\n            child.YoB AS YoB,\r\n            child.YoD AS YoD\r\n        `;\r\n        queryParamsObject.personName = personName;\r\n        queryParamsObject.familyName = familyName;\r\n        }\r\n        else{\r\n          cypherQuery += `\r\n            MATCH (child:Person)\r\n            WHERE child.name = $personName\r\n            OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(child)\r\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n            RETURN\r\n              id(child) AS childID,\r\n              child.name AS childName, \r\n              father.name AS fatherName, \r\n              grandfather.name AS grandfatherName,\r\n              child.lastName AS familyName,\r\n              child.gender AS gender,\r\n              child.YoB AS YoB,\r\n              child.YoD AS YoD\r\n          `;\r\n          queryParamsObject.personName = personName;\r\n        }\r\n      }\r\n    }\r\n\r\n    const session = driver.session();\r\n    try {\r\n      const result = await session.run(cypherQuery, queryParamsObject);\r\n  \r\n      return result.records.map(record => ({\r\n        id: record.get('childID').toNumber(),\r\n        gender: record.get('gender'),\r\n        name: record.get('childName'),\r\n        father: record.get('fatherName') || \"\",\r\n        grandfather: record.get('grandfatherName') || \"\",\r\n        lastName: record.get('familyName') || \"\",\r\n        YoB: record.get(\"YoB\") || -1,\r\n        YoD: record.get(\"YoD\") || -1\r\n      }));\r\n    } \r\n    catch (Error) {\r\n      console.error('Query Error:', Error);\r\n      setError('حدث خطأ أثناء البحث.');\r\n    } \r\n    finally {\r\n      await session.close();\r\n    }\r\n  };\r\n\r\n  const getRelationship = async (person1FullName, person2FullName) => {\r\n    const isArabic = (text) => /[\\u0600-\\u06FF]/.test(text);\r\n    let gender1, gender2;\r\n    const { personName: person1Name, fatherName: person1FatherName, grandfatherName: person1GrandfatherName, familyName: person1LastName } = splitName(person1FullName);\r\n    const { personName: person2Name, fatherName: person2FatherName, grandfatherName: person2GrandfatherName, familyName: person2LastName } = splitName(person2FullName);\r\n    console.log(person1Name +  \" + \" + person1FatherName + \" + \" + person1LastName);\r\n    let translatedPerson1Name = isArabic(person1Name) ? translateName(person1Name, false) : person1Name;\r\n    let translatedPerson1FatherName = isArabic(person1FatherName) ? translateName(person1FatherName, false) : person1FatherName;\r\n    let translatedPerson1GrandfatherName = isArabic(person1GrandfatherName) ? translateName(person1GrandfatherName, false) : person1GrandfatherName;\r\n    let translatedPerson1LastName = isArabic(person1LastName) ? translateName(person1LastName, false) : person1LastName;\r\n\r\n    let translatedPerson2Name = isArabic(person2Name) ? translateName(person2Name, false) : person2Name;\r\n    let translatedPerson2FatherName = isArabic(person2FatherName) ? translateName(person2FatherName, false) : person2FatherName;\r\n    let translatedPerson2GrandfatherName = isArabic(person2GrandfatherName) ? translateName(person2GrandfatherName, false) : person2GrandfatherName;\r\n    let translatedPerson2LastName = isArabic(person2LastName) ? translateName(person2LastName, false) : person2LastName;\r\n\r\n    const errorContainer = document.getElementById('error-container');\r\n    try {\r\n      const person1Matches = await getPersonMatches(\r\n        translatedPerson1Name,\r\n        translatedPerson1FatherName,\r\n        translatedPerson1GrandfatherName,\r\n        translatedPerson1LastName\r\n      );\r\n\r\n      if (person1Matches.length === 0) {\r\n        throw new Error(`لا يوجد أشخاص بإسم ${person1FullName} الرجاء التثبت في الإسم جيدا`);\r\n      }\r\n      if (person1Matches.length === 1) {\r\n        setSelectedPerson1(person1Matches[0]);\r\n      }\r\n      const person2Matches = await getPersonMatches(\r\n        translatedPerson2Name,\r\n        translatedPerson2FatherName,\r\n        translatedPerson2GrandfatherName,\r\n        translatedPerson2LastName\r\n      );\r\n\r\n      if (person2Matches.length === 0) {\r\n        throw new Error(`لا يوجد أشخاص بإسم ${person2FullName} الرجاء التثبت في الإسم جيدا`);\r\n      }\r\n      \r\n      if (person2Matches.length === 1) {\r\n        setSelectedPerson2(person2Matches[0]);\r\n      }\r\n      setLoadingMessage(\"جاري البحث عن الأشخاص\");\r\n\r\n      console.log(\"P1 matches : \", person1Matches);\r\n      console.log(\"P2 matches : \", person2Matches);\r\n      \r\n      let person1ID, person2ID;\r\n      if (person1Matches.length > 1 || person2Matches.length > 1) {\r\n      return {\r\n        error: 'non-unique-name',\r\n        message: 'تم العثور على عدة أشخاص بنفس الاسم. الرجاء اختيار الصحيح.',\r\n        duplicates: {\r\n          person1: person1Matches.length > 1 ? person1Matches : [],\r\n          person2: person2Matches.length > 1 ? person2Matches : []\r\n        }\r\n      };\r\n      }\r\n      else{\r\n        person1ID = person1Matches[0].id;\r\n        person2ID = person2Matches[0].id;\r\n        gender1 = person1Matches[0].gender;\r\n        gender2 = person2Matches[0].gender;\r\n      }\r\n\r\n      const translatedName1 = translateName(person1Matches[0].name + \" \" + person1Matches[0].lastName);\r\n      const translatedName2 = translateName(person2Matches[0].name + \" \" + person2Matches[0].lastName);\r\n      \r\n      console.log(person1Matches[0], person2Matches[0]);\r\n      \r\n      return findRelationship(person1ID, person2ID, gender1, gender2, translatedName1, translatedName2, person1Matches, person2Matches);\r\n    } \r\n    catch (error) {\r\n      console.error('Error in relationship lookup:', error);\r\n    \r\n      setError(`❌ خطأ: ${error.message || error}`);\r\n    \r\n      if (errorContainer) {\r\n        errorContainer.innerText = `❌ خطأ: ${error.message || error}`;\r\n      }\r\n      setLoading(false);\r\n      return '';\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"relation-page\">\r\n    \r\n    <main className=\"main-panel\">\r\n      \r\n      <section className=\"relation-form-section\">\r\n        <h2 className=\"section-title\">ماهي العلاقة بينهما؟</h2>\r\n        <p id=\"DescriptionZone\">\r\n          الهدف من هذه الصفحة هو تحديد صلة القرابة بين شخصين بناءًا على اسمهم. كل ماعليك فعله\r\n          هو ادخال الاسم للشخص الاول والثاني وثم النقر على \"التحقق من العلاقة\" ستظهر لك النتيجة في اسهل الصفحة\r\n          والتي يتوضح لك نوع العلاقة ومدى قرابتها؟ في حال وجود اي تشابهات او تكرارات في الاسماء سيم توفير خيارات لتحديد الشخص الصحيح\r\n        </p>\r\n        <form onSubmit={fetchRelationship} className=\"relation-form\">\r\n          <div className=\"input-group\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"الإسم الكامل الأول\"\r\n              value={person1}\r\n              onChange={(e) => setPerson1(e.target.value)}\r\n              className=\"inputNames\"\r\n            />\r\n          </div>\r\n          <div className=\"input-group\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"الإسم الكامل الثاني\"\r\n              value={person2}\r\n              onChange={(e) => setPerson2(e.target.value)}\r\n              className=\"inputNames\"\r\n            />\r\n          </div>\r\n          <div className='ButtonSection'>\r\n            <button type=\"submit\" className=\"button checkButton\">تحقق من العلاقة</button>\r\n            <button type=\"reset\" className=\"button resetButton\">إلغاء</button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"button swapButton\"\r\n              onClick={() => {\r\n                // Swap the values of person1 and person2\r\n                setPerson1(person2);\r\n                setPerson2(person1);\r\n              }}\r\n            >\r\n              تبديل الأشخاص\r\n            </button>\r\n          </div>  \r\n        </form>\r\n        {(duplicates.person1.length > 0 || duplicates.person2.length > 0) && (\r\n          <aside className=\"duplicates-panel\">\r\n            {duplicates.person1.length > 0 && !selectedPerson1 && (\r\n              <section className=\"duplicates-group\">\r\n                <h3>🧠 أختر الشخص المقصود (الشخص الأول):</h3>\r\n                <table className=\"person-info-table\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>الاسم</th>\r\n                      <th>سنة الميلاد</th>\r\n                      <th>سنة الوفاة</th>\r\n                      <th>اختيار</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {duplicates.person1.map((p, idx) => {\r\n                      const fullName =\r\n                        (p.name ? `${translateName(p.name)} بن ` : '') +\r\n                        (p.father ? `${translateName(p.father)} بن ` : '') +\r\n                        (p.grandfather ? `${translateName(p.grandfather)} ` : '') +\r\n                        (p.lastName ? `${translateName(p.lastName)}` : '');\r\n                        \r\n                      return (\r\n                        <tr key={`p1-${idx}`}>\r\n                          <td>{fullName}</td>\r\n                          <td>{p.YoB !== -1 ? p.YoB : ''}</td>\r\n                          <td>{p.YoD !== -1 ? p.YoD : ''}</td>\r\n                          <td>\r\n                            <button\r\n                              type=\"button\"\r\n                              className=\"duplicate-button\"\r\n                              onClick={() => {\r\n                                setSelectedPerson1(fullName);\r\n                              }}\r\n                            >\r\n                              اختيار\r\n                            </button>\r\n\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n              </section>\r\n\r\n            )}\r\n\r\n            {duplicates.person2.length > 0 && !selectedPerson2 && (\r\n              <section className=\"duplicates-group\">\r\n                <h3>🧠 أختر الشخص المقصود (الشخص الثاني):</h3>\r\n                <table className=\"person-info-table\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>الاسم</th>\r\n                      <th>سنة الميلاد</th>\r\n                      <th>سنة الوفاة</th>\r\n                      <th>اختيار</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {duplicates.person2.map((p, idx) => {\r\n                      const fullName =\r\n                        (p.name ? `${translateName(p.name)} بن ` : '') +\r\n                        (p.father ? `${translateName(p.father)} بن ` : '') +\r\n                        (p.grandfather ? `${translateName(p.grandfather)} ` : '') +\r\n                        (p.lastName ? `${translateName(p.lastName)}` : '');\r\n                      \r\n                      return (\r\n                        <tr key={`p2-${idx}`}>\r\n                          <td>{fullName}</td>\r\n                          <td>{p.YoB !== -1 ? p.YoB : ''}</td>\r\n                          <td>{p.YoD !== -1 ? p.YoD : ''}</td>\r\n                          <td>\r\n                            <button\r\n                              type=\"button\"\r\n                              className=\"duplicate-button\"\r\n                              onClick={() => {\r\n                                setSelectedPerson2(fullName);\r\n                                // findRelationship(person1);\r\n                              }}\r\n                            >\r\n                              اختيار\r\n                            </button>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n              </section>\r\n\r\n\r\n\r\n\r\n      )}\r\n\r\n\r\n    </aside>\r\n    )}\r\n\r\n      </section>\r\n\r\n      {error && <div className=\"error-message\">{error}</div>} {/* Show the error message */}\r\n      {loading && (\r\n        <div className=\"loading-message\">\r\n          <div className=\"spinner\"></div>\r\n          <p>{loadingMessage}</p>\r\n        </div>\r\n      )}\r\n      {}\r\n      {!loading && relationship && !error  && (\r\n        <section className=\"relationship-result\">\r\n          <div className=\"foundPersons\">\r\n          <h2 id=\"resultTitle\">الأشخاص الذين تم البحث عنهم:</h2>\r\n          <div className=\"person-card\">\r\n          <h4>\r\n            {translateName(relationship.relationshipPerson1Details?.name ?? '')} \r\n            {relationship.relationshipPerson1Details?.father && ` بن ${translateName(relationship.relationshipPerson1Details.father)}`} \r\n            {relationship.relationshipPerson1Details?.grandfather && ` بن ${translateName(relationship.relationshipPerson1Details.grandfather)}`} \r\n            {relationship.relationshipPerson1Details?.lastName && ` ${translateName(relationship.relationshipPerson1Details.lastName)}`}\r\n          </h4>\r\n        </div>\r\n\r\n        <div className=\"person-card\">\r\n          <h4>\r\n            {translateName(relationship.relationshipPerson2Details?.name ?? '')} \r\n            {relationship.relationshipPerson2Details?.father && ` بن ${translateName(relationship.relationshipPerson2Details.father)}`} \r\n            {relationship.relationshipPerson2Details?.grandfather && ` بن ${translateName(relationship.relationshipPerson2Details.grandfather)}`} \r\n            {relationship.relationshipPerson2Details?.lastName && ` ${translateName(relationship.relationshipPerson2Details.lastName)}`}\r\n          </h4>\r\n        </div>\r\n\r\n        </div>\r\n\r\n\r\n          <h2 id=\"resultTitle\">نتيجة العلاقة</h2>\r\n          <p className=\"relationText\">{relationship.relationshipDescription}</p>\r\n          <div className=\"result-details\">\r\n            <table className=\"result-table\">\r\n              <tbody>\r\n                <tr>\r\n                  <th>درجة العلاقة</th>\r\n                  <td className=\"score-cell\">\r\n                    <div className=\"score-bar-wrapper\">\r\n                      <div className=\"score-bar-fill\" style={{ width: `${relationship.relationshipScore ?? 0}%` }}></div>\r\n                    </div>\r\n                    <div className=\"score-meta\">\r\n                      <span className=\"score-value\">{relationship.relationshipScore ?? 'N/A'}</span>\r\n                      {relationship.relationshipScore !== null && relationship.relationshipScore !== undefined && (\r\n                        <span className={\r\n                          relationship.relationshipScore >= 80\r\n                            ? \"score-category high\"\r\n                            : relationship.relationshipScore >= 60\r\n                            ? \"score-category medium\"\r\n                            : \"score-category low\"\r\n                        }>\r\n                          {\r\n                            relationship.relationshipScore >= 80\r\n                              ? \"قوية\"\r\n                              : relationship.relationshipScore >= 60\r\n                              ? \"متوسطة\"\r\n                              : \"ضعيفة\"\r\n                          }\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>نوع العلاقة</th>\r\n                  <td className=\"relationship-tag\">\r\n                    <span className={`tag ${relationship.relationshipType}`}>\r\n                      {relationship.relationshipType === \"Blood\" ? \"دم\" :\r\n                      relationship.relationshipType === \"Marriage-related\" ? \"زواج مرتبط\" :\r\n                      relationship.relationshipType === \"Marriage\" ? \"زواج\" :\r\n                      relationship.relationshipType}\r\n                    </span>\r\n                  </td>\r\n\r\n                </tr>\r\n                <tr>\r\n                  <th>تفسير إضافي</th>\r\n                  <td className=\"relation-explanation\">\r\n                    <span className='relation-explanation-type'>\r\n                      {relationship.relationshipExplanationType ?? 'نوع التفسير غير متاح'}\r\n                    </span>: \r\n                    {relationship.relationshipExplanationDesc ?? \"لا يوجد تفسير متاح.\"}\r\n                  </td>\r\n\r\n                </tr>\r\n                <tr>\r\n                  <th>عدد الأجيال بينهما حسب الجد المشترك</th>\r\n                  <td className=\"generation-distance\">\r\n                    <div className=\"tooltip-container\">\r\n                      <span id=\"numGen\">{relationship.relationshipGenerationGap ?? '-'}</span> أجيال\r\n                      <div className=\"custom-tooltip\">\r\n                        عدد الأجيال هو عدد الأشخاص الفاصلين في شجرة العائلة بين الشخصين.\r\n                      </div>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>\r\n                    <div className=\"tooltip-container\">\r\n                      الجد المشترك\r\n                      <span className=\"custom-tooltip\">\r\n                        عدد الأجيال هو عدد الأشخاص الفاصلين في شجرة العائلة بين الشخصين.\r\n                      </span>\r\n                    </div>\r\n                  </th>\r\n                  <td className=\"generation-distance\">\r\n                    {relationship.commonAncestor?.ancestorName && `${relationship.commonAncestor?.ancestorName} بن `}\r\n                    {relationship.commonAncestor?.ancestorFatherName && `${relationship.commonAncestor?.ancestorFatherName} بن `}\r\n                    {relationship.commonAncestor?.ancestorGrandFatherName && `${relationship.commonAncestor?.ancestorGrandFatherName} `}\r\n                    {relationship.commonAncestor?.ancestorLastName && `${relationship.commonAncestor?.ancestorLastName}`}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n              <h2 id=\"resultTitle\">شجرة العائلة الي تجمع الشخصين :</h2>\r\n\r\n            <div className=\"tree-wrapper\" style={{\r\n              height: `${Math.max(\r\n                ((Math.max(relationship.relationshipLevels?.levelFromP1 ?? 0, relationship.relationshipLevels?.levelFromP2 ?? 0)) + 1) * 100,\r\n                100 // Ensure minimum height is 100px\r\n              ) + 1}px`\r\n            }}>\r\n\r\n                <div className='titleTree'>\r\n                </div>\r\n                {relationship.ancestorstreeData && (\r\n                <div className=\"tree-container\">\r\n                  <Tree\r\n                    data={relationship.ancestorstreeData}\r\n                    orientation=\"vertical\"\r\n                    pathFunc=\"step\"\r\n                    nodeSize={{ x: 50, y: 90 }}\r\n                    separation={{ siblings: 3, nonSiblings: 3 }}\r\n                    translate={{ x: 325, y: 27 }} \r\n                    renderCustomNodeElement={({ nodeDatum }) => (\r\n                     <g className=\"tree-node\">\r\n                        <title>{nodeDatum.id}</title>\r\n                        <rect\r\n                          className=\"tree-node-rect\"\r\n                          x=\"-50\"\r\n                          y=\"-20\"\r\n                          width=\"100\"\r\n                          height=\"40\"\r\n                          style={{\r\n                            fill: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID\r\n                              ? '#d3f9d8'  // Leaf node color (light green)\r\n                              : nodeDatum.id === relationship.commonAncestor.ancestorID\r\n                              ? '#ffe4b5'  // Ancestor node color (light yellow)\r\n                              : '#ffffff', // Default color for other nodes\r\n                            stroke: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID\r\n                              ? '#4caf50'  // Leaf node border (green)\r\n                              : nodeDatum.id === relationship.commonAncestor.ancestorID\r\n                              ? '#ffa500'  // Ancestor node border (orange)\r\n                              : '#4a90e2', // Default border color\r\n                            strokeWidth: '2.5px',\r\n                            rx: '10',  // Rounded corners\r\n                            ry: '10',  // Rounded corners\r\n                          }}\r\n                        />\r\n                        <text\r\n                          className=\"tree-node-text\"\r\n                          x=\"0\"\r\n                          y=\"5\"\r\n                          style={{\r\n                            fontSize: '16px',\r\n                            fontFamily: 'Cairo',\r\n                            fill: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID\r\n                              ? '#388e3c'  // Leaf node text color (dark green)\r\n                              : nodeDatum.id === relationship.commonAncestor.ancestorID\r\n                              ? '#ff9800'  // Ancestor node text color (orange)\r\n                              : '#333',    // Default text color (dark gray)\r\n                            textAnchor: 'middle',\r\n                            dominantBaseline: 'middle',\r\n                            letterSpacing: '1px',\r\n                            strokeWidth: '1px',\r\n                            pointerEvents: 'none',\r\n                          }}\r\n                        >\r\n                          {translateName(nodeDatum.name)}\r\n                        </text>\r\n                      </g>\r\n                    )}\r\n                  />\r\n                </div>\r\n              )}\r\n               </div>\r\n          </div>\r\n        </section>\r\n      )}\r\n    </main>\r\n  </div>\r\n  \r\n  );\r\n};\r\n\r\nexport default RelationPage;\r\n","D:\\Study\\Projects\\Copy 4\\client\\src\\components\\StatisticsDashboard.js",["54","55"],"D:\\Study\\Projects\\Copy 4\\client\\src\\components\\mainPage.js",["56"],"import React from 'react';\r\nimport './mainPage.css';  // تأكد من استيراد ملف الـ CSS\r\nimport WeddingPage from './weddings';\r\nimport { useNavigate } from 'react-router-dom'; // Import the useNavigate hook\r\n\r\nconst MainPage = () => {\r\n  const navigate = useNavigate(); // Initialize navigate function\r\n\r\n  const handleClick = () => {\r\n    navigate('/weddingsDates'); // This will navigate to the WeddingPage\r\n  };\r\n\r\n  return (\r\n    <div className=\"mainPage\">\r\n      <div className='welcome'>\r\n        <div className=\"welcomeMessage\">\r\n          <h1>مرحباً بكم في موقع قصر أولاد بوبكر</h1>\r\n          <p>اكتشف التاريخ، الأنساب، والمزيد عن العرش العريق.</p>\r\n        </div>\r\n        \r\n      </div>\r\n      <div className=\"description\">\r\n        <h2>لماذا اخترنا بناء هذا الموقع؟</h2>\r\n        <p>\r\n          تم إنشاء موقع <strong>قصر أولاد بوبكر</strong> \r\n          .ليكون المرجع الرقمي الأول لتاريخ وأنساب العرش، حيث نوثق كل فرد، وكل علاقة، وكل قصة ضمن شجرة عائلية ضخمة يمكن للجميع تصفحها.\r\n          تكمن قيمة هذا الموقع في المحافظة على تاريخ العرش ، حيث يمكن للأجيال الجديدة التعرف على أنسابها وأجدادها ،\r\n           ومن اجل المحافظة على صلة الرحم والعلاقات بين العائلات\r\n        </p>\r\n\r\n        <div className=\"features-cards\">\r\n          <div className=\"feature-card\">\r\n            <span className=\"emoji\">🌳</span>\r\n            <p>عرض تفاعلي لشجرة العائلة منذ الجد الأول حتى الأجيال الحالية</p>\r\n          </div>\r\n          <div className=\"feature-card\">\r\n            <span className=\"emoji\">🔍</span>\r\n            <p>إمكانية البحث عن أي فرد ومعرفة تسلسله ومكانه في العائلة</p>\r\n          </div>\r\n          <div className=\"feature-card\">\r\n            <span className=\"emoji\">💡</span>\r\n            <p>تصميم بسيط وجذاب يسهل التصفح والفهم</p>\r\n          </div>\r\n          <div className=\"feature-card\">\r\n            <span className=\"emoji\">📊</span>\r\n            <p>إحصائيات وحقائق مذهلة حول العرش وتوزع الأفراد</p>\r\n          </div>\r\n          <div className=\"feature-card\">\r\n            <span className=\"emoji\">🔗</span>\r\n            <p>\r\n              أداة تمكنك من التعرّف على العلاقة الي تربط بين اي شخصين في الشجرة ،\r\n              سواءًا كانت قرابة عائلة أو علاقة زواج أو حتى علاقة نسب\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"wedding-feature-card\">\r\n          <div className=\"overlay\">\r\n            <span className=\"emoji\"></span>\r\n            <div className='weddingfeaturetext'>\r\n              <p>\r\n              لا مزيد من الطريقة التقليدية للإعلان عن حفلات الزواج! يمكنكم الآن بفضل أداء <strong>\"أعراسنا\"</strong> \r\n              معرفة تواريخ الأعراس القادمة وتفاصيلها بكل سهولة واحترافية.\r\n              </p>\r\n              <button type='button' className='discoverNow' onClick={handleClick}>إكتشف الآن</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"cards-container\">\r\n          <div className=\"card\" onClick={() => window.location.href = \"https://www.facebook.com/profile.php?id=100036538128995\"}\r\n>\r\n           <div className=\"card-background-school-bg\" ></div>\r\n            <div className=\"card-content\">\r\n              <h4>المدرسة</h4>\r\n              <p>\r\n                مدرسة قصر أولاد بوبكر تعد من المؤسسات التعليمية الرائدة في المنطقة، \r\n                حيث تقدم تعليماً متميزاً لأجيالنا القادمة.\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"card\">\r\n            <div className=\"card-background-mosque-bg\"></div>\r\n            <div className=\"card-content\">\r\n              <h4>المسجد</h4>\r\n              <p>\r\n                المسجد في قصر أولاد بوبكر يعتبر مركزًا روحيًا مهمًا حيث يجتمع الأهالي للصلاة والعبادات.\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"card\">\r\n            <div className=\"card-background-ksour-bg\"></div>\r\n            <div className=\"card-content\">\r\n              <h4>القصور</h4>\r\n              <p>\r\n                قصور قصر أولاد بوبكر تعكس تاريخاً غنياً وثقافة عريقة، وتعد من المعالم السياحية في المنطقة.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"cta-section\">\r\n          <div className=\"cta-content\">\r\n            <h2>إبدأ رحلتك معنا الآن</h2>\r\n            <p>\r\n              نحن في مرحلة جديدة من تطوير شجرة العائلة الرقمية. انضم إلينا للمساهمة في تحديثها باستمرار\r\n              وكن جزءًا من بناء المستقبل للأجيال القادمة.\r\n            </p>\r\n          </div>\r\n          <div className=\"cta-actions\">\r\n            <button className=\"cta-button\">استكشف الآن</button>\r\n            <button className=\"cta-secondary-button\">اعرف المزيد</button>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n",{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":1,"column":17,"nodeType":"63","messageId":"64","endLine":1,"endColumn":26},{"ruleId":"61","severity":1,"message":"65","line":1,"column":47,"nodeType":"63","messageId":"64","endLine":1,"endColumn":50},{"ruleId":"61","severity":1,"message":"66","line":23,"column":7,"nodeType":"63","messageId":"64","endLine":23,"endColumn":23},{"ruleId":"61","severity":1,"message":"67","line":92,"column":7,"nodeType":"63","messageId":"64","endLine":92,"endColumn":27},{"ruleId":"61","severity":1,"message":"68","line":154,"column":10,"nodeType":"63","messageId":"64","endLine":154,"endColumn":19},{"ruleId":"61","severity":1,"message":"62","line":1,"column":35,"nodeType":"63","messageId":"64","endLine":1,"endColumn":44},{"ruleId":"61","severity":1,"message":"69","line":251,"column":10,"nodeType":"63","messageId":"64","endLine":251,"endColumn":21},{"ruleId":"61","severity":1,"message":"70","line":257,"column":21,"nodeType":"63","messageId":"64","endLine":257,"endColumn":33},{"ruleId":"71","severity":1,"message":"72","line":359,"column":13,"nodeType":"73","messageId":"74","endLine":359,"endColumn":35,"fix":"75"},{"ruleId":"71","severity":1,"message":"76","line":359,"column":37,"nodeType":"73","messageId":"74","endLine":359,"endColumn":59,"fix":"77"},{"ruleId":"71","severity":1,"message":"78","line":359,"column":61,"nodeType":"73","messageId":"74","endLine":359,"endColumn":93,"fix":"79"},{"ruleId":"71","severity":1,"message":"80","line":359,"column":95,"nodeType":"73","messageId":"74","endLine":359,"endColumn":117,"fix":"81"},{"ruleId":"61","severity":1,"message":"62","line":1,"column":17,"nodeType":"63","messageId":"64","endLine":1,"endColumn":26},{"ruleId":"82","severity":1,"message":"83","line":1341,"column":24,"nodeType":"84","messageId":"85","endLine":1341,"endColumn":26},{"ruleId":"86","severity":1,"message":"87","line":640,"column":6,"nodeType":"88","endLine":640,"endColumn":8,"suggestions":"89"},{"ruleId":"86","severity":1,"message":"90","line":953,"column":6,"nodeType":"88","endLine":953,"endColumn":19,"suggestions":"91"},{"ruleId":"61","severity":1,"message":"92","line":3,"column":8,"nodeType":"63","messageId":"64","endLine":3,"endColumn":19},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'use' is defined but never used.","'renderFamilyTree' is assigned a value but never used.","'formatFamilyTreeData' is assigned a value but never used.","'translate' is assigned a value but never used.","'treeVisible' is assigned a value but never used.","'setTranslate' is assigned a value but never used.","no-useless-rename","Destructuring assignment personName unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"95","text":"96"},"Destructuring assignment fatherName unnecessarily renamed.",{"range":"97","text":"98"},"Destructuring assignment grandfatherName unnecessarily renamed.",{"range":"99","text":"100"},"Destructuring assignment familyName unnecessarily renamed.",{"range":"101","text":"102"},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'topFamilies' and 'weddingYears'. Either include them or remove the dependency array.","ArrayExpression",["103"],"React Hook useEffect has a missing dependency: 'topFamiliesData'. Either include it or remove the dependency array.",["104"],"'WeddingPage' is defined but never used.","no-global-assign","no-unsafe-negation",[11163,11185],"personName",[11187,11209],"fatherName",[11211,11243],"grandfatherName",[11245,11267],"familyName",{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},"Update the dependencies array to be: [topFamilies, weddingYears]",{"range":"109","text":"110"},"Update the dependencies array to be: [topFamilies, topFamiliesData]",{"range":"111","text":"112"},[20501,20503],"[topFamilies, weddingYears]",[29319,29332],"[topFamilies, topFamiliesData]"]