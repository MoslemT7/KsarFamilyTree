[{"D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\index.js":"1","D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\App.js":"2","D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\components\\FamilyTree.js":"3","D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\components\\RelationChecker.js":"4","D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\components\\StatisticsDashboard.js":"5","D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\components\\SearchPage.js":"6","D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\components\\weddings.js":"7"},{"size":290,"mtime":1744565996798,"results":"8","hashOfConfig":"9"},{"size":2711,"mtime":1746312949606,"results":"10","hashOfConfig":"9"},{"size":7049,"mtime":1746059399454,"results":"11","hashOfConfig":"9"},{"size":46342,"mtime":1746835896353,"results":"12","hashOfConfig":"9"},{"size":41458,"mtime":1746573057270,"results":"13","hashOfConfig":"9"},{"size":27032,"mtime":1746315418831,"results":"14","hashOfConfig":"9"},{"size":2376,"mtime":1746312744973,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"6rb0pv",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\index.js",[],["34","35"],"D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\App.js",[],"D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\components\\FamilyTree.js",["36","37"],"import React, { useEffect, useState , useRef } from 'react';\r\nimport Tree from 'react-d3-tree';\r\nimport './FamilyTree.css';\r\nrequire('dotenv').config();\r\n\r\nconst translations = require('./translation.json');\r\n\r\nconst neo4jURI = process.env.REACT_APP_NEO4J_URI;\r\nconst neo4jUser = process.env.REACT_APP_NEO4J_USER;\r\nconst neo4jPassword = process.env.REACT_APP_NEO4J_PASSWORD;\r\n\r\nconst driver = require('neo4j-driver').driver(\r\n    neo4jURI,\r\n    require('neo4j-driver').auth.basic(neo4jUser, neo4jPassword)\r\n);\r\n\r\n\r\nconst session = driver.session();\r\n\r\nlet uniqueKeyCounter = 0;\r\nexport const translateName = (name) => {\r\n  return translations[name] || name;\r\n};\r\n\r\nconst renderFamilyTree = (person, parentId = null, level = 0) => {\r\n  const uniqueKey = `${person.name}-${person.lastName}-${parentId}-${level}-${uniqueKeyCounter++}`;\r\n\r\n  return (\r\n    <div key={uniqueKey}>\r\n      <div>\r\n        <strong>{person.name} {person.lastName}</strong>\r\n      </div>\r\n      {person.children && person.children.length > 0 && (\r\n        <div style={{ marginLeft: '20px' }}>\r\n          {person.children.map((child) => renderFamilyTree(child, person.id, level + 1))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst fetchFamilyTree = async () => {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/family-tree');\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Server error');\r\n    }\r\n\r\n    const data = await response.json(); // Parse JSON if response is valid\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching family tree:', error.message);\r\n    return [];\r\n  }\r\n};\r\n\r\nconst formatFamilyTreeData = (person) => {\r\n  const children = person.children && person.children.length > 0\r\n    ? person.children.map(formatFamilyTreeData) // Recursively format children\r\n    : [];\r\n\r\n  return {\r\n    name: `${person.name} ${person.lastName}`,\r\n    children: children // Include children for each person\r\n  };\r\n};\r\n\r\nconst getChildrenOfFather = (fatherId, allPeople) => {\r\n  const father = allPeople.filter(father => father.id === fatherId)[0];  \r\n  return father && father.children ? father.children : [];  \r\n};\r\n\r\nconst buildTree = (person, allPeople) => {\r\n  if (!person) return null;\r\n\r\n  const children = getChildrenOfFather(person.id, allPeople)\r\n    .map(child => buildTree(child, allPeople))\r\n    .filter(Boolean); \r\n\r\n    \r\n    return {\r\n      id: person.id,\r\n      name: translateName(person.name),\r\n      children: children.length > 0 ? children : undefined,\r\n    };\r\n};\r\n\r\nconst getGenderbyID = async (personID) => {\r\n  const session = driver.session(); // Open a session\r\n\r\n  try {\r\n    // Fix the parameter name to match the query variable\r\n    const result = await session.run(\r\n      `MATCH (p:Person) WHERE id(p) = $personId \r\n      RETURN p.gender AS gender`,\r\n      { personId: personID } // Ensure the key matches the query's parameter\r\n    );\r\n    \r\n    if (result.records.length > 0) {\r\n      const gender = result.records[0].get('gender');\r\n      return gender; // Return the gender value\r\n    } else {\r\n      console.log(`No person found with the ID ${personID}`);\r\n      return null; // Return null when no person is found\r\n    }\r\n  } catch (error) {\r\n    console.error('Error retrieving gender:', error);\r\n    return null; // Return null in case of an error\r\n  } finally {\r\n    await session.close(); // Always close the session after the query\r\n  }\r\n};\r\n\r\nconst FamilyTree = ({ searchQuery }) => {\r\n  const treeContainerRef = useRef(null);\r\n  const [familyTree, setFamilyTree] = useState(null);\r\n  const [husbandId, setHusbandId] = useState(null);\r\n  const [translate, setTranslate] = useState({ x: 0, y: 0 });\r\n  const nodePositions = useRef({});\r\n\r\n  const handleWomanClick = async (person) => {\r\n    const gender = await getGenderbyID(person.id);\r\n    if (gender !== \"Female\") return;\r\n\r\n    try {\r\n      const result = await session.run(\r\n        `\r\n        MATCH (w:Person)-[:WIFE_OF]-(h:Person)\r\n        WHERE id(w) = $womanId\r\n        RETURN id(h) as HusbandID\r\n        LIMIT 1\r\n      `,\r\n        { womanId: person.id }\r\n      );\r\n\r\n      if (result.records.length > 0) {\r\n        const husband = result.records[0].get(\"HusbandID\").toNumber();\r\n        const coords = nodePositions.current[husband];\r\n        const container = treeContainerRef.current;\r\n\r\n        if (coords && container) {\r\n          const bounds = container.getBoundingClientRect();\r\n          setTranslate({\r\n            x: bounds.width / 2 - coords.x,\r\n            y: bounds.height / 2 - coords.y,\r\n          });\r\n        }\r\n\r\n        setHusbandId(husband);\r\n      } else {\r\n        console.log(\"No husband found for\", person.name);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching husband:\", error);\r\n    } finally {\r\n      await session.close();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const loadFamilyTree = async () => {\r\n      try {\r\n        const people = await fetchFamilyTree();\r\n        if (Array.isArray(people) && people.length > 0) {\r\n          const rootPerson = people.find((p) => p.id === 17); // ROOT\r\n          const treeData = buildTree(rootPerson, people);\r\n          setFamilyTree(treeData);\r\n        } else {\r\n          console.warn(\"Empty or invalid people data\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error loading family tree:\", error);\r\n      }\r\n    };\r\n\r\n    loadFamilyTree();\r\n  }, []);\r\n\r\n  if (!familyTree) return <div>Loading...</div>;\r\n  console.log(familyTree);\r\n  return (\r\n    <div\r\n      id=\"treeWrapper\"\r\n      ref={treeContainerRef}\r\n      style={{ width: \"100vw\", height: \"100vh\" }}\r\n    >\r\n      <Tree\r\n        data={familyTree}\r\n        orientation=\"vertical\"\r\n        pathFunc=\"step\"\r\n        translate={translate}\r\n        nodeSize={{ x: 100, y: 100 }} // Adjust node size if needed\r\n        separation={{ siblings: 1, nonSiblings: 2 }} // Adjust separation between nodes\r\n        renderCustomNodeElement={({ nodeDatum, hierarchyPointNode }) => {\r\n          const isHusband = nodeDatum.id === husbandId;\r\n\r\n          // Record node position\r\n          nodePositions.current[nodeDatum.id] = {\r\n            x: hierarchyPointNode.x,\r\n            y: hierarchyPointNode.y,\r\n          };\r\n\r\n          return (\r\n            <g\r\n              onClick={() => handleWomanClick(nodeDatum)}\r\n              style={{ cursor: \"pointer\" }}\r\n            >\r\n              <title>{nodeDatum.id}</title>\r\n              <rect\r\n                x=\"-50\"\r\n                y=\"-20\"\r\n                width=\"100\"\r\n                height=\"40\"\r\n                fill={isHusband ? \"lightgreen\" : \"#a8e6cf \"}\r\n                stroke=\"black\"\r\n                strokeWidth=\"2\"\r\n                rx=\"8\"\r\n              />\r\n              <text\r\n                x=\"0\"\r\n                y=\"5\"\r\n                fontSize=\"24\"\r\n                textAnchor=\"middle\"\r\n                fill=\"black\"\r\n              >\r\n                {nodeDatum.name}\r\n              </text>\r\n            </g>\r\n          );\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FamilyTree;","D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\components\\RelationChecker.js",["38","39"],"D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\components\\StatisticsDashboard.js",["40","41"],"import { useEffect, useState } from 'react';\r\nimport React, { useRef } from 'react';\r\nimport './StatisticsDashboard.css';\r\nimport Chart from 'chart.js/dist/chart.js';\r\n\r\nconst translations = require('./translation.json');\r\nrequire('dotenv').config();\r\n\r\n\r\nconst neo4jURI = process.env.REACT_APP_NEO4J_URI;\r\nconst neo4jUser = process.env.REACT_APP_NEO4J_USER;\r\nconst neo4jPassword = process.env.REACT_APP_NEO4J_PASSWORD;\r\n\r\nconst driver = require('neo4j-driver').driver(\r\n    neo4jURI,\r\n    require('neo4j-driver').auth.basic(neo4jUser, neo4jPassword)\r\n);\r\nconst totalPopulation = async () => {\r\n  const session = driver.session();\r\n  try {\r\n    const result = await session.run(`\r\n      MATCH (n:Person)\r\n      RETURN count(n) AS total\r\n    `);\r\n    return result.records[0].get('total').toInt();\r\n  } catch (error) {\r\n    console.error(\"Error counting population:\", error);\r\n    return 0;\r\n  } finally {\r\n    await session.close();\r\n  }\r\n};\r\n\r\nconst averageChildrenPerFamily = async () => {\r\n  const session = driver.session();\r\n  try {\r\n    const result = await session.run(`\r\n      MATCH (f:Person)-[:FATHER_OF]->(c:Person)\r\n      WITH f, count(c) AS num_children\r\n      RETURN avg(num_children) AS average_children\r\n    `);\r\n\r\n    if (result.records.length > 0) {\r\n      const average_children = result.records[0].get('average_children');  // Extract the value\r\n      return parseFloat(average_children.toFixed(2));\r\n    } else {\r\n      return null;  // Return null if no result is found\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching average number of children:\", error);\r\n    return null;  // Return null in case of an error\r\n  } finally {\r\n    await session.close();\r\n  }\r\n}\r\n\r\nconst oldestPerson = async () => {\r\n  const session = driver.session();\r\n  try {\r\n    const result = await session.run(`\r\n      MATCH (n:Person)\r\n      WHERE n.YoB IS NOT NULL AND n.isAlive = true\r\n      WITH n\r\n      ORDER BY n.YoB ASC\r\n      LIMIT 1\r\n      OPTIONAL MATCH (n)<-[:FATHER_OF]-(father:Person)\r\n      OPTIONAL MATCH (father)<-[:FATHER_OF]-(grandfather:Person)\r\n      RETURN \r\n        n.name AS Name, \r\n        n.lastName AS lastName, \r\n        n.YoB AS YoB,\r\n        father.name AS fatherName,\r\n        grandfather.name AS grandfatherName\r\n    `);\r\n\r\n    if (result.records.length > 0) {\r\n      const record = result.records[0];\r\n      const yobRaw = record.get(\"YoB\");\r\n      const yob = parseFloat(yobRaw);\r\n      const age = new Date().getFullYear() - yob;\r\n      return {\r\n        name: record.get(\"Name\") || '',\r\n        lastName: record.get(\"lastName\") || '',\r\n        fatherName: record.get(\"fatherName\") || '',\r\n        grandfatherName: record.get(\"grandfatherName\") || '',\r\n        age\r\n      };\r\n    } else {\r\n      return { name: \"غير معروف\", lastName: \"\", fatherName: \"\", grandfatherName: \"\", age: \"-\" };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching oldest person:\", error);\r\n    return { name: \"خطأ\", lastName: \"\", fatherName: \"\", grandfatherName: \"\", age: \"-\" };\r\n  } finally {\r\n    await session.close();\r\n  }\r\n};\r\n\r\nconst youngestPerson = async () => {\r\n  const session = driver.session();\r\n  try {\r\n    const result = await session.run(`\r\n      MATCH (n:Person)\r\n      WHERE n.YoB IS NOT NULL AND n.isAlive = true\r\n      WITH n\r\n      ORDER BY n.YoB DESC\r\n      LIMIT 1\r\n      OPTIONAL MATCH (n)<-[:FATHER_OF]-(father:Person)\r\n      OPTIONAL MATCH (father)<-[:FATHER_OF]-(grandfather:Person)\r\n      RETURN \r\n        n.name AS Name, \r\n        n.lastName AS lastName, \r\n        n.YoB AS YoB,\r\n        father.name AS fatherName,\r\n        grandfather.name AS grandfatherName\r\n    `);\r\n\r\n    if (result.records.length > 0) {\r\n      const record = result.records[0];\r\n      const yobRaw = record.get(\"YoB\");\r\n      const yob = parseFloat(yobRaw);\r\n      const age = new Date().getFullYear() - yob;\r\n      return {\r\n        name: record.get(\"Name\") || '',\r\n        lastName: record.get(\"lastName\") || '',\r\n        fatherName: record.get(\"fatherName\") || '',\r\n        grandfatherName: record.get(\"grandfatherName\") || '',\r\n        age\r\n      };\r\n    } else {\r\n      return { name: \"غير معروف\", lastName: \"\", fatherName: \"\", grandfatherName: \"\", age: \"-\" };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching oldest person:\", error);\r\n    return { name: \"خطأ\", lastName: \"\", fatherName: \"\", grandfatherName: \"\", age: \"-\" };\r\n  } finally {\r\n    await session.close();\r\n  }\r\n};\r\n\r\nconst biggestFamily = async () =>{\r\n  const session = driver.session();\r\n    try {\r\n      const result = await session.run(`\r\n        MATCH (father:Person)-[:FATHER_OF]->(child:Person)\r\n        WITH father, COUNT(child) AS childrenCount\r\n        ORDER BY childrenCount DESC\r\n        LIMIT 1\r\n        RETURN father.name AS FatherName, father.lastName AS FatherLastName, childrenCount\r\n\r\n      `);\r\n  \r\n      if (result.records.length > 0) {\r\n        const fatherName = result.records[0].get('FatherName');\r\n        const FatherLastName = result.records[0].get('FatherLastName');\r\n        const childrenCount = result.records[0].get('childrenCount').toNumber();\r\n\r\n        return { fatherName, FatherLastName, childrenCount};\r\n      } else {\r\n        return { fatherName:\"-\", FatherLastName:\"-\", childrenCount : -1 };\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching average age:\", error);\r\n      return { fatherName: \"-\", FatherLastName:\"-\", childrenCount : \"-\"};\r\n    } finally {\r\n      await session.close();\r\n    }\r\n};\r\n\r\nconst topAbroadCountry = async () =>{\r\n  const session = driver.session();\r\n    try {\r\n      const result = await session.run(`\r\n        MATCH (p:Person)\r\n        WHERE p.WorkCountry IS NOT NULL\r\n        RETURN COUNT(p) AS abroadPeople, p.WorkCountry\r\n        LIMIT 1\r\n      `);\r\n  \r\n      if (result.records.length > 0) {\r\n        const countryCount = result.records[0].get('abroadPeople').toNumber();\r\n        const countryName = result.records[0].get('p.WorkCountry');\r\n\r\n        return { countryCount, countryName};\r\n      } else {\r\n        return { countryCount:\"-\", countryName:\"-\"};\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching average age:\", error);\r\n      return { countryCount: \"-\", countryName:\"-\"};\r\n    } finally {\r\n      await session.close();\r\n    }\r\n};\r\n\r\nconst averageAge = async () => {\r\n    const session = driver.session();\r\n    try {\r\n      const result = await session.run(`\r\n        MATCH (n:Person)\r\n        WHERE n.YoB IS NOT NULL\r\n        RETURN AVG(n.YoB) AS averageYoB\r\n      `);\r\n  \r\n      if (result.records.length > 0) {\r\n        const avgYoB = result.records[0].get('averageYoB');\r\n        const currentYear = new Date().getFullYear();\r\n        const averageAge = Math.round(currentYear - avgYoB);\r\n        return { averageAge };\r\n      } else {\r\n        return { averageAge: \"-\" };\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching average age:\", error);\r\n      return { averageAge: \"-\" };\r\n    } finally {\r\n      await session.close();\r\n    }\r\n};\r\n\r\nconst medianAge = async () => {\r\n  const session = driver.session();\r\n  try {\r\n    const result = await session.run(`\r\n      MATCH (n:Person)\r\n      WHERE n.YoB IS NOT NULL AND n.isAlive = true\r\n      WITH COLLECT(n.YoB) AS ages\r\n      WITH \r\n        ages, \r\n        SIZE(ages) AS totalCount, \r\n        CASE\r\n          WHEN SIZE(ages) % 2 = 1 THEN\r\n            ages[(SIZE(ages) / 2)]\r\n          ELSE\r\n            (ages[(SIZE(ages) / 2) - 1] + ages[SIZE(ages) / 2]) / 2.0\r\n        END AS medianAge\r\n      RETURN medianAge\r\n    `);\r\n\r\n    if (result.records.length > 0) {\r\n      const avgYoB = result.records[0].get('medianAge');\r\n      const currentYear = new Date().getFullYear();\r\n      const medianAge = Math.round(currentYear - avgYoB);\r\n      return { medianAge };\r\n    } else {\r\n      return { medianAge: \"-\" };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching average age:\", error);\r\n    return { medianAge: \"-\" };\r\n  } finally {\r\n    await session.close();\r\n  }\r\n};\r\n\r\nconst agedPersonCount = async () => {\r\n  const session = driver.session();\r\n  try {\r\n    const result = await session.run(`\r\n      MATCH (n:Person)\r\n      WHERE n.YoB IS NOT NULL AND n.isAlive = true\r\n      WITH n, (date().year - n.YoB) AS age\r\n      WHERE age > 100\r\n      RETURN COUNT(n) as agedPeopleCount\r\n    `);\r\n\r\n    if (result.records.length > 0) {\r\n      const record = result.records[0];\r\n      return {\r\n        count: record.get(\"agedPeopleCount\").toNumber(),\r\n      };\r\n    } else {\r\n      return { count : -1};\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching oldest person:\", error);\r\n    return { count: \"خطأ\"};\r\n  } finally {\r\n    await session.close();\r\n  }\r\n};\r\n\r\nconst SexCount = async () => {\r\n    const session = driver.session();\r\n    try {\r\n      const resultM = await session.run(`\r\n        MATCH (n:Person)\r\n        WHERE n.gender = 'Male'\r\n        RETURN COUNT(n) AS MaleCount\r\n      `);\r\n      const resultF = await session.run(`\r\n        MATCH (n:Person)\r\n        WHERE n.gender = 'Female'\r\n        RETURN COUNT(n) AS FemaleCount\r\n      `);\r\n  \r\n      if (resultM.records.length > 0 && resultF.records.length > 0) {\r\n        const maleCount = resultM.records[0].get('MaleCount').toNumber(); // ensure it's a number\r\n        const femaleCount = resultF.records[0].get('FemaleCount').toNumber(); // ensure it's a number\r\n        return { maleCount, femaleCount };\r\n      } else {\r\n        return { maleCount: \"-\", femaleCount: \"-\" };\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching gender counts:\", error);\r\n      return { maleCount: \"-\", femaleCount: \"-\" };\r\n    } finally {\r\n      await session.close();\r\n    }\r\n};\r\n\r\nexport const translateName = (fullName, language = true) => {\r\n  const nameParts = fullName.split(' ');\r\n\r\nconst reverseTranslations = Object.fromEntries(\r\n  Object.entries(translations).map(([key, value]) => [value, key])\r\n);\r\n\r\n  const dict = language ? translations : reverseTranslations;\r\n\r\n  const translatedParts = nameParts.map(part => dict[part] || part);\r\n\r\n  return translatedParts.join(' ');\r\n};\r\n\r\nconst totalAlivePopulation = async () => {\r\n    const session = driver.session();\r\n    try {\r\n      const result = await session.run(`\r\n        MATCH (n:Person)\r\n        WHERE n.isAlive = True\r\n        RETURN count(n) AS total\r\n      `);\r\n      return result.records[0].get('total').toNumber();\r\n    } catch (error) {\r\n      console.error(\"Error counting population:\", error);\r\n      return 0;\r\n    } finally {\r\n      await session.close();\r\n    }\r\n};\r\n\r\nconst mostUsedFamilyName = async () => {\r\n  const session = driver.session();\r\n    try {\r\n      const result = await session.run(`\r\n        MATCH (p:Person)\r\n        WHERE p.name IS NOT NULL\r\n        RETURN p.lastName AS lastName, count(*) AS occurrences\r\n        ORDER BY occurrences DESC\r\n        LIMIT 5\r\n      `);\r\n      return {familyName: result.records[0].get('lastName'), \r\n              occurences: (result.records[0].get('occurrences').toNumber())\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error counting population:\", error);\r\n      return 0;\r\n    } finally {\r\n      await session.close();\r\n    }\r\n};\r\n\r\nconst unmariedMales = async () => {\r\n  const session = driver.session();\r\n    try {\r\n      const result = await session.run(`\r\n       MATCH (p:Person)\r\n      WHERE p.gender = 'Male' \r\n        AND p.YoB IS NOT NULL \r\n        AND (2025 - p.YoB) > 35 \r\n        AND NOT EXISTS((p)-[:HUSBAND_OF]->()) // Check if there are no marriage relations\r\n      RETURN COUNT(p) AS unmarriedMenOver35\r\n      `);\r\n      return result.records[0].get('unmarriedMenOver35').toNumber();\r\n    } catch (error) {\r\n      console.error(\"Error counting population:\", error);\r\n      return 0;\r\n    } finally {\r\n      await session.close();\r\n    }\r\n};\r\n\r\nconst avgMarringAgeMale = async () => {\r\n  const session = driver.session();\r\n    try {\r\n      const result = await session.run(`\r\n        MATCH (p:Person)\r\n        WHERE p.gender = 'Male' \r\n        AND p.YoB IS NOT NULL AND p.YoM IS NOT NULL\r\n        RETURN SUM(p.YoM - p.YoB)/COUNT(p) AS avgMarringAge\r\n      `);\r\n      return ((result.records[0].get('avgMarringAge')))\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error counting population:\", error);\r\n      return 0;\r\n    } finally {\r\n      await session.close();\r\n    }\r\n};\r\n\r\nconst avgMarringAgeFemale = async () => {\r\n  const session = driver.session();\r\n    try {\r\n      const result = await session.run(`\r\n        MATCH (p:Person)\r\n        WHERE p.gender = 'Female' \r\n        AND p.YoB IS NOT NULL AND p.YoM IS NOT NULL\r\n        RETURN SUM(p.YoM - p.YoB)/COUNT(p) AS avgMarringAge\r\n      `);\r\n      return result.records[0].get('avgMarringAge');\r\n    } catch (error) {\r\n      console.error(\"Error counting population:\", error);\r\n      return 0;\r\n    } finally {\r\n      await session.close();\r\n    }\r\n};\r\n\r\nconst families6pluschildren = async () => {\r\n  const session = driver.session();\r\n    try {\r\n      const result = await session.run(`\r\n        MATCH (f:Person)-[:FATHER_OF]->(c:Person)\r\n        WITH f, count(c) AS childrenCount\r\n        WHERE childrenCount >= 3\r\n        RETURN count(f) AS familiesWith6PlusChildren\r\n      `);\r\n  \r\n      if (result.records.length > 0) {\r\n        return  result.records[0].get('familiesWith6PlusChildren').toNumber() ;\r\n      } else {\r\n        return { count:\"-\"};\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching average age:\", error);\r\n      return { count: \"-\"};\r\n    } finally {\r\n      await session.close();\r\n    }\r\n};\r\n\r\nconst livingAbroad = async () => {\r\n  const session = driver.session();\r\n    try {\r\n      const result = await session.run(`\r\n        MATCH (p:Person)\r\n        WHERE p.WorkCountry IS NOT NULL\r\n        RETURN COUNT(p) AS abroadPeople\r\n      `);\r\n      return result.records[0].get('abroadPeople').toNumber();\r\n    } catch (error) {\r\n      console.error(\"Error counting population:\", error);\r\n      return 0;\r\n    } finally {\r\n      await session.close();\r\n    }\r\n};\r\n\r\nconst familiesNumber = async () => {\r\n  const session = driver.session();\r\n    try {\r\n      const result = await session.run(`\r\n        MATCH (h:Person)-[:HUSBAND_OF]->(w:Person)\r\n        RETURN COUNT(DISTINCT h) AS totalFamilies\r\n      `);\r\n      return result.records[0].get('totalFamilies').toNumber();\r\n    } catch (error) {\r\n      console.error(\"Error counting families:\", error);\r\n      return 0;\r\n    } finally {\r\n      await session.close();\r\n    }\r\n}\r\nconst StatisticsDashboard = () => {\r\n  const [stats, setStats] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [ageDistribution, setAgeDistribution] = useState([]);\r\n  const [cumulativePopulationGrowth, setpopulationGrowth] = useState([]);\r\n  const [weddingData, setWeddingData] = useState([]);\r\n  const [topFamiliesData, setTopFamilies] = useState([]);\r\n\r\n  const weddingYears = [\r\n    2016, 2003, 2014, 2022, 2019, 2012, 2017, 2024, 2024, 2021, 2025,\r\n    2024, 2024, 2024, 2023, 2023, 2023, 2023, 2023, 2022, 2022, 2022,\r\n    2023, 2022, 2021, 2020, 2019, 2023, 2022, 2023, 2021, 2021, 2023,\r\n    2022, 2022, 2022, 2023, 2021, 2021, 2021, 2021, 2021, 2022, 2021,\r\n  ];\r\n  const topFamilies = [\r\n    { family: 'البوبكري', count: 320 },\r\n    { family: 'اللقماني', count: 275 },\r\n    { family: 'الفرحاتي', count: 240 },\r\n    { family: 'السقراطي', count: 215 },\r\n    { family: 'الرحموني', count: 198 }\r\n  ];\r\n  \r\n  const ageDistributionChartRef = useRef(null);\r\n  const genderRatioChartRef = useRef(null);\r\n  const weddingChartRef = useRef(null);\r\n  const cumulativePopulationGrowthRef = useRef(null);\r\n  const topFamiliesRef = useRef(null);\r\n\r\n  let ageDistributionChartInstance = useRef(null);\r\n  let genderRatioChartInstance = useRef(null);\r\n  let weddingChartInstance = useRef(null);\r\n  let cumulativePopulationGrowthInstance = useRef(null);\r\n  let topFamiliesInstance = useRef(null);\r\n\r\n  const ageBins = async () => {\r\n    const session = driver.session();\r\n    try {\r\n      // Run the Cypher query\r\n      const result = await session.run(`\r\n        WITH date().year AS currentYear\r\n        MATCH (p:Person)\r\n        WHERE p.YoB IS NOT NULL AND p.isAlive = true\r\n        WITH currentYear - p.YoB AS age\r\n        WITH CASE\r\n          WHEN age < 3 THEN '0-2'\r\n          WHEN age < 19 THEN '13-18'\r\n          WHEN age < 30 THEN '19-29'\r\n          WHEN age < 13 THEN '3-12'\r\n\r\n          WHEN age < 45 THEN '30-44'\r\n          WHEN age < 60 THEN '45-59'\r\n          WHEN age < 70 THEN '60-69'\r\n          WHEN age < 80 THEN '70-79'\r\n          ELSE '80+'\r\n        END AS ageBin\r\n        RETURN ageBin, count(*) AS count\r\n        ORDER BY ageBin\r\n      `);\r\n  \r\n      const ageDistribution = result.records.map(record => ({\r\n        ageBin: record.get('ageBin'),\r\n        count: record.get('count').toNumber(),\r\n      }));\r\n      return ageDistribution;\r\n    } catch (error) {\r\n      console.error('Error running the query:', error);\r\n    } finally {\r\n      await session.close();\r\n    }\r\n  };\r\n\r\n  const populationGrowth = async () => {\r\n    const session = driver.session();\r\n    try {\r\n      // Run the Cypher query\r\n      const result = await session.run(`\r\n        WITH range(1900, 2025) AS years\r\n        UNWIND years AS year\r\n        MATCH (p:Person)\r\n        WHERE p.YoB <= year\r\n        WITH year, \r\n            count(p) AS cumulativePopulation,\r\n            count(CASE \r\n              WHEN (p.YoD IS NULL OR toInteger(p.YoD) >= year) THEN p \r\n              END) AS alivePopulation\r\n        RETURN year, cumulativePopulation, alivePopulation\r\n        ORDER BY year\r\n      `);\r\n  \r\n      const ageDistribution = result.records.map(record => ({\r\n        year: record.get('year').toNumber(),\r\n        cumulativePopulation: record.get('cumulativePopulation').toNumber(),\r\n        alivePopulation: record.get('alivePopulation').toNumber(),\r\n      }));\r\n      return ageDistribution;\r\n    } catch (error) {\r\n      console.error('Error running the query:', error);\r\n    } finally {\r\n      await session.close();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchStats = async () => {\r\n      try {\r\n        const total = await totalPopulation();\r\n        const totalAlive = await totalAlivePopulation();\r\n        const totalDead = (total-totalAlive).toFixed(1);\r\n        const oldest = await oldestPerson();\r\n        const youngest = await youngestPerson();\r\n      \r\n        const avgAge = await averageAge();\r\n        const medAge = await medianAge();\r\n        const avgChild = await averageChildrenPerFamily();\r\n        const nbrOfAgedPeople = await agedPersonCount();\r\n        const biggestFamilyCount = await biggestFamily();\r\n        const abroadPeoplePercentage = ((await livingAbroad()) * 100 / totalAlive).toFixed(2);\r\n        const topAbroadCountryCount = await topAbroadCountry();\r\n\r\n        const avgMarAgeMale = (await avgMarringAgeMale()).toFixed(0);\r\n        const avgMarAgeFemale = (await avgMarringAgeFemale()).toFixed(0);\r\n        const sixPlusFamilies = await families6pluschildren();\r\n\r\n        const unmariedMalesCount = await unmariedMales();\r\n        const mostUsedFamilyNameCount = await mostUsedFamilyName();\r\n        const { maleCount, femaleCount } = await SexCount();\r\n        const fetchedAgeDistribution = await ageBins();\r\n        const fetchedCumGrowth = await populationGrowth();\r\n        const familiesCount = await familiesNumber();\r\n        setStats({\r\n          totalPopulation: total,\r\n          totalAlivePopulation: totalAlive,\r\n          totalMen: maleCount,\r\n          deadPopulation: totalDead,\r\n          totalWomen: femaleCount,\r\n          averageAge: avgAge.averageAge,\r\n          medianAge: medAge.medianAge,\r\n          agedPeopleCount: nbrOfAgedPeople.count,\r\n          oldestPerson: oldest,\r\n          youngestPerson: youngest,\r\n          biggestFamily: biggestFamilyCount,\r\n          mostUsedFamilyNameCount,\r\n          unmariedMalesCount,\r\n          abroadPeoplePercentage,\r\n          avgMarAgeMale,\r\n          avgMarAgeFemale,\r\n          topAbroadCountryCount,\r\n          sixPlusFamilies: sixPlusFamilies,\r\n          averageChildrenPerFamily: avgChild,\r\n          familiesCount\r\n        });\r\n        setAgeDistribution(fetchedAgeDistribution);\r\n        setpopulationGrowth(fetchedCumGrowth);\r\n        setWeddingData(weddingYears);\r\n        setTopFamilies(topFamilies);\r\n\r\n      } catch (error) {\r\n        console.error('Error fetching stats:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchStats();\r\n  }, []);\r\n\r\n  // AGE DISTRIBUTION DATA\r\n  useEffect(() => {\r\n    if (!ageDistributionChartRef.current || ageDistribution.length === 0) return;\r\n\r\n    // Destroy previous chart if it exists\r\n    if (ageDistributionChartInstance.current) {\r\n      ageDistributionChartInstance.current.destroy();\r\n    }\r\n\r\n    const ctx = ageDistributionChartRef.current.getContext('2d');\r\n\r\n    // Create a new chart instance\r\n    ageDistributionChartInstance.current = new Chart(ctx, {\r\n      type: 'bar',\r\n      data: {\r\n        labels: ageDistribution.map((item) => item.ageBin),\r\n        datasets: [\r\n          {\r\n            label: 'Age Distribution',\r\n            data: ageDistribution.map((item) => item.count),\r\n            backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n            borderColor: 'rgba(54, 162, 235, 1)',\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n            title: {\r\n              display: true,\r\n              text: 'Population',\r\n            },\r\n          },\r\n          x: {\r\n            title: {\r\n              display: true,\r\n              text: 'Age Distribution',\r\n            },\r\n          }\r\n        },\r\n      },\r\n    });\r\n\r\n    return () => {\r\n      ageDistributionChartInstance.current?.destroy(); // Clean up chart instance when the component unmounts or updates\r\n    };\r\n  }, [ageDistribution]);\r\n\r\n  // GENDER DISTRIBUTION DATA\r\n  useEffect(() => {\r\n    if (!stats || !stats.totalMen || !stats.totalWomen) return;\r\n\r\n    const ctx = genderRatioChartRef.current.getContext('2d');\r\n\r\n    // Destroy previous chart if it exists\r\n    if (genderRatioChartInstance.current) {\r\n      genderRatioChartInstance.current.destroy();\r\n    }\r\n\r\n    // Create a new chart instance for Gender Ratio\r\n    genderRatioChartInstance.current = new Chart(ctx, {\r\n      type: 'pie',\r\n      data: {\r\n        labels: ['Male', 'Female'],\r\n        datasets: [\r\n          {\r\n            data: [stats.totalMen, stats.totalWomen],\r\n            backgroundColor: ['#36A2EB', '#FF6384'],\r\n            hoverBackgroundColor: ['#5DADE2', '#FF8F9E'],\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        plugins: {\r\n          tooltip: {\r\n            callbacks: {\r\n              label: function (tooltipItem) {\r\n                return ' people' + tooltipItem.raw;\r\n              },\r\n            },\r\n          },\r\n          legend: {\r\n            position: 'bottom',\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    return () => {\r\n      genderRatioChartInstance.current?.destroy(); // Clean up chart instance when the component unmounts or updates\r\n    };\r\n  }, [stats]);\r\n\r\n  // POPULATION GROWTH:\r\n  useEffect(() => {\r\n    if (!cumulativePopulationGrowthRef.current || cumulativePopulationGrowth.length === 0) return;\r\n  \r\n    const ctx = cumulativePopulationGrowthRef.current.getContext('2d');\r\n  \r\n    // Destroy previous chart if it exists\r\n    if (cumulativePopulationGrowthInstance.current) {\r\n      cumulativePopulationGrowthInstance.current.destroy();\r\n    }\r\n  \r\n    // Prepare labels and datasets for both populations\r\n    const labels = cumulativePopulationGrowth.map(item => item.year);\r\n    const cumulativeValues = cumulativePopulationGrowth.map(item => item.cumulativePopulation);\r\n    const aliveValues = cumulativePopulationGrowth.map(item => item.alivePopulation);  // Assuming you added alivePopulation to your data\r\n    // Create line chart\r\n    cumulativePopulationGrowthInstance.current = new Chart(ctx, {\r\n      type: 'line',\r\n      data: {\r\n        labels: labels,\r\n        datasets: [\r\n          {\r\n            label: 'Cumulative Population',\r\n            data: cumulativeValues,\r\n            borderColor: '#36A2EB', // Blue color for cumulative population\r\n            backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n            fill: true,\r\n            tension: 0.4,\r\n            pointRadius: 3,\r\n          },\r\n          {\r\n            label: 'Alive Population',\r\n            data: aliveValues,\r\n            borderColor: '#FF6384', // Red color for alive population\r\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n            fill: true,\r\n            tension: 0.4,\r\n            pointRadius: 3,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        plugins: {\r\n          tooltip: {\r\n            callbacks: {\r\n              label: function (tooltipItem) {\r\n                return tooltipItem.raw + ' people';\r\n              },\r\n            },\r\n          },\r\n          legend: {\r\n            position: 'bottom',\r\n          },\r\n        },\r\n        scales: {\r\n          x: {\r\n            title: {\r\n              display: true,\r\n              text: 'Year',\r\n            },\r\n          },\r\n          y: {\r\n            beginAtZero: true,\r\n            title: {\r\n              display: true,\r\n              text: 'Population',\r\n            },\r\n          },\r\n        },\r\n      },\r\n    });\r\n  \r\n    return () => {\r\n      cumulativePopulationGrowthInstance.current?.destroy();\r\n    };\r\n  }, [cumulativePopulationGrowth]);\r\n\r\n  useEffect(() => {\r\n    if (!weddingChartRef.current || weddingData.length === 0) return;\r\n\r\n  // Destroy previous chart if it exists\r\n  if (weddingChartInstance.current) {\r\n    weddingChartInstance.current.destroy();\r\n  }\r\n    // Count the occurrences of each year in the wedding data\r\n    const countOccurrences = (data) => {\r\n      const counts = {};\r\n      data.forEach(year => {\r\n        counts[year] = (counts[year] || 0) + 1;\r\n      });\r\n      return counts;\r\n    };\r\n\r\n    const weddingCount = countOccurrences(weddingData);\r\n    // Convert the object to arrays for labels and data\r\n    const labels = Object.keys(weddingCount);\r\n    const data = Object.values(weddingCount);\r\n\r\n    // Destroy previous chart if it exists\r\n    if (weddingChartInstance.current) {\r\n      weddingChartInstance.current.destroy();\r\n    }\r\n\r\n    // Create a new chart instance\r\n    const ctx = weddingChartRef.current.getContext('2d');\r\n    \r\n    weddingChartInstance.current = new Chart(ctx, {\r\n      type: 'bar',\r\n      data: {\r\n        labels: labels,\r\n        datasets: [\r\n          {\r\n            label: 'عدد حفلات الزواج حسب السنة',\r\n            data: data,\r\n            backgroundColor: 'rgba(54, 162, 235, 0.6)', // Blue color\r\n            borderColor: 'rgba(54, 162, 235, 1)',\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            font: {\r\n              size: 20,\r\n            },\r\n          },\r\n          tooltip: {\r\n            callbacks: {\r\n              label: (tooltipItem) => {\r\n                return `${tooltipItem.raw} حفلة زواج`;\r\n              },\r\n            },\r\n          },\r\n        },\r\n        scales: {\r\n          x: {\r\n            title: {\r\n              display: true,\r\n              text: 'السنة',\r\n            },\r\n          },\r\n          y: {\r\n            title: {\r\n              display: true,\r\n              text: 'عدد الحفلات',\r\n            },\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    return () => {\r\n      weddingChartInstance.current?.destroy(); // Clean up chart instance when the component unmounts or updates\r\n    };\r\n  }, [weddingData]); // Trigger the effect when weddingData changes\r\n\r\n  useEffect(() => {\r\n    if (!topFamiliesRef.current || topFamiliesData.length === 0) return;\r\n\r\n    if (topFamiliesInstance.current) {\r\n      topFamiliesInstance.current.destroy();\r\n    }\r\n\r\n    const ctx = topFamiliesRef.current.getContext('2d');\r\n\r\n    topFamiliesInstance.current = new Chart(ctx, {\r\n      type: 'bar',\r\n      data: {\r\n        labels: topFamiliesData.map(f => f.family),\r\n        datasets: [{\r\n          label: 'عدد الأفراد في العائلة',\r\n          data: topFamiliesData.map(f => f.count),\r\n          backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n          borderColor: 'rgba(255, 99, 132, 1)',\r\n          borderWidth: 1\r\n        }]\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        indexAxis : 'y',\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: 'أكثر 5 عائلات عددًا في قصر أولاد بوبكر'\r\n          }\r\n        },\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n            title: {\r\n              display: true,\r\n              text: 'اللقب'\r\n            }\r\n          },\r\n          x: {\r\n            title: {\r\n              display: true,\r\n              text: \"عدد الأشخاص الحاملين لـاللقب\"\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n\r\n    return () => {\r\n      topFamiliesInstance.current?.destroy(); // Clean up chart instance when the component unmounts or updates\r\n    };\r\n\r\n  }, [topFamilies]);\r\n\r\n  if (loading) return <p className=\"loading-text\">جاري تحميل الإحصائيات...</p>;\r\n  if (!stats) return <p>تعذر تحميل البيانات.</p>;\r\n\r\n  return (\r\n    <div className=\"stats-dashboard\">\r\n      <section className=\"statistics-dashboard\">\r\n\r\n        <h2 class=\"dashboard-title\">لوحة الإحصائيات العامة</h2>\r\n\r\n        <div class=\"category-block population-overview\">\r\n          <h3 class=\"category-title\">نظرة عامة على السكان</h3>\r\n          <div class=\"stats-grid\">\r\n            <div class=\"stat-card\"> <h4>إجمالي عدد الأفراد</h4> <p class=\"stat-number\">{stats.totalPopulation}</p> </div>\r\n            <div class=\"stat-card\"> <h4>عدد الأحياء</h4> <p class=\"stat-number\">{stats.totalAlivePopulation}</p> </div>\r\n            <div class=\"stat-card\" id=\"men\"> <h4>عدد الرجال الأحياء</h4> <p class=\"stat-number\">{stats.totalMen}</p> </div>\r\n            <div class=\"stat-card\" id=\"women\"> <h4>عدد النساء الأحياء</h4> <p class=\"stat-number\">{stats.totalWomen}</p> </div>\r\n            <div class=\"stat-card\"> <h4>عدد العائلات المسجلة</h4> <p class=\"stat-number\">{stats.familiesCount}</p> </div>\r\n            <div class=\"stat-card\"> <h4>نسبة الأحياء مقابل المتوفين</h4> <p class=\"stat-number\">{stats.totalAlivePopulation * 100 / stats.totalPopulation}% أحياء</p> </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"category-block demographics\">\r\n          <h3 class=\"category-title\">العمر والديموغرافيا</h3>\r\n          <div class=\"stats-grid\">\r\n          <div className=\"stat-card\">\r\n            <h4>أكبر فرد</h4>\r\n            <p className=\"stat-number\">\r\n              {translateName(stats.oldestPerson.name || '')}{\" \"}\r\n              {translateName(stats.oldestPerson.lastName || '')} بن{\" \"} \r\n              {translateName(stats.oldestPerson.fatherName || '')} بن{\" \"}\r\n              {translateName(stats.oldestPerson.grandfatherName || '')}\r\n            </p>\r\n            <p className=\"stat-note\">\r\n              {stats.oldestPerson.age} سنة\r\n            </p>\r\n          </div>\r\n            <div class=\"stat-card\"> \r\n              <h4>أكبر فرد</h4>\r\n              <p className=\"stat-number\">\r\n                {translateName(stats.youngestPerson.name || '')}{\" \"}\r\n                {translateName(stats.youngestPerson.lastName || '')} بن{\" \"} \r\n                {translateName(stats.youngestPerson.fatherName || '')} بن{\" \"}\r\n                {translateName(stats.youngestPerson.grandfatherName || '')}\r\n              </p>\r\n              <p className=\"stat-note\">\r\n                {stats.youngestPerson.age} سنة\r\n              </p>\r\n            </div>\r\n            <div class=\"stat-card\"> <h4>متوسط الأعمار</h4> <p class=\"stat-number\">{stats.averageAge} سنة</p> </div>\r\n            <div class=\"stat-card\"> <h4>الوسيط العمري</h4> <p class=\"stat-number\">{stats.medianAge} سنة</p> </div>\r\n            <div class=\"stat-card\"> <h4>عدد المعمرين (+100 سنة)</h4> <p class=\"stat-number\">{stats.agedPeopleCount}</p> </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"category-block family-structure\">\r\n          <h3 class=\"category-title\">بنية العائلة</h3>\r\n          <div class=\"stats-grid\">\r\n            <div class=\"stat-card\"> <h4>متوسط عدد الأطفال لكل عائلة</h4> <p class=\"stat-number\">{stats.averageChildrenPerFamily}</p> </div>\r\n            <div class=\"stat-card\"> <h4>أكبر عائلة من حيث الأبناء</h4> <p class=\"stat-number\"> عائلة {translateName(stats.biggestFamily.fatherName)} {translateName(stats.biggestFamily.FatherLastName)}  </p>\r\n            <p className=\"stat-note\"> {stats.biggestFamily.childrenCount} أبناء </p>  </div>\r\n            <div class=\"stat-card\"> <h4>عدد العائلات بـ 6 أطفال أو أكثر</h4> <p class=\"stat-number\">{stats.sixPlusFamilies}</p> </div>\r\n            <div class=\"stat-card average-marriage-card\">\r\n              <h4>متوسط عمر الزواج</h4>\r\n              <div class=\"marriage-averages\">\r\n                <div class=\"average-item men\">\r\n                  <span class=\"label\">الرجال:</span>\r\n                  <span class=\"value\">{stats.avgMarAgeMale}</span>\r\n                </div>\r\n                <div class=\"average-item women\">\r\n                  <span class=\"label\">النساء:</span>\r\n                  <span class=\"value\">{stats.avgMarAgeFemale}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        </section>\r\n\r\n\r\n      <h1 class=\"dashboard-title\">عرض البيانات الرسومي</h1>\r\n      <div className=\"charts\">\r\n        <div className=\"row\">\r\n        <div className=\"chart-container\">\r\n            <h3>توزيع الفئات العمرية</h3>\r\n            <canvas id=\"ageChart\" ref={ageDistributionChartRef}></canvas>\r\n          </div>\r\n          <div className=\"chart-container\">\r\n            <h3>الرجال VS النساء</h3>\r\n            <canvas id=\"genderChart\" ref={genderRatioChartRef}></canvas>\r\n          </div>\r\n        \r\n        </div>\r\n\r\n        <div className=\"chart-container full-width\">\r\n          <h3>تطور عدد السكان</h3>\r\n          <canvas id=\"cumulativeGrowth\" ref={cumulativePopulationGrowthRef}></canvas>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"chart-container\">\r\n            <h3>أكثر الألقاب إستعمالاً</h3>\r\n            <canvas id=\"topFamilyName\" ref={topFamiliesRef}></canvas>\r\n          </div>\r\n\r\n          <div className=\"chart-container\">\r\n            <h3>عدد الأعراس في كل سنة</h3>\r\n            <canvas id=\"weddingCount\" ref={weddingChartRef}></canvas>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div id=\"funFacts\">\r\n      <h1 class=\"dashboard-title\">هل تعلم؟ </h1>\r\n      <div class=\"fun-facts-container\">\r\n        <div class=\"fun-fact\">\r\n          <h2 class=\"fun-chart\">58</h2>\r\n          <p>58 شخص، يحملون اسم <strong>محمد</strong> كأكثر اسم مستعمل، ويمثل <strong>18٪</strong> من السكان.</p>\r\n        </div>\r\n        <div class=\"fun-fact\">\r\n          <h2 class=\"fun-chart\">{stats.mostUsedFamilyNameCount.occurences}</h2>\r\n          <p>{stats.mostUsedFamilyNameCount.occurences} شخص، يحملون لقب <strong>{translateName(stats.mostUsedFamilyNameCount.familyName)}</strong>   كأكثر لقب شائع، ويمثل  \r\n             <strong>{(((stats.mostUsedFamilyNameCount.occurences))*100/stats.totalPopulation).toFixed(1)}% </strong> من السكان.</p>\r\n        </div>\r\n        <div class=\"fun-fact\">\r\n          <h2 class=\"fun-chart\">{stats.unmariedMalesCount}</h2>\r\n          <p>\r\n          <strong>{stats.unmariedMalesCount}</strong> شاب تجاوزوا الـ<strong>35</strong> عاما ليسوا متزوجين\r\n          </p>\r\n        </div>\r\n        <div class=\"fun-fact\">\r\n          <h2 class=\"fun-chart\">{stats.abroadPeoplePercentage}%</h2>\r\n          <p>\r\n          حوالي <strong>{stats.abroadPeoplePercentage}%</strong> من أبناء قصر أولاد بوبكر يعيشون خارج البلدة، سواء في مدن تونسية أخرى أو في الخارج.\r\n          </p>\r\n        </div>\r\n        <div class=\"fun-fact\">\r\n          <h2 class=\"fun-chart\">{stats.topAbroadCountryCount.countryCount}</h2>\r\n          <p>\r\n          يُقيم <strong>{stats.topAbroadCountryCount.countryCount}</strong> شخصًا من أبناء قصر أولاد بوبكر في <strong>{stats.topAbroadCountryCount.countryName}</strong>، مما يجعلها الوجهة الأجنبية الأكثر استقطابًا لأبناء البلدة في المهجر.\r\n          </p>\r\n        </div>\r\n        <br>\r\n        </br>\r\n        <div class=\"fun-fact\">\r\n          <h2 class=\"fun-chart\">142</h2>\r\n          <p>\r\n          يبلغ عدد تلاميذ المدرسة الابتدائية في قصر أولاد بوبكر حوالي <strong>142</strong> تلميذ، مما يشكل نسبة كبيرة من الأطفال في البلدة.\r\n          </p>\r\n        </div>\r\n        <div class=\"fun-fact\">\r\n          <h2 class=\"fun-chart\">11</h2>\r\n          <p>\r\n          تمتد شجرة العائلة من الجيل الأول حتى الجيل <strong>الحادي عشر</strong>، أي أن هناك <strong>11 جيلاً</strong> متتالياً تربط بين الجد الأول وأبعد حفيد مسجَّل في قصر أولاد بوبكر.      </p>\r\n        </div>\r\n        </div>\r\n        <br></br>\r\n        <div class=\"data-completeness-container\">\r\n          <div class=\"data-completeness-card\">\r\n            <h2>نسبة إكتمال البيانات لجميع أفراد الشجرة</h2>\r\n            <div class=\"content-wrapper\">\r\n              <div class=\"percentage\">\r\n                <span className='percentageText'>{stats.totalAlivePopulation * 100 / 3000}%</span>\r\n                <div class=\"progress-bar\">\r\n                <div className=\"progress\" style={{ width: `${stats.totalAlivePopulation * 100 / 3000}%` }}></div>\r\n                </div>\r\n              </div>\r\n              <div class=\"data-completeness-content\">\r\n                <p>التقدير الحالي يُظهر أننا غطّينا حوالي <strong>{stats.totalAlivePopulation * 100 / 3000}%</strong> من جميع أفراد الشجرة العائلية، بناءً على عدد تقريبي إجمالي للسكان في الشجرة من الجد الأول بوبكر يصل إلى <strong>3000</strong> شخص.</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"data-completeness-card\">\r\n            <h2>نسبة الأفراد الأحياء في قاعدة البيانات</h2>\r\n            <div class=\"content-wrapper\">\r\n              <div class=\"percentage\">\r\n                <span>{(stats.totalAlivePopulation * 100 / 1600).toFixed(1)}%</span>\r\n                <div class=\"progress-bar\">\r\n                <div className=\"progress\" style={{ width: `${(stats.totalAlivePopulation * 100 / 1600).toFixed(1)}%` }}></div>\r\n                </div>\r\n              </div>\r\n              <div class=\"data-completeness-content\">\r\n                <p>نحن حاليًا قمنا بتوثيق حوالي <strong>{(stats.totalAlivePopulation * 100 / 1600).toFixed(1)}%</strong> من الأفراد الأحياء في قاعدة البيانات، مما يعكس جهودنا المستمرة لتحديث وتوسيع الشجرة العائلية.</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n        <div class=\"important-info\">\r\n          <h2>دقة توثيق التاريخ القديم</h2>\r\n          <p>تم تسجيل <strong><span class=\"highlight\">{(stats.deadPopulation*100/1400).toFixed(1)}%</span></strong> من الأفراد العائلة القدامى في قاعدة البيانات، ما يعكس جهدًا دقيقًا لتوثيق التاريخ العائلي الكامل.</p>\r\n        </div>\r\n        </div>\r\n        <div className=\"engagement-panel\">\r\n          <h2>مشاركة المجتمع في توثيق شجرة العائلة</h2>\r\n          <p className=\"engagement-text\">\r\n            بفضل جهود المجتمع، ساهم <strong>150 شخصًا</strong> حتى الآن في توثيق شجرة العائلة، مما يعكس روح التعاون والانتماء القوي لهذا المشروع العائلي الفريد.\r\n          </p>\r\n          <div className=\"progress-bar\">\r\n            <div className=\"progress\" style={{ width: '70%' }}></div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n  \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StatisticsDashboard;\r\n","D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\components\\SearchPage.js",["42"],"import React, { useState } from 'react';\r\nimport \"./SearchPage.css\"\r\nimport Tree from 'react-d3-tree';\r\nconst translations = require('./translation.json');\r\nrequire('dotenv').config();\r\n\r\nconst neo4jURI = process.env.REACT_APP_NEO4J_URI;\r\nconst neo4jUser = process.env.REACT_APP_NEO4J_USER;\r\nconst neo4jPassword = process.env.REACT_APP_NEO4J_PASSWORD;\r\n\r\nconst driver = require('neo4j-driver').driver(\r\n    neo4jURI,\r\n    require('neo4j-driver').auth.basic(neo4jUser, neo4jPassword)\r\n);\r\n\r\nfunction countBenAndBent(str) {\r\n  const matches = str.match(/\\b(ben|bent)\\b/gi);\r\n  return matches ? matches.length : 0;\r\n}\r\n\r\nexport const translateName = (fullName, language = true) => {\r\n  const nameParts = fullName.split(' ');\r\n\r\nconst reverseTranslations = Object.fromEntries(\r\n  Object.entries(translations).map(([key, value]) => [value, key])\r\n);\r\n\r\n  const dict = language ? translations : reverseTranslations;\r\n\r\n  const translatedParts = nameParts.map(part => dict[part] || part);\r\n\r\n  return translatedParts.join(' ');\r\n};\r\n\r\nfunction splitName(fullName) {\r\n  const parts = fullName.replace(/\\s+(ben|bent)\\s+/gi, ' ').trim().split(/\\s+/);\r\n  const bentCount = countBenAndBent(fullName);\r\n  if (parts.length === 2) {\r\n    if (bentCount === 0){\r\n      return {\r\n        personName: parts[0],\r\n        fatherName: \"\",\r\n        grandfatherName: \"\",\r\n        familyName: parts[1]\r\n      };\r\n    }\r\n    else if (bentCount === 1){\r\n      return {\r\n        personName: parts[0],\r\n        fatherName: parts[1],\r\n        grandfatherName: \"\",\r\n        familyName: \"\"\r\n      };\r\n    }\r\n    \r\n  } \r\n  else if (parts.length === 3) {\r\n    if (bentCount === 1){\r\n      return {\r\n        personName: parts[0],\r\n        fatherName: parts[1],\r\n        grandfatherName: \"\",\r\n        familyName: parts[2]\r\n      };\r\n    }\r\n    else if (bentCount === 2){\r\n      return {\r\n        personName: parts[0],\r\n        fatherName: parts[1],\r\n        grandfatherName: parts[2],\r\n        familyName: \"\"\r\n      };\r\n    }\r\n    \r\n  } else if (parts.length === 4) {\r\n    return {\r\n      personName: parts[0],\r\n      fatherName: parts[1],\r\n      grandfatherName: parts[2],\r\n      familyName: parts[3]\r\n    };\r\n  }\r\n  // Default case if structure doesn't match\r\n  return { personName: parts[0], fatherName: \"\", grandfatherName: \"\", familyName: parts[1] };\r\n}\r\n\r\nconst SearchPage = () => {\r\n  const [treeVisible, setTreeVisible] = useState(false);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [personDetails, setPersonDetails] = useState(null);\r\n  const [treeData, setTreeData] = useState(null);\r\n  const [error, setError] = useState('');\r\n  \r\n  const getChildrenOfFather = async (fatherId) => {\r\n    const session = driver.session();\r\n    try {\r\n      const result = await session.run(\r\n        `\r\n        MATCH (father:Person)\r\n        WHERE id(father) = $fatherId\r\n        OPTIONAL MATCH (father)-[:FATHER_OF|MOTHER_OF]->(child:Person)\r\n        RETURN father, collect(child) AS children\r\n        `,\r\n        { fatherId }\r\n      );\r\n  \r\n      if (result.records.length > 0) {\r\n        const record = result.records[0];\r\n        const fatherNode = record.get('father');\r\n        const childrenNodes = record.get('children');\r\n  \r\n        const father = {\r\n          id: fatherNode.identity.toNumber(),\r\n          ...fatherNode.properties,\r\n        };\r\n  \r\n        const children = childrenNodes\r\n          .filter(child => child) // filter out nulls if no children\r\n          .map(child => ({\r\n            id: child.identity.toNumber(),\r\n            ...child.properties,\r\n          }));\r\n  \r\n        return { father, children };\r\n      } else {\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching father and children:', error);\r\n      return null;\r\n    } finally {\r\n      await session.close();\r\n    }\r\n  };\r\n  \r\n  const handleShowChildren = async (e) => {\r\n    setTreeVisible(true);\r\n    e.stopPropagation();\r\n    const { father, children } = await getChildrenOfFather(personDetails.personID);\r\n  \r\n    // Transform into correct format for Tree component\r\n    const formattedData = {\r\n      id: father.id,\r\n      name: father.name,\r\n      children: children.map(child => ({\r\n        id: child.id,\r\n        name: child.name\r\n      }))\r\n    };\r\n  \r\n    setTreeData(formattedData);\r\n    \r\n  };\r\n\r\n  const handleSearchChange = (e) => {\r\n    setSearchQuery(e.target.value);\r\n  };\r\n\r\n  const handlePersonSelect = (selectedPerson) => {\r\n    setPersonDetails({\r\n      personID: selectedPerson.personID,\r\n      personName: selectedPerson.personName,\r\n      fatherName: selectedPerson.fatherName,\r\n      grandfatherName: selectedPerson.grandfatherName,\r\n      familyName: selectedPerson.familyName,\r\n      gender: selectedPerson.gender,\r\n      age: selectedPerson.age,\r\n      YoD: selectedPerson.YoD,\r\n      motherName: selectedPerson.motherName,\r\n      motherFatherName: selectedPerson.motherFatherName,\r\n      motherGrandFatherName: selectedPerson.motherGrandFatherName,\r\n      motherFamilyName: selectedPerson.motherFamilyName,\r\n      lifeStatus: selectedPerson.lifeStatus,\r\n      martialStatus: selectedPerson.martialStatus,\r\n      childrenCount: selectedPerson.childrenCount,\r\n    });\r\n  };\r\n\r\n  const handleSearchSubmit = async () => {\r\n    setTreeVisible(false);\r\n    if (!searchQuery.trim()) {\r\n      setError('الرجاء إدخال نص للبحث.');\r\n      setPersonDetails(null);\r\n      return;\r\n    }\r\n    await searchPerson(searchQuery.trim());\r\n  };\r\n\r\n  const searchPerson = async (searchText) => {\r\n    let translatedInputName = translateName(searchText, false);\r\n    console.log(translatedInputName);\r\n    const { personName, fatherName, grandfatherName, familyName } = splitName(translatedInputName);\r\n\r\n    let cypherQuery = ``;\r\n    const queryParamsObject = {};\r\n\r\n    if (personName){\r\n      \r\n      if (fatherName) {\r\n        \r\n        if (grandfatherName) {\r\n          \r\n          if (familyName) {\r\n            \r\n            cypherQuery += `\r\n              MATCH (grandfather:Person)-[:FATHER_OF]->(father:Person)-[:FATHER_OF]->(child:Person)\r\n              WHERE child.name = $personName AND \r\n                    father.name = $fatherName AND \r\n                    grandfather.name = $grandfatherName AND \r\n                    child.lastName = $familyName\r\n              RETURN child.name AS childName, father.name AS fatherName, grandfather.name AS grandfatherName, child.lastName AS familyName,  \r\n              child.YoB AS childYoB, child.gender AS childGender, id(child) AS childID,\r\n              child.isAlive AS lifeStatus, child.YoD AS YoD\r\n            `;\r\n            \r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n            queryParamsObject.grandfatherName = grandfatherName;\r\n            queryParamsObject.familyName = familyName;\r\n            \r\n          } \r\n          else {\r\n            cypherQuery += `\r\n              MATCH (grandfather:Person)-[:FATHER_OF]->(father:Person)-[:FATHER_OF]->(child:Person)\r\n              WHERE child.name = $personName AND \r\n                    father.name = $fatherName AND \r\n                    grandfather.name = $grandfatherName\r\n              RETURN child.name AS childName, father.name AS fatherName, grandfather.name AS grandfatherName, \r\n              child.YoB AS childYoB, child.gender AS childGender, id(child) AS childID, child.isAlive AS lifeStatus, child.YoD AS YoD`;\r\n            \r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n            queryParamsObject.grandfatherName = grandfatherName;\r\n          }\r\n          \r\n        } else {\r\n          if (familyName){\r\n            cypherQuery += `\r\n            MATCH (father:Person)-[:FATHER_OF]->(child:Person)\r\n            WHERE child.name = $personName AND \r\n                  father.name = $fatherName AND\r\n                  child.lastName = $familyName\r\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n            RETURN child.name AS childName, \r\n                  father.name AS fatherName,\r\n                  grandfather.name as grandfatherName,\r\n                  child.lastName AS familyName,\r\n                  child.YoB AS childYoB, \r\n                  child.gender AS childGender, \r\n                  id(child) AS childID,\r\n                  child.isAlive AS lifeStatus, \r\n                  child.YoD AS YoD\r\n            `;\r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n            queryParamsObject.familyName = familyName;\r\n          }\r\n          else{\r\n            cypherQuery += `\r\n            MATCH (father:Person)-[:FATHER_OF]->(child:Person)\r\n            \r\n            WHERE child.name = $personName AND \r\n                  father.name = $fatherName\r\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n            RETURN child.name AS childName, \r\n                   father.name AS fatherName, \r\n                   grandfather.name as grandfatherName,\r\n                   child.lastName AS familyName,\r\n                   child.YoB AS childYoB, \r\n                   child.gender AS childGender, \r\n                   id(child) AS childID, \r\n                   child.isAlive AS lifeStatus,\r\n                   child.YoD AS YoD\r\n            `;\r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n          }\r\n          }\r\n      }\r\n      else {\r\n        if (familyName){\r\n          cypherQuery += `\r\n          MATCH (child:Person)\r\n          WHERE child.name = $personName AND child.lastName = $familyName\r\n          OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(child)\r\n          OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n          RETURN \r\n            child.name AS childName, \r\n            father.name AS fatherName,\r\n            grandfather.name AS grandfatherName,\r\n            child.lastName AS familyName,\r\n            child.YoB AS childYoB, \r\n            child.gender AS childGender, \r\n            id(child) AS childID,\r\n            child.isAlive AS lifeStatus,\r\n            child.YoD AS YoD\r\n        `;\r\n        queryParamsObject.personName = personName;\r\n        queryParamsObject.familyName = familyName;\r\n        }\r\n        else{\r\n          cypherQuery += `\r\n            MATCH (child:Person)\r\n            WHERE child.name = $personName\r\n            OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(child)\r\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n            RETURN child.name AS childName, \r\n                  child.YoB AS childYoB, \r\n                  child.gender AS childGender,\r\n                  father.name AS fatherName, \r\n                  grandfather.name AS grandfatherName,\r\n                   child.lastName AS familyName,\r\n                  id(child) AS childID,\r\n                  child.isAlive AS lifeStatus,\r\n                  child.YoD AS YoD\r\n\r\n          `;\r\n          queryParamsObject.personName = personName;\r\n        }\r\n      }\r\n    }\r\n    \r\n    const session = driver.session();\r\n    try {\r\n      const result = await session.run(cypherQuery, queryParamsObject);\r\n      if (result.records.length === 0) {\r\n        setError('هذا الشخص ليس مسجل في الشجرة ، الرجاء التحقق من الإسم.');\r\n        setPersonDetails(null);\r\n        return;\r\n      }\r\n      else if (result.records.length === 1) {\r\n        const record = result.records[0];\r\n        let age;\r\n        let YoB = record.get('childYoB');\r\n        let YoD = record.get('YoD');\r\n        if (YoB == null){\r\n          age = -1;\r\n        }\r\n        else{\r\n          age = new Date().getFullYear() - YoB;\r\n        }\r\n        \r\n        const childID = record.get(\"childID\").toNumber();\r\n\r\n        const motherQuery = await session.run(`\r\n          OPTIONAL MATCH (mother:Person)-[:MOTHER_OF]->(child:Person)\r\n          WHERE id(child) = $childID\r\n          OPTIONAL MATCH (motherFather)-[:FATHER_OF]->(mother:Person)\r\n          OPTIONAL MATCH (motherGrandFather)-[:FATHER_OF]->(motherFather:Person)\r\n          RETURN \r\n            mother.name AS motherName,\r\n            motherFather.name AS motherFatherName,\r\n            motherGrandFather.name AS motherGrandFatherName,\r\n            mother.lastName AS motherFamilyName\r\n        `, {childID});\r\n        const motherResult = motherQuery.records[0];\r\n\r\n        const childrenCountRecord = await session.run(`\r\n          MATCH (p:Person)-[:FATHER_OF|MOTHER_OF]->(child:Person)\r\n          WHERE id(p) = $childID\r\n          RETURN count(child) AS childrenCount\r\n        `, { childID });\r\n\r\n        const siblingsCountsRecord = await session.run(`\r\n        MATCH (target:Person)\r\n        WHERE id(target) = 23\r\n        MATCH (parent:Person)-[:FATHER_OF|MOTHER_OF]->(target)\r\n        MATCH (parent)-[:FATHER_OF|MOTHER_OF]->(sibling:Person)\r\n        WHERE id(sibling) <> 23\r\n\r\n        RETURN count(DISTINCT sibling) AS siblingCount  \r\n        `, {childID});\r\n        const isMarried = await session.run(`\r\n          MATCH (p)-[:HUSBAND_OF|WIFE_OF]->(:Person)\r\n          WHERE id(p) = $childID\r\n          RETURN count(*) > 0 AS isMarried\r\n        `, { childID });\r\n        const personDetails = {\r\n          personID: childID,\r\n          personName: record.get('childName') ?? \"غير متوفر\",\r\n          fatherName: record.has('fatherName') ? record.get('fatherName') : \"غير متوفر\",\r\n          grandfatherName: record.has('grandfatherName') ? record.get('grandfatherName') : \"غير متوفر\", \r\n          familyName: record.has('familyName') ? record.get('familyName') : \"غير متوفر\", \r\n          gender: record.has('childGender') ? record.get('childGender') : \"غير متوفر\", \r\n          age,\r\n          YoD: YoD,\r\n          motherName: motherResult.has('motherName') ? motherResult.get('motherName') : \"غير متوفر\", \r\n          motherFatherName: motherResult.has('motherFatherName') ? motherResult.get('motherFatherName') : \"غير متوفر\", // Check if motherFatherName exists\r\n          motherGrandFatherName: motherResult.has('motherGrandFatherName') ? motherResult.get('motherGrandFatherName') : \"غير متوفر\", // Check if motherGrandfatherName exists\r\n          motherFamilyName: motherResult.has('motherFamilyName') ? motherResult.get('motherFamilyName') : \"غير متوفر\", // Check if motherFamilyName exists\r\n          \r\n          lifeStatus: record.has('lifeStatus') ? record.get('lifeStatus') : \"غير متوفر\", // Check if lifeStatus exists\r\n          martialStatus: isMarried.records[0]?.get('isMarried') ?? \"غير متوفر\", // Safe access for marital status\r\n          childrenCount: childrenCountRecord.records[0]?.get('childrenCount')?.toInt() ?? 0, // Default to 0 if missing\r\n          siblingsCountsRecord: siblingsCountsRecord.records[0]?.get('siblingCount')?.toInt() ?? 0\r\n        };\r\n    \r\n        setPersonDetails(personDetails);\r\n        setError('');\r\n    \r\n      } \r\n      else if (result.records.length >= 2) {\r\n        const multipleMatches = [];\r\n      \r\n        for (const record of result.records) {\r\n          let age;\r\n          let YoB = record.get('childYoB');\r\n          let YoD = record.get('YoD');\r\n      \r\n          if (YoB == null) {\r\n            age = -1;\r\n          } else {\r\n            age = new Date().getFullYear() - YoB;\r\n          }\r\n      \r\n          const childID = record.get(\"childID\").toNumber();\r\n      \r\n          const motherQuery = await session.run(`\r\n            MATCH (child:Person) WHERE id(child) = $childID\r\n            OPTIONAL MATCH (mother:Person)-[:MOTHER_OF]->(child)\r\n            OPTIONAL MATCH (motherFather:Person)-[:FATHER_OF]->(mother)\r\n            OPTIONAL MATCH (motherGrandFather:Person)-[:FATHER_OF]->(motherFather)\r\n            RETURN \r\n              mother.name AS motherName,\r\n              motherFather.name AS motherFatherName,\r\n              motherGrandFather.name AS motherGrandFatherName,\r\n              mother.lastName AS motherFamilyName\r\n          `, { childID });\r\n      \r\n          const motherResult = motherQuery.records[0] ?? null;\r\n          const childrenCountRecord = await session.run(`\r\n            MATCH (p:Person)-[:FATHER_OF|MOTHER_OF]->(child:Person)\r\n            WHERE id(p) = $childID\r\n            RETURN count(child) AS childrenCount\r\n          `, { childID });\r\n      \r\n          const isMarried = await session.run(`\r\n            MATCH (m:Person)-[r:HUSBAND_OF]->(w:Person)\r\n            WHERE id(m) = $childID\r\n            RETURN count(r) > 0 AS isMarried\r\n          `, { childID });\r\n      \r\n          const personDetails = {\r\n            personID: childID,\r\n            personName: record.get('childName') ?? \"غير متوفر\",\r\n            fatherName: record.has('fatherName') ? record.get('fatherName') : \"غير متوفر\",\r\n            grandfatherName: record.has('grandfatherName') ? record.get('grandfatherName') : \"غير متوفر\",\r\n            familyName: record.has('familyName') ? record.get('familyName') : \"غير متوفر\",\r\n            gender: record.has('childGender') ? record.get('childGender') : \"غير متوفر\",\r\n            age,\r\n            YoD,\r\n            motherName: motherResult?.get('motherName') ?? \"غير متوفر\",\r\n            motherFatherName: motherResult?.get('motherFatherName') ?? \"غير متوفر\",\r\n            motherGrandFatherName: motherResult?.get('motherGrandFatherName') ?? \"غير متوفر\",\r\n            motherFamilyName: motherResult?.get('motherFamilyName') ?? \"غير متوفر\",\r\n\r\n            lifeStatus: record.has('lifeStatus') ? record.get('lifeStatus') : \"غير متوفر\",\r\n            martialStatus: isMarried.records[0]?.get('isMarried') ?? \"غير متوفر\",\r\n            childrenCount: childrenCountRecord.records[0]?.get('childrenCount')?.toInt() ?? 0\r\n          };\r\n      \r\n          multipleMatches.push(personDetails);\r\n        }\r\n      \r\n        setPersonDetails({ multipleMatches });\r\n        setError('هناك العديد من الأشخاص يحملون نفس الاسم. الرجاء اختيار الشخص الصحيح.');\r\n      }\r\n       else {\r\n        setPersonDetails(null);\r\n        setError('لم يتم العثور على شخص مطابق.');\r\n      }\r\n    } catch (err) {\r\n      console.error('Query Error:', err);\r\n      setError('حدث خطأ أثناء البحث.');\r\n      setPersonDetails(null);\r\n    } finally {\r\n      await session.close();\r\n    }\r\n    \r\n  };\r\n\r\n  return (\r\n    <div className=\"search-page\">\r\n      <header className=\"search-header\">\r\n        <h1>ابحث عن شخص في شجرة العائلة</h1>\r\n        <input\r\n          type=\"text\"\r\n          className=\"search-bar\"\r\n          placeholder=\"ادخل الاسم الثلاثي أو الرباعي...\"\r\n          value={searchQuery}\r\n          onChange={handleSearchChange}\r\n        />\r\n        <button className=\"search-button\" onClick={handleSearchSubmit}>ابحث</button>\r\n      </header>\r\n\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n\r\n      {personDetails && personDetails.multipleMatches ? (\r\n  <div className=\"multiple-matches\">\r\n    <h2>نتائج متعددة:</h2>\r\n    {personDetails.multipleMatches.map((person, index) => (\r\n      <div \r\n        key={index} \r\n        className=\"match-item\"\r\n        onClick={() => handlePersonSelect(person)}\r\n        style={{ cursor: 'pointer' }}\r\n      >\r\n       <p className='dupPersonName'>{index + 1}- {translateName(person.personName)} بن {translateName(person.fatherName)} بن {translateName(person.grandfatherName)} {translateName(person.familyName)}</p>\r\n        <hr />\r\n      </div>\r\n    ))}\r\n  </div>\r\n) : personDetails ? (\r\n  <div className=\"person-details\">\r\n    <h2>تفاصيل الشخص :</h2>\r\n    <h3>\r\n      {translateName(personDetails?.personName ?? \"غير معروف\")}\r\n      {personDetails?.fatherName\r\n        ? ` ${personDetails.gender === 'Female' ? 'بنت' : 'بن'} ${translateName(personDetails.fatherName)}`\r\n        : ''}\r\n      {personDetails?.grandfatherName\r\n        ? ` بن ${translateName(personDetails.grandfatherName)}`\r\n        : ''}\r\n      {personDetails?.familyName\r\n        ? ` ${translateName(personDetails.familyName)}`\r\n        : ''}\r\n    </h3>\r\n    <table className=\"person-details-table\">\r\n      <thead>\r\n        <tr>\r\n          <th className='blankHeader'></th>\r\n          <th>الإسم</th>\r\n          <th>إسم الأب</th>\r\n          <th>إسم الجّد</th>\r\n          <th>إسم العائلة / اللقب</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td><strong>الشخص</strong></td>\r\n          <td><p className='personDetails'>{translateName(personDetails?.personName ?? '') || 'غير متوفر'}</p></td>\r\n          <td><p className='personDetails'>{translateName(personDetails?.fatherName ?? '') || 'غير متوفر'}</p></td>\r\n          <td><p className='personDetails'>{translateName(personDetails?.grandfatherName ?? '') || 'غير متوفر'}</p></td>\r\n          <td><p className='personDetails'>{translateName(personDetails?.familyName ?? '') || 'غير متوفر'}</p></td>\r\n        </tr>\r\n        <tr>\r\n          <td><strong>الأم</strong></td>\r\n          <td><p className='personDetails'>{translateName(personDetails?.motherName ?? '') || 'غير متوفر'}</p></td>\r\n          <td><p className='personDetails'>{translateName(personDetails?.motherFatherName ?? '') || 'غير متوفر'}</p></td>\r\n          <td><p className='personDetails'>{translateName(personDetails?.motherGrandFatherName ?? '') || 'غير متوفر'}</p></td>\r\n          <td><p className='personDetails'>{translateName(personDetails?.motherFamilyName ?? '') || 'غير متوفر'}</p></td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    <table className=\"person-details2-table\">\r\n      <thead>\r\n        <tr>\r\n          <th>الجنس</th>\r\n          <th>العمر</th>\r\n          <th>الحالة المدنية</th>\r\n          <th>حالة الحياة</th>\r\n          <th>عدد الأطفال</th>\r\n          <th>عدد الإخوة</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>{personDetails.gender === 'Male' ? 'ذكر 👨'  : 'أنثى 👩'}</td>\r\n          <td\r\n            dangerouslySetInnerHTML={{\r\n              __html: personDetails.lifeStatus === true\r\n                ? personDetails.age !== -1\r\n                  ? personDetails.age === 1\r\n                    ? `سنة واحدة (مواليد ${new Date().getFullYear() - personDetails.age})`\r\n                    : personDetails.age === 2\r\n                    ? `سنتان (مواليد ${new Date().getFullYear() - personDetails.age})`\r\n                    : personDetails.age >= 3 && personDetails.age <= 10\r\n                    ? `${personDetails.age} سنوات (مواليد ${new Date().getFullYear() - personDetails.age})`\r\n                    : `${personDetails.age} سنة (مواليد ${new Date().getFullYear() - personDetails.age})`\r\n                  : 'العمر غير معروف'\r\n                : personDetails.hasOwnProperty('YoD') && personDetails.YoD\r\n                ? personDetails.age !== -1\r\n                  ? `مواليد سنة ${new Date().getFullYear() - personDetails.age} <br /> \r\n                      عاش ${personDetails.YoD - (new Date().getFullYear() - personDetails.age)} سنة <br /> \r\n                      توفي في ${personDetails.YoD}`\r\n                  : `مواليد ${new Date().getFullYear() - personDetails.age} <br /> \r\n                      توفي في سنة ${personDetails.YoD}`\r\n                : personDetails.hasOwnProperty('YoB') && personDetails.YoB\r\n                ? `مواليد ${personDetails.YoB} <br /> العمر غير معروف`\r\n                : 'غير متوفر'\r\n            }}\r\n          />\r\n\r\n          <td>\r\n            {personDetails.lifeStatus === true\r\n              ? personDetails.martialStatus === true\r\n                ? personDetails.gender === 'Male'\r\n                  ? 'متزوج'\r\n                  : 'متزوجة'\r\n                : personDetails.gender === 'Male'\r\n                ? 'أعزب'\r\n                : 'عزباء'\r\n              : '-'}\r\n          </td>\r\n          <td>\r\n          {personDetails.lifeStatus === true \r\n            ? (personDetails.gender === 'Male' ? 'حي' : 'حية') \r\n            : (personDetails.gender === 'Male' ? 'متوفى' : 'متوفية')}\r\n          </td>\r\n        <td>\r\n        <button id='childrenButton' \r\n        onClick={handleShowChildren}>\r\n          {personDetails.childrenCount === 0 || personDetails.childrenCount == null\r\n            ? 'ليس لديه أطفال'\r\n            : personDetails.childrenCount === 1\r\n            ? 'طفل واحد'\r\n            : personDetails.childrenCount === 2\r\n            ? 'طفلان'\r\n            : personDetails.childrenCount >= 3 && personDetails.childrenCount <= 10\r\n            ? `${personDetails.childrenCount} أطفال`\r\n            : `${personDetails.childrenCount} طفلا`\r\n          }\r\n        </button>\r\n        \r\n      </td>\r\n      <td>\r\n        {personDetails.siblingsCountsRecord === 0 || personDetails.siblingsCountsRecord == null\r\n          ? 'ليس لديه إخوة'\r\n          : personDetails.siblingsCountsRecord === 1\r\n          ? `أخٌ واحدٌ (${2})`\r\n          : personDetails.siblingsCountsRecord === 2\r\n          ? `أخوان (${2})`\r\n          : personDetails.siblingsCountsRecord >= 3 && personDetails.siblingsCountsRecord <= 10\r\n          ? `${personDetails.siblingsCountsRecord} إخوة`\r\n          : `${personDetails.siblingsCountsRecord} أخا`}\r\n      </td>\r\n\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    <div className=\"tree-wrapper\">\r\n        <div className='titleTree'>\r\n\r\n        </div>\r\n      \r\n      {treeData && (\r\n        <div className=\"tree-container\">\r\n          <Tree\r\n            data={treeData}\r\n            orientation=\"vertical\"\r\n            pathFunc=\"step\"\r\n            nodeSize={{ x: 60, y: 100 }}\r\n            separation={{ siblings: 2, nonSiblings: 2 }}\r\n            translate={{ x: 325, y: 27 }} \r\n            scaleExtent={{ min: 1, max: 1 }} // Disable zooming\r\n            renderCustomNodeElement={({ nodeDatum }) => (\r\n              <g className=\"tree-node\">\r\n                <title>{nodeDatum.id}</title>\r\n                <rect\r\n                  className=\"tree-node-rect\"\r\n                  x=\"-50\"\r\n                  y=\"-20\"\r\n                  width=\"100\"\r\n                  height=\"40\"\r\n                />\r\n                <text className=\"tree-node-text\" x=\"0\" y=\"5\">\r\n                  {translateName(nodeDatum.name)}\r\n                </text>\r\n              </g>\r\n            )}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n\r\n  </div>\r\n) : (\r\n  <div className=\"no-results\">\r\n    <p>لا توجد نتائج للبحث.</p>\r\n  </div>\r\n)}\r\n  <div>\r\n    \r\n  </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPage;\r\n\r\n","D:\\Study\\Projects\\El-Kasr Family Tree\\client\\src\\components\\weddings.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":25,"column":7,"nodeType":"49","messageId":"50","endLine":25,"endColumn":23},{"ruleId":"47","severity":1,"message":"51","line":58,"column":7,"nodeType":"49","messageId":"50","endLine":58,"endColumn":27},{"ruleId":"47","severity":1,"message":"52","line":1,"column":17,"nodeType":"49","messageId":"50","endLine":1,"endColumn":26},{"ruleId":"53","severity":1,"message":"54","line":900,"column":20,"nodeType":"55","messageId":"56","endLine":900,"endColumn":22},{"ruleId":"57","severity":1,"message":"58","line":640,"column":6,"nodeType":"59","endLine":640,"endColumn":8,"suggestions":"60"},{"ruleId":"57","severity":1,"message":"61","line":953,"column":6,"nodeType":"59","endLine":953,"endColumn":19,"suggestions":"62"},{"ruleId":"47","severity":1,"message":"63","line":88,"column":10,"nodeType":"49","messageId":"50","endLine":88,"endColumn":21},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'renderFamilyTree' is assigned a value but never used.","Identifier","unusedVar","'formatFamilyTreeData' is assigned a value but never used.","'useEffect' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'topFamilies' and 'weddingYears'. Either include them or remove the dependency array.","ArrayExpression",["66"],"React Hook useEffect has a missing dependency: 'topFamiliesData'. Either include it or remove the dependency array.",["67"],"'treeVisible' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},{"desc":"70","fix":"71"},"Update the dependencies array to be: [topFamilies, weddingYears]",{"range":"72","text":"73"},"Update the dependencies array to be: [topFamilies, topFamiliesData]",{"range":"74","text":"75"},[20501,20503],"[topFamilies, weddingYears]",[29319,29332],"[topFamilies, topFamiliesData]"]