{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\Projects\\\\El-Kasr Family Tree\\\\client\\\\src\\\\components\\\\RelationChecker.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Tree from 'react-d3-tree';\nimport './RelationChecker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst translations = require('./translation.json');\nrequire('dotenv').config();\nconst neo4jURI = process.env.REACT_APP_NEO4J_URI;\nconst neo4jUser = process.env.REACT_APP_NEO4J_USER;\nconst neo4jPassword = process.env.REACT_APP_NEO4J_PASSWORD;\nconst driver = require('neo4j-driver').driver(neo4jURI, require('neo4j-driver').auth.basic(neo4jUser, neo4jPassword));\nconst session = driver.session();\nfunction countBenAndBent(str) {\n  const matches = str.match(/\\b(ben|bent)\\b/gi);\n  return matches ? matches.length : 0;\n}\nfunction splitName(fullName) {\n  const parts = fullName.replace(/\\s+(ben|bent)\\s+/gi, ' ').trim().split(/\\s+/);\n  const bentCount = countBenAndBent(fullName);\n  if (parts.length === 2) {\n    if (bentCount === 0) {\n      return {\n        personName: parts[0],\n        fatherName: \"\",\n        grandfatherName: \"\",\n        familyName: parts[1]\n      };\n    } else if (bentCount === 1) {\n      return {\n        personName: parts[0],\n        fatherName: parts[1],\n        grandfatherName: \"\",\n        familyName: \"\"\n      };\n    }\n  } else if (parts.length === 3) {\n    if (bentCount === 1) {\n      return {\n        personName: parts[0],\n        fatherName: parts[1],\n        grandfatherName: \"\",\n        familyName: parts[2]\n      };\n    } else if (bentCount === 2) {\n      return {\n        personName: parts[0],\n        fatherName: parts[1],\n        grandfatherName: parts[2],\n        familyName: \"\"\n      };\n    }\n  } else if (parts.length === 4) {\n    return {\n      personName: parts[0],\n      fatherName: parts[1],\n      grandfatherName: parts[2],\n      familyName: parts[3]\n    };\n  }\n  // Default case if structure doesn't match\n  return {\n    personName: parts[0],\n    fatherName: \"\",\n    grandfatherName: \"\",\n    familyName: parts[1]\n  };\n}\nfunction buildTreePath(path) {\n  return path.reduceRight((acc, person) => {\n    return {\n      id: person.id.toNumber(),\n      name: `${person.name} ${person.lastName}`,\n      children: acc ? [acc] : []\n    };\n  }, null);\n}\nfunction mergePaths(pathToP1, pathToP2) {\n  const ancestor = pathToP1[0];\n  const branch1 = pathToP1.slice(1);\n  const branch2 = pathToP2.slice(1);\n  return {\n    id: ancestor.id.toNumber(),\n    name: `${ancestor.name} ${ancestor.lastName}`,\n    children: [buildTreePath(branch1), buildTreePath(branch2)]\n  };\n}\nexport const translateName = (fullName, language = true) => {\n  const nameParts = fullName.split(' ');\n\n  // Build reverse translation map if needed\n  const reverseTranslations = Object.fromEntries(Object.entries(translations).map(([key, value]) => [value, key]));\n  const dict = language ? translations : reverseTranslations;\n  const translatedParts = nameParts.map(part => dict[part] || part);\n  return translatedParts.join(' ');\n};\nconst RelationPage = () => {\n  _s();\n  const [person1, setPerson1] = useState('');\n  const [person2, setPerson2] = useState('');\n  const [relationship, setRelationship] = useState('');\n  const [duplicates, setDuplicates] = useState({\n    person1: [],\n    person2: []\n  });\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState(\"\");\n  const fetchRelationship = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError(false);\n    setLoadingMessage(\"بداية البحث عن العلاقة...\");\n    try {\n      const result = await getRelationship(person1, person2);\n      if (result.error === 'non-unique-name') {\n        setDuplicates(result.duplicates);\n        setRelationship(result.message);\n      } else {\n        setDuplicates({\n          person1: [],\n          person2: []\n        });\n        setRelationship({\n          relationshipDescription: result.relation,\n          relationshipScore: result.score,\n          relationshipLevels: result.levelsTuple,\n          relationshipGenerationGap: result.generation,\n          relationshipExplanationType: result.explanation.type,\n          relationshipExplanationDesc: result.explanation.explanation,\n          commonAncestor: result.ancestor,\n          ancestorstreeData: result.treeData,\n          person1ID: result.person1ID,\n          person2ID: result.person2ID\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching relationship:', error);\n      setRelationship({\n        relationshipDescription: 'An error occurred',\n        relationshipScore: null\n      });\n      setError(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getPersonMatches = async (personName, fatherName = \"\", grandfatherName = \"\", familyName) => {\n    let cypherQuery = ``;\n    const queryParamsObject = {};\n    if (personName) {\n      if (fatherName) {\n        if (grandfatherName) {\n          if (familyName) {\n            cypherQuery += `\n              MATCH (grandfather:Person)-[:FATHER_OF]->(father:Person)-[:FATHER_OF]->(child:Person)\n              WHERE child.name = $personName AND \n                    father.name = $fatherName AND \n                    grandfather.name = $grandfatherName AND \n                    child.lastName = $familyName\n              RETURN \n                id(child) AS childID,\n                child.name AS childName, \n                father.name AS fatherName, \n                grandfather.name AS grandfatherName, \n                child.lastName AS familyName  \n            `;\n            queryParamsObject.personName = personName;\n            queryParamsObject.fatherName = fatherName;\n            queryParamsObject.grandfatherName = grandfatherName;\n            queryParamsObject.familyName = familyName;\n          } else {\n            cypherQuery += `\n              MATCH (grandfather:Person)-[:FATHER_OF]->(father:Person)-[:FATHER_OF]->(child:Person)\n              WHERE child.name = $personName AND \n                    father.name = $fatherName AND \n                    grandfather.name = $grandfatherName\n              RETURN \n                    id(child) AS childID, \n                    child.name AS childName, \n                    father.name AS fatherName, \n                    grandfather.name AS grandfatherName,\n                    child.lastName AS familyName       \n              `;\n            queryParamsObject.personName = personName;\n            queryParamsObject.fatherName = fatherName;\n            queryParamsObject.grandfatherName = grandfatherName;\n          }\n        } else {\n          if (familyName) {\n            cypherQuery += `\n            MATCH (father:Person)-[:FATHER_OF]->(child:Person)\n            WHERE child.name = $personName AND \n                  father.name = $fatherName AND\n                  child.lastName = $familyName\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\n            RETURN  \n              id(child) AS childID,\n              child.name AS childName, \n              father.name AS fatherName,\n              grandfather.name AS grandfatherName,\n              child.lastName AS familyName\n            `;\n            queryParamsObject.personName = personName;\n            queryParamsObject.fatherName = fatherName;\n            queryParamsObject.familyName = familyName;\n          } else {\n            cypherQuery += `\n            MATCH (father:Person)-[:FATHER_OF]->(child:Person)\n            \n            WHERE child.name = $personName AND \n                  father.name = $fatherName\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\n            RETURN  id(child) AS childID, \n                    child.name AS childName, \n                    father.name AS fatherName, \n                    grandfather.name AS grandfatherName,\n                    child.lastName AS familyName\n            `;\n            queryParamsObject.personName = personName;\n            queryParamsObject.fatherName = fatherName;\n          }\n        }\n      } else {\n        if (familyName) {\n          cypherQuery += `\n          MATCH (child:Person)\n          WHERE child.name = $personName AND child.lastName = $familyName\n          OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(child)\n          OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\n          RETURN \n            id(child) AS childID,\n            child.name AS childName, \n            father.name AS fatherName,\n            grandfather.name AS grandfatherName,\n            child.lastName AS familyName\n        `;\n          queryParamsObject.personName = personName;\n          queryParamsObject.familyName = familyName;\n        } else {\n          cypherQuery += `\n            MATCH (child:Person)\n            WHERE child.name = $personName\n            OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(child)\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\n            RETURN\n              id(child) AS childID,\n              child.name AS childName, \n              father.name AS fatherName, \n              grandfather.name AS grandfatherName,\n              child.lastName AS familyName\n          `;\n          queryParamsObject.personName = personName;\n        }\n      }\n    }\n    const session = driver.session();\n    try {\n      const result = await session.run(cypherQuery, queryParamsObject);\n      return result.records.map(record => ({\n        id: record.get('childID').toNumber(),\n        name: record.get('childName'),\n        father: record.get('fatherName') || \"\",\n        grandfather: record.get('grandfatherName') || \"\",\n        lastName: record.get('familyName')\n      }));\n    } catch (Error) {\n      console.error('Query Error:', Error);\n      setError('حدث خطأ أثناء البحث.');\n    } finally {\n      await session.close();\n    }\n  };\n  const getRelationship = async (person1FullName, person2FullName) => {\n    const isArabic = text => /[\\u0600-\\u06FF]/.test(text);\n    let translatedName1, translatedName2;\n    if (isArabic(person1FullName)) {\n      translatedName1 = translateName(person1FullName, false);\n    } else {\n      translatedName1 = person1FullName;\n    }\n    if (isArabic(person2FullName)) {\n      translatedName2 = translateName(person2FullName, false);\n    } else {\n      translatedName2 = person2FullName;\n    }\n    const {\n      personName: person1Name,\n      fatherName: person1FatherName,\n      grandfatherName: person1GrandfatherName,\n      familyName: person1LastName\n    } = splitName(translatedName1);\n    const {\n      personName: person2Name,\n      fatherName: person2FatherName,\n      grandfatherName: person2GrandfatherName,\n      familyName: person2LastName\n    } = splitName(translatedName2);\n    const errorContainer = document.getElementById('error-container');\n    try {\n      const person1Matches = await getPersonMatches(person1Name, person1FatherName, person1GrandfatherName, person1LastName);\n      if (person1Matches.length === 0) {\n        throw new Error(`لا يوجد أشخاص بإسم ${person1FullName} الرجاء التثبت في الإسم جيدا`);\n      }\n      const person2Matches = await getPersonMatches(person2Name, person2FatherName, person2GrandfatherName, person2LastName);\n      if (person2Matches.length === 0) {\n        throw new Error(`لا يوجد أشخاص بإسم ${person2FullName} الرجاء التثبت في الإسم جيدا`);\n      }\n      setLoadingMessage(\"جاري البحث عن الأشخاص\");\n      console.log(\"P1 matches : \", person1Matches);\n      console.log(\"P2 matches : \", person2Matches);\n      let person1ID, person2ID;\n      if (person1Matches.length > 1 || person2Matches.length > 1) {\n        return {\n          error: 'non-unique-name',\n          message: 'تم العثور على عدة أشخاص بنفس الاسم. الرجاء اختيار الصحيح.',\n          duplicates: {\n            person1: person1Matches.length > 1 ? person1Matches : [],\n            person2: person2Matches.length > 1 ? person2Matches : []\n          }\n        };\n      } else {\n        person1ID = person1Matches[0].id;\n        person2ID = person2Matches[0].id;\n      }\n      const getAncestors = async (person1ID, person2ID) => {\n        setLoadingMessage(\"جاري البحث عن الأجداد المشتركة\");\n        const result = await session.run(`\n          MATCH path1 = (common:Person)-[:FATHER_OF|MOTHER_OF*0..4]->(p1:Person)\n          WHERE id(p1) = $person1ID\n      \n          MATCH path2 = (common)-[:FATHER_OF|MOTHER_OF*0..4]->(p2:Person)\n          WHERE id(p2) = $person2ID\n            AND id(p1) <> id(p2)\n      \n          WITH common, path1, path2, length(path1) AS level1, length(path2) AS level2\n          OPTIONAL MATCH (cGF:Person)-[:FATHER_OF]->(cF:Person)-[:FATHER_OF]->(common)\n\n          ORDER BY (level1 + level2) ASC\n          LIMIT 1\n      \n          RETURN \n            common.name AS commonAncestorName,\n            cF.name AS commonAncestorFatherName,\n            cGF.name AS commonAncestorGrandFatherName,\n            common.lastName AS commonAncestorLastName,\n            id(common) AS commonAncestorID,\n            common.gender AS commonAncestorGender,\n            level1 AS generationsFromP1,\n            level2 AS generationsFromP2,\n            [n IN nodes(path1) | { id: id(n), name: n.name, lastName: n.lastName, gender: n.gender }] AS pathToP1,\n            [n IN nodes(path2) | { id: id(n), name: n.name, lastName: n.lastName, gender: n.gender }] AS pathToP2\n        `, {\n          person1ID,\n          person2ID\n        });\n        const record = result.records[0];\n        return {\n          id: record.get('commonAncestorID').toNumber(),\n          name: record.get('commonAncestorName'),\n          lastName: record.get('commonAncestorLastName'),\n          fatherName: record.get('commonAncestorFatherName'),\n          grandfatherName: record.get('commonAncestorGrandFatherName'),\n          gender: record.get('commonAncestorGender'),\n          levelFromP1: record.get('generationsFromP1').toNumber(),\n          levelFromP2: record.get('generationsFromP2').toNumber(),\n          pathFromAncestorToP1: record.get('pathToP1'),\n          pathFromAncestorToP2: record.get('pathToP2')\n        };\n      };\n      const checkMarriage = async (person1ID, person2ID) => {\n        setLoadingMessage(\"جاري البحث عن علاقة زواج\");\n        const result = await session.run(`\n          MATCH (Husband:Person)-[:HUSBAND_OF]->(Wife:Person)\n          MATCH (Wife)-[:WIFE_OF]->(Husband)\n          WHERE (id(Wife) = $person1ID AND id(Husband) = $person2ID) \n            OR (id(Wife) = $person2ID AND id(Husband) = $person1ID)\n          RETURN Husband AS P1, Wife AS P2\n        `, {\n          person1ID,\n          person2ID\n        });\n        const record = result.records[0];\n        const P1 = record.get(\"P1\").properties;\n        const P2 = record.get(\"P2\").properties;\n        return record.length === 0 ? {\n          areMarried: false\n        } : {\n          areMarried: true,\n          P1,\n          P2\n        };\n      };\n      let marraigeRecord = await checkMarriage(person1ID, person2ID);\n      console.log(marraigeRecord);\n      if (marraigeRecord.areMarried === true) {\n        let gender1 = marraigeRecord.P1.gender;\n        let gender2 = marraigeRecord.P2.gender;\n        console.log(gender1);\n        let relation = '';\n        let score = 100;\n        if (gender1 === 'Male') {\n          relation = `${translatedName1} هو زوج ${translatedName2}`;\n        } else {\n          relation = `${translatedName1} هي زوجة ${translatedName2}`;\n        }\n        setLoading(false);\n        return {\n          relation,\n          score\n        };\n      } else {\n        let relationRecord = await getAncestors(person1ID, person2ID);\n        const ancestorID = relationRecord.id;\n        const ancestorName = translateName(relationRecord.name);\n        const ancestorLastName = translateName(relationRecord.lastName);\n        const ancestorFatherName = translateName(relationRecord.fatherName);\n        const ancestorGrandFatherName = translateName(relationRecord.grandfatherName);\n        const ancestorGender = relationRecord.gender;\n        let levelFromP1, levelFromP2, pathFromAncestorToP1, pathFromAncestorToP2;\n        const ancestor = {\n          ancestorID,\n          ancestorName,\n          ancestorFatherName,\n          ancestorGrandFatherName,\n          ancestorLastName,\n          ancestorGender\n        };\n        ({\n          levelFromP1,\n          levelFromP2,\n          pathFromAncestorToP1,\n          pathFromAncestorToP2\n        } = relationRecord);\n        const pathToP1 = pathFromAncestorToP1;\n        const pathToP2 = pathFromAncestorToP2;\n        const treeData = mergePaths(pathToP1, pathToP2);\n        console.log(pathFromAncestorToP1.reverse().map(a => a.name).join(\" ben \"));\n        console.log(pathFromAncestorToP2.reverse().map(a => a.name).join(\" ben \"));\n        var p1Level = levelFromP1;\n        var p2Level = levelFromP2;\n        const translatedName1 = translateName(person1FullName);\n        const translatedName2 = translateName(person2FullName);\n        const gender1 = pathToP1[0].gender;\n        const gender2 = pathToP2[0].gender;\n        let relation = '',\n          score = 0;\n        let relationshipExplanation = [{\n          type: \"العائلة\",\n          explanation: \"هؤلاء الشخصين مرتبطين من خلال العائلة ذو الدرجة الأولى.\"\n        }, {\n          type: \"العائلة المقربة\",\n          explanation: \"هؤلاء الشخصين مرتبطين من خلال أعمام وأخوال مشتركين.\"\n        }, {\n          type: \"العائلة الموسعة\",\n          explanation: \"هؤلاء الشخصين مرتبطين من خلال أعمام أو أخوال الأب وأحفادهم.\"\n        }, {\n          type: \"قرابة الزواج\",\n          explanation: \"هذان الشخصان مرتبطان من خلال الزواج.\"\n        }, {\n          type: \"صهر / نسيب\",\n          explanation: \"هذان الشخصان مرتبطان عبر الزواج وليس النسب الدموي.\"\n        }, {\n          type: \"لا توجد علاقة\",\n          explanation: \"لم يتم العثور على أي صلة قرابة بين الشخصين في قاعدة البيانات.\"\n        }, {\n          type: \"نفس الشخص\",\n          explanation: \"الاسمين يشيران إلى نفس الشخص.\"\n        }];\n        console.log(`Level: (${p1Level}, ${p2Level})`);\n        setLoadingMessage(\"جاري البحث عن العلاقة بين الشخصين\");\n        if (p1Level === 0 && p2Level === 1) {\n          if (gender1 === 'Male') {\n            relation = `${translatedName1} هو والد ${translatedName2}`;\n          } else {\n            relation = `${translatedName1} هي والدة ${translatedName2}`;\n          }\n          score = 100;\n        } else if (p1Level === 1 && p2Level === 0) {\n          if (gender1 === 'Male') {\n            relation = `${translatedName1} هو ابن ${translatedName2}`;\n          } else {\n            relation = `${translatedName1} هي إبنة ${translatedName2}`;\n          }\n          score = 100;\n        } else if (p1Level === 2 && p2Level === 0) {\n          if (gender1 === 'Male') {\n            relation = `${translatedName1} هو حفيد ${translatedName2}`;\n          } else {\n            relation = `${translatedName1} هي حفيدة ${translatedName2}`;\n          }\n          score = 90;\n        } else if (p1Level === 0 && p2Level === 2) {\n          if (gender1 === 'Male') {\n            relation = `${translatedName1} هو جدّ ${translatedName2}`;\n          } else {\n            relation = `${translatedName1} هي جدّة ${translatedName2}`;\n          }\n          score = 90;\n        } else if (p1Level === 3 && p2Level === 0) {\n          if (gender1 === 'Male') {\n            relation = `${translatedName1} هو إبن حفيد ${translatedName2}`;\n          } else {\n            relation = `${translatedName1} هي إبنة حفيدة ${translatedName2}`;\n          }\n          score = 75;\n        } else if (p1Level === 0 && p2Level === 3) {\n          if (gender1 === 'Male') {\n            relation = `${translatedName1} و جد والد ${translatedName2}`;\n          } else {\n            relation = `${translatedName1} هي جدة والدة ${translatedName2}`;\n          }\n          score = 80;\n        } else if (p1Level === 0 && p2Level === 4) {\n          // ADD FROM MOTHER FROM FATHER GRANDFATHER \n          const p2GreatAncestorGender = pathToP1[2].gender;\n          if (gender1 === 'Male') {\n            if (p2GreatAncestorGender === 'Male') {\n              relation = `${translatedName1} هو جد جد ${translatedName2}`;\n            } else {\n              relation = `${translatedName1} هو جد جدة ${translatedName2}`;\n            }\n          } else {\n            if (p2GreatAncestorGender === 'Male') {\n              relation = `${translatedName1} هي جدة جد ${translatedName2}`;\n            } else {\n              relation = `${translatedName1} هي جدة جدة ${translatedName2}`;\n            }\n          }\n          score = 75;\n        } else if (p1Level === 4 && p2Level === 0) {\n          // ADD FROM MOTHER FROM FATHER GRANDFATHER \n          const p1GreatAncestorGender = pathToP1[2].gender;\n          if (gender1 === 'Male') {\n            if (p1GreatAncestorGender === 'Male') {\n              relation = `${translatedName1} هو حفيد حفيد ${translatedName2}`;\n            } else {\n              relation = `${translatedName1} هو حفيد حفيدة ${translatedName2}`;\n            }\n          } else {\n            if (p1GreatAncestorGender === 'Male') {\n              relation = `${translatedName1} هي حفيدة حفيد ${translatedName2}`;\n            } else {\n              relation = `${translatedName1} هي حفيدة حفيد ${translatedName2}`;\n            }\n          }\n          score = 75;\n        } else if (p1Level === 1 && p2Level === 1) {\n          if (gender1 === 'Male' && gender2 === 'Male') {\n            relation = `${translatedName1} و ${translatedName2} إخوة`;\n          } else if (gender1 === 'Female' && gender2 === 'Female') {\n            relation = `${translatedName1} و ${translatedName2} أخوات`;\n          } else {\n            relation = `${translatedName1} و ${translatedName2} إخوة`;\n          }\n          score = 98;\n        } else if (p1Level === 2 && p2Level === 1) {\n          const p1AncestorGender = pathToP1[1].gender;\n          if (gender1 === 'Male') {\n            if (p1AncestorGender === 'Male') {\n              relation = `${translatedName1} هو ابن أخ ${translatedName2}`;\n            } else {\n              relation = `${translatedName1} هو ابن أخت ${translatedName2}`;\n            }\n            score = 93;\n          } else {\n            if (p1AncestorGender === 'Male') {\n              relation = `${translatedName1} هي ابن أخ ${translatedName2}`;\n            } else {\n              relation = `${translatedName1} هي ابنة أخت ${translatedName2}`;\n            }\n            score = 93;\n          }\n        } else if (p1Level === 1 && p2Level === 2) {\n          const p2AncestorGender = pathToP2[1].gender;\n          if (gender1 === 'Male') {\n            if (p2AncestorGender === 'Male') {\n              relation = `${translatedName1} هو عم ${translatedName2}`;\n              score = 95;\n            } else {\n              relation = `${translatedName1} هو خال ${translatedName2}`;\n              score = 94;\n            }\n          } else {\n            if (p2AncestorGender === 'Male') {\n              relation = `${translatedName1} هي عمة ${translatedName2}`;\n              score = 95;\n            } else {\n              relation = `${translatedName1} هي خالة ${translatedName2}`;\n              score = 94;\n            }\n          }\n        } else if (p1Level === 1 && p2Level === 3) {\n          const p2AncestorGender = pathToP2[1].gender;\n          const p2GreatAncestorGender = pathToP2[2].gender;\n          if (gender1 === 'Male') {\n            if (p2AncestorGender === 'Male') {\n              if (p2GreatAncestorGender === 'Male') {\n                relation = `${translatedName1} هو عم والد ${translatedName2}`;\n                score = 80;\n              } else {\n                relation = `${translatedName1} هو خال والد ${translatedName2}`;\n                score = 75;\n              }\n            } else {\n              if (p2GreatAncestorGender === 'Male') {\n                relation = `${translatedName1} هو عم والدة ${translatedName2}`;\n                score = 80;\n              } else {\n                relation = `${translatedName1} هو خال والدة ${translatedName2}`;\n                score = 70;\n              }\n            }\n          } else {\n            if (p2AncestorGender === 'Male') {\n              if (p2GreatAncestorGender === 'Male') {\n                relation = `${translatedName1} هي عمة والد ${translatedName2}`;\n                score = 80;\n              } else {\n                relation = `${translatedName1} هي خالة والد ${translatedName2}`;\n                score = 75;\n              }\n            } else {\n              if (p2GreatAncestorGender === 'Male') {\n                relation = `${translatedName1} هي عمة والدة ${translatedName2}`;\n                score = 80;\n              } else {\n                relation = `${translatedName1} هي خالة والدة ${translatedName2}`;\n                score = 75;\n              }\n            }\n          }\n        } else if (p1Level === 3 && p2Level === 1) {\n          const p1GreatAncestorGender = pathToP1[2].gender;\n          if (gender1 === 'Male') {\n            if (p1GreatAncestorGender === 'Male') {\n              relation = `${translatedName1} هو حفيد اخ ${translatedName2}`;\n              score = 78;\n            } else {\n              relation = `${translatedName1} هو حفيد اخت ${translatedName2}`;\n              score = 78;\n            }\n          } else {\n            if (p1GreatAncestorGender === 'Male') {\n              relation = `${translatedName1} هي حفيدة اخ ${translatedName2}`;\n              score = 78;\n            } else {\n              relation = `${translatedName1} هي حفيدة اخت ${translatedName2}`;\n              score = 78;\n            }\n          }\n        } else if (p1Level === 2 && p2Level === 2) {\n          const p1AncestorGender = pathToP1[1].gender;\n          const p2AncestorGender = pathToP2[1].gender;\n          if (gender1 === 'Male') {\n            if (p2AncestorGender === 'Male') {\n              if (p1AncestorGender === 'Male') {\n                // ولد عمه\n                relation = `${translatedName1} إبن عم ${translatedName2}`;\n                score = 90;\n              } else {\n                relation = `${translatedName1} هو إبن عمّة ${translatedName2}`;\n                score = 89;\n              }\n            } else {\n              if (p1AncestorGender === 'Male') {\n                // ولد خاله\n                relation = `${translatedName1} هو إبن خال ${translatedName2}`;\n                score = 88;\n              } else {\n                relation = `${translatedName1} هو إبن خالة ${translatedName2}`;\n                score = 86;\n              }\n            }\n          } else {\n            if (p1AncestorGender === 'Male') {\n              if (p2AncestorGender === 'Male') {\n                // بنت عمه\n                relation = `${translatedName1} هي إبنة عمّ ${translatedName2}`;\n                score = 90;\n              } else {\n                relation = `${translatedName1} هي إبنة عمّة ${translatedName2}`;\n                score = 89;\n              }\n            } else {\n              if (p2AncestorGender === 'Male') {\n                // بنت خاله\n                relation = `${translatedName1} هي إبنة خال ${translatedName2}`;\n                score = 88;\n              } else {\n                relation = `${translatedName1} هي إبنة خالة ${translatedName2}`;\n                score = 86;\n              }\n            }\n          }\n        } else if (p1Level === 2 && p2Level === 3) {\n          const p1AncestorGender = pathToP1[1].gender;\n          const p2AncestorGender = pathToP2[1].gender;\n          if (gender1 === 'Male') {\n            if (p1AncestorGender === 'Male') {\n              if (p2AncestorGender === 'Male') {\n                relation = `${translatedName1} هو إبن عم والد ${translatedName2}`;\n                score = 80;\n              } else {\n                relation = `${translatedName1} هو إبن عمة والد ${translatedName2}`;\n                score = 78;\n              }\n            } else {\n              // mother's side\n              if (p2AncestorGender === 'Male') {\n                // mother's brother's son\n                relation = `${translatedName1} هو إبن عم والدة ${translatedName2}.`;\n                score = 74;\n              } else {\n                // mother's brother's daughter\n                relation = `${translatedName1} هو إبن عمّة والدة ${translatedName2}`;\n                score = 72;\n              }\n            }\n          } else {\n            // If person1 is female\n            if (p1AncestorGender === 'Male') {\n              // father's side\n              if (p2AncestorGender === 'Male') {\n                // father's brother's son\n                relation = `${translatedName1} هي إبنة عم والد ${translatedName2}`;\n                score = 80;\n              } else {\n                // father's brother's daughter\n                relation = `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\n                score = 78;\n              }\n            } else {\n              // mother's side\n              if (p2AncestorGender === 'Male') {\n                // mother's brother's son\n                relation = `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\n                score = 74;\n              } else {\n                // mother's brother's daughter\n                relation = `${translatedName1} هي إبنة عمة والدة ${translatedName2}`;\n                score = 72;\n              }\n            }\n          }\n        } else if (p1Level === 3 && p2Level === 2) {\n          const p1AncestorGender = pathToP1[1].gender;\n          const p2AncestorGender = pathToP2[1].gender;\n          if (p1AncestorGender === 'Male') {\n            // father's side\n            if (p2AncestorGender === 'Male') {\n              // father's brother's son\n              relation = `والد ${translatedName1} هو إبن عم ${translatedName2}`;\n              score = 80;\n            } else {\n              relation = `والد ${translatedName1} هو إبن خال ${translatedName2}`;\n              score = 75;\n            }\n          } else {\n            // mother's side\n            if (p2AncestorGender === 'Male') {\n              // mother's brother's son\n              relation = `والدة ${translatedName1} هي إبنة عم ${translatedName2}`;\n              score = 80;\n            } else {\n              // mother's brother's daughter\n              relation = `والدة ${translatedName1} هي إبنة خال  ${translatedName2}`;\n              score = 75;\n            }\n          }\n        } else if (p1Level === 3 && p2Level === 3) {\n          const p1AncestorGender = pathToP1[1].gender;\n          const p2AncestorGender = pathToP2[1].gender;\n          const p1GreatAncestorGender = pathToP1[2].gender;\n          const p2GreatAncestorGender = pathToP2[2].gender;\n          if (p1AncestorGender === 'Male') {\n            if (p2AncestorGender === 'Male') {\n              if (p1GreatAncestorGender === 'Male') {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\n                } else {\n                  relation = `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\n                }\n              } else {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `جدّة ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\n                } else {\n                  relation = `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\n                }\n              }\n            } else {\n              if (p1GreatAncestorGender === 'Male') {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأم إخوة.`;\n                } else {\n                  relation = `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\n                }\n              } else {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `جدّة ${translatedName1} من الأب و جد${translatedName2} من الأم إخوة.`;\n                } else {\n                  relation = `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\n                }\n              }\n            }\n          } else {\n            if (p2AncestorGender === 'Male') {\n              if (p1GreatAncestorGender === 'Male') {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `جدّ ${translatedName1} من الأم و جد${translatedName2} من الأب إخوة.`;\n                } else {\n                  relation = `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\n                }\n              } else {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `جدّة ${translatedName1} من الأم و جد ${translatedName2} من الأب إخوة.`;\n                } else {\n                  relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب أخوات.`;\n                }\n              }\n            } else {\n              if (p1GreatAncestorGender === 'Male') {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `جدّ ${translatedName1} من الأم و جد ${translatedName2} من الأم إخوة.`;\n                } else {\n                  relation = `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\n                }\n              } else {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\n                } else {\n                  relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\n                }\n              }\n            }\n          }\n        } else {\n          setLoading(false);\n          console.log('No direct relation found.');\n          errorContainer.innerText = 'لا يوجد قرابة مباشرة.';\n          const result = await session.run(`\n              MATCH (P1:Person), (P2:Person)\n              WHERE id(P1) = $p1Id AND id(P2) = $p2Id\n\n              // Check if P1 is married\n              OPTIONAL MATCH (P1)-[:HUSBAND_OF|:WIFE_OF]->(P1Spouse:Person)\n              OPTIONAL MATCH (P1SpouseFather:Person)-[:FATHER_OF]->(P1Spouse)\n              OPTIONAL MATCH (P1SpouseMother:Person)-[:MOTHER_OF]->(P1Spouse)\n              OPTIONAL MATCH (P1SpouseSibling:Person)\n              WHERE (P1SpouseFather)-[:FATHER_OF]->(P1SpouseSibling) AND P1SpouseSibling <> P1Spouse\n\n              // Check if P2 is married\n              OPTIONAL MATCH (P2)-[:HUSBAND_OF|:WIFE_OF]->(P2Spouse:Person)\n              OPTIONAL MATCH (P2SpouseFather:Person)-[:FATHER_OF]->(P2Spouse)\n              OPTIONAL MATCH (P2SpouseMother:Person)-[:MOTHER_OF]->(P2Spouse)\n              OPTIONAL MATCH (P2SpouseSibling:Person)\n              WHERE (P2SpouseFather)-[:FATHER_OF]->(P2SpouseSibling) AND P2SpouseSibling <> P2Spouse\n\n              WITH\n                id(P1SpouseFather) AS p1FatherId,\n                id(P1SpouseMother) AS p1MotherId,\n                collect(DISTINCT id(P1SpouseSibling)) AS p1Siblings,\n                id(P2SpouseFather) AS p2FatherId,\n                id(P2SpouseMother) AS p2MotherId,\n                collect(DISTINCT id(P2SpouseSibling)) AS p2Siblings,\n                id(P1) AS p1Id,\n                id(P2) AS p2Id\n\n              RETURN CASE\n                WHEN p2Id = p1FatherId OR p2Id = p1MotherId THEN 0        // P2 is parent of P1's spouse\n                WHEN p2Id IN p1Siblings THEN 1                            // P2 is sibling of P1's spouse\n                WHEN p1Id = p2FatherId OR p1Id = p2MotherId THEN 2        // P1 is parent of P2's spouse\n                WHEN p1Id IN p2Siblings THEN 3                            // P1 is sibling of P2's spouse\n                ELSE null\n              END AS relationshipLevel\n            `, {\n            person1ID,\n            person2ID\n          });\n          const record = result.records[0].get(\"relationshipLevel\");\n          if (record !== null) {\n            if (gender1 === 'Male') {\n              setLoadingMessage(\"جاري البحث عن علاقة زواج\");\n              if (record === 0) {\n                relation = `${translatedName1} هو أب زوجة ${translatedName2}`;\n              } else if (record === 1) {\n                relation = `${translatedName1} هو أخ زوجة ${translatedName2}`;\n              } else if (record === 2) {\n                relation = `${translatedName1} هو زوج ابنة ${translatedName2}`;\n              } else if (record === 3) {\n                relation = `${translatedName1} هو زوج أخت ${translatedName2}`;\n              } else {\n                relation = `لا توجد علاقة زواج مباشرة بين ${translatedName1} و ${translatedName2}`;\n              }\n            } else {\n              setLoadingMessage(\"جاري البحث عن علاقة زواج\");\n              if (record === 0) {\n                relation = `${translatedName1} هي أم زوجة ${translatedName2}`;\n              } else if (record === 1) {\n                relation = `${translatedName1} هي أخت زوجة ${translatedName2}`;\n              } else {\n                relation = `لا توجد علاقة زواج مباشرة بين ${translatedName1} و ${translatedName2}`;\n              }\n            }\n          } else {\n            let relation = '';\n            const result = await session.run(`\n                MATCH (P1:Person), (P2:Person)\n                WHERE id(P1) = $p1Id AND id(P2) = $p2Id\n\n                // P1's spouse and their family\n                OPTIONAL MATCH (P1)-[:HUSBAND_OF|:WIFE_OF]->(P1Spouse:Person)\n                OPTIONAL MATCH (P1SpouseFather:Person)-[:FATHER_OF]->(P1Spouse)\n                OPTIONAL MATCH (P1SpouseMother:Person)-[:MOTHER_OF]->(P1Spouse)\n                OPTIONAL MATCH (P1SpouseFather)-[:FATHER_OF]->(P1SpouseSibling:Person)\n                WHERE P1SpouseSibling <> P1Spouse\n\n                // P2's spouse and their family\n                OPTIONAL MATCH (P2)-[:HUSBAND_OF|:WIFE_OF]->(P2Spouse:Person)\n                OPTIONAL MATCH (P2SpouseFather:Person)-[:FATHER_OF]->(P2Spouse)\n                OPTIONAL MATCH (P2SpouseMother:Person)-[:MOTHER_OF]->(P2Spouse)\n                OPTIONAL MATCH (P2SpouseFather)-[:FATHER_OF]->(P2SpouseSibling:Person)\n                WHERE P2SpouseSibling <> P2Spouse\n\n                WITH\n                  id(P1) AS p1Id,\n                  id(P2) AS p2Id,\n                  id(P1Spouse) AS p1SpouseId,\n                  id(P2Spouse) AS p2SpouseId,\n                  id(P1SpouseFather) AS p1SpouseFatherId,\n                  id(P1SpouseMother) AS p1SpouseMotherId,\n                  collect(DISTINCT id(P1SpouseSibling)) AS p1SpouseSiblings,\n                  id(P2SpouseFather) AS p2SpouseFatherId,\n                  id(P2SpouseMother) AS p2SpouseMotherId,\n                  collect(DISTINCT id(P2SpouseSibling)) AS p2SpouseSiblings\n\n                RETURN CASE\n                  WHEN p2Id = p1SpouseFatherId OR p2Id = p1SpouseMotherId THEN 0\n                  WHEN p2Id IN p1SpouseSiblings THEN 1\n                  WHEN p1Id = p2SpouseFatherId OR p1Id = p2SpouseMotherId THEN 2\n                  WHEN p1Id IN p2SpouseSiblings THEN 3\n                  WHEN p1SpouseId IN p2SpouseSiblings THEN 4\n                  WHEN p2Id IN p1SpouseSiblings THEN 5\n                  WHEN p1Id = p2SpouseFatherId THEN 6\n                  WHEN p1Id = p2SpouseMotherId THEN 7\n                  WHEN p1Id = p2SpouseId THEN 8\n                  ELSE null\n                END AS relationshipLevel\n              `, {\n              person1ID,\n              person2ID\n            });\n            const record = result.records[0].get(\"relationshipLevel\");\n            switch (record) {\n              case 0:\n                relation = `${translatedName1} هو ${gender1 === 'Male' ? 'أب' : 'أم'} زوجة ${translatedName2}`;\n                break;\n              case 1:\n                relation = `${translatedName1} هو ${gender1 === 'Male' ? 'أخ' : 'أخت'} زوجة ${translatedName2}`;\n                break;\n              case 2:\n                relation = `${translatedName1} هو زوج ابنة ${translatedName2}`;\n                break;\n              case 3:\n                relation = `${translatedName1} هو زوج أخت ${translatedName2}`;\n                break;\n              case 4:\n                relation = `${translatedName1} هو زوج أخت زوجة ${translatedName2}`;\n                break;\n              case 5:\n                relation = `${translatedName1} هي زوجة أخ ${translatedName2}`;\n                break;\n              case 6:\n                relation = `${translatedName1} هو والد زوج ${translatedName2}`;\n                break;\n              case 7:\n                relation = `${translatedName1} هي والدة زوج ${translatedName2}`;\n                break;\n              case 8:\n                relation = `${translatedName1} هو زوج ${translatedName2}`;\n                break;\n              default:\n                relation = 'لا توجد علاقة زواج مباشرة بين الشخصين';\n            }\n            return relation;\n          }\n          if (relation != '') {\n            setLoading(false);\n            return {\n              relation,\n              score,\n              generation: Math.abs(p1Level - p2Level),\n              levelsTuple: {\n                levelFromP1,\n                levelFromP2\n              },\n              explanation: relationshipExplanation[0],\n              ancestor,\n              treeData,\n              person1ID,\n              person2ID\n            };\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error in relationship lookup:', error);\n      setError(`❌ خطأ: ${error.message || error}`);\n      if (errorContainer) {\n        errorContainer.innerText = `❌ خطأ: ${error.message || error}`;\n      }\n      setLoading(false);\n      return '';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relation-page\",\n    children: [(duplicates.person1.length > 0 || duplicates.person2.length > 0) && /*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"duplicates-panel\",\n      children: [duplicates.person1.length > 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"duplicates-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u0623\\u0643\\u062A\\u0628 \\u0627\\u0644\\u0627\\u0633\\u0645 \\u0627\\u0644\\u0643\\u0627\\u0645\\u0644 \\u0644\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0635\\u062D\\u064A\\u062D:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: duplicates.person1.map((p, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: `${translateName(p.name)} بن ${translateName(p.father)} بن ${translateName(p.grandfather)} ${translateName(p.lastName)}`\n          }, `p1-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1112,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1110,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1108,\n        columnNumber: 11\n      }, this), duplicates.person2.length > 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"duplicates-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"\\u0627\\u062E\\u062A\\u0631 \\u0627\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0635\\u062D\\u064A\\u062D \\\"\", person2, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1122,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: duplicates.person2.map((p, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: `${translateName(p.name)} بن ${translateName(p.father)} بن ${translateName(p.grandfather)} ${translateName(p.lastName)}`\n          }, `p2-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1125,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1123,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1121,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"relation-form-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"section-title\",\n          children: \"\\u0645\\u0627\\u0647\\u064A \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629 \\u0628\\u064A\\u0646\\u0647\\u0645\\u0627\\u061F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1137,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"DescriptionZone\",\n          children: \"\\u0627\\u0644\\u0647\\u062F\\u0641 \\u0645\\u0646 \\u0647\\u0630\\u0647 \\u0627\\u0644\\u0635\\u0641\\u062D\\u0629 \\u0647\\u0648 \\u062A\\u062D\\u062F\\u064A\\u062F \\u0635\\u0644\\u0629 \\u0627\\u0644\\u0642\\u0631\\u0627\\u0628\\u0629 \\u0628\\u064A\\u0646 \\u0634\\u062E\\u0635\\u064A\\u0646 \\u0628\\u0646\\u0627\\u0621\\u064B\\u0627 \\u0639\\u0644\\u0649 \\u0627\\u0633\\u0645\\u0647\\u0645. \\u0643\\u0644 \\u0645\\u0627\\u0639\\u0644\\u064A\\u0643 \\u0641\\u0639\\u0644\\u0647 \\u0647\\u0648 \\u0627\\u062F\\u062E\\u0627\\u0644 \\u0627\\u0644\\u0627\\u0633\\u0645 \\u0644\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0627\\u0648\\u0644 \\u0648\\u0627\\u0644\\u062B\\u0627\\u0646\\u064A \\u0648\\u062B\\u0645 \\u0627\\u0644\\u0646\\u0642\\u0631 \\u0639\\u0644\\u0649 \\\"\\u0627\\u0644\\u062A\\u062D\\u0642\\u0642 \\u0645\\u0646 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\\\" \\u0633\\u062A\\u0638\\u0647\\u0631 \\u0644\\u0643 \\u0627\\u0644\\u0646\\u062A\\u064A\\u062C\\u0629 \\u0641\\u064A \\u0627\\u0633\\u0647\\u0644 \\u0627\\u0644\\u0635\\u0641\\u062D\\u0629 \\u0648\\u0627\\u0644\\u062A\\u064A \\u064A\\u062A\\u0648\\u0636\\u062D \\u0644\\u0643 \\u0646\\u0648\\u0639 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629 \\u0648\\u0645\\u062F\\u0649 \\u0642\\u0631\\u0627\\u0628\\u062A\\u0647\\u0627\\u061F \\u0641\\u064A \\u062D\\u0627\\u0644 \\u0648\\u062C\\u0648\\u062F \\u0627\\u064A \\u062A\\u0634\\u0627\\u0628\\u0647\\u0627\\u062A \\u0627\\u0648 \\u062A\\u0643\\u0631\\u0627\\u0631\\u0627\\u062A \\u0641\\u064A \\u0627\\u0644\\u0627\\u0633\\u0645\\u0627\\u0621 \\u0633\\u064A\\u0645 \\u062A\\u0648\\u0641\\u064A\\u0631 \\u062E\\u064A\\u0627\\u0631\\u0627\\u062A \\u0644\\u062A\\u062D\\u062F\\u064A\\u062F \\u0627\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0635\\u062D\\u064A\\u062D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1138,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: fetchRelationship,\n          className: \"relation-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"\\u0627\\u0644\\u0625\\u0633\\u0645 \\u0627\\u0644\\u0643\\u0627\\u0645\\u0644 \\u0627\\u0644\\u0623\\u0648\\u0644\",\n              value: person1,\n              onChange: e => setPerson1(e.target.value),\n              className: \"inputNames\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1145,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1144,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"\\u0627\\u0644\\u0625\\u0633\\u0645 \\u0627\\u0644\\u0643\\u0627\\u0645\\u0644 \\u0627\\u0644\\u062B\\u0627\\u0646\\u064A\",\n              value: person2,\n              onChange: e => setPerson2(e.target.value),\n              className: \"inputNames\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1154,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1153,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ButtonSection\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"checkButton\",\n              children: \"\\u062A\\u062D\\u0642\\u0642 \\u0645\\u0646 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1163,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"reset\",\n              className: \"resetButton\",\n              children: \"\\u0625\\u0644\\u063A\\u0627\\u0621\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1164,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1162,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1143,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1136,\n        columnNumber: 7\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1170,\n        columnNumber: 17\n      }, this), \" \", loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: loadingMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1174,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1172,\n        columnNumber: 9\n      }, this), !loading && relationship && !error && /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"relationship-result\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          id: \"resultTitle\",\n          children: \"\\u0646\\u062A\\u064A\\u062C\\u0629 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"relationText\",\n          children: relationship.relationshipDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"result-table\",\n            children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"\\u062F\\u0631\\u062C\\u0629 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1186,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"score-cell\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"score-bar-wrapper\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"score-bar-fill\",\n                      style: {\n                        width: `${relationship.relationshipScore || 0}%`\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1189,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1188,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"score-meta\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"score-value\",\n                      children: relationship.relationshipScore\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1192,\n                      columnNumber: 23\n                    }, this), relationship.relationshipScore !== null && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: relationship.relationshipScore >= 80 ? \"score-category high\" : relationship.relationshipScore >= 60 ? \"score-category medium\" : \"score-category low\",\n                      children: relationship.relationshipScore >= 80 ? \"قوية\" : relationship.relationshipScore >= 60 ? \"متوسطة\" : \"ضعيفة\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1194,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1191,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1187,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1185,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"\\u0646\\u0648\\u0639 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1214,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"relationship-tag\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"tag blood\",\n                    children: \"\\u062F\\u0645\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1215,\n                    columnNumber: 52\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1215,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1213,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"\\u062A\\u0641\\u0633\\u064A\\u0631 \\u0625\\u0636\\u0627\\u0641\\u064A\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1218,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"relation-explanation\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"relation-explanation-type\",\n                    children: relationship.relationshipExplanationType\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1220,\n                    columnNumber: 21\n                  }, this), \" :\", relationship.relationshipExplanationDesc || \"لا يوجد تفسير متاح.\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1219,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1217,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"\\u0639\\u062F\\u062F \\u0627\\u0644\\u0623\\u062C\\u064A\\u0627\\u0644 \\u0628\\u064A\\u0646\\u0647\\u0645\\u0627 \\u062D\\u0633\\u0628 \\u0627\\u0644\\u062C\\u062F \\u0627\\u0644\\u0645\\u0634\\u062A\\u0631\\u0643\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1227,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"generation-distance\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"tooltip-container\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      id: \"numGen\",\n                      children: relationship.relationshipGenerationGap\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1230,\n                      columnNumber: 23\n                    }, this), \" \\u0623\\u062C\\u064A\\u0627\\u0644\", /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"custom-tooltip\",\n                      children: \"\\u0639\\u062F\\u062F \\u0627\\u0644\\u0623\\u062C\\u064A\\u0627\\u0644 \\u0647\\u0648 \\u0639\\u062F\\u062F \\u0627\\u0644\\u0623\\u0634\\u062E\\u0627\\u0635 \\u0627\\u0644\\u0641\\u0627\\u0635\\u0644\\u064A\\u0646 \\u0641\\u064A \\u0634\\u062C\\u0631\\u0629 \\u0627\\u0644\\u0639\\u0627\\u0626\\u0644\\u0629 \\u0628\\u064A\\u0646 \\u0627\\u0644\\u0634\\u062E\\u0635\\u064A\\u0646.\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1231,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1229,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1228,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1226,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"tooltip-container\",\n                    children: [\"\\u0627\\u0644\\u062C\\u062F \\u0627\\u0644\\u0645\\u0634\\u062A\\u0631\\u0643\", /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"custom-tooltip\",\n                      children: \"\\u0639\\u062F\\u062F \\u0627\\u0644\\u0623\\u062C\\u064A\\u0627\\u0644 \\u0647\\u0648 \\u0639\\u062F\\u062F \\u0627\\u0644\\u0623\\u0634\\u062E\\u0627\\u0635 \\u0627\\u0644\\u0641\\u0627\\u0635\\u0644\\u064A\\u0646 \\u0641\\u064A \\u0634\\u062C\\u0631\\u0629 \\u0627\\u0644\\u0639\\u0627\\u0626\\u0644\\u0629 \\u0628\\u064A\\u0646 \\u0627\\u0644\\u0634\\u062E\\u0635\\u064A\\u0646.\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1241,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1239,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1238,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"generation-distance\",\n                  children: [relationship.commonAncestor.ancestorName, \" \\u0628\\u0646 \", relationship.commonAncestor.ancestorFatherName, \" \\u0628\\u0646 \", relationship.commonAncestor.ancestorGrandFatherName, \" \", relationship.commonAncestor.ancestorLastName]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1246,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1237,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1184,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1183,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tree-wrapper\",\n            style: {\n              height: `${(Math.max(relationship.relationshipLevels.levelFromP1, relationship.relationshipLevels.levelFromP2) + 1) * 100}px`\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"titleTree\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1253,\n              columnNumber: 17\n            }, this), relationship.ancestorstreeData && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tree-container\",\n              children: /*#__PURE__*/_jsxDEV(Tree, {\n                data: relationship.ancestorstreeData,\n                orientation: \"vertical\",\n                pathFunc: \"step\",\n                nodeSize: {\n                  x: 50,\n                  y: 90\n                },\n                separation: {\n                  siblings: 3,\n                  nonSiblings: 3\n                },\n                translate: {\n                  x: 325,\n                  y: 27\n                },\n                renderCustomNodeElement: ({\n                  nodeDatum\n                }) => /*#__PURE__*/_jsxDEV(\"g\", {\n                  className: \"tree-node\",\n                  children: [/*#__PURE__*/_jsxDEV(\"title\", {\n                    children: nodeDatum.id\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1266,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n                    className: \"tree-node-rect\",\n                    x: \"-50\",\n                    y: \"-20\",\n                    width: \"100\",\n                    height: \"40\",\n                    style: {\n                      fill: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID ? '#d3f9d8' // Leaf node color (light green)\n                      : nodeDatum.id === relationship.commonAncestor.ancestorID ? '#ffe4b5' // Ancestor node color (light yellow)\n                      : '#ffffff',\n                      // Default color for other nodes\n                      stroke: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID ? '#4caf50' // Leaf node border (green)\n                      : nodeDatum.id === relationship.commonAncestor.ancestorID ? '#ffa500' // Ancestor node border (orange)\n                      : '#4a90e2',\n                      // Default border color\n                      strokeWidth: '2.5px',\n                      rx: '10',\n                      // Rounded corners\n                      ry: '10' // Rounded corners\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1267,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                    className: \"tree-node-text\",\n                    x: \"0\",\n                    y: \"5\",\n                    style: {\n                      fontSize: '16px',\n                      fontFamily: 'Cairo',\n                      fill: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID ? '#388e3c' // Leaf node text color (dark green)\n                      : nodeDatum.id === relationship.commonAncestor.ancestorID ? '#ff9800' // Ancestor node text color (orange)\n                      : '#333',\n                      // Default text color (dark gray)\n                      textAnchor: 'middle',\n                      dominantBaseline: 'middle',\n                      letterSpacing: '1px',\n                      strokeWidth: '1px',\n                      pointerEvents: 'none'\n                    },\n                    children: translateName(nodeDatum.name)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1290,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1265,\n                  columnNumber: 22\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1257,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1256,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1252,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1182,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1135,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1104,\n    columnNumber: 5\n  }, this);\n};\n_s(RelationPage, \"WyOSWDbV6P5OHQ/BVc1fTtxGH6Y=\");\n_c = RelationPage;\nexport default RelationPage;\nvar _c;\n$RefreshReg$(_c, \"RelationPage\");","map":{"version":3,"names":["React","useEffect","useState","Tree","jsxDEV","_jsxDEV","translations","require","config","neo4jURI","process","env","REACT_APP_NEO4J_URI","neo4jUser","REACT_APP_NEO4J_USER","neo4jPassword","REACT_APP_NEO4J_PASSWORD","driver","auth","basic","session","countBenAndBent","str","matches","match","length","splitName","fullName","parts","replace","trim","split","bentCount","personName","fatherName","grandfatherName","familyName","buildTreePath","path","reduceRight","acc","person","id","toNumber","name","lastName","children","mergePaths","pathToP1","pathToP2","ancestor","branch1","slice","branch2","translateName","language","nameParts","reverseTranslations","Object","fromEntries","entries","map","key","value","dict","translatedParts","part","join","RelationPage","_s","person1","setPerson1","person2","setPerson2","relationship","setRelationship","duplicates","setDuplicates","error","setError","loading","setLoading","loadingMessage","setLoadingMessage","fetchRelationship","e","preventDefault","result","getRelationship","message","relationshipDescription","relation","relationshipScore","score","relationshipLevels","levelsTuple","relationshipGenerationGap","generation","relationshipExplanationType","explanation","type","relationshipExplanationDesc","commonAncestor","ancestorstreeData","treeData","person1ID","person2ID","console","getPersonMatches","cypherQuery","queryParamsObject","run","records","record","get","father","grandfather","Error","close","person1FullName","person2FullName","isArabic","text","test","translatedName1","translatedName2","person1Name","person1FatherName","person1GrandfatherName","person1LastName","person2Name","person2FatherName","person2GrandfatherName","person2LastName","errorContainer","document","getElementById","person1Matches","person2Matches","log","getAncestors","gender","levelFromP1","levelFromP2","pathFromAncestorToP1","pathFromAncestorToP2","checkMarriage","P1","properties","P2","areMarried","marraigeRecord","gender1","gender2","relationRecord","ancestorID","ancestorName","ancestorLastName","ancestorFatherName","ancestorGrandFatherName","ancestorGender","reverse","a","p1Level","p2Level","relationshipExplanation","p2GreatAncestorGender","p1GreatAncestorGender","p1AncestorGender","p2AncestorGender","innerText","Math","abs","className","fileName","_jsxFileName","lineNumber","columnNumber","p","idx","onSubmit","placeholder","onChange","target","style","width","height","max","data","orientation","pathFunc","nodeSize","x","y","separation","siblings","nonSiblings","translate","renderCustomNodeElement","nodeDatum","fill","stroke","strokeWidth","rx","ry","fontSize","fontFamily","textAnchor","dominantBaseline","letterSpacing","pointerEvents","_c","$RefreshReg$"],"sources":["D:/Study/Projects/El-Kasr Family Tree/client/src/components/RelationChecker.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Tree from 'react-d3-tree';\r\nimport './RelationChecker.css';\r\nconst translations = require('./translation.json');\r\nrequire('dotenv').config();\r\n\r\nconst neo4jURI = process.env.REACT_APP_NEO4J_URI;\r\nconst neo4jUser = process.env.REACT_APP_NEO4J_USER;\r\nconst neo4jPassword = process.env.REACT_APP_NEO4J_PASSWORD;\r\n\r\nconst driver = require('neo4j-driver').driver(\r\n    neo4jURI,\r\n    require('neo4j-driver').auth.basic(neo4jUser, neo4jPassword)\r\n);\r\nconst session = driver.session();\r\n\r\nfunction countBenAndBent(str) {\r\n  const matches = str.match(/\\b(ben|bent)\\b/gi);\r\n  return matches ? matches.length : 0;\r\n}\r\n\r\nfunction splitName(fullName) {\r\n  const parts = fullName.replace(/\\s+(ben|bent)\\s+/gi, ' ').trim().split(/\\s+/);\r\n  const bentCount = countBenAndBent(fullName);\r\n  if (parts.length === 2) {\r\n    if (bentCount === 0){\r\n      return {\r\n        personName: parts[0],\r\n        fatherName: \"\",\r\n        grandfatherName: \"\",\r\n        familyName: parts[1]\r\n      };\r\n    }\r\n    else if (bentCount === 1){\r\n      return {\r\n        personName: parts[0],\r\n        fatherName: parts[1],\r\n        grandfatherName: \"\",\r\n        familyName: \"\"\r\n      };\r\n    }\r\n    \r\n  } \r\n  else if (parts.length === 3) {\r\n    if (bentCount === 1){\r\n      return {\r\n        personName: parts[0],\r\n        fatherName: parts[1],\r\n        grandfatherName: \"\",\r\n        familyName: parts[2]\r\n      };\r\n    }\r\n    else if (bentCount === 2){\r\n      return {\r\n        personName: parts[0],\r\n        fatherName: parts[1],\r\n        grandfatherName: parts[2],\r\n        familyName: \"\"\r\n      };\r\n    }\r\n    \r\n  } else if (parts.length === 4) {\r\n    return {\r\n      personName: parts[0],\r\n      fatherName: parts[1],\r\n      grandfatherName: parts[2],\r\n      familyName: parts[3]\r\n    };\r\n  }\r\n  // Default case if structure doesn't match\r\n  return { personName: parts[0], fatherName: \"\", grandfatherName: \"\", familyName: parts[1] };\r\n}\r\n\r\nfunction buildTreePath(path) {\r\n          return path.reduceRight((acc, person) => {\r\n            return {\r\n              id: (person.id).toNumber(),\r\n              name: `${person.name} ${person.lastName}`,\r\n              children: acc ? [acc] : []\r\n            };\r\n          }, null);\r\n}\r\n\r\nfunction mergePaths(pathToP1, pathToP2) {\r\n  const ancestor = pathToP1[0];\r\n  const branch1 = pathToP1.slice(1);\r\n  const branch2 = pathToP2.slice(1);\r\n\r\n  return {\r\n    id: (ancestor.id).toNumber(),\r\n    name: `${ancestor.name} ${ancestor.lastName}`,\r\n    children: [buildTreePath(branch1), buildTreePath(branch2)]\r\n  };\r\n}\r\n\r\nexport const translateName = (fullName, language = true) => {\r\n  const nameParts = fullName.split(' ');\r\n\r\n  // Build reverse translation map if needed\r\n  const reverseTranslations = Object.fromEntries(\r\n    Object.entries(translations).map(([key, value]) => [value, key])\r\n  );\r\n\r\n  const dict = language ? translations : reverseTranslations;\r\n\r\n  const translatedParts = nameParts.map(part => dict[part] || part);\r\n\r\n  return translatedParts.join(' ');\r\n};\r\n\r\nconst RelationPage = () => {\r\n  const [person1, setPerson1] = useState('');\r\n  const [person2, setPerson2] = useState('');\r\n  const [relationship, setRelationship] = useState('');\r\n  const [duplicates, setDuplicates] = useState({ person1: [], person2: [] });\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingMessage, setLoadingMessage] = useState(\"\");\r\n\r\n  const fetchRelationship = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setError(false);\r\n    setLoadingMessage(\"بداية البحث عن العلاقة...\");\r\n\r\n    try {\r\n      const result = await getRelationship(person1, person2);\r\n\r\n      if (result.error === 'non-unique-name') {\r\n        setDuplicates(result.duplicates);\r\n        setRelationship(result.message);\r\n      } else {\r\n        setDuplicates({ person1: [], person2: [] });\r\n        setRelationship({\r\n          relationshipDescription: result.relation,\r\n          relationshipScore: result.score,\r\n          relationshipLevels: result.levelsTuple,\r\n          relationshipGenerationGap: result.generation,\r\n          relationshipExplanationType: result.explanation.type,\r\n          relationshipExplanationDesc: result.explanation.explanation,\r\n          commonAncestor: result.ancestor,\r\n          ancestorstreeData: result.treeData,\r\n          person1ID: result.person1ID,\r\n          person2ID: result.person2ID\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching relationship:', error);\r\n      setRelationship({ relationshipDescription: 'An error occurred', relationshipScore: null });\r\n      setError(true);\r\n    } finally{\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getPersonMatches = async (personName, fatherName = \"\", grandfatherName = \"\", familyName) => {\r\n\r\n    let cypherQuery = ``;\r\n    const queryParamsObject = {};\r\n  \r\n    if (personName){\r\n      if (fatherName) {\r\n        if (grandfatherName) {\r\n          if (familyName) {\r\n            cypherQuery += `\r\n              MATCH (grandfather:Person)-[:FATHER_OF]->(father:Person)-[:FATHER_OF]->(child:Person)\r\n              WHERE child.name = $personName AND \r\n                    father.name = $fatherName AND \r\n                    grandfather.name = $grandfatherName AND \r\n                    child.lastName = $familyName\r\n              RETURN \r\n                id(child) AS childID,\r\n                child.name AS childName, \r\n                father.name AS fatherName, \r\n                grandfather.name AS grandfatherName, \r\n                child.lastName AS familyName  \r\n            `;\r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n            queryParamsObject.grandfatherName = grandfatherName;\r\n            queryParamsObject.familyName = familyName;\r\n          } \r\n          else {\r\n            cypherQuery += `\r\n              MATCH (grandfather:Person)-[:FATHER_OF]->(father:Person)-[:FATHER_OF]->(child:Person)\r\n              WHERE child.name = $personName AND \r\n                    father.name = $fatherName AND \r\n                    grandfather.name = $grandfatherName\r\n              RETURN \r\n                    id(child) AS childID, \r\n                    child.name AS childName, \r\n                    father.name AS fatherName, \r\n                    grandfather.name AS grandfatherName,\r\n                    child.lastName AS familyName       \r\n              `;\r\n            \r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n            queryParamsObject.grandfatherName = grandfatherName;\r\n          }\r\n          \r\n        } else {\r\n          if (familyName){\r\n            cypherQuery += `\r\n            MATCH (father:Person)-[:FATHER_OF]->(child:Person)\r\n            WHERE child.name = $personName AND \r\n                  father.name = $fatherName AND\r\n                  child.lastName = $familyName\r\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n            RETURN  \r\n              id(child) AS childID,\r\n              child.name AS childName, \r\n              father.name AS fatherName,\r\n              grandfather.name AS grandfatherName,\r\n              child.lastName AS familyName\r\n            `;\r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n            queryParamsObject.familyName = familyName;\r\n          }\r\n          else{\r\n            cypherQuery += `\r\n            MATCH (father:Person)-[:FATHER_OF]->(child:Person)\r\n            \r\n            WHERE child.name = $personName AND \r\n                  father.name = $fatherName\r\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n            RETURN  id(child) AS childID, \r\n                    child.name AS childName, \r\n                    father.name AS fatherName, \r\n                    grandfather.name AS grandfatherName,\r\n                    child.lastName AS familyName\r\n            `;\r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n          }\r\n          }\r\n      }\r\n      else {\r\n        if (familyName){\r\n          cypherQuery += `\r\n          MATCH (child:Person)\r\n          WHERE child.name = $personName AND child.lastName = $familyName\r\n          OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(child)\r\n          OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n          RETURN \r\n            id(child) AS childID,\r\n            child.name AS childName, \r\n            father.name AS fatherName,\r\n            grandfather.name AS grandfatherName,\r\n            child.lastName AS familyName\r\n        `;\r\n        queryParamsObject.personName = personName;\r\n        queryParamsObject.familyName = familyName;\r\n        }\r\n        else{\r\n          cypherQuery += `\r\n            MATCH (child:Person)\r\n            WHERE child.name = $personName\r\n            OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(child)\r\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n            RETURN\r\n              id(child) AS childID,\r\n              child.name AS childName, \r\n              father.name AS fatherName, \r\n              grandfather.name AS grandfatherName,\r\n              child.lastName AS familyName\r\n          `;\r\n          queryParamsObject.personName = personName;\r\n        }\r\n      }\r\n    }\r\n\r\n    const session = driver.session();\r\n    try {\r\n      const result = await session.run(cypherQuery, queryParamsObject);\r\n  \r\n      return result.records.map(record => ({\r\n        id: record.get('childID').toNumber(),\r\n        name: record.get('childName'),\r\n        father: record.get('fatherName') || \"\",\r\n        grandfather: record.get('grandfatherName') || \"\",\r\n        lastName: record.get('familyName')\r\n      }));\r\n    } \r\n    catch (Error) {\r\n      console.error('Query Error:', Error);\r\n      setError('حدث خطأ أثناء البحث.');\r\n    } \r\n    finally {\r\n      await session.close();\r\n    }\r\n  };\r\n  const getRelationship = async (person1FullName, person2FullName) => {\r\n    const isArabic = (text) => /[\\u0600-\\u06FF]/.test(text);\r\n    let translatedName1, translatedName2;\r\n    \r\n    if (isArabic(person1FullName)){\r\n      translatedName1 = translateName(person1FullName, false);\r\n    }\r\n    else{\r\n      translatedName1 = person1FullName;\r\n    }\r\n    if (isArabic(person2FullName)){\r\n      translatedName2 = translateName(person2FullName, false);\r\n    }\r\n    else{\r\n      translatedName2 = person2FullName;\r\n    }\r\n    \r\n    const { personName: person1Name, fatherName: person1FatherName, grandfatherName: person1GrandfatherName, familyName: person1LastName } = splitName(translatedName1);\r\n    const { personName: person2Name, fatherName: person2FatherName, grandfatherName: person2GrandfatherName, familyName: person2LastName } = splitName(translatedName2);\r\n    const errorContainer = document.getElementById('error-container');\r\n    try {\r\n      const person1Matches = await getPersonMatches(person1Name, person1FatherName, person1GrandfatherName, person1LastName);\r\n      if (person1Matches.length === 0) {\r\n        throw new Error(`لا يوجد أشخاص بإسم ${person1FullName} الرجاء التثبت في الإسم جيدا`);\r\n      }\r\n      const person2Matches = await getPersonMatches(person2Name, person2FatherName, person2GrandfatherName, person2LastName);\r\n      if (person2Matches.length === 0) {\r\n        throw new Error(`لا يوجد أشخاص بإسم ${person2FullName} الرجاء التثبت في الإسم جيدا`);\r\n      }\r\n      setLoadingMessage(\"جاري البحث عن الأشخاص\");\r\n\r\n      console.log(\"P1 matches : \", person1Matches);\r\n      console.log(\"P2 matches : \", person2Matches);\r\n      \r\n      let person1ID, person2ID;\r\n      if (person1Matches.length > 1 || person2Matches.length > 1) {\r\n        return {\r\n          error: 'non-unique-name',\r\n          message: 'تم العثور على عدة أشخاص بنفس الاسم. الرجاء اختيار الصحيح.',\r\n          duplicates: {\r\n            person1: person1Matches.length > 1 ? person1Matches : [],\r\n            person2: person2Matches.length > 1 ? person2Matches : []\r\n          }\r\n        };\r\n      }\r\n      else{\r\n        person1ID = person1Matches[0].id;\r\n        person2ID = person2Matches[0].id;\r\n      }      \r\n      const getAncestors = async (person1ID, person2ID) => {\r\n        setLoadingMessage(\"جاري البحث عن الأجداد المشتركة\");\r\n        const result = await session.run(`\r\n          MATCH path1 = (common:Person)-[:FATHER_OF|MOTHER_OF*0..4]->(p1:Person)\r\n          WHERE id(p1) = $person1ID\r\n      \r\n          MATCH path2 = (common)-[:FATHER_OF|MOTHER_OF*0..4]->(p2:Person)\r\n          WHERE id(p2) = $person2ID\r\n            AND id(p1) <> id(p2)\r\n      \r\n          WITH common, path1, path2, length(path1) AS level1, length(path2) AS level2\r\n          OPTIONAL MATCH (cGF:Person)-[:FATHER_OF]->(cF:Person)-[:FATHER_OF]->(common)\r\n\r\n          ORDER BY (level1 + level2) ASC\r\n          LIMIT 1\r\n      \r\n          RETURN \r\n            common.name AS commonAncestorName,\r\n            cF.name AS commonAncestorFatherName,\r\n            cGF.name AS commonAncestorGrandFatherName,\r\n            common.lastName AS commonAncestorLastName,\r\n            id(common) AS commonAncestorID,\r\n            common.gender AS commonAncestorGender,\r\n            level1 AS generationsFromP1,\r\n            level2 AS generationsFromP2,\r\n            [n IN nodes(path1) | { id: id(n), name: n.name, lastName: n.lastName, gender: n.gender }] AS pathToP1,\r\n            [n IN nodes(path2) | { id: id(n), name: n.name, lastName: n.lastName, gender: n.gender }] AS pathToP2\r\n        `, { person1ID, person2ID });\r\n\r\n        const record = result.records[0];\r\n      \r\n        return {\r\n            id: record.get('commonAncestorID').toNumber(),\r\n            name: record.get('commonAncestorName'),\r\n            lastName: record.get('commonAncestorLastName'),\r\n            fatherName: record.get('commonAncestorFatherName'),\r\n            grandfatherName: record.get('commonAncestorGrandFatherName'),\r\n            gender: record.get('commonAncestorGender'),\r\n            levelFromP1: record.get('generationsFromP1').toNumber(),\r\n            levelFromP2: record.get('generationsFromP2').toNumber(),\r\n            pathFromAncestorToP1: record.get('pathToP1'),\r\n            pathFromAncestorToP2: record.get('pathToP2')\r\n        };\r\n      };\r\n      \r\n      const checkMarriage = async (person1ID, person2ID) => {\r\n        setLoadingMessage(\"جاري البحث عن علاقة زواج\");\r\n        const result = await session.run(`\r\n          MATCH (Husband:Person)-[:HUSBAND_OF]->(Wife:Person)\r\n          MATCH (Wife)-[:WIFE_OF]->(Husband)\r\n          WHERE (id(Wife) = $person1ID AND id(Husband) = $person2ID) \r\n            OR (id(Wife) = $person2ID AND id(Husband) = $person1ID)\r\n          RETURN Husband AS P1, Wife AS P2\r\n        `, { person1ID, person2ID });\r\n\r\n        const record = result.records[0];\r\n        const P1 = record.get(\"P1\").properties;\r\n        const P2 = record.get(\"P2\").properties;\r\n        return record.length === 0 ? {areMarried : false} : {areMarried : true, P1, P2};\r\n      };\r\n      \r\n      let marraigeRecord = await checkMarriage(person1ID, person2ID);\r\n      \r\n      console.log(marraigeRecord);\r\n      if (marraigeRecord.areMarried === true){\r\n        let gender1 = marraigeRecord.P1.gender;\r\n        let gender2 = marraigeRecord.P2.gender;\r\n        console.log(gender1);\r\n        let relation = '';\r\n        let score = 100;\r\n        if (gender1 === 'Male'){\r\n          relation = `${translatedName1} هو زوج ${translatedName2}`;\r\n        }\r\n        else{\r\n          relation = `${translatedName1} هي زوجة ${translatedName2}`;\r\n        }\r\n        setLoading(false);\r\n        return {relation, score}\r\n      } else {\r\n        let relationRecord = await getAncestors(person1ID, person2ID);\r\n        const ancestorID = relationRecord.id;\r\n        const ancestorName = translateName(relationRecord.name);\r\n        const ancestorLastName = translateName(relationRecord.lastName);\r\n        const ancestorFatherName = translateName(relationRecord.fatherName);\r\n        const ancestorGrandFatherName = translateName(relationRecord.grandfatherName);\r\n        const ancestorGender = relationRecord.gender;\r\n        let levelFromP1, levelFromP2, pathFromAncestorToP1, pathFromAncestorToP2;\r\n        const ancestor = {ancestorID, \r\n                        ancestorName, ancestorFatherName, ancestorGrandFatherName, ancestorLastName, ancestorGender};\r\n\r\n        ({\r\n          levelFromP1, \r\n          levelFromP2, \r\n          pathFromAncestorToP1, \r\n          pathFromAncestorToP2 \r\n        } = relationRecord);\r\n        const pathToP1 = pathFromAncestorToP1;\r\n        const pathToP2 = pathFromAncestorToP2;\r\n        \r\n        const treeData = mergePaths(pathToP1, pathToP2);\r\n        console.log(pathFromAncestorToP1.reverse().map(a => a.name).join(\" ben \"));\r\n        console.log(pathFromAncestorToP2.reverse().map(a => a.name).join(\" ben \"));\r\n    \r\n        var p1Level = levelFromP1;\r\n        var p2Level = levelFromP2;\r\n        const translatedName1 = translateName(person1FullName);\r\n        const translatedName2 = translateName(person2FullName);\r\n    \r\n        const gender1 = pathToP1[0].gender;\r\n        const gender2 = pathToP2[0].gender;\r\n        let relation = '', score = 0;\r\n        let relationshipExplanation = [\r\n          {\r\n            type: \"العائلة\",\r\n            explanation: \"هؤلاء الشخصين مرتبطين من خلال العائلة ذو الدرجة الأولى.\"\r\n          },\r\n          {\r\n            type: \"العائلة المقربة\",\r\n            explanation: \"هؤلاء الشخصين مرتبطين من خلال أعمام وأخوال مشتركين.\"\r\n          },\r\n          {\r\n            type: \"العائلة الموسعة\",\r\n            explanation: \"هؤلاء الشخصين مرتبطين من خلال أعمام أو أخوال الأب وأحفادهم.\"\r\n          },\r\n          {\r\n            type: \"قرابة الزواج\",\r\n            explanation: \"هذان الشخصان مرتبطان من خلال الزواج.\"\r\n          },\r\n          {\r\n            type: \"صهر / نسيب\",\r\n            explanation: \"هذان الشخصان مرتبطان عبر الزواج وليس النسب الدموي.\"\r\n          },\r\n          {\r\n            type: \"لا توجد علاقة\",\r\n            explanation: \"لم يتم العثور على أي صلة قرابة بين الشخصين في قاعدة البيانات.\"\r\n          },\r\n          {\r\n            type: \"نفس الشخص\",\r\n            explanation: \"الاسمين يشيران إلى نفس الشخص.\"\r\n          }\r\n        ];\r\n        \r\n        console.log(`Level: (${p1Level}, ${p2Level})`);\r\n        setLoadingMessage(\"جاري البحث عن العلاقة بين الشخصين\");\r\n        if (p1Level === 0 && p2Level === 1) {\r\n          if (gender1 === 'Male'){\r\n            relation = `${translatedName1} هو والد ${translatedName2}`;\r\n          }\r\n          else{\r\n            relation = `${translatedName1} هي والدة ${translatedName2}`;\r\n          }\r\n          score = 100;\r\n        }\r\n    \r\n        else if (p1Level === 1 && p2Level === 0) {\r\n          if (gender1 === 'Male'){\r\n            relation = `${translatedName1} هو ابن ${translatedName2}`;\r\n          }\r\n          else{\r\n            relation = `${translatedName1} هي إبنة ${translatedName2}`;\r\n          }\r\n          score = 100;\r\n        } \r\n    \r\n        else if (p1Level === 2 && p2Level === 0) {\r\n          if (gender1 === 'Male'){\r\n            relation = `${translatedName1} هو حفيد ${translatedName2}`;\r\n          }\r\n          else{\r\n            relation = `${translatedName1} هي حفيدة ${translatedName2}`;\r\n          }\r\n          score = 90;\r\n        }\r\n\r\n        else if (p1Level === 0 && p2Level === 2) {\r\n          if (gender1 === 'Male'){\r\n            relation = `${translatedName1} هو جدّ ${translatedName2}`;\r\n          }\r\n          else{\r\n            relation = `${translatedName1} هي جدّة ${translatedName2}`;\r\n          }\r\n          score = 90;\r\n        }\r\n    \r\n        else if (p1Level === 3 && p2Level === 0) {\r\n          if (gender1 === 'Male'){\r\n            relation = `${translatedName1} هو إبن حفيد ${translatedName2}`;\r\n          }\r\n          else{\r\n            relation = `${translatedName1} هي إبنة حفيدة ${translatedName2}`;\r\n          }\r\n          score = 75;\r\n        }\r\n    \r\n        else if (p1Level === 0 && p2Level === 3) {\r\n          if (gender1 === 'Male'){\r\n            relation = `${translatedName1} و جد والد ${translatedName2}`;\r\n          }\r\n          else{\r\n            relation = `${translatedName1} هي جدة والدة ${translatedName2}`;\r\n          }\r\n          score = 80;\r\n        } \r\n        \r\n        else if (p1Level === 0 && p2Level === 4){ // ADD FROM MOTHER FROM FATHER GRANDFATHER \r\n          const p2GreatAncestorGender = pathToP1[2].gender;\r\n          if (gender1 === 'Male'){\r\n            if (p2GreatAncestorGender === 'Male'){\r\n              relation = `${translatedName1} هو جد جد ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هو جد جدة ${translatedName2}`;\r\n            }\r\n          }\r\n          else{\r\n            if (p2GreatAncestorGender === 'Male'){\r\n              relation = `${translatedName1} هي جدة جد ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي جدة جدة ${translatedName2}`;\r\n            }\r\n          }\r\n          score = 75;\r\n        }\r\n\r\n        else if (p1Level === 4 && p2Level === 0){ // ADD FROM MOTHER FROM FATHER GRANDFATHER \r\n          const p1GreatAncestorGender = pathToP1[2].gender;\r\n          if (gender1 === 'Male'){\r\n            if (p1GreatAncestorGender === 'Male'){\r\n              relation = `${translatedName1} هو حفيد حفيد ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هو حفيد حفيدة ${translatedName2}`;\r\n            }\r\n          }\r\n          else{\r\n            if (p1GreatAncestorGender === 'Male'){\r\n              relation = `${translatedName1} هي حفيدة حفيد ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي حفيدة حفيد ${translatedName2}`;\r\n            }\r\n          }\r\n          score = 75;\r\n        }\r\n\r\n        else if (p1Level === 1 && p2Level === 1) {\r\n          if (gender1 === 'Male' && gender2 === 'Male'){\r\n            relation = `${translatedName1} و ${translatedName2} إخوة`;\r\n          }\r\n          else if (gender1 === 'Female' && gender2 === 'Female'){\r\n            relation = `${translatedName1} و ${translatedName2} أخوات`;\r\n          }\r\n          else{\r\n            relation = `${translatedName1} و ${translatedName2} إخوة`;\r\n          }\r\n          score = 98;\r\n        } \r\n        \r\n        else if (p1Level === 2 && p2Level === 1) {\r\n          const p1AncestorGender = pathToP1[1].gender;\r\n          if (gender1 === 'Male'){\r\n            if (p1AncestorGender === 'Male'){\r\n              relation = `${translatedName1} هو ابن أخ ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هو ابن أخت ${translatedName2}`;\r\n            }\r\n            score = 93;\r\n          }\r\n          else{\r\n            if (p1AncestorGender === 'Male'){\r\n              relation = `${translatedName1} هي ابن أخ ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي ابنة أخت ${translatedName2}`;\r\n            }\r\n            score = 93;\r\n          }\r\n        } \r\n        \r\n        else if (p1Level === 1 && p2Level === 2) {\r\n          const p2AncestorGender = pathToP2[1].gender;\r\n          if (gender1 === 'Male'){\r\n            if (p2AncestorGender === 'Male'){\r\n              relation = `${translatedName1} هو عم ${translatedName2}`;\r\n              score = 95;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هو خال ${translatedName2}`;\r\n              score = 94;\r\n            }\r\n          }\r\n          else{\r\n            if (p2AncestorGender === 'Male'){\r\n              relation = `${translatedName1} هي عمة ${translatedName2}`;\r\n              score = 95;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي خالة ${translatedName2}`;\r\n              score = 94;\r\n            }\r\n          }\r\n        }\r\n        \r\n        else if (p1Level === 1 && p2Level === 3){\r\n          const p2AncestorGender = pathToP2[1].gender;\r\n          const p2GreatAncestorGender = pathToP2[2].gender;\r\n          if (gender1 === 'Male'){\r\n            if (p2AncestorGender === 'Male'){\r\n              if (p2GreatAncestorGender === 'Male'){\r\n                relation = `${translatedName1} هو عم والد ${translatedName2}`;\r\n                score = 80;\r\n              }\r\n              else {\r\n                relation = `${translatedName1} هو خال والد ${translatedName2}`;\r\n                score = 75;\r\n              }\r\n            }\r\n            else{\r\n              if (p2GreatAncestorGender === 'Male'){\r\n                relation = `${translatedName1} هو عم والدة ${translatedName2}`;\r\n                score = 80;\r\n              }\r\n              else {\r\n                relation = `${translatedName1} هو خال والدة ${translatedName2}`;\r\n                score = 70;\r\n              }\r\n            }\r\n          } else{\r\n            if (p2AncestorGender === 'Male'){\r\n              if (p2GreatAncestorGender === 'Male'){\r\n                relation = `${translatedName1} هي عمة والد ${translatedName2}`;\r\n                score = 80;\r\n              }\r\n              else {\r\n                relation = `${translatedName1} هي خالة والد ${translatedName2}`;\r\n                score = 75\r\n              }\r\n            }\r\n            else{\r\n              if (p2GreatAncestorGender === 'Male'){\r\n                relation = `${translatedName1} هي عمة والدة ${translatedName2}`;\r\n                score = 80;\r\n              }\r\n              else {\r\n                relation = `${translatedName1} هي خالة والدة ${translatedName2}`;\r\n                score = 75;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        else if (p1Level === 3 && p2Level === 1){\r\n          const p1GreatAncestorGender = pathToP1[2].gender;\r\n          if (gender1 === 'Male'){\r\n              if (p1GreatAncestorGender === 'Male'){\r\n                relation = `${translatedName1} هو حفيد اخ ${translatedName2}`;\r\n                score = 78;\r\n              }\r\n              else {\r\n                relation = `${translatedName1} هو حفيد اخت ${translatedName2}`;\r\n                score = 78;\r\n              }\r\n          } \r\n          else{\r\n              if (p1GreatAncestorGender === 'Male'){\r\n                relation = `${translatedName1} هي حفيدة اخ ${translatedName2}`;\r\n                score = 78;\r\n              }\r\n              else {\r\n                relation = `${translatedName1} هي حفيدة اخت ${translatedName2}`;\r\n                score = 78;\r\n              }\r\n          }\r\n        }\r\n\r\n        else if (p1Level === 2 && p2Level === 2) {    \r\n          const p1AncestorGender = pathToP1[1].gender;\r\n          const p2AncestorGender = pathToP2[1].gender;\r\n    \r\n          if (gender1 === 'Male') { \r\n            if (p2AncestorGender === 'Male') { \r\n              if (p1AncestorGender === 'Male'){  // ولد عمه\r\n                relation = `${translatedName1} إبن عم ${translatedName2}`;\r\n                score = 90;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هو إبن عمّة ${translatedName2}`;\r\n                score = 89;\r\n\r\n              }\r\n            } \r\n            else {  \r\n              if (p1AncestorGender === 'Male'){  // ولد خاله\r\n                relation = `${translatedName1} هو إبن خال ${translatedName2}`;\r\n                score = 88;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هو إبن خالة ${translatedName2}`;\r\n                score = 86;\r\n              }\r\n            }\r\n          }\r\n          else {\r\n            if (p1AncestorGender === 'Male') { \r\n              if (p2AncestorGender === 'Male'){  // بنت عمه\r\n                relation = `${translatedName1} هي إبنة عمّ ${translatedName2}`;\r\n                score = 90;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هي إبنة عمّة ${translatedName2}`;\r\n                score = 89;\r\n              }\r\n            } \r\n            else {  \r\n              if (p2AncestorGender === 'Male'){  // بنت خاله\r\n                relation = `${translatedName1} هي إبنة خال ${translatedName2}`;\r\n                score = 88;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هي إبنة خالة ${translatedName2}`;\r\n                score = 86;\r\n              }\r\n            }\r\n          }\r\n        }\r\n    \r\n        else if (p1Level === 2 && p2Level === 3) {         \r\n    \r\n          const p1AncestorGender = pathToP1[1].gender;\r\n          const p2AncestorGender = pathToP2[1].gender;\r\n\r\n          if (gender1 === 'Male') { \r\n            if (p1AncestorGender === 'Male') {\r\n              if (p2AncestorGender === 'Male') {\r\n                relation = `${translatedName1} هو إبن عم والد ${translatedName2}`;\r\n                score = 80;\r\n              } else { \r\n                relation = `${translatedName1} هو إبن عمة والد ${translatedName2}`;\r\n                score = 78;\r\n              }\r\n            } else {  // mother's side\r\n              if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                relation = `${translatedName1} هو إبن عم والدة ${translatedName2}.`;\r\n                score = 74;\r\n              } else {  // mother's brother's daughter\r\n                relation = `${translatedName1} هو إبن عمّة والدة ${translatedName2}`;\r\n                score = 72;\r\n              }\r\n            }\r\n          } \r\n          else {  // If person1 is female\r\n            if (p1AncestorGender === 'Male') {  // father's side\r\n              if (p2AncestorGender === 'Male') {  // father's brother's son\r\n                relation = `${translatedName1} هي إبنة عم والد ${translatedName2}`;\r\n                score = 80;\r\n              } else {  // father's brother's daughter\r\n                relation = `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\r\n                score = 78;\r\n              }\r\n            } else {  // mother's side\r\n              if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                relation = `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\r\n                score = 74;\r\n              } else {  // mother's brother's daughter\r\n                relation = `${translatedName1} هي إبنة عمة والدة ${translatedName2}`;\r\n                score = 72;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        \r\n        else if (p1Level === 3 && p2Level === 2) {          \r\n          const p1AncestorGender = pathToP1[1].gender;\r\n          const p2AncestorGender = pathToP2[1].gender;\r\n\r\n          if (p1AncestorGender === 'Male') {  // father's side\r\n            if (p2AncestorGender === 'Male') {  // father's brother's son\r\n              relation = `والد ${translatedName1} هو إبن عم ${translatedName2}`;\r\n              score = 80;\r\n            } else { \r\n              relation = `والد ${translatedName1} هو إبن خال ${translatedName2}`;\r\n              score = 75;\r\n            }\r\n          } \r\n          else {  // mother's side\r\n            if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n              relation = `والدة ${translatedName1} هي إبنة عم ${translatedName2}`;\r\n              score = 80;\r\n            } else {  // mother's brother's daughter\r\n              relation = `والدة ${translatedName1} هي إبنة خال  ${translatedName2}`;\r\n              score = 75;\r\n            }\r\n          }\r\n        }\r\n\r\n        else if (p1Level === 3 && p2Level === 3) {          \r\n          \r\n          const p1AncestorGender = pathToP1[1].gender;\r\n          const p2AncestorGender = pathToP2[1].gender;\r\n          const p1GreatAncestorGender = pathToP1[2].gender;\r\n          const p2GreatAncestorGender = pathToP2[2].gender;\r\n\r\n          if (p1AncestorGender === 'Male') { \r\n            if (p2AncestorGender === 'Male'){\r\n              if (p1GreatAncestorGender === 'Male'){\r\n                if (p2GreatAncestorGender === 'Male'){\r\n                  relation = `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\r\n                }\r\n                else{\r\n                  relation = `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\r\n                }\r\n              }\r\n              else {\r\n                if (p2GreatAncestorGender === 'Male'){\r\n                  relation = `جدّة ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\r\n                }\r\n                else{\r\n                  relation = `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (p1GreatAncestorGender === 'Male'){\r\n                if (p2GreatAncestorGender === 'Male'){\r\n                  relation = `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأم إخوة.`;\r\n                }\r\n                else{\r\n                  relation = `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\r\n                }\r\n              }\r\n              else {\r\n                if (p2GreatAncestorGender === 'Male'){\r\n                  relation = `جدّة ${translatedName1} من الأب و جد${translatedName2} من الأم إخوة.`;\r\n                }\r\n                else{\r\n                  relation = `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n          else {\r\n            if (p2AncestorGender === 'Male'){\r\n              if (p1GreatAncestorGender === 'Male'){\r\n                if (p2GreatAncestorGender === 'Male'){\r\n                  relation = `جدّ ${translatedName1} من الأم و جد${translatedName2} من الأب إخوة.`;\r\n                }\r\n                else{\r\n                  relation = `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\r\n                }\r\n              }\r\n              else {\r\n                if (p2GreatAncestorGender === 'Male'){\r\n                  relation = `جدّة ${translatedName1} من الأم و جد ${translatedName2} من الأب إخوة.`;\r\n                }\r\n                else{\r\n                  relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب أخوات.`;\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (p1GreatAncestorGender === 'Male'){\r\n                if (p2GreatAncestorGender === 'Male'){\r\n                  relation = `جدّ ${translatedName1} من الأم و جد ${translatedName2} من الأم إخوة.`;\r\n                }\r\n                else{\r\n                  relation = `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\r\n                }\r\n              }\r\n              else {\r\n                if (p2GreatAncestorGender === 'Male'){\r\n                  relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\r\n                }\r\n                else{\r\n                  relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        \r\n        else {\r\n          setLoading(false);\r\n          console.log('No direct relation found.');\r\n          errorContainer.innerText = 'لا يوجد قرابة مباشرة.';\r\n          const result = await session.run(`\r\n              MATCH (P1:Person), (P2:Person)\r\n              WHERE id(P1) = $p1Id AND id(P2) = $p2Id\r\n\r\n              // Check if P1 is married\r\n              OPTIONAL MATCH (P1)-[:HUSBAND_OF|:WIFE_OF]->(P1Spouse:Person)\r\n              OPTIONAL MATCH (P1SpouseFather:Person)-[:FATHER_OF]->(P1Spouse)\r\n              OPTIONAL MATCH (P1SpouseMother:Person)-[:MOTHER_OF]->(P1Spouse)\r\n              OPTIONAL MATCH (P1SpouseSibling:Person)\r\n              WHERE (P1SpouseFather)-[:FATHER_OF]->(P1SpouseSibling) AND P1SpouseSibling <> P1Spouse\r\n\r\n              // Check if P2 is married\r\n              OPTIONAL MATCH (P2)-[:HUSBAND_OF|:WIFE_OF]->(P2Spouse:Person)\r\n              OPTIONAL MATCH (P2SpouseFather:Person)-[:FATHER_OF]->(P2Spouse)\r\n              OPTIONAL MATCH (P2SpouseMother:Person)-[:MOTHER_OF]->(P2Spouse)\r\n              OPTIONAL MATCH (P2SpouseSibling:Person)\r\n              WHERE (P2SpouseFather)-[:FATHER_OF]->(P2SpouseSibling) AND P2SpouseSibling <> P2Spouse\r\n\r\n              WITH\r\n                id(P1SpouseFather) AS p1FatherId,\r\n                id(P1SpouseMother) AS p1MotherId,\r\n                collect(DISTINCT id(P1SpouseSibling)) AS p1Siblings,\r\n                id(P2SpouseFather) AS p2FatherId,\r\n                id(P2SpouseMother) AS p2MotherId,\r\n                collect(DISTINCT id(P2SpouseSibling)) AS p2Siblings,\r\n                id(P1) AS p1Id,\r\n                id(P2) AS p2Id\r\n\r\n              RETURN CASE\r\n                WHEN p2Id = p1FatherId OR p2Id = p1MotherId THEN 0        // P2 is parent of P1's spouse\r\n                WHEN p2Id IN p1Siblings THEN 1                            // P2 is sibling of P1's spouse\r\n                WHEN p1Id = p2FatherId OR p1Id = p2MotherId THEN 2        // P1 is parent of P2's spouse\r\n                WHEN p1Id IN p2Siblings THEN 3                            // P1 is sibling of P2's spouse\r\n                ELSE null\r\n              END AS relationshipLevel\r\n            `, { person1ID, person2ID });\r\n            const record = (result.records[0]).get(\"relationshipLevel\");\r\n            if (record !== null){\r\n              if (gender1 === 'Male') {\r\n                setLoadingMessage(\"جاري البحث عن علاقة زواج\");\r\n\r\n                if (record === 0) {\r\n                  relation = `${translatedName1} هو أب زوجة ${translatedName2}`;\r\n                } else if (record === 1) {\r\n                  relation = `${translatedName1} هو أخ زوجة ${translatedName2}`;\r\n                } else if (record === 2) {\r\n                  relation = `${translatedName1} هو زوج ابنة ${translatedName2}`;\r\n                } else if (record === 3) {\r\n                  relation = `${translatedName1} هو زوج أخت ${translatedName2}`;\r\n                } else {\r\n                  relation = `لا توجد علاقة زواج مباشرة بين ${translatedName1} و ${translatedName2}`;\r\n                }\r\n\r\n              } \r\n              else {\r\n                setLoadingMessage(\"جاري البحث عن علاقة زواج\");\r\n\r\n              if (record === 0) {\r\n                relation = `${translatedName1} هي أم زوجة ${translatedName2}`;\r\n              } else if (record === 1) {\r\n                relation = `${translatedName1} هي أخت زوجة ${translatedName2}`;\r\n              } else {\r\n                relation = `لا توجد علاقة زواج مباشرة بين ${translatedName1} و ${translatedName2}`;\r\n              }\r\n              }\r\n            }\r\n            else {\r\n              let relation = '';\r\n              const result = await session.run(`\r\n                MATCH (P1:Person), (P2:Person)\r\n                WHERE id(P1) = $p1Id AND id(P2) = $p2Id\r\n\r\n                // P1's spouse and their family\r\n                OPTIONAL MATCH (P1)-[:HUSBAND_OF|:WIFE_OF]->(P1Spouse:Person)\r\n                OPTIONAL MATCH (P1SpouseFather:Person)-[:FATHER_OF]->(P1Spouse)\r\n                OPTIONAL MATCH (P1SpouseMother:Person)-[:MOTHER_OF]->(P1Spouse)\r\n                OPTIONAL MATCH (P1SpouseFather)-[:FATHER_OF]->(P1SpouseSibling:Person)\r\n                WHERE P1SpouseSibling <> P1Spouse\r\n\r\n                // P2's spouse and their family\r\n                OPTIONAL MATCH (P2)-[:HUSBAND_OF|:WIFE_OF]->(P2Spouse:Person)\r\n                OPTIONAL MATCH (P2SpouseFather:Person)-[:FATHER_OF]->(P2Spouse)\r\n                OPTIONAL MATCH (P2SpouseMother:Person)-[:MOTHER_OF]->(P2Spouse)\r\n                OPTIONAL MATCH (P2SpouseFather)-[:FATHER_OF]->(P2SpouseSibling:Person)\r\n                WHERE P2SpouseSibling <> P2Spouse\r\n\r\n                WITH\r\n                  id(P1) AS p1Id,\r\n                  id(P2) AS p2Id,\r\n                  id(P1Spouse) AS p1SpouseId,\r\n                  id(P2Spouse) AS p2SpouseId,\r\n                  id(P1SpouseFather) AS p1SpouseFatherId,\r\n                  id(P1SpouseMother) AS p1SpouseMotherId,\r\n                  collect(DISTINCT id(P1SpouseSibling)) AS p1SpouseSiblings,\r\n                  id(P2SpouseFather) AS p2SpouseFatherId,\r\n                  id(P2SpouseMother) AS p2SpouseMotherId,\r\n                  collect(DISTINCT id(P2SpouseSibling)) AS p2SpouseSiblings\r\n\r\n                RETURN CASE\r\n                  WHEN p2Id = p1SpouseFatherId OR p2Id = p1SpouseMotherId THEN 0\r\n                  WHEN p2Id IN p1SpouseSiblings THEN 1\r\n                  WHEN p1Id = p2SpouseFatherId OR p1Id = p2SpouseMotherId THEN 2\r\n                  WHEN p1Id IN p2SpouseSiblings THEN 3\r\n                  WHEN p1SpouseId IN p2SpouseSiblings THEN 4\r\n                  WHEN p2Id IN p1SpouseSiblings THEN 5\r\n                  WHEN p1Id = p2SpouseFatherId THEN 6\r\n                  WHEN p1Id = p2SpouseMotherId THEN 7\r\n                  WHEN p1Id = p2SpouseId THEN 8\r\n                  ELSE null\r\n                END AS relationshipLevel\r\n              `, { person1ID, person2ID });\r\n              const record = (result.records[0]).get(\"relationshipLevel\");\r\n              switch (record) {\r\n                case 0:\r\n                  relation = `${translatedName1} هو ${gender1 === 'Male' ? 'أب' : 'أم'} زوجة ${translatedName2}`;\r\n                  break;\r\n                case 1:\r\n                  relation = `${translatedName1} هو ${gender1 === 'Male' ? 'أخ' : 'أخت'} زوجة ${translatedName2}`;\r\n                  break;\r\n                case 2:\r\n                  relation = `${translatedName1} هو زوج ابنة ${translatedName2}`;\r\n                  break;\r\n                case 3:\r\n                  relation = `${translatedName1} هو زوج أخت ${translatedName2}`;\r\n                  break;\r\n                case 4:\r\n                  relation = `${translatedName1} هو زوج أخت زوجة ${translatedName2}`;\r\n                  break;\r\n                case 5:\r\n                  relation = `${translatedName1} هي زوجة أخ ${translatedName2}`;\r\n                  break;\r\n                case 6:\r\n                  relation = `${translatedName1} هو والد زوج ${translatedName2}`;\r\n                  break;\r\n                case 7:\r\n                  relation = `${translatedName1} هي والدة زوج ${translatedName2}`;\r\n                  break;\r\n                case 8:\r\n                  relation = `${translatedName1} هو زوج ${translatedName2}`;\r\n                  break;\r\n                default:\r\n                  relation = 'لا توجد علاقة زواج مباشرة بين الشخصين';\r\n              }\r\n              return relation;\r\n            }\r\n            if (relation != ''){\r\n              setLoading(false);\r\n              return {relation, score, \r\n                      generation:Math.abs(p1Level-p2Level), \r\n                      levelsTuple: {levelFromP1, levelFromP2},\r\n                      explanation: relationshipExplanation[0],\r\n                      ancestor,\r\n                      treeData,\r\n                      person1ID,\r\n                      person2ID};\r\n            }\r\n          }\r\n        }\r\n        \r\n      \r\n      \r\n    } catch (error) {\r\n      console.error('Error in relationship lookup:', error);\r\n    \r\n      setError(`❌ خطأ: ${error.message || error}`);\r\n    \r\n      if (errorContainer) {\r\n        errorContainer.innerText = `❌ خطأ: ${error.message || error}`;\r\n      }\r\n      setLoading(false);\r\n      return '';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"relation-page\">\r\n    {(duplicates.person1.length > 0 || duplicates.person2.length > 0) && (\r\n      <aside className=\"duplicates-panel\">\r\n        {duplicates.person1.length > 0 && (\r\n          <section className=\"duplicates-group\">\r\n            <h3>أكتب الاسم الكامل للشخص الصحيح:</h3>\r\n            <ul>\r\n              {duplicates.person1.map((p, idx) => (\r\n                <li key={`p1-${idx}`}>\r\n                  {`${translateName(p.name)} بن ${translateName(p.father)} بن ${translateName(p.grandfather)} ${translateName(p.lastName)}`}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </section>\r\n        )}\r\n  \r\n        {duplicates.person2.length > 0 && (\r\n          <section className=\"duplicates-group\">\r\n            <h3>اختر الشخص الصحيح \"{person2}\"</h3>\r\n            <ul>\r\n              {duplicates.person2.map((p, idx) => (\r\n                <li key={`p2-${idx}`}>\r\n                  {`${translateName(p.name)} بن ${translateName(p.father)} بن ${translateName(p.grandfather)} ${translateName(p.lastName)}`}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </section>\r\n        )}\r\n      </aside>\r\n    )}    \r\n    {/* Main Panel: Form + Result */}\r\n    <main className=\"main-panel\">\r\n      <section className=\"relation-form-section\">\r\n        <h2 className=\"section-title\">ماهي العلاقة بينهما؟</h2>\r\n        <p id=\"DescriptionZone\">\r\n          الهدف من هذه الصفحة هو تحديد صلة القرابة بين شخصين بناءًا على اسمهم. كل ماعليك فعله\r\n          هو ادخال الاسم للشخص الاول والثاني وثم النقر على \"التحقق من العلاقة\" ستظهر لك النتيجة في اسهل الصفحة\r\n          والتي يتوضح لك نوع العلاقة ومدى قرابتها؟ في حال وجود اي تشابهات او تكرارات في الاسماء سيم توفير خيارات لتحديد الشخص الصحيح\r\n        </p>\r\n        <form onSubmit={fetchRelationship} className=\"relation-form\">\r\n          <div className=\"input-group\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"الإسم الكامل الأول\"\r\n              value={person1}\r\n              onChange={(e) => setPerson1(e.target.value)}\r\n              className=\"inputNames\"\r\n            />\r\n          </div>\r\n          <div className=\"input-group\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"الإسم الكامل الثاني\"\r\n              value={person2}\r\n              onChange={(e) => setPerson2(e.target.value)}\r\n              className=\"inputNames\"\r\n            />\r\n          </div>\r\n          <div className='ButtonSection'>\r\n            <button type=\"submit\" className=\"checkButton\">تحقق من العلاقة</button>\r\n            <button type=\"reset\" className='resetButton'>إلغاء</button>\r\n          </div>\r\n          \r\n        </form>\r\n      </section>\r\n\r\n      {error && <div className=\"error-message\">{error}</div>} {/* Show the error message */}\r\n      {loading && (\r\n        <div className=\"loading-message\">\r\n          <div className=\"spinner\"></div>\r\n          <p>{loadingMessage}</p>\r\n        </div>\r\n      )}\r\n\r\n      {!loading && relationship && !error  && (\r\n        <section className=\"relationship-result\">\r\n          <h2 id=\"resultTitle\">نتيجة العلاقة</h2>\r\n          <p className=\"relationText\">{relationship.relationshipDescription}</p>\r\n          <div className=\"result-details\">\r\n            <table className=\"result-table\">\r\n              <tbody>\r\n                <tr>\r\n                  <th>درجة العلاقة</th>\r\n                  <td className=\"score-cell\">\r\n                    <div className=\"score-bar-wrapper\">\r\n                      <div className=\"score-bar-fill\" style={{ width: `${relationship.relationshipScore || 0}%` }}></div>\r\n                    </div>\r\n                    <div className=\"score-meta\">\r\n                      <span className=\"score-value\">{relationship.relationshipScore}</span>\r\n                      {relationship.relationshipScore !== null && (\r\n                        <span className={\r\n                          relationship.relationshipScore >= 80\r\n                            ? \"score-category high\"\r\n                            : relationship.relationshipScore >= 60\r\n                            ? \"score-category medium\"\r\n                            : \"score-category low\"\r\n                        }>\r\n                          {\r\n                            relationship.relationshipScore >= 80\r\n                              ? \"قوية\"\r\n                              : relationship.relationshipScore >= 60\r\n                              ? \"متوسطة\"\r\n                              : \"ضعيفة\"\r\n                          }\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>نوع العلاقة</th>\r\n                  <td className=\"relationship-tag\"><span className=\"tag blood\">دم</span></td>\r\n                </tr>\r\n                <tr>\r\n                  <th>تفسير إضافي</th>\r\n                  <td className=\"relation-explanation\">\r\n                    <span className='relation-explanation-type'>\r\n                      {relationship.relationshipExplanationType}\r\n                    </span> : \r\n                    {relationship.relationshipExplanationDesc || \"لا يوجد تفسير متاح.\"}\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>عدد الأجيال بينهما حسب الجد المشترك</th>\r\n                  <td className=\"generation-distance\">\r\n                    <div className=\"tooltip-container\">\r\n                      <span id=\"numGen\">{relationship.relationshipGenerationGap}</span> أجيال\r\n                      <div className=\"custom-tooltip\">\r\n                        عدد الأجيال هو عدد الأشخاص الفاصلين في شجرة العائلة بين الشخصين.\r\n                      </div>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>\r\n                    <div className=\"tooltip-container\">\r\n                      الجد المشترك\r\n                      <span className=\"custom-tooltip\">\r\n                        عدد الأجيال هو عدد الأشخاص الفاصلين في شجرة العائلة بين الشخصين.\r\n                      </span>\r\n                    </div>\r\n                  </th>\r\n                  <td className=\"generation-distance\">\r\n                    {relationship.commonAncestor.ancestorName} بن {relationship.commonAncestor.ancestorFatherName} بن {relationship.commonAncestor.ancestorGrandFatherName} {relationship.commonAncestor.ancestorLastName}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n            <div className=\"tree-wrapper\" style={{ height: `${((Math.max((relationship.relationshipLevels.levelFromP1),(relationship.relationshipLevels.levelFromP2)))+1)*100}px` }}>\r\n                <div className='titleTree'>\r\n                </div>\r\n                {relationship.ancestorstreeData && (\r\n                <div className=\"tree-container\">\r\n                  <Tree\r\n                    data={relationship.ancestorstreeData}\r\n                    orientation=\"vertical\"\r\n                    pathFunc=\"step\"\r\n                    nodeSize={{ x: 50, y: 90 }}\r\n                    separation={{ siblings: 3, nonSiblings: 3 }}\r\n                    translate={{ x: 325, y: 27 }} \r\n                    renderCustomNodeElement={({ nodeDatum }) => (\r\n                     <g className=\"tree-node\">\r\n                        <title>{nodeDatum.id}</title>\r\n                        <rect\r\n                          className=\"tree-node-rect\"\r\n                          x=\"-50\"\r\n                          y=\"-20\"\r\n                          width=\"100\"\r\n                          \r\n                          height=\"40\"\r\n                          style={{\r\n                            fill: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID\r\n                              ? '#d3f9d8'  // Leaf node color (light green)\r\n                              : nodeDatum.id === relationship.commonAncestor.ancestorID\r\n                              ? '#ffe4b5'  // Ancestor node color (light yellow)\r\n                              : '#ffffff', // Default color for other nodes\r\n                            stroke: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID\r\n                              ? '#4caf50'  // Leaf node border (green)\r\n                              : nodeDatum.id === relationship.commonAncestor.ancestorID\r\n                              ? '#ffa500'  // Ancestor node border (orange)\r\n                              : '#4a90e2', // Default border color\r\n                            strokeWidth: '2.5px',\r\n                            rx: '10',  // Rounded corners\r\n                            ry: '10',  // Rounded corners\r\n                          }}\r\n                        />\r\n                        <text\r\n                          className=\"tree-node-text\"\r\n                          x=\"0\"\r\n                          y=\"5\"\r\n                          style={{\r\n                            fontSize: '16px',\r\n                            fontFamily: 'Cairo',\r\n                            fill: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID\r\n                              ? '#388e3c'  // Leaf node text color (dark green)\r\n                              : nodeDatum.id === relationship.commonAncestor.ancestorID\r\n                              ? '#ff9800'  // Ancestor node text color (orange)\r\n                              : '#333',    // Default text color (dark gray)\r\n                            textAnchor: 'middle',\r\n                            dominantBaseline: 'middle',\r\n                            letterSpacing: '1px',\r\n                            strokeWidth: '1px',\r\n                            pointerEvents: 'none',\r\n                          }}\r\n                        >\r\n                          {translateName(nodeDatum.name)}\r\n                        </text>\r\n                      </g>\r\n                    )}\r\n                  />\r\n                </div>\r\n              )}\r\n               </div>\r\n          </div>\r\n        </section>\r\n      )}\r\n    </main>\r\n  </div>\r\n  \r\n  );\r\n};\r\n\r\nexport default RelationPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}