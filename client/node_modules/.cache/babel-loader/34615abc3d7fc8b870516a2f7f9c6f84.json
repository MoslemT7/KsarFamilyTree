{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\Projects\\\\El-Kasr Family Tree\\\\client\\\\src\\\\components\\\\RelationChecker.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Tree from 'react-d3-tree';\nimport './RelationChecker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst translations = require('./translation.json');\nrequire('dotenv').config();\nconst neo4jURI = process.env.REACT_APP_NEO4J_URI;\nconst neo4jUser = process.env.REACT_APP_NEO4J_USER;\nconst neo4jPassword = process.env.REACT_APP_NEO4J_PASSWORD;\nconst driver = require('neo4j-driver').driver(neo4jURI, require('neo4j-driver').auth.basic(neo4jUser, neo4jPassword));\nconst session = driver.session();\nfunction countBenAndBent(str) {\n  const matches = str.match(/\\b(ben|bent)\\b/gi);\n  return matches ? matches.length : 0;\n}\n\n// Function that split english translated name that may contain ben to full name only parts.\nfunction splitName(fullName) {\n  const parts = fullName.replace(/\\s+(ben|bent)\\s+/gi, ' ').trim().split(/\\s+/);\n  const bentCount = countBenAndBent(fullName);\n  if (parts.length === 2) {\n    if (bentCount === 0) {\n      return {\n        personName: parts[0],\n        fatherName: \"\",\n        grandfatherName: \"\",\n        familyName: parts[1]\n      };\n    } else if (bentCount === 1) {\n      return {\n        personName: parts[0],\n        fatherName: parts[1],\n        grandfatherName: \"\",\n        familyName: \"\"\n      };\n    }\n  } else if (parts.length === 3) {\n    if (bentCount === 1) {\n      return {\n        personName: parts[0],\n        fatherName: parts[1],\n        grandfatherName: \"\",\n        familyName: parts[2]\n      };\n    } else if (bentCount === 2) {\n      return {\n        personName: parts[0],\n        fatherName: parts[1],\n        grandfatherName: parts[2],\n        familyName: \"\"\n      };\n    }\n  } else if (parts.length === 4) {\n    return {\n      personName: parts[0],\n      fatherName: parts[1],\n      grandfatherName: parts[2],\n      familyName: parts[3]\n    };\n  }\n  // Default case if structure doesn't match\n  return {\n    personName: parts[0],\n    fatherName: \"\",\n    grandfatherName: \"\",\n    familyName: parts[1]\n  };\n}\nexport const translateName = (fullName, language = true) => {\n  const nameParts = fullName.split(' ');\n\n  // Build reverse translation map if needed\n  const reverseTranslations = Object.fromEntries(Object.entries(translations).map(([key, value]) => [value, key]));\n  const dict = language ? translations : reverseTranslations;\n  const translatedParts = nameParts.map(part => dict[part] || part);\n  return translatedParts.join(' ');\n};\nconst RelationPage = () => {\n  _s();\n  const [person1, setPerson1] = useState('');\n  const [person2, setPerson2] = useState('');\n  const [relationship, setRelationship] = useState('');\n  const [duplicates, setDuplicates] = useState({\n    person1: [],\n    person2: []\n  });\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState(\"\");\n  const fetchRelationship = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError(false);\n    setLoadingMessage(\"بداية البحث عن العلاقة...\");\n    try {\n      const result = await getRelationship(person1, person2);\n      if (result.error === 'non-unique-name') {\n        setDuplicates(result.duplicates);\n        setRelationship(result.message);\n      } else {\n        setDuplicates({\n          person1: [],\n          person2: []\n        });\n        setRelationship({\n          relationshipDescription: result.relation,\n          relationshipScore: result.score,\n          relationshipLevels: result.levelsTuple,\n          relationshipGenerationGap: result.generation,\n          relationshipExplanationType: result.explanation.type,\n          relationshipExplanationDesc: result.explanation.explanation,\n          commonAncestor: result.ancestor,\n          ancestorstreeData: result.treeData,\n          person1ID: result.person1ID,\n          person2ID: result.person2ID\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching relationship:', error);\n      setRelationship({\n        relationshipDescription: 'An error occurred',\n        relationshipScore: null\n      });\n      setError(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getPersonMatches = async (personName, fatherName = \"\", grandfatherName = \"\", familyName) => {\n    let cypherQuery = ``;\n    const queryParamsObject = {};\n    if (personName) {\n      if (fatherName) {\n        if (grandfatherName) {\n          if (familyName) {\n            cypherQuery += `\n              MATCH (grandfather:Person)-[:FATHER_OF]->(father:Person)-[:FATHER_OF]->(child:Person)\n              WHERE child.name = $personName AND \n                    father.name = $fatherName AND \n                    grandfather.name = $grandfatherName AND \n                    child.lastName = $familyName\n              RETURN \n                id(child) AS childID,\n                child.name AS childName, \n                father.name AS fatherName, \n                grandfather.name AS grandfatherName, \n                child.lastName AS familyName  \n            `;\n            queryParamsObject.personName = personName;\n            queryParamsObject.fatherName = fatherName;\n            queryParamsObject.grandfatherName = grandfatherName;\n            queryParamsObject.familyName = familyName;\n          } else {\n            cypherQuery += `\n              MATCH (grandfather:Person)-[:FATHER_OF]->(father:Person)-[:FATHER_OF]->(child:Person)\n              WHERE child.name = $personName AND \n                    father.name = $fatherName AND \n                    grandfather.name = $grandfatherName\n              RETURN \n                    id(child) AS childID, \n                    child.name AS childName, \n                    father.name AS fatherName, \n                    grandfather.name AS grandfatherName,\n                    child.lastName AS familyName       \n              `;\n            queryParamsObject.personName = personName;\n            queryParamsObject.fatherName = fatherName;\n            queryParamsObject.grandfatherName = grandfatherName;\n          }\n        } else {\n          if (familyName) {\n            cypherQuery += `\n            MATCH (father:Person)-[:FATHER_OF]->(child:Person)\n            WHERE child.name = $personName AND \n                  father.name = $fatherName AND\n                  child.lastName = $familyName\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\n            RETURN  \n              id(child) AS childID,\n              child.name AS childName, \n              father.name AS fatherName,\n              grandfather.name AS grandfatherName,\n              child.lastName AS familyName\n            `;\n            queryParamsObject.personName = personName;\n            queryParamsObject.fatherName = fatherName;\n            queryParamsObject.familyName = familyName;\n          } else {\n            cypherQuery += `\n            MATCH (father:Person)-[:FATHER_OF]->(child:Person)\n            \n            WHERE child.name = $personName AND \n                  father.name = $fatherName\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\n            RETURN  id(child) AS childID, \n                    child.name AS childName, \n                    father.name AS fatherName, \n                    grandfather.name AS grandfatherName,\n                    child.lastName AS familyName\n            `;\n            queryParamsObject.personName = personName;\n            queryParamsObject.fatherName = fatherName;\n          }\n        }\n      } else {\n        if (familyName) {\n          cypherQuery += `\n          MATCH (child:Person)\n          WHERE child.name = $personName AND child.lastName = $familyName\n          OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(child)\n          OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\n          RETURN \n            id(child) AS childID,\n            child.name AS childName, \n            father.name AS fatherName,\n            grandfather.name AS grandfatherName,\n            child.lastName AS familyName\n        `;\n          queryParamsObject.personName = personName;\n          queryParamsObject.familyName = familyName;\n        } else {\n          cypherQuery += `\n            MATCH (child:Person)\n            WHERE child.name = $personName\n            OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(child)\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\n            RETURN\n              id(child) AS childID,\n              child.name AS childName, \n              father.name AS fatherName, \n              grandfather.name AS grandfatherName,\n              child.lastName AS familyName\n          `;\n          queryParamsObject.personName = personName;\n        }\n      }\n    }\n    const session = driver.session();\n    try {\n      const result = await session.run(cypherQuery, queryParamsObject);\n      return result.records.map(record => ({\n        id: record.get('childID').toNumber(),\n        name: record.get('childName'),\n        father: record.get('fatherName') || \"\",\n        grandfather: record.get('grandfatherName') || \"\",\n        lastName: record.get('familyName')\n      }));\n    } catch (Error) {\n      console.error('Query Error:', Error);\n      setError('حدث خطأ أثناء البحث.');\n    } finally {\n      await session.close();\n    }\n  };\n  const getRelationship = async (person1FullName, person2FullName) => {\n    const isArabic = text => /[\\u0600-\\u06FF]/.test(text);\n    let translatedName1, translatedName2;\n    if (isArabic(person1FullName)) {\n      translatedName1 = translateName(person1FullName, false);\n    } else {\n      translatedName1 = person1FullName;\n    }\n    if (isArabic(person2FullName)) {\n      translatedName2 = translateName(person2FullName, false);\n    } else {\n      translatedName2 = person2FullName;\n    }\n    const {\n      personName: person1Name,\n      fatherName: person1FatherName,\n      grandfatherName: person1GrandfatherName,\n      familyName: person1LastName\n    } = splitName(translatedName1);\n    const {\n      personName: person2Name,\n      fatherName: person2FatherName,\n      grandfatherName: person2GrandfatherName,\n      familyName: person2LastName\n    } = splitName(translatedName2);\n    const errorContainer = document.getElementById('error-container');\n    try {\n      const person1Matches = await getPersonMatches(person1Name, person1FatherName, person1GrandfatherName, person1LastName);\n      if (person1Matches.length === 0) {\n        throw new Error(`لا يوجد أشخاص بإسم ${person1FullName} الرجاء التثبت في الإسم جيدا`);\n      }\n      const person2Matches = await getPersonMatches(person2Name, person2FatherName, person2GrandfatherName, person2LastName);\n      if (person2Matches.length === 0) {\n        throw new Error(`لا يوجد أشخاص بإسم ${person2FullName} الرجاء التثبت في الإسم جيدا`);\n      }\n      setLoadingMessage(\"جاري البحث عن الأشخاص\");\n      console.log(\"P1 matches : \", person1Matches);\n      console.log(\"P2 matches : \", person2Matches);\n      let person1ID, person2ID;\n      if (person1Matches.length > 1 || person2Matches.length > 1) {\n        return {\n          error: 'non-unique-name',\n          message: 'تم العثور على عدة أشخاص بنفس الاسم. الرجاء اختيار الصحيح.',\n          duplicates: {\n            person1: person1Matches.length > 1 ? person1Matches : [],\n            person2: person2Matches.length > 1 ? person2Matches : []\n          }\n        };\n      } else {\n        person1ID = person1Matches[0].id;\n        person2ID = person2Matches[0].id;\n      }\n      // Function that return the ancestors of a given person starting with the person itself and going up to the root.\n\n      const getAncestors = async (person1ID, person2ID) => {\n        setLoadingMessage(\"جاري البحث عن الأجداد المشتركة\");\n        const result = await session.run(`\n          MATCH path1 = (common:Person)-[:FATHER_OF|MOTHER_OF*0..4]->(p1:Person)\n          WHERE id(p1) = $person1ID\n      \n          MATCH path2 = (common)-[:FATHER_OF|MOTHER_OF*0..4]->(p2:Person)\n          WHERE id(p2) = $person2ID\n            AND id(p1) <> id(p2)\n      \n          WITH common, path1, path2, length(path1) AS level1, length(path2) AS level2\n          OPTIONAL MATCH (cGF:Person)-[:FATHER_OF]->(cF:Person)-[:FATHER_OF]->(common)\n\n          ORDER BY (level1 + level2) ASC\n          LIMIT 1\n      \n          RETURN \n            common.name AS commonAncestorName,\n            cF.name AS commonAncestorFatherName,\n            cGF.name AS commonAncestorGrandFatherName,\n            common.lastName AS commonAncestorLastName,\n            id(common) AS commonAncestorID,\n            common.gender AS commonAncestorGender,\n            level1 AS generationsFromP1,\n            level2 AS generationsFromP2,\n            [n IN nodes(path1) | { id: id(n), name: n.name, lastName: n.lastName, gender: n.gender }] AS pathToP1,\n            [n IN nodes(path2) | { id: id(n), name: n.name, lastName: n.lastName, gender: n.gender }] AS pathToP2\n        `, {\n          person1ID,\n          person2ID\n        });\n        const record = result.records[0];\n        return {\n          id: record.get('commonAncestorID').toNumber(),\n          name: record.get('commonAncestorName'),\n          lastName: record.get('commonAncestorLastName'),\n          fatherName: record.get('commonAncestorFatherName'),\n          grandfatherName: record.get('commonAncestorGrandFatherName'),\n          gender: record.get('commonAncestorGender'),\n          levelFromP1: record.get('generationsFromP1').toNumber(),\n          levelFromP2: record.get('generationsFromP2').toNumber(),\n          pathFromAncestorToP1: record.get('pathToP1'),\n          pathFromAncestorToP2: record.get('pathToP2')\n        };\n      };\n      const checkMarriage = async (person1ID, person2ID) => {\n        setLoadingMessage(\"جاري البحث عن علاقة زواج\");\n        const result = await session.run(`\n          MATCH (H:Person)-[:HUSBAND_OF]->(Wife:Person)\n          MATCH (Wife:Person)-[:WIFE_OF]->(H:Person)\n          WHERE id(H) = $person1ID AND id(Wife) = $person2ID\n          OPTIONAL MATCH (wifeGrandFather:Person)-[:FATHER_OF]->(wifeFather:Person)-[:FATHER_OF]->(Wife)\n          OPTIONAL MATCH (wifeFather)-[:FATHER_OF]->(siblings:Person)\n          RETURN \n                COLLECT ({\n                    H.name AS HusbandName,\n                    H.lastName AS HusbandFamilyName,\n                })\n          \n                 W.name AS WifeName, \n                 COLLECT ({\n                    Wife.Father.name AS WifeFather, \n                    Wife.lastName AS WifeFamilyName,\n                 })\n                 \n                 COLLECT({\n                    siblingId: id(siblings), \n                    siblingName: siblings.name, \n                    siblingGender: siblings.gender\n                 }) AS Siblings\n\n        `, {\n          person1ID,\n          person2ID\n        });\n        const record = result.records[0];\n        if (record.length === 0) {\n          return false;\n        } else {\n          return {\n            areMarried: true,\n            wifeHusband\n          };\n        }\n      };\n      let marraigeRecord = await checkMarriage(person1ID, person2ID);\n      let relationRecord = await getAncestors(person1ID, person2ID);\n      const ancestorID = relationRecord.id;\n      const ancestorName = translateName(relationRecord.name);\n      const ancestorLastName = translateName(relationRecord.lastName);\n      const ancestorFatherName = translateName(relationRecord.fatherName);\n      const ancestorGrandFatherName = translateName(relationRecord.grandfatherName);\n      const ancestorGender = relationRecord.gender;\n      let levelFromP1, levelFromP2, pathFromAncestorToP1, pathFromAncestorToP2;\n      const ancestor = {\n        ancestorID,\n        ancestorName,\n        ancestorFatherName,\n        ancestorGrandFatherName,\n        ancestorLastName,\n        ancestorGender\n      };\n      ({\n        levelFromP1,\n        levelFromP2,\n        pathFromAncestorToP1,\n        pathFromAncestorToP2\n      } = relationRecord);\n      const pathToP1 = pathFromAncestorToP1;\n      const pathToP2 = pathFromAncestorToP2;\n      function buildTreePath(path) {\n        return path.reduceRight((acc, person) => {\n          return {\n            id: person.id.toNumber(),\n            name: `${person.name} ${person.lastName}`,\n            children: acc ? [acc] : []\n          };\n        }, null);\n      }\n      function mergePaths(pathToP1, pathToP2) {\n        const ancestor = pathToP1[0];\n        const branch1 = pathToP1.slice(1);\n        const branch2 = pathToP2.slice(1);\n        return {\n          id: ancestor.id.toNumber(),\n          name: `${ancestor.name} ${ancestor.lastName}`,\n          children: [buildTreePath(branch1), buildTreePath(branch2)]\n        };\n      }\n      const treeData = mergePaths(pathToP1, pathToP2);\n      console.log(pathFromAncestorToP1.reverse().map(a => a.name).join(\" ben \"));\n      console.log(pathFromAncestorToP2.reverse().map(a => a.name).join(\" ben \"));\n      var p1Level = levelFromP1;\n      var p2Level = levelFromP2;\n      const translatedName1 = translateName(person1FullName);\n      const translatedName2 = translateName(person2FullName);\n      const gender1 = pathToP1[0].gender;\n      const gender2 = pathToP2[0].gender;\n      let relation = '',\n        score = 0;\n      let relationshipExplanation = [{\n        type: \"العائلة\",\n        explanation: \"هؤلاء الشخصين مرتبطين من خلال العائلة ذو الدرجة الأولى.\"\n      }, {\n        type: \"العائلة المقربة\",\n        explanation: \"هؤلاء الشخصين مرتبطين من خلال أعمام وأخوال مشتركين.\"\n      }, {\n        type: \"العائلة الموسعة\",\n        explanation: \"هؤلاء الشخصين مرتبطين من خلال أعمام أو أخوال الأب وأحفادهم.\"\n      }, {\n        type: \"قرابة الزواج\",\n        explanation: \"هذان الشخصان مرتبطان من خلال الزواج.\"\n      }, {\n        type: \"صهر / نسيب\",\n        explanation: \"هذان الشخصان مرتبطان عبر الزواج وليس النسب الدموي.\"\n      }, {\n        type: \"لا توجد علاقة\",\n        explanation: \"لم يتم العثور على أي صلة قرابة بين الشخصين في قاعدة البيانات.\"\n      }, {\n        type: \"نفس الشخص\",\n        explanation: \"الاسمين يشيران إلى نفس الشخص.\"\n      }];\n      console.log(`Level: (${p1Level}, ${p2Level})`);\n      setLoadingMessage(\"جاري البحث عن العلاقة بين الشخصين\");\n      if (p1Level === 0 && p2Level === 1) {\n        if (gender1 === 'Male') {\n          relation = `${translatedName1} هو والد ${translatedName2}`;\n        } else {\n          relation = `${translatedName1} هي والدة ${translatedName2}`;\n        }\n        score = 100;\n      } else if (p1Level === 1 && p2Level === 0) {\n        if (gender1 === 'Male') {\n          relation = `${translatedName1} هو ابن ${translatedName2}`;\n        } else {\n          relation = `${translatedName1} هي إبنة ${translatedName2}`;\n        }\n        score = 100;\n      } else if (p1Level === 2 && p2Level === 0) {\n        if (gender1 === 'Male') {\n          relation = `${translatedName1} هو حفيد ${translatedName2}`;\n        } else {\n          relation = `${translatedName1} هي حفيدة ${translatedName2}`;\n        }\n        score = 90;\n      } else if (p1Level === 0 && p2Level === 2) {\n        if (gender1 === 'Male') {\n          relation = `${translatedName1} هو جدّ ${translatedName2}`;\n        } else {\n          relation = `${translatedName1} هي جدّة ${translatedName2}`;\n        }\n        score = 90;\n      } else if (p1Level === 3 && p2Level === 0) {\n        if (gender1 === 'Male') {\n          relation = `${translatedName1} هو إبن حفيد ${translatedName2}`;\n        } else {\n          relation = `${translatedName1} هي إبنة حفيدة ${translatedName2}`;\n        }\n        score = 75;\n      } else if (p1Level === 0 && p2Level === 3) {\n        if (gender1 === 'Male') {\n          relation = `${translatedName1} و جد والد ${translatedName2}`;\n        } else {\n          relation = `${translatedName1} هي جدة والدة ${translatedName2}`;\n        }\n        score = 80;\n      } else if (p1Level === 0 && p2Level === 4) {\n        // ADD FROM MOTHER FROM FATHER GRANDFATHER \n        const p2GreatAncestorGender = pathToP1[2].gender;\n        if (gender1 === 'Male') {\n          if (p2GreatAncestorGender === 'Male') {\n            relation = `${translatedName1} هو جد جد ${translatedName2}`;\n          } else {\n            relation = `${translatedName1} هو جد جدة ${translatedName2}`;\n          }\n        } else {\n          if (p2GreatAncestorGender === 'Male') {\n            relation = `${translatedName1} هي جدة جد ${translatedName2}`;\n          } else {\n            relation = `${translatedName1} هي جدة جدة ${translatedName2}`;\n          }\n        }\n        score = 75;\n      } else if (p1Level === 4 && p2Level === 0) {\n        // ADD FROM MOTHER FROM FATHER GRANDFATHER \n        const p1GreatAncestorGender = pathToP1[2].gender;\n        if (gender1 === 'Male') {\n          if (p1GreatAncestorGender === 'Male') {\n            relation = `${translatedName1} هو حفيد حفيد ${translatedName2}`;\n          } else {\n            relation = `${translatedName1} هو حفيد حفيدة ${translatedName2}`;\n          }\n        } else {\n          if (p1GreatAncestorGender === 'Male') {\n            relation = `${translatedName1} هي حفيدة حفيد ${translatedName2}`;\n          } else {\n            relation = `${translatedName1} هي حفيدة حفيد ${translatedName2}`;\n          }\n        }\n        score = 75;\n      } else if (p1Level === 1 && p2Level === 1) {\n        if (gender1 === 'Male' && gender2 === 'Male') {\n          relation = `${translatedName1} و ${translatedName2} إخوة`;\n        } else if (gender1 === 'Female' && gender2 === 'Female') {\n          relation = `${translatedName1} و ${translatedName2} أخوات`;\n        } else {\n          relation = `${translatedName1} و ${translatedName2} إخوة`;\n        }\n        score = 98;\n      } else if (p1Level === 2 && p2Level === 1) {\n        const p1AncestorGender = pathToP1[1].gender;\n        if (gender1 === 'Male') {\n          if (p1AncestorGender === 'Male') {\n            relation = `${translatedName1} هو ابن أخ ${translatedName2}`;\n          } else {\n            relation = `${translatedName1} هو ابن أخت ${translatedName2}`;\n          }\n          score = 93;\n        } else {\n          if (p1AncestorGender === 'Male') {\n            relation = `${translatedName1} هي ابن أخ ${translatedName2}`;\n          } else {\n            relation = `${translatedName1} هي ابنة أخت ${translatedName2}`;\n          }\n          score = 93;\n        }\n      } else if (p1Level === 1 && p2Level === 2) {\n        const p2AncestorGender = pathToP2[1].gender;\n        if (gender1 === 'Male') {\n          if (p2AncestorGender === 'Male') {\n            relation = `${translatedName1} هو عم ${translatedName2}`;\n            score = 95;\n          } else {\n            relation = `${translatedName1} هو خال ${translatedName2}`;\n            score = 94;\n          }\n        } else {\n          if (p2AncestorGender === 'Male') {\n            relation = `${translatedName1} هي عمة ${translatedName2}`;\n            score = 95;\n          } else {\n            relation = `${translatedName1} هي خالة ${translatedName2}`;\n            score = 94;\n          }\n        }\n      } else if (p1Level === 1 && p2Level === 3) {\n        const p2AncestorGender = pathToP2[1].gender;\n        const p2GreatAncestorGender = pathToP2[2].gender;\n        if (gender1 === 'Male') {\n          if (p2AncestorGender === 'Male') {\n            if (p2GreatAncestorGender === 'Male') {\n              relation = `${translatedName1} هو عم والد ${translatedName2}`;\n              score = 80;\n            } else {\n              relation = `${translatedName1} هو خال والد ${translatedName2}`;\n              score = 75;\n            }\n          } else {\n            if (p2GreatAncestorGender === 'Male') {\n              relation = `${translatedName1} هو عم والدة ${translatedName2}`;\n              score = 80;\n            } else {\n              relation = `${translatedName1} هو خال والدة ${translatedName2}`;\n              score = 70;\n            }\n          }\n        } else {\n          if (p2AncestorGender === 'Male') {\n            if (p2GreatAncestorGender === 'Male') {\n              relation = `${translatedName1} هي عمة والد ${translatedName2}`;\n              score = 80;\n            } else {\n              relation = `${translatedName1} هي خالة والد ${translatedName2}`;\n              score = 75;\n            }\n          } else {\n            if (p2GreatAncestorGender === 'Male') {\n              relation = `${translatedName1} هي عمة والدة ${translatedName2}`;\n              score = 80;\n            } else {\n              relation = `${translatedName1} هي خالة والدة ${translatedName2}`;\n              score = 75;\n            }\n          }\n        }\n      } else if (p1Level === 3 && p2Level === 1) {\n        const p1GreatAncestorGender = pathToP1[2].gender;\n        if (gender1 === 'Male') {\n          if (p1GreatAncestorGender === 'Male') {\n            relation = `${translatedName1} هو حفيد اخ ${translatedName2}`;\n            score = 78;\n          } else {\n            relation = `${translatedName1} هو حفيد اخت ${translatedName2}`;\n            score = 78;\n          }\n        } else {\n          if (p1GreatAncestorGender === 'Male') {\n            relation = `${translatedName1} هي حفيدة اخ ${translatedName2}`;\n            score = 78;\n          } else {\n            relation = `${translatedName1} هي حفيدة اخت ${translatedName2}`;\n            score = 78;\n          }\n        }\n      } else if (p1Level === 2 && p2Level === 2) {\n        const p1AncestorGender = pathToP1[1].gender;\n        const p2AncestorGender = pathToP2[1].gender;\n        if (gender1 === 'Male') {\n          if (p2AncestorGender === 'Male') {\n            if (p1AncestorGender === 'Male') {\n              // ولد عمه\n              relation = `${translatedName1} إبن عم ${translatedName2}`;\n              score = 90;\n            } else {\n              relation = `${translatedName1} هو إبن عمّة ${translatedName2}`;\n              score = 89;\n            }\n          } else {\n            if (p1AncestorGender === 'Male') {\n              // ولد خاله\n              relation = `${translatedName1} هو إبن خال ${translatedName2}`;\n              score = 88;\n            } else {\n              relation = `${translatedName1} هو إبن خالة ${translatedName2}`;\n              score = 86;\n            }\n          }\n        } else {\n          if (p1AncestorGender === 'Male') {\n            if (p2AncestorGender === 'Male') {\n              // بنت عمه\n              relation = `${translatedName1} هي إبنة عمّ ${translatedName2}`;\n              score = 90;\n            } else {\n              relation = `${translatedName1} هي إبنة عمّة ${translatedName2}`;\n              score = 89;\n            }\n          } else {\n            if (p2AncestorGender === 'Male') {\n              // بنت خاله\n              relation = `${translatedName1} هي إبنة خال ${translatedName2}`;\n              score = 88;\n            } else {\n              relation = `${translatedName1} هي إبنة خالة ${translatedName2}`;\n              score = 86;\n            }\n          }\n        }\n      } else if (p1Level === 2 && p2Level === 3) {\n        const p1AncestorGender = pathToP1[1].gender;\n        const p2AncestorGender = pathToP2[1].gender;\n        if (gender1 === 'Male') {\n          if (p1AncestorGender === 'Male') {\n            if (p2AncestorGender === 'Male') {\n              relation = `${translatedName1} هو إبن عم والد ${translatedName2}`;\n              score = 80;\n            } else {\n              relation = `${translatedName1} هو إبن عمة والد ${translatedName2}`;\n              score = 78;\n            }\n          } else {\n            // mother's side\n            if (p2AncestorGender === 'Male') {\n              // mother's brother's son\n              relation = `${translatedName1} هو إبن عم والدة ${translatedName2}.`;\n              score = 74;\n            } else {\n              // mother's brother's daughter\n              relation = `${translatedName1} هو إبن عمّة والدة ${translatedName2}`;\n              score = 72;\n            }\n          }\n        } else {\n          // If person1 is female\n          if (p1AncestorGender === 'Male') {\n            // father's side\n            if (p2AncestorGender === 'Male') {\n              // father's brother's son\n              relation = `${translatedName1} هي إبنة عم والد ${translatedName2}`;\n              score = 80;\n            } else {\n              // father's brother's daughter\n              relation = `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\n              score = 78;\n            }\n          } else {\n            // mother's side\n            if (p2AncestorGender === 'Male') {\n              // mother's brother's son\n              relation = `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\n              score = 74;\n            } else {\n              // mother's brother's daughter\n              relation = `${translatedName1} هي إبنة عمة والدة ${translatedName2}`;\n              score = 72;\n            }\n          }\n        }\n      } else if (p1Level === 3 && p2Level === 2) {\n        const p1AncestorGender = pathToP1[1].gender;\n        const p2AncestorGender = pathToP2[1].gender;\n        if (p1AncestorGender === 'Male') {\n          // father's side\n          if (p2AncestorGender === 'Male') {\n            // father's brother's son\n            relation = `والد ${translatedName1} هو إبن عم ${translatedName2}`;\n            score = 80;\n          } else {\n            relation = `والد ${translatedName1} هو إبن خال ${translatedName2}`;\n            score = 75;\n          }\n        } else {\n          // mother's side\n          if (p2AncestorGender === 'Male') {\n            // mother's brother's son\n            relation = `والدة ${translatedName1} هي إبنة عم ${translatedName2}`;\n            score = 80;\n          } else {\n            // mother's brother's daughter\n            relation = `والدة ${translatedName1} هي إبنة خال  ${translatedName2}`;\n            score = 75;\n          }\n        }\n      } else if (p1Level === 3 && p2Level === 3) {\n        const p1AncestorGender = pathToP1[1].gender;\n        const p2AncestorGender = pathToP2[1].gender;\n        const p1GreatAncestorGender = pathToP1[2].gender;\n        const p2GreatAncestorGender = pathToP2[2].gender;\n        if (p1AncestorGender === 'Male') {\n          if (p2AncestorGender === 'Male') {\n            if (p1GreatAncestorGender === 'Male') {\n              if (p2GreatAncestorGender === 'Male') {\n                relation = `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\n              } else {\n                relation = `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\n              }\n            } else {\n              if (p2GreatAncestorGender === 'Male') {\n                relation = `جدّة ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\n              } else {\n                relation = `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\n              }\n            }\n          } else {\n            if (p1GreatAncestorGender === 'Male') {\n              if (p2GreatAncestorGender === 'Male') {\n                relation = `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأم إخوة.`;\n              } else {\n                relation = `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\n              }\n            } else {\n              if (p2GreatAncestorGender === 'Male') {\n                relation = `جدّة ${translatedName1} من الأب و جد${translatedName2} من الأم إخوة.`;\n              } else {\n                relation = `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\n              }\n            }\n          }\n        } else {\n          if (p2AncestorGender === 'Male') {\n            if (p1GreatAncestorGender === 'Male') {\n              if (p2GreatAncestorGender === 'Male') {\n                relation = `جدّ ${translatedName1} من الأم و جد${translatedName2} من الأب إخوة.`;\n              } else {\n                relation = `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\n              }\n            } else {\n              if (p2GreatAncestorGender === 'Male') {\n                relation = `جدّة ${translatedName1} من الأم و جد ${translatedName2} من الأب إخوة.`;\n              } else {\n                relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب أخوات.`;\n              }\n            }\n          } else {\n            if (p1GreatAncestorGender === 'Male') {\n              if (p2GreatAncestorGender === 'Male') {\n                relation = `جدّ ${translatedName1} من الأم و جد ${translatedName2} من الأم إخوة.`;\n              } else {\n                relation = `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\n              }\n            } else {\n              if (p2GreatAncestorGender === 'Male') {\n                relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\n              } else {\n                relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\n              }\n            }\n          }\n        }\n      } else {\n        setLoading(false);\n        console.log('No direct relation found.');\n        errorContainer.innerText = 'لا يوجد قرابة مباشرة.';\n        return '';\n      }\n      if (relation != '') {\n        setLoading(false);\n        return {\n          relation,\n          score,\n          generation: Math.abs(p1Level - p2Level),\n          levelsTuple: {\n            levelFromP1,\n            levelFromP2\n          },\n          explanation: relationshipExplanation[0],\n          ancestor,\n          treeData,\n          person1ID,\n          person2ID\n        };\n      }\n    } catch (error) {\n      console.error('Error in relationship lookup:', error);\n      setError(`❌ خطأ: ${error.message || error}`);\n      if (errorContainer) {\n        errorContainer.innerText = `❌ خطأ: ${error.message || error}`;\n      }\n      setLoading(false);\n      return '';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relation-page\",\n    children: [(duplicates.person1.length > 0 || duplicates.person2.length > 0) && /*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"duplicates-panel\",\n      children: [duplicates.person1.length > 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"duplicates-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u0623\\u0643\\u062A\\u0628 \\u0627\\u0644\\u0627\\u0633\\u0645 \\u0627\\u0644\\u0643\\u0627\\u0645\\u0644 \\u0644\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0635\\u062D\\u064A\\u062D:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 973,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: duplicates.person1.map((p, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: `${translateName(p.name)} بن ${translateName(p.father)} بن ${translateName(p.grandfather)} ${translateName(p.lastName)}`\n          }, `p1-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 976,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 974,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 972,\n        columnNumber: 11\n      }, this), duplicates.person2.length > 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"duplicates-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"\\u0627\\u062E\\u062A\\u0631 \\u0627\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0635\\u062D\\u064A\\u062D \\\"\", person2, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 986,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: duplicates.person2.map((p, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: `${translateName(p.name)} بن ${translateName(p.father)} بن ${translateName(p.grandfather)} ${translateName(p.lastName)}`\n          }, `p2-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 989,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 987,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 985,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 970,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"relation-form-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"section-title\",\n          children: \"\\u0645\\u0627\\u0647\\u064A \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629 \\u0628\\u064A\\u0646\\u0647\\u0645\\u0627\\u061F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1001,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"DescriptionZone\",\n          children: \"\\u0627\\u0644\\u0647\\u062F\\u0641 \\u0645\\u0646 \\u0647\\u0630\\u0647 \\u0627\\u0644\\u0635\\u0641\\u062D\\u0629 \\u0647\\u0648 \\u062A\\u062D\\u062F\\u064A\\u062F \\u0635\\u0644\\u0629 \\u0627\\u0644\\u0642\\u0631\\u0627\\u0628\\u0629 \\u0628\\u064A\\u0646 \\u0634\\u062E\\u0635\\u064A\\u0646 \\u0628\\u0646\\u0627\\u0621\\u064B\\u0627 \\u0639\\u0644\\u0649 \\u0627\\u0633\\u0645\\u0647\\u0645. \\u0643\\u0644 \\u0645\\u0627\\u0639\\u0644\\u064A\\u0643 \\u0641\\u0639\\u0644\\u0647 \\u0647\\u0648 \\u0627\\u062F\\u062E\\u0627\\u0644 \\u0627\\u0644\\u0627\\u0633\\u0645 \\u0644\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0627\\u0648\\u0644 \\u0648\\u0627\\u0644\\u062B\\u0627\\u0646\\u064A \\u0648\\u062B\\u0645 \\u0627\\u0644\\u0646\\u0642\\u0631 \\u0639\\u0644\\u0649 \\\"\\u0627\\u0644\\u062A\\u062D\\u0642\\u0642 \\u0645\\u0646 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\\\" \\u0633\\u062A\\u0638\\u0647\\u0631 \\u0644\\u0643 \\u0627\\u0644\\u0646\\u062A\\u064A\\u062C\\u0629 \\u0641\\u064A \\u0627\\u0633\\u0647\\u0644 \\u0627\\u0644\\u0635\\u0641\\u062D\\u0629 \\u0648\\u0627\\u0644\\u062A\\u064A \\u064A\\u062A\\u0648\\u0636\\u062D \\u0644\\u0643 \\u0646\\u0648\\u0639 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629 \\u0648\\u0645\\u062F\\u0649 \\u0642\\u0631\\u0627\\u0628\\u062A\\u0647\\u0627\\u061F \\u0641\\u064A \\u062D\\u0627\\u0644 \\u0648\\u062C\\u0648\\u062F \\u0627\\u064A \\u062A\\u0634\\u0627\\u0628\\u0647\\u0627\\u062A \\u0627\\u0648 \\u062A\\u0643\\u0631\\u0627\\u0631\\u0627\\u062A \\u0641\\u064A \\u0627\\u0644\\u0627\\u0633\\u0645\\u0627\\u0621 \\u0633\\u064A\\u0645 \\u062A\\u0648\\u0641\\u064A\\u0631 \\u062E\\u064A\\u0627\\u0631\\u0627\\u062A \\u0644\\u062A\\u062D\\u062F\\u064A\\u062F \\u0627\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0635\\u062D\\u064A\\u062D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1002,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: fetchRelationship,\n          className: \"relation-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"\\u0627\\u0644\\u0625\\u0633\\u0645 \\u0627\\u0644\\u0643\\u0627\\u0645\\u0644 \\u0627\\u0644\\u0623\\u0648\\u0644\",\n              value: person1,\n              onChange: e => setPerson1(e.target.value),\n              className: \"inputNames\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1009,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1008,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"\\u0627\\u0644\\u0625\\u0633\\u0645 \\u0627\\u0644\\u0643\\u0627\\u0645\\u0644 \\u0627\\u0644\\u062B\\u0627\\u0646\\u064A\",\n              value: person2,\n              onChange: e => setPerson2(e.target.value),\n              className: \"inputNames\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1018,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1017,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ButtonSection\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"checkButton\",\n              children: \"\\u062A\\u062D\\u0642\\u0642 \\u0645\\u0646 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1027,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"reset\",\n              className: \"resetButton\",\n              children: \"\\u0625\\u0644\\u063A\\u0627\\u0621\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1028,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1026,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1007,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1000,\n        columnNumber: 7\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1034,\n        columnNumber: 17\n      }, this), \" \", loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1037,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: loadingMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1038,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1036,\n        columnNumber: 9\n      }, this), !loading && relationship && !error && /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"relationship-result\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          id: \"resultTitle\",\n          children: \"\\u0646\\u062A\\u064A\\u062C\\u0629 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1044,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"relationText\",\n          children: relationship.relationshipDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1045,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"result-table\",\n            children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"\\u062F\\u0631\\u062C\\u0629 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1050,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"score-cell\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"score-bar-wrapper\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"score-bar-fill\",\n                      style: {\n                        width: `${relationship.relationshipScore || 0}%`\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1053,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1052,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"score-meta\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"score-value\",\n                      children: relationship.relationshipScore\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1056,\n                      columnNumber: 23\n                    }, this), relationship.relationshipScore !== null && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: relationship.relationshipScore >= 80 ? \"score-category high\" : relationship.relationshipScore >= 60 ? \"score-category medium\" : \"score-category low\",\n                      children: relationship.relationshipScore >= 80 ? \"قوية\" : relationship.relationshipScore >= 60 ? \"متوسطة\" : \"ضعيفة\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1058,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1055,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1051,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1049,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"\\u0646\\u0648\\u0639 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1078,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"relationship-tag\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"tag blood\",\n                    children: \"\\u062F\\u0645\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1079,\n                    columnNumber: 52\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1079,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1077,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"\\u062A\\u0641\\u0633\\u064A\\u0631 \\u0625\\u0636\\u0627\\u0641\\u064A\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1082,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"relation-explanation\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"relation-explanation-type\",\n                    children: relationship.relationshipExplanationType\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1084,\n                    columnNumber: 21\n                  }, this), \" :\", relationship.relationshipExplanationDesc || \"لا يوجد تفسير متاح.\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1083,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1081,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"\\u0639\\u062F\\u062F \\u0627\\u0644\\u0623\\u062C\\u064A\\u0627\\u0644 \\u0628\\u064A\\u0646\\u0647\\u0645\\u0627 \\u062D\\u0633\\u0628 \\u0627\\u0644\\u062C\\u062F \\u0627\\u0644\\u0645\\u0634\\u062A\\u0631\\u0643\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1091,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"generation-distance\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"tooltip-container\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      id: \"numGen\",\n                      children: relationship.relationshipGenerationGap\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1094,\n                      columnNumber: 23\n                    }, this), \" \\u0623\\u062C\\u064A\\u0627\\u0644\", /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"custom-tooltip\",\n                      children: \"\\u0639\\u062F\\u062F \\u0627\\u0644\\u0623\\u062C\\u064A\\u0627\\u0644 \\u0647\\u0648 \\u0639\\u062F\\u062F \\u0627\\u0644\\u0623\\u0634\\u062E\\u0627\\u0635 \\u0627\\u0644\\u0641\\u0627\\u0635\\u0644\\u064A\\u0646 \\u0641\\u064A \\u0634\\u062C\\u0631\\u0629 \\u0627\\u0644\\u0639\\u0627\\u0626\\u0644\\u0629 \\u0628\\u064A\\u0646 \\u0627\\u0644\\u0634\\u062E\\u0635\\u064A\\u0646.\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1095,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1093,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1092,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1090,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"tooltip-container\",\n                    children: [\"\\u0627\\u0644\\u062C\\u062F \\u0627\\u0644\\u0645\\u0634\\u062A\\u0631\\u0643\", /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"custom-tooltip\",\n                      children: \"\\u0639\\u062F\\u062F \\u0627\\u0644\\u0623\\u062C\\u064A\\u0627\\u0644 \\u0647\\u0648 \\u0639\\u062F\\u062F \\u0627\\u0644\\u0623\\u0634\\u062E\\u0627\\u0635 \\u0627\\u0644\\u0641\\u0627\\u0635\\u0644\\u064A\\u0646 \\u0641\\u064A \\u0634\\u062C\\u0631\\u0629 \\u0627\\u0644\\u0639\\u0627\\u0626\\u0644\\u0629 \\u0628\\u064A\\u0646 \\u0627\\u0644\\u0634\\u062E\\u0635\\u064A\\u0646.\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1105,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1103,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1102,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"generation-distance\",\n                  children: [relationship.commonAncestor.ancestorName, \" \\u0628\\u0646 \", relationship.commonAncestor.ancestorFatherName, \" \\u0628\\u0646 \", relationship.commonAncestor.ancestorGrandFatherName, \" \", relationship.commonAncestor.ancestorLastName]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1110,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1101,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1048,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1047,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tree-wrapper\",\n            style: {\n              height: `${(Math.max(relationship.relationshipLevels.levelFromP1, relationship.relationshipLevels.levelFromP2) + 1) * 100}px`\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"titleTree\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1117,\n              columnNumber: 17\n            }, this), relationship.ancestorstreeData && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tree-container\",\n              children: /*#__PURE__*/_jsxDEV(Tree, {\n                data: relationship.ancestorstreeData,\n                orientation: \"vertical\",\n                pathFunc: \"step\",\n                nodeSize: {\n                  x: 50,\n                  y: 90\n                },\n                separation: {\n                  siblings: 3,\n                  nonSiblings: 3\n                },\n                translate: {\n                  x: 325,\n                  y: 27\n                },\n                renderCustomNodeElement: ({\n                  nodeDatum\n                }) => /*#__PURE__*/_jsxDEV(\"g\", {\n                  className: \"tree-node\",\n                  children: [/*#__PURE__*/_jsxDEV(\"title\", {\n                    children: nodeDatum.id\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1130,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n                    className: \"tree-node-rect\",\n                    x: \"-50\",\n                    y: \"-20\",\n                    width: \"100\",\n                    height: \"40\",\n                    style: {\n                      fill: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID ? '#d3f9d8' // Leaf node color (light green)\n                      : nodeDatum.id === relationship.commonAncestor.ancestorID ? '#ffe4b5' // Ancestor node color (light yellow)\n                      : '#ffffff',\n                      // Default color for other nodes\n                      stroke: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID ? '#4caf50' // Leaf node border (green)\n                      : nodeDatum.id === relationship.commonAncestor.ancestorID ? '#ffa500' // Ancestor node border (orange)\n                      : '#4a90e2',\n                      // Default border color\n                      strokeWidth: '2.5px',\n                      rx: '10',\n                      // Rounded corners\n                      ry: '10' // Rounded corners\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1131,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                    className: \"tree-node-text\",\n                    x: \"0\",\n                    y: \"5\",\n                    style: {\n                      fontSize: '16px',\n                      fontFamily: 'Cairo',\n                      fill: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID ? '#388e3c' // Leaf node text color (dark green)\n                      : nodeDatum.id === relationship.commonAncestor.ancestorID ? '#ff9800' // Ancestor node text color (orange)\n                      : '#333',\n                      // Default text color (dark gray)\n                      textAnchor: 'middle',\n                      dominantBaseline: 'middle',\n                      letterSpacing: '1px',\n                      strokeWidth: '1px',\n                      pointerEvents: 'none'\n                    },\n                    children: translateName(nodeDatum.name)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1154,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1129,\n                  columnNumber: 22\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1121,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1120,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1116,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1046,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1043,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 999,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 968,\n    columnNumber: 5\n  }, this);\n};\n_s(RelationPage, \"WyOSWDbV6P5OHQ/BVc1fTtxGH6Y=\");\n_c = RelationPage;\nexport default RelationPage;\nvar _c;\n$RefreshReg$(_c, \"RelationPage\");","map":{"version":3,"names":["React","useEffect","useState","Tree","jsxDEV","_jsxDEV","translations","require","config","neo4jURI","process","env","REACT_APP_NEO4J_URI","neo4jUser","REACT_APP_NEO4J_USER","neo4jPassword","REACT_APP_NEO4J_PASSWORD","driver","auth","basic","session","countBenAndBent","str","matches","match","length","splitName","fullName","parts","replace","trim","split","bentCount","personName","fatherName","grandfatherName","familyName","translateName","language","nameParts","reverseTranslations","Object","fromEntries","entries","map","key","value","dict","translatedParts","part","join","RelationPage","_s","person1","setPerson1","person2","setPerson2","relationship","setRelationship","duplicates","setDuplicates","error","setError","loading","setLoading","loadingMessage","setLoadingMessage","fetchRelationship","e","preventDefault","result","getRelationship","message","relationshipDescription","relation","relationshipScore","score","relationshipLevels","levelsTuple","relationshipGenerationGap","generation","relationshipExplanationType","explanation","type","relationshipExplanationDesc","commonAncestor","ancestor","ancestorstreeData","treeData","person1ID","person2ID","console","getPersonMatches","cypherQuery","queryParamsObject","run","records","record","id","get","toNumber","name","father","grandfather","lastName","Error","close","person1FullName","person2FullName","isArabic","text","test","translatedName1","translatedName2","person1Name","person1FatherName","person1GrandfatherName","person1LastName","person2Name","person2FatherName","person2GrandfatherName","person2LastName","errorContainer","document","getElementById","person1Matches","person2Matches","log","getAncestors","gender","levelFromP1","levelFromP2","pathFromAncestorToP1","pathFromAncestorToP2","checkMarriage","areMarried","wifeHusband","marraigeRecord","relationRecord","ancestorID","ancestorName","ancestorLastName","ancestorFatherName","ancestorGrandFatherName","ancestorGender","pathToP1","pathToP2","buildTreePath","path","reduceRight","acc","person","children","mergePaths","branch1","slice","branch2","reverse","a","p1Level","p2Level","gender1","gender2","relationshipExplanation","p2GreatAncestorGender","p1GreatAncestorGender","p1AncestorGender","p2AncestorGender","innerText","Math","abs","className","fileName","_jsxFileName","lineNumber","columnNumber","p","idx","onSubmit","placeholder","onChange","target","style","width","height","max","data","orientation","pathFunc","nodeSize","x","y","separation","siblings","nonSiblings","translate","renderCustomNodeElement","nodeDatum","fill","stroke","strokeWidth","rx","ry","fontSize","fontFamily","textAnchor","dominantBaseline","letterSpacing","pointerEvents","_c","$RefreshReg$"],"sources":["D:/Study/Projects/El-Kasr Family Tree/client/src/components/RelationChecker.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Tree from 'react-d3-tree';\r\nimport './RelationChecker.css';\r\nconst translations = require('./translation.json');\r\nrequire('dotenv').config();\r\n\r\nconst neo4jURI = process.env.REACT_APP_NEO4J_URI;\r\nconst neo4jUser = process.env.REACT_APP_NEO4J_USER;\r\nconst neo4jPassword = process.env.REACT_APP_NEO4J_PASSWORD;\r\n\r\nconst driver = require('neo4j-driver').driver(\r\n    neo4jURI,\r\n    require('neo4j-driver').auth.basic(neo4jUser, neo4jPassword)\r\n);\r\nconst session = driver.session();\r\n\r\nfunction countBenAndBent(str) {\r\n  const matches = str.match(/\\b(ben|bent)\\b/gi);\r\n  return matches ? matches.length : 0;\r\n}\r\n\r\n// Function that split english translated name that may contain ben to full name only parts.\r\nfunction splitName(fullName) {\r\n  const parts = fullName.replace(/\\s+(ben|bent)\\s+/gi, ' ').trim().split(/\\s+/);\r\n  const bentCount = countBenAndBent(fullName);\r\n  if (parts.length === 2) {\r\n    if (bentCount === 0){\r\n      return {\r\n        personName: parts[0],\r\n        fatherName: \"\",\r\n        grandfatherName: \"\",\r\n        familyName: parts[1]\r\n      };\r\n    }\r\n    else if (bentCount === 1){\r\n      return {\r\n        personName: parts[0],\r\n        fatherName: parts[1],\r\n        grandfatherName: \"\",\r\n        familyName: \"\"\r\n      };\r\n    }\r\n    \r\n  } \r\n  else if (parts.length === 3) {\r\n    if (bentCount === 1){\r\n      return {\r\n        personName: parts[0],\r\n        fatherName: parts[1],\r\n        grandfatherName: \"\",\r\n        familyName: parts[2]\r\n      };\r\n    }\r\n    else if (bentCount === 2){\r\n      return {\r\n        personName: parts[0],\r\n        fatherName: parts[1],\r\n        grandfatherName: parts[2],\r\n        familyName: \"\"\r\n      };\r\n    }\r\n    \r\n  } else if (parts.length === 4) {\r\n    return {\r\n      personName: parts[0],\r\n      fatherName: parts[1],\r\n      grandfatherName: parts[2],\r\n      familyName: parts[3]\r\n    };\r\n  }\r\n  // Default case if structure doesn't match\r\n  return { personName: parts[0], fatherName: \"\", grandfatherName: \"\", familyName: parts[1] };\r\n}\r\n\r\nexport const translateName = (fullName, language = true) => {\r\n  const nameParts = fullName.split(' ');\r\n\r\n  // Build reverse translation map if needed\r\n  const reverseTranslations = Object.fromEntries(\r\n    Object.entries(translations).map(([key, value]) => [value, key])\r\n  );\r\n\r\n  const dict = language ? translations : reverseTranslations;\r\n\r\n  const translatedParts = nameParts.map(part => dict[part] || part);\r\n\r\n  return translatedParts.join(' ');\r\n};\r\n\r\nconst RelationPage = () => {\r\n  const [person1, setPerson1] = useState('');\r\n  const [person2, setPerson2] = useState('');\r\n  const [relationship, setRelationship] = useState('');\r\n  const [duplicates, setDuplicates] = useState({ person1: [], person2: [] });\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingMessage, setLoadingMessage] = useState(\"\");\r\n\r\n  const fetchRelationship = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setError(false);\r\n    setLoadingMessage(\"بداية البحث عن العلاقة...\");\r\n\r\n    try {\r\n      const result = await getRelationship(person1, person2);\r\n\r\n      if (result.error === 'non-unique-name') {\r\n        setDuplicates(result.duplicates);\r\n        setRelationship(result.message);\r\n      } else {\r\n        setDuplicates({ person1: [], person2: [] });\r\n        setRelationship({\r\n          relationshipDescription: result.relation,\r\n          relationshipScore: result.score,\r\n          relationshipLevels: result.levelsTuple,\r\n          relationshipGenerationGap: result.generation,\r\n          relationshipExplanationType: result.explanation.type,\r\n          relationshipExplanationDesc: result.explanation.explanation,\r\n          commonAncestor: result.ancestor,\r\n          ancestorstreeData: result.treeData,\r\n          person1ID: result.person1ID,\r\n          person2ID: result.person2ID\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching relationship:', error);\r\n      setRelationship({ relationshipDescription: 'An error occurred', relationshipScore: null });\r\n      setError(true);\r\n    } finally{\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n\r\n  const getPersonMatches = async (personName, fatherName = \"\", grandfatherName = \"\", familyName) => {\r\n\r\n    let cypherQuery = ``;\r\n    const queryParamsObject = {};\r\n  \r\n    if (personName){\r\n      if (fatherName) {\r\n        if (grandfatherName) {\r\n          if (familyName) {\r\n            cypherQuery += `\r\n              MATCH (grandfather:Person)-[:FATHER_OF]->(father:Person)-[:FATHER_OF]->(child:Person)\r\n              WHERE child.name = $personName AND \r\n                    father.name = $fatherName AND \r\n                    grandfather.name = $grandfatherName AND \r\n                    child.lastName = $familyName\r\n              RETURN \r\n                id(child) AS childID,\r\n                child.name AS childName, \r\n                father.name AS fatherName, \r\n                grandfather.name AS grandfatherName, \r\n                child.lastName AS familyName  \r\n            `;\r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n            queryParamsObject.grandfatherName = grandfatherName;\r\n            queryParamsObject.familyName = familyName;\r\n          } \r\n          else {\r\n            cypherQuery += `\r\n              MATCH (grandfather:Person)-[:FATHER_OF]->(father:Person)-[:FATHER_OF]->(child:Person)\r\n              WHERE child.name = $personName AND \r\n                    father.name = $fatherName AND \r\n                    grandfather.name = $grandfatherName\r\n              RETURN \r\n                    id(child) AS childID, \r\n                    child.name AS childName, \r\n                    father.name AS fatherName, \r\n                    grandfather.name AS grandfatherName,\r\n                    child.lastName AS familyName       \r\n              `;\r\n            \r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n            queryParamsObject.grandfatherName = grandfatherName;\r\n          }\r\n          \r\n        } else {\r\n          if (familyName){\r\n            cypherQuery += `\r\n            MATCH (father:Person)-[:FATHER_OF]->(child:Person)\r\n            WHERE child.name = $personName AND \r\n                  father.name = $fatherName AND\r\n                  child.lastName = $familyName\r\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n            RETURN  \r\n              id(child) AS childID,\r\n              child.name AS childName, \r\n              father.name AS fatherName,\r\n              grandfather.name AS grandfatherName,\r\n              child.lastName AS familyName\r\n            `;\r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n            queryParamsObject.familyName = familyName;\r\n          }\r\n          else{\r\n            cypherQuery += `\r\n            MATCH (father:Person)-[:FATHER_OF]->(child:Person)\r\n            \r\n            WHERE child.name = $personName AND \r\n                  father.name = $fatherName\r\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n            RETURN  id(child) AS childID, \r\n                    child.name AS childName, \r\n                    father.name AS fatherName, \r\n                    grandfather.name AS grandfatherName,\r\n                    child.lastName AS familyName\r\n            `;\r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n          }\r\n          }\r\n      }\r\n      else {\r\n        if (familyName){\r\n          cypherQuery += `\r\n          MATCH (child:Person)\r\n          WHERE child.name = $personName AND child.lastName = $familyName\r\n          OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(child)\r\n          OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n          RETURN \r\n            id(child) AS childID,\r\n            child.name AS childName, \r\n            father.name AS fatherName,\r\n            grandfather.name AS grandfatherName,\r\n            child.lastName AS familyName\r\n        `;\r\n        queryParamsObject.personName = personName;\r\n        queryParamsObject.familyName = familyName;\r\n        }\r\n        else{\r\n          cypherQuery += `\r\n            MATCH (child:Person)\r\n            WHERE child.name = $personName\r\n            OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(child)\r\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n            RETURN\r\n              id(child) AS childID,\r\n              child.name AS childName, \r\n              father.name AS fatherName, \r\n              grandfather.name AS grandfatherName,\r\n              child.lastName AS familyName\r\n          `;\r\n          queryParamsObject.personName = personName;\r\n        }\r\n      }\r\n    }\r\n\r\n    const session = driver.session();\r\n    try {\r\n      const result = await session.run(cypherQuery, queryParamsObject);\r\n  \r\n      return result.records.map(record => ({\r\n        id: record.get('childID').toNumber(),\r\n        name: record.get('childName'),\r\n        father: record.get('fatherName') || \"\",\r\n        grandfather: record.get('grandfatherName') || \"\",\r\n        lastName: record.get('familyName')\r\n      }));\r\n    } \r\n    catch (Error) {\r\n      console.error('Query Error:', Error);\r\n      setError('حدث خطأ أثناء البحث.');\r\n    } \r\n    finally {\r\n      await session.close();\r\n    }\r\n  };\r\n  const getRelationship = async (person1FullName, person2FullName) => {\r\n    const isArabic = (text) => /[\\u0600-\\u06FF]/.test(text);\r\n    let translatedName1, translatedName2;\r\n    \r\n    if (isArabic(person1FullName)){\r\n      translatedName1 = translateName(person1FullName, false);\r\n    }\r\n    else{\r\n      translatedName1 = person1FullName;\r\n    }\r\n    if (isArabic(person2FullName)){\r\n      translatedName2 = translateName(person2FullName, false);\r\n    }\r\n    else{\r\n      translatedName2 = person2FullName;\r\n    }\r\n    \r\n    const { personName: person1Name, fatherName: person1FatherName, grandfatherName: person1GrandfatherName, familyName: person1LastName } = splitName(translatedName1);\r\n    const { personName: person2Name, fatherName: person2FatherName, grandfatherName: person2GrandfatherName, familyName: person2LastName } = splitName(translatedName2);\r\n    const errorContainer = document.getElementById('error-container');\r\n    try {\r\n      const person1Matches = await getPersonMatches(person1Name, person1FatherName, person1GrandfatherName, person1LastName);\r\n      if (person1Matches.length === 0) {\r\n        throw new Error(`لا يوجد أشخاص بإسم ${person1FullName} الرجاء التثبت في الإسم جيدا`);\r\n      }\r\n      const person2Matches = await getPersonMatches(person2Name, person2FatherName, person2GrandfatherName, person2LastName);\r\n      if (person2Matches.length === 0) {\r\n        throw new Error(`لا يوجد أشخاص بإسم ${person2FullName} الرجاء التثبت في الإسم جيدا`);\r\n      }\r\n      setLoadingMessage(\"جاري البحث عن الأشخاص\");\r\n\r\n      console.log(\"P1 matches : \", person1Matches);\r\n      console.log(\"P2 matches : \", person2Matches);\r\n      \r\n      let person1ID, person2ID;\r\n      if (person1Matches.length > 1 || person2Matches.length > 1) {\r\n        return {\r\n          error: 'non-unique-name',\r\n          message: 'تم العثور على عدة أشخاص بنفس الاسم. الرجاء اختيار الصحيح.',\r\n          duplicates: {\r\n            person1: person1Matches.length > 1 ? person1Matches : [],\r\n            person2: person2Matches.length > 1 ? person2Matches : []\r\n          }\r\n        };\r\n      }\r\n      else{\r\n        person1ID = person1Matches[0].id;\r\n        person2ID = person2Matches[0].id;\r\n      }\r\n      // Function that return the ancestors of a given person starting with the person itself and going up to the root.\r\n      \r\n      const getAncestors = async (person1ID, person2ID) => {\r\n        setLoadingMessage(\"جاري البحث عن الأجداد المشتركة\");\r\n        const result = await session.run(`\r\n          MATCH path1 = (common:Person)-[:FATHER_OF|MOTHER_OF*0..4]->(p1:Person)\r\n          WHERE id(p1) = $person1ID\r\n      \r\n          MATCH path2 = (common)-[:FATHER_OF|MOTHER_OF*0..4]->(p2:Person)\r\n          WHERE id(p2) = $person2ID\r\n            AND id(p1) <> id(p2)\r\n      \r\n          WITH common, path1, path2, length(path1) AS level1, length(path2) AS level2\r\n          OPTIONAL MATCH (cGF:Person)-[:FATHER_OF]->(cF:Person)-[:FATHER_OF]->(common)\r\n\r\n          ORDER BY (level1 + level2) ASC\r\n          LIMIT 1\r\n      \r\n          RETURN \r\n            common.name AS commonAncestorName,\r\n            cF.name AS commonAncestorFatherName,\r\n            cGF.name AS commonAncestorGrandFatherName,\r\n            common.lastName AS commonAncestorLastName,\r\n            id(common) AS commonAncestorID,\r\n            common.gender AS commonAncestorGender,\r\n            level1 AS generationsFromP1,\r\n            level2 AS generationsFromP2,\r\n            [n IN nodes(path1) | { id: id(n), name: n.name, lastName: n.lastName, gender: n.gender }] AS pathToP1,\r\n            [n IN nodes(path2) | { id: id(n), name: n.name, lastName: n.lastName, gender: n.gender }] AS pathToP2\r\n        `, { person1ID, person2ID });\r\n\r\n        const record = result.records[0];\r\n      \r\n        return {\r\n            id: record.get('commonAncestorID').toNumber(),\r\n            name: record.get('commonAncestorName'),\r\n            lastName: record.get('commonAncestorLastName'),\r\n            fatherName: record.get('commonAncestorFatherName'),\r\n            grandfatherName: record.get('commonAncestorGrandFatherName'),\r\n            gender: record.get('commonAncestorGender'),\r\n            levelFromP1: record.get('generationsFromP1').toNumber(),\r\n            levelFromP2: record.get('generationsFromP2').toNumber(),\r\n            pathFromAncestorToP1: record.get('pathToP1'),\r\n            pathFromAncestorToP2: record.get('pathToP2')\r\n        };\r\n      };\r\n      \r\n      const checkMarriage = async (person1ID, person2ID) => {\r\n        setLoadingMessage(\"جاري البحث عن علاقة زواج\");\r\n        const result = await session.run(`\r\n          MATCH (H:Person)-[:HUSBAND_OF]->(Wife:Person)\r\n          MATCH (Wife:Person)-[:WIFE_OF]->(H:Person)\r\n          WHERE id(H) = $person1ID AND id(Wife) = $person2ID\r\n          OPTIONAL MATCH (wifeGrandFather:Person)-[:FATHER_OF]->(wifeFather:Person)-[:FATHER_OF]->(Wife)\r\n          OPTIONAL MATCH (wifeFather)-[:FATHER_OF]->(siblings:Person)\r\n          RETURN \r\n                COLLECT ({\r\n                    H.name AS HusbandName,\r\n                    H.lastName AS HusbandFamilyName,\r\n                })\r\n          \r\n                 W.name AS WifeName, \r\n                 COLLECT ({\r\n                    Wife.Father.name AS WifeFather, \r\n                    Wife.lastName AS WifeFamilyName,\r\n                 })\r\n                 \r\n                 COLLECT({\r\n                    siblingId: id(siblings), \r\n                    siblingName: siblings.name, \r\n                    siblingGender: siblings.gender\r\n                 }) AS Siblings\r\n\r\n        `, { person1ID, person2ID });\r\n\r\n        const record = result.records[0];\r\n        if (record.length === 0){\r\n          return false;\r\n        }\r\n        else {\r\n            return {\r\n            areMarried: true,\r\n            wifeHusband\r\n            };\r\n        }\r\n        \r\n      };\r\n\r\n      let marraigeRecord = await checkMarriage(person1ID, person2ID);\r\n      let relationRecord = await getAncestors(person1ID, person2ID);\r\n      const ancestorID = relationRecord.id;\r\n      const ancestorName = translateName(relationRecord.name);\r\n      const ancestorLastName = translateName(relationRecord.lastName);\r\n      const ancestorFatherName = translateName(relationRecord.fatherName);\r\n      const ancestorGrandFatherName = translateName(relationRecord.grandfatherName);\r\n      const ancestorGender = relationRecord.gender;\r\n      let levelFromP1, levelFromP2, pathFromAncestorToP1, pathFromAncestorToP2;\r\n      const ancestor = {ancestorID, \r\n                      ancestorName, ancestorFatherName, ancestorGrandFatherName, ancestorLastName, ancestorGender};\r\n\r\n      ({\r\n        levelFromP1, \r\n        levelFromP2, \r\n        pathFromAncestorToP1, \r\n        pathFromAncestorToP2 \r\n      } = relationRecord);\r\n      const pathToP1 = pathFromAncestorToP1;\r\n      const pathToP2 = pathFromAncestorToP2;\r\n      function buildTreePath(path) {\r\n        return path.reduceRight((acc, person) => {\r\n          return {\r\n            id: (person.id).toNumber(),\r\n            name: `${person.name} ${person.lastName}`,\r\n            children: acc ? [acc] : []\r\n          };\r\n        }, null);\r\n      }\r\n\r\n      function mergePaths(pathToP1, pathToP2) {\r\n        const ancestor = pathToP1[0];\r\n        const branch1 = pathToP1.slice(1);\r\n        const branch2 = pathToP2.slice(1);\r\n\r\n        return {\r\n          id: (ancestor.id).toNumber(),\r\n          name: `${ancestor.name} ${ancestor.lastName}`,\r\n          children: [buildTreePath(branch1), buildTreePath(branch2)]\r\n        };\r\n      }\r\n      const treeData = mergePaths(pathToP1, pathToP2);\r\n      console.log(pathFromAncestorToP1.reverse().map(a => a.name).join(\" ben \"));\r\n      console.log(pathFromAncestorToP2.reverse().map(a => a.name).join(\" ben \"));\r\n  \r\n      var p1Level = levelFromP1;\r\n      var p2Level = levelFromP2;\r\n      const translatedName1 = translateName(person1FullName);\r\n      const translatedName2 = translateName(person2FullName);\r\n  \r\n      const gender1 = pathToP1[0].gender;\r\n      const gender2 = pathToP2[0].gender;\r\n      let relation = '', score = 0;\r\n      let relationshipExplanation = [\r\n        {\r\n          type: \"العائلة\",\r\n          explanation: \"هؤلاء الشخصين مرتبطين من خلال العائلة ذو الدرجة الأولى.\"\r\n        },\r\n        {\r\n          type: \"العائلة المقربة\",\r\n          explanation: \"هؤلاء الشخصين مرتبطين من خلال أعمام وأخوال مشتركين.\"\r\n        },\r\n        {\r\n          type: \"العائلة الموسعة\",\r\n          explanation: \"هؤلاء الشخصين مرتبطين من خلال أعمام أو أخوال الأب وأحفادهم.\"\r\n        },\r\n        {\r\n          type: \"قرابة الزواج\",\r\n          explanation: \"هذان الشخصان مرتبطان من خلال الزواج.\"\r\n        },\r\n        {\r\n          type: \"صهر / نسيب\",\r\n          explanation: \"هذان الشخصان مرتبطان عبر الزواج وليس النسب الدموي.\"\r\n        },\r\n        {\r\n          type: \"لا توجد علاقة\",\r\n          explanation: \"لم يتم العثور على أي صلة قرابة بين الشخصين في قاعدة البيانات.\"\r\n        },\r\n        {\r\n          type: \"نفس الشخص\",\r\n          explanation: \"الاسمين يشيران إلى نفس الشخص.\"\r\n        }\r\n      ];\r\n      \r\n      console.log(`Level: (${p1Level}, ${p2Level})`);\r\n      setLoadingMessage(\"جاري البحث عن العلاقة بين الشخصين\");\r\n      if (p1Level === 0 && p2Level === 1) {\r\n        if (gender1 === 'Male'){\r\n          relation = `${translatedName1} هو والد ${translatedName2}`;\r\n        }\r\n        else{\r\n          relation = `${translatedName1} هي والدة ${translatedName2}`;\r\n        }\r\n        score = 100;\r\n      }\r\n  \r\n      else if (p1Level === 1 && p2Level === 0) {\r\n        if (gender1 === 'Male'){\r\n          relation = `${translatedName1} هو ابن ${translatedName2}`;\r\n        }\r\n        else{\r\n          relation = `${translatedName1} هي إبنة ${translatedName2}`;\r\n        }\r\n        score = 100;\r\n      } \r\n  \r\n      else if (p1Level === 2 && p2Level === 0) {\r\n        if (gender1 === 'Male'){\r\n          relation = `${translatedName1} هو حفيد ${translatedName2}`;\r\n        }\r\n        else{\r\n          relation = `${translatedName1} هي حفيدة ${translatedName2}`;\r\n        }\r\n        score = 90;\r\n      }\r\n\r\n      else if (p1Level === 0 && p2Level === 2) {\r\n        if (gender1 === 'Male'){\r\n          relation = `${translatedName1} هو جدّ ${translatedName2}`;\r\n        }\r\n        else{\r\n          relation = `${translatedName1} هي جدّة ${translatedName2}`;\r\n        }\r\n        score = 90;\r\n      }\r\n  \r\n      else if (p1Level === 3 && p2Level === 0) {\r\n        if (gender1 === 'Male'){\r\n          relation = `${translatedName1} هو إبن حفيد ${translatedName2}`;\r\n        }\r\n        else{\r\n          relation = `${translatedName1} هي إبنة حفيدة ${translatedName2}`;\r\n        }\r\n        score = 75;\r\n      }\r\n  \r\n      else if (p1Level === 0 && p2Level === 3) {\r\n        if (gender1 === 'Male'){\r\n          relation = `${translatedName1} و جد والد ${translatedName2}`;\r\n        }\r\n        else{\r\n          relation = `${translatedName1} هي جدة والدة ${translatedName2}`;\r\n        }\r\n        score = 80;\r\n      } \r\n      \r\n      else if (p1Level === 0 && p2Level === 4){ // ADD FROM MOTHER FROM FATHER GRANDFATHER \r\n        const p2GreatAncestorGender = pathToP1[2].gender;\r\n        if (gender1 === 'Male'){\r\n          if (p2GreatAncestorGender === 'Male'){\r\n            relation = `${translatedName1} هو جد جد ${translatedName2}`;\r\n          }\r\n          else{\r\n            relation = `${translatedName1} هو جد جدة ${translatedName2}`;\r\n          }\r\n        }\r\n        else{\r\n          if (p2GreatAncestorGender === 'Male'){\r\n            relation = `${translatedName1} هي جدة جد ${translatedName2}`;\r\n          }\r\n          else{\r\n            relation = `${translatedName1} هي جدة جدة ${translatedName2}`;\r\n          }\r\n        }\r\n        score = 75;\r\n      }\r\n\r\n      else if (p1Level === 4 && p2Level === 0){ // ADD FROM MOTHER FROM FATHER GRANDFATHER \r\n        const p1GreatAncestorGender = pathToP1[2].gender;\r\n        if (gender1 === 'Male'){\r\n          if (p1GreatAncestorGender === 'Male'){\r\n            relation = `${translatedName1} هو حفيد حفيد ${translatedName2}`;\r\n          }\r\n          else{\r\n            relation = `${translatedName1} هو حفيد حفيدة ${translatedName2}`;\r\n          }\r\n        }\r\n        else{\r\n          if (p1GreatAncestorGender === 'Male'){\r\n            relation = `${translatedName1} هي حفيدة حفيد ${translatedName2}`;\r\n          }\r\n          else{\r\n            relation = `${translatedName1} هي حفيدة حفيد ${translatedName2}`;\r\n          }\r\n        }\r\n        score = 75;\r\n      }\r\n\r\n      else if (p1Level === 1 && p2Level === 1) {\r\n        if (gender1 === 'Male' && gender2 === 'Male'){\r\n          relation = `${translatedName1} و ${translatedName2} إخوة`;\r\n        }\r\n        else if (gender1 === 'Female' && gender2 === 'Female'){\r\n          relation = `${translatedName1} و ${translatedName2} أخوات`;\r\n        }\r\n        else{\r\n          relation = `${translatedName1} و ${translatedName2} إخوة`;\r\n        }\r\n        score = 98;\r\n      } \r\n      \r\n      else if (p1Level === 2 && p2Level === 1) {\r\n        const p1AncestorGender = pathToP1[1].gender;\r\n        if (gender1 === 'Male'){\r\n          if (p1AncestorGender === 'Male'){\r\n            relation = `${translatedName1} هو ابن أخ ${translatedName2}`;\r\n          }\r\n          else{\r\n            relation = `${translatedName1} هو ابن أخت ${translatedName2}`;\r\n          }\r\n          score = 93;\r\n        }\r\n        else{\r\n          if (p1AncestorGender === 'Male'){\r\n            relation = `${translatedName1} هي ابن أخ ${translatedName2}`;\r\n          }\r\n          else{\r\n            relation = `${translatedName1} هي ابنة أخت ${translatedName2}`;\r\n          }\r\n          score = 93;\r\n        }\r\n      } \r\n      \r\n      else if (p1Level === 1 && p2Level === 2) {\r\n        const p2AncestorGender = pathToP2[1].gender;\r\n        if (gender1 === 'Male'){\r\n          if (p2AncestorGender === 'Male'){\r\n            relation = `${translatedName1} هو عم ${translatedName2}`;\r\n            score = 95;\r\n          }\r\n          else{\r\n            relation = `${translatedName1} هو خال ${translatedName2}`;\r\n            score = 94;\r\n          }\r\n        }\r\n        else{\r\n          if (p2AncestorGender === 'Male'){\r\n            relation = `${translatedName1} هي عمة ${translatedName2}`;\r\n            score = 95;\r\n          }\r\n          else{\r\n            relation = `${translatedName1} هي خالة ${translatedName2}`;\r\n            score = 94;\r\n          }\r\n        }\r\n      }\r\n      \r\n      else if (p1Level === 1 && p2Level === 3){\r\n        const p2AncestorGender = pathToP2[1].gender;\r\n        const p2GreatAncestorGender = pathToP2[2].gender;\r\n        if (gender1 === 'Male'){\r\n          if (p2AncestorGender === 'Male'){\r\n            if (p2GreatAncestorGender === 'Male'){\r\n              relation = `${translatedName1} هو عم والد ${translatedName2}`;\r\n              score = 80;\r\n            }\r\n            else {\r\n              relation = `${translatedName1} هو خال والد ${translatedName2}`;\r\n              score = 75;\r\n            }\r\n          }\r\n          else{\r\n            if (p2GreatAncestorGender === 'Male'){\r\n              relation = `${translatedName1} هو عم والدة ${translatedName2}`;\r\n              score = 80;\r\n            }\r\n            else {\r\n              relation = `${translatedName1} هو خال والدة ${translatedName2}`;\r\n              score = 70;\r\n            }\r\n          }\r\n        } else{\r\n          if (p2AncestorGender === 'Male'){\r\n            if (p2GreatAncestorGender === 'Male'){\r\n              relation = `${translatedName1} هي عمة والد ${translatedName2}`;\r\n              score = 80;\r\n            }\r\n            else {\r\n              relation = `${translatedName1} هي خالة والد ${translatedName2}`;\r\n              score = 75\r\n            }\r\n          }\r\n          else{\r\n            if (p2GreatAncestorGender === 'Male'){\r\n              relation = `${translatedName1} هي عمة والدة ${translatedName2}`;\r\n              score = 80;\r\n            }\r\n            else {\r\n              relation = `${translatedName1} هي خالة والدة ${translatedName2}`;\r\n              score = 75;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      else if (p1Level === 3 && p2Level === 1){\r\n        const p1GreatAncestorGender = pathToP1[2].gender;\r\n        if (gender1 === 'Male'){\r\n            if (p1GreatAncestorGender === 'Male'){\r\n              relation = `${translatedName1} هو حفيد اخ ${translatedName2}`;\r\n              score = 78;\r\n            }\r\n            else {\r\n              relation = `${translatedName1} هو حفيد اخت ${translatedName2}`;\r\n              score = 78;\r\n            }\r\n        } \r\n        else{\r\n            if (p1GreatAncestorGender === 'Male'){\r\n              relation = `${translatedName1} هي حفيدة اخ ${translatedName2}`;\r\n              score = 78;\r\n            }\r\n            else {\r\n              relation = `${translatedName1} هي حفيدة اخت ${translatedName2}`;\r\n              score = 78;\r\n            }\r\n        }\r\n      }\r\n\r\n      else if (p1Level === 2 && p2Level === 2) {    \r\n        const p1AncestorGender = pathToP1[1].gender;\r\n        const p2AncestorGender = pathToP2[1].gender;\r\n  \r\n        if (gender1 === 'Male') { \r\n          if (p2AncestorGender === 'Male') { \r\n            if (p1AncestorGender === 'Male'){  // ولد عمه\r\n              relation = `${translatedName1} إبن عم ${translatedName2}`;\r\n              score = 90;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هو إبن عمّة ${translatedName2}`;\r\n              score = 89;\r\n\r\n            }\r\n          } \r\n          else {  \r\n            if (p1AncestorGender === 'Male'){  // ولد خاله\r\n              relation = `${translatedName1} هو إبن خال ${translatedName2}`;\r\n              score = 88;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هو إبن خالة ${translatedName2}`;\r\n              score = 86;\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          if (p1AncestorGender === 'Male') { \r\n            if (p2AncestorGender === 'Male'){  // بنت عمه\r\n              relation = `${translatedName1} هي إبنة عمّ ${translatedName2}`;\r\n              score = 90;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي إبنة عمّة ${translatedName2}`;\r\n              score = 89;\r\n            }\r\n          } \r\n          else {  \r\n            if (p2AncestorGender === 'Male'){  // بنت خاله\r\n              relation = `${translatedName1} هي إبنة خال ${translatedName2}`;\r\n              score = 88;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي إبنة خالة ${translatedName2}`;\r\n              score = 86;\r\n            }\r\n          }\r\n        }\r\n      }\r\n  \r\n      else if (p1Level === 2 && p2Level === 3) {         \r\n  \r\n        const p1AncestorGender = pathToP1[1].gender;\r\n        const p2AncestorGender = pathToP2[1].gender;\r\n\r\n        if (gender1 === 'Male') { \r\n          if (p1AncestorGender === 'Male') {\r\n            if (p2AncestorGender === 'Male') {\r\n              relation = `${translatedName1} هو إبن عم والد ${translatedName2}`;\r\n              score = 80;\r\n            } else { \r\n              relation = `${translatedName1} هو إبن عمة والد ${translatedName2}`;\r\n              score = 78;\r\n            }\r\n          } else {  // mother's side\r\n            if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n              relation = `${translatedName1} هو إبن عم والدة ${translatedName2}.`;\r\n              score = 74;\r\n            } else {  // mother's brother's daughter\r\n              relation = `${translatedName1} هو إبن عمّة والدة ${translatedName2}`;\r\n              score = 72;\r\n            }\r\n          }\r\n        } \r\n        else {  // If person1 is female\r\n          if (p1AncestorGender === 'Male') {  // father's side\r\n            if (p2AncestorGender === 'Male') {  // father's brother's son\r\n              relation = `${translatedName1} هي إبنة عم والد ${translatedName2}`;\r\n              score = 80;\r\n            } else {  // father's brother's daughter\r\n              relation = `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\r\n              score = 78;\r\n            }\r\n          } else {  // mother's side\r\n            if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n              relation = `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\r\n              score = 74;\r\n            } else {  // mother's brother's daughter\r\n              relation = `${translatedName1} هي إبنة عمة والدة ${translatedName2}`;\r\n              score = 72;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      \r\n      else if (p1Level === 3 && p2Level === 2) {          \r\n        const p1AncestorGender = pathToP1[1].gender;\r\n        const p2AncestorGender = pathToP2[1].gender;\r\n\r\n        if (p1AncestorGender === 'Male') {  // father's side\r\n          if (p2AncestorGender === 'Male') {  // father's brother's son\r\n            relation = `والد ${translatedName1} هو إبن عم ${translatedName2}`;\r\n            score = 80;\r\n          } else { \r\n            relation = `والد ${translatedName1} هو إبن خال ${translatedName2}`;\r\n            score = 75;\r\n          }\r\n        } \r\n        else {  // mother's side\r\n          if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n            relation = `والدة ${translatedName1} هي إبنة عم ${translatedName2}`;\r\n            score = 80;\r\n          } else {  // mother's brother's daughter\r\n            relation = `والدة ${translatedName1} هي إبنة خال  ${translatedName2}`;\r\n            score = 75;\r\n          }\r\n        }\r\n      }\r\n\r\n      else if (p1Level === 3 && p2Level === 3) {          \r\n        \r\n        const p1AncestorGender = pathToP1[1].gender;\r\n        const p2AncestorGender = pathToP2[1].gender;\r\n        const p1GreatAncestorGender = pathToP1[2].gender;\r\n        const p2GreatAncestorGender = pathToP2[2].gender;\r\n\r\n        if (p1AncestorGender === 'Male') { \r\n          if (p2AncestorGender === 'Male'){\r\n            if (p1GreatAncestorGender === 'Male'){\r\n              if (p2GreatAncestorGender === 'Male'){\r\n                relation = `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\r\n              }\r\n              else{\r\n                relation = `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\r\n              }\r\n            }\r\n            else {\r\n              if (p2GreatAncestorGender === 'Male'){\r\n                relation = `جدّة ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\r\n              }\r\n              else{\r\n                relation = `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\r\n              }\r\n            }\r\n          }\r\n          else {\r\n            if (p1GreatAncestorGender === 'Male'){\r\n              if (p2GreatAncestorGender === 'Male'){\r\n                relation = `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأم إخوة.`;\r\n              }\r\n              else{\r\n                relation = `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\r\n              }\r\n            }\r\n            else {\r\n              if (p2GreatAncestorGender === 'Male'){\r\n                relation = `جدّة ${translatedName1} من الأب و جد${translatedName2} من الأم إخوة.`;\r\n              }\r\n              else{\r\n                relation = `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          if (p2AncestorGender === 'Male'){\r\n            if (p1GreatAncestorGender === 'Male'){\r\n              if (p2GreatAncestorGender === 'Male'){\r\n                relation = `جدّ ${translatedName1} من الأم و جد${translatedName2} من الأب إخوة.`;\r\n              }\r\n              else{\r\n                relation = `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\r\n              }\r\n            }\r\n            else {\r\n              if (p2GreatAncestorGender === 'Male'){\r\n                relation = `جدّة ${translatedName1} من الأم و جد ${translatedName2} من الأب إخوة.`;\r\n              }\r\n              else{\r\n                relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب أخوات.`;\r\n              }\r\n            }\r\n          }\r\n          else {\r\n            if (p1GreatAncestorGender === 'Male'){\r\n              if (p2GreatAncestorGender === 'Male'){\r\n                relation = `جدّ ${translatedName1} من الأم و جد ${translatedName2} من الأم إخوة.`;\r\n              }\r\n              else{\r\n                relation = `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\r\n              }\r\n            }\r\n            else {\r\n              if (p2GreatAncestorGender === 'Male'){\r\n                relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\r\n              }\r\n              else{\r\n                relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      \r\n      else {\r\n        setLoading(false);\r\n        console.log('No direct relation found.');\r\n        errorContainer.innerText = 'لا يوجد قرابة مباشرة.';\r\n        return '';\r\n      }\r\n\r\n      if (relation != ''){\r\n        setLoading(false);\r\n        return {relation, score, \r\n                generation:Math.abs(p1Level-p2Level), \r\n                levelsTuple: {levelFromP1, levelFromP2},\r\n                explanation: relationshipExplanation[0],\r\n                ancestor,\r\n                treeData,\r\n                person1ID,\r\n                person2ID};\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Error in relationship lookup:', error);\r\n    \r\n      setError(`❌ خطأ: ${error.message || error}`);\r\n    \r\n      if (errorContainer) {\r\n        errorContainer.innerText = `❌ خطأ: ${error.message || error}`;\r\n      }\r\n      setLoading(false);\r\n      return '';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"relation-page\">\r\n    {(duplicates.person1.length > 0 || duplicates.person2.length > 0) && (\r\n      <aside className=\"duplicates-panel\">\r\n        {duplicates.person1.length > 0 && (\r\n          <section className=\"duplicates-group\">\r\n            <h3>أكتب الاسم الكامل للشخص الصحيح:</h3>\r\n            <ul>\r\n              {duplicates.person1.map((p, idx) => (\r\n                <li key={`p1-${idx}`}>\r\n                  {`${translateName(p.name)} بن ${translateName(p.father)} بن ${translateName(p.grandfather)} ${translateName(p.lastName)}`}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </section>\r\n        )}\r\n  \r\n        {duplicates.person2.length > 0 && (\r\n          <section className=\"duplicates-group\">\r\n            <h3>اختر الشخص الصحيح \"{person2}\"</h3>\r\n            <ul>\r\n              {duplicates.person2.map((p, idx) => (\r\n                <li key={`p2-${idx}`}>\r\n                  {`${translateName(p.name)} بن ${translateName(p.father)} بن ${translateName(p.grandfather)} ${translateName(p.lastName)}`}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </section>\r\n        )}\r\n      </aside>\r\n    )}    \r\n    {/* Main Panel: Form + Result */}\r\n    <main className=\"main-panel\">\r\n      <section className=\"relation-form-section\">\r\n        <h2 className=\"section-title\">ماهي العلاقة بينهما؟</h2>\r\n        <p id=\"DescriptionZone\">\r\n          الهدف من هذه الصفحة هو تحديد صلة القرابة بين شخصين بناءًا على اسمهم. كل ماعليك فعله\r\n          هو ادخال الاسم للشخص الاول والثاني وثم النقر على \"التحقق من العلاقة\" ستظهر لك النتيجة في اسهل الصفحة\r\n          والتي يتوضح لك نوع العلاقة ومدى قرابتها؟ في حال وجود اي تشابهات او تكرارات في الاسماء سيم توفير خيارات لتحديد الشخص الصحيح\r\n        </p>\r\n        <form onSubmit={fetchRelationship} className=\"relation-form\">\r\n          <div className=\"input-group\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"الإسم الكامل الأول\"\r\n              value={person1}\r\n              onChange={(e) => setPerson1(e.target.value)}\r\n              className=\"inputNames\"\r\n            />\r\n          </div>\r\n          <div className=\"input-group\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"الإسم الكامل الثاني\"\r\n              value={person2}\r\n              onChange={(e) => setPerson2(e.target.value)}\r\n              className=\"inputNames\"\r\n            />\r\n          </div>\r\n          <div className='ButtonSection'>\r\n            <button type=\"submit\" className=\"checkButton\">تحقق من العلاقة</button>\r\n            <button type=\"reset\" className='resetButton'>إلغاء</button>\r\n          </div>\r\n          \r\n        </form>\r\n      </section>\r\n\r\n      {error && <div className=\"error-message\">{error}</div>} {/* Show the error message */}\r\n      {loading && (\r\n        <div className=\"loading-message\">\r\n          <div className=\"spinner\"></div>\r\n          <p>{loadingMessage}</p>\r\n        </div>\r\n      )}\r\n\r\n      {!loading && relationship && !error  && (\r\n        <section className=\"relationship-result\">\r\n          <h2 id=\"resultTitle\">نتيجة العلاقة</h2>\r\n          <p className=\"relationText\">{relationship.relationshipDescription}</p>\r\n          <div className=\"result-details\">\r\n            <table className=\"result-table\">\r\n              <tbody>\r\n                <tr>\r\n                  <th>درجة العلاقة</th>\r\n                  <td className=\"score-cell\">\r\n                    <div className=\"score-bar-wrapper\">\r\n                      <div className=\"score-bar-fill\" style={{ width: `${relationship.relationshipScore || 0}%` }}></div>\r\n                    </div>\r\n                    <div className=\"score-meta\">\r\n                      <span className=\"score-value\">{relationship.relationshipScore}</span>\r\n                      {relationship.relationshipScore !== null && (\r\n                        <span className={\r\n                          relationship.relationshipScore >= 80\r\n                            ? \"score-category high\"\r\n                            : relationship.relationshipScore >= 60\r\n                            ? \"score-category medium\"\r\n                            : \"score-category low\"\r\n                        }>\r\n                          {\r\n                            relationship.relationshipScore >= 80\r\n                              ? \"قوية\"\r\n                              : relationship.relationshipScore >= 60\r\n                              ? \"متوسطة\"\r\n                              : \"ضعيفة\"\r\n                          }\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>نوع العلاقة</th>\r\n                  <td className=\"relationship-tag\"><span className=\"tag blood\">دم</span></td>\r\n                </tr>\r\n                <tr>\r\n                  <th>تفسير إضافي</th>\r\n                  <td className=\"relation-explanation\">\r\n                    <span className='relation-explanation-type'>\r\n                      {relationship.relationshipExplanationType}\r\n                    </span> : \r\n                    {relationship.relationshipExplanationDesc || \"لا يوجد تفسير متاح.\"}\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>عدد الأجيال بينهما حسب الجد المشترك</th>\r\n                  <td className=\"generation-distance\">\r\n                    <div className=\"tooltip-container\">\r\n                      <span id=\"numGen\">{relationship.relationshipGenerationGap}</span> أجيال\r\n                      <div className=\"custom-tooltip\">\r\n                        عدد الأجيال هو عدد الأشخاص الفاصلين في شجرة العائلة بين الشخصين.\r\n                      </div>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>\r\n                    <div className=\"tooltip-container\">\r\n                      الجد المشترك\r\n                      <span className=\"custom-tooltip\">\r\n                        عدد الأجيال هو عدد الأشخاص الفاصلين في شجرة العائلة بين الشخصين.\r\n                      </span>\r\n                    </div>\r\n                  </th>\r\n                  <td className=\"generation-distance\">\r\n                    {relationship.commonAncestor.ancestorName} بن {relationship.commonAncestor.ancestorFatherName} بن {relationship.commonAncestor.ancestorGrandFatherName} {relationship.commonAncestor.ancestorLastName}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n            <div className=\"tree-wrapper\" style={{ height: `${((Math.max((relationship.relationshipLevels.levelFromP1),(relationship.relationshipLevels.levelFromP2)))+1)*100}px` }}>\r\n                <div className='titleTree'>\r\n                </div>\r\n                {relationship.ancestorstreeData && (\r\n                <div className=\"tree-container\">\r\n                  <Tree\r\n                    data={relationship.ancestorstreeData}\r\n                    orientation=\"vertical\"\r\n                    pathFunc=\"step\"\r\n                    nodeSize={{ x: 50, y: 90 }}\r\n                    separation={{ siblings: 3, nonSiblings: 3 }}\r\n                    translate={{ x: 325, y: 27 }} \r\n                    renderCustomNodeElement={({ nodeDatum }) => (\r\n                     <g className=\"tree-node\">\r\n                        <title>{nodeDatum.id}</title>\r\n                        <rect\r\n                          className=\"tree-node-rect\"\r\n                          x=\"-50\"\r\n                          y=\"-20\"\r\n                          width=\"100\"\r\n                          \r\n                          height=\"40\"\r\n                          style={{\r\n                            fill: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID\r\n                              ? '#d3f9d8'  // Leaf node color (light green)\r\n                              : nodeDatum.id === relationship.commonAncestor.ancestorID\r\n                              ? '#ffe4b5'  // Ancestor node color (light yellow)\r\n                              : '#ffffff', // Default color for other nodes\r\n                            stroke: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID\r\n                              ? '#4caf50'  // Leaf node border (green)\r\n                              : nodeDatum.id === relationship.commonAncestor.ancestorID\r\n                              ? '#ffa500'  // Ancestor node border (orange)\r\n                              : '#4a90e2', // Default border color\r\n                            strokeWidth: '2.5px',\r\n                            rx: '10',  // Rounded corners\r\n                            ry: '10',  // Rounded corners\r\n                          }}\r\n                        />\r\n                        <text\r\n                          className=\"tree-node-text\"\r\n                          x=\"0\"\r\n                          y=\"5\"\r\n                          style={{\r\n                            fontSize: '16px',\r\n                            fontFamily: 'Cairo',\r\n                            fill: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID\r\n                              ? '#388e3c'  // Leaf node text color (dark green)\r\n                              : nodeDatum.id === relationship.commonAncestor.ancestorID\r\n                              ? '#ff9800'  // Ancestor node text color (orange)\r\n                              : '#333',    // Default text color (dark gray)\r\n                            textAnchor: 'middle',\r\n                            dominantBaseline: 'middle',\r\n                            letterSpacing: '1px',\r\n                            strokeWidth: '1px',\r\n                            pointerEvents: 'none',\r\n                          }}\r\n                        >\r\n                          {translateName(nodeDatum.name)}\r\n                        </text>\r\n                      </g>\r\n                    )}\r\n                  />\r\n                </div>\r\n              )}\r\n               </div>\r\n          </div>\r\n        </section>\r\n      )}\r\n    </main>\r\n  </div>\r\n  \r\n  );\r\n};\r\n\r\nexport default RelationPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}