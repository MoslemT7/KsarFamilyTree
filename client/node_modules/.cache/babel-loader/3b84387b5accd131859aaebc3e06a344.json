{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SIGNATURES = void 0;\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar _a = neo4j_driver_core_1.internal.constants,\n  ACCESS_MODE_READ = _a.ACCESS_MODE_READ,\n  FETCH_ALL = _a.FETCH_ALL,\n  assertString = neo4j_driver_core_1.internal.util.assertString;\n/* eslint-disable no-unused-vars */\n// Signature bytes for each request message type\nvar INIT = 0x01; // 0000 0001 // INIT <user_agent> <authentication_token>\nvar ACK_FAILURE = 0x0e; // 0000 1110 // ACK_FAILURE - unused\nvar RESET = 0x0f; // 0000 1111 // RESET\nvar RUN = 0x10; // 0001 0000 // RUN <query> <parameters>\nvar DISCARD_ALL = 0x2f; // 0010 1111 // DISCARD_ALL - unused\nvar PULL_ALL = 0x3f; // 0011 1111 // PULL_ALL\nvar HELLO = 0x01; // 0000 0001 // HELLO <metadata>\nvar GOODBYE = 0x02; // 0000 0010 // GOODBYE\nvar BEGIN = 0x11; // 0001 0001 // BEGIN <metadata>\nvar COMMIT = 0x12; // 0001 0010 // COMMIT\nvar ROLLBACK = 0x13; // 0001 0011 // ROLLBACK\nvar TELEMETRY = 0x54; // 0101 0100 // TELEMETRY <api>\nvar ROUTE = 0x66; // 0110 0110 // ROUTE\nvar LOGON = 0x6A; // LOGON\nvar LOGOFF = 0x6B; // LOGOFF\nvar DISCARD = 0x2f; // 0010 1111 // DISCARD\nvar PULL = 0x3f; // 0011 1111 // PULL\nvar READ_MODE = 'r';\n/* eslint-enable no-unused-vars */\nvar NO_STATEMENT_ID = -1;\nvar SIGNATURES = Object.freeze({\n  INIT: INIT,\n  RESET: RESET,\n  RUN: RUN,\n  PULL_ALL: PULL_ALL,\n  HELLO: HELLO,\n  GOODBYE: GOODBYE,\n  BEGIN: BEGIN,\n  COMMIT: COMMIT,\n  ROLLBACK: ROLLBACK,\n  TELEMETRY: TELEMETRY,\n  ROUTE: ROUTE,\n  LOGON: LOGON,\n  LOGOFF: LOGOFF,\n  DISCARD: DISCARD,\n  PULL: PULL\n});\nexports.SIGNATURES = SIGNATURES;\nvar RequestMessage = /** @class */function () {\n  function RequestMessage(signature, fields, toString) {\n    this.signature = signature;\n    this.fields = fields;\n    this.toString = toString;\n  }\n  /**\n   * Create a new INIT message.\n   * @param {string} clientName the client name.\n   * @param {Object} authToken the authentication token.\n   * @return {RequestMessage} new INIT message.\n   */\n  RequestMessage.init = function (clientName, authToken) {\n    return new RequestMessage(INIT, [clientName, authToken], function () {\n      return \"INIT \".concat(clientName, \" {...}\");\n    });\n  };\n  /**\n   * Create a new RUN message.\n   * @param {string} query the cypher query.\n   * @param {Object} parameters the query parameters.\n   * @return {RequestMessage} new RUN message.\n   */\n  RequestMessage.run = function (query, parameters) {\n    return new RequestMessage(RUN, [query, parameters], function () {\n      return \"RUN \".concat(query, \" \").concat(neo4j_driver_core_1.json.stringify(parameters));\n    });\n  };\n  /**\n   * Get a PULL_ALL message.\n   * @return {RequestMessage} the PULL_ALL message.\n   */\n  RequestMessage.pullAll = function () {\n    return PULL_ALL_MESSAGE;\n  };\n  /**\n   * Get a RESET message.\n   * @return {RequestMessage} the RESET message.\n   */\n  RequestMessage.reset = function () {\n    return RESET_MESSAGE;\n  };\n  /**\n   * Create a new HELLO message.\n   * @param {string} userAgent the user agent.\n   * @param {Object} authToken the authentication token.\n   * @param {Object} optional server side routing, set to routing context to turn on server side routing (> 4.1)\n   * @return {RequestMessage} new HELLO message.\n   */\n  RequestMessage.hello = function (userAgent, authToken, routing, patchs) {\n    if (routing === void 0) {\n      routing = null;\n    }\n    if (patchs === void 0) {\n      patchs = null;\n    }\n    var metadata = Object.assign({\n      user_agent: userAgent\n    }, authToken);\n    if (routing) {\n      metadata.routing = routing;\n    }\n    if (patchs) {\n      metadata.patch_bolt = patchs;\n    }\n    return new RequestMessage(HELLO, [metadata], function () {\n      return \"HELLO {user_agent: '\".concat(userAgent, \"', ...}\");\n    });\n  };\n  /**\n   * Create a new HELLO message.\n   * @param {string} userAgent the user agent.\n   * @param {Object} optional server side routing, set to routing context to turn on server side routing (> 4.1)\n   * @return {RequestMessage} new HELLO message.\n   */\n  RequestMessage.hello5x1 = function (userAgent, routing) {\n    if (routing === void 0) {\n      routing = null;\n    }\n    var metadata = {\n      user_agent: userAgent\n    };\n    if (routing) {\n      metadata.routing = routing;\n    }\n    return new RequestMessage(HELLO, [metadata], function () {\n      return \"HELLO {user_agent: '\".concat(userAgent, \"', ...}\");\n    });\n  };\n  /**\n   * Create a new HELLO message.\n   * @param {string} userAgent the user agent.\n   * @param {NotificationFilter} notificationFilter the notification filter configured\n   * @param {Object} routing server side routing, set to routing context to turn on server side routing (> 4.1)\n   * @return {RequestMessage} new HELLO message.\n   */\n  RequestMessage.hello5x2 = function (userAgent, notificationFilter, routing) {\n    if (notificationFilter === void 0) {\n      notificationFilter = null;\n    }\n    if (routing === void 0) {\n      routing = null;\n    }\n    var metadata = {\n      user_agent: userAgent\n    };\n    appendLegacyNotificationFilterToMetadata(metadata, notificationFilter);\n    if (routing) {\n      metadata.routing = routing;\n    }\n    return new RequestMessage(HELLO, [metadata], function () {\n      return \"HELLO \".concat(neo4j_driver_core_1.json.stringify(metadata));\n    });\n  };\n  /**\n   * Create a new HELLO message.\n   * @param {string} userAgent the user agent.\n   * @param {string} boltAgent the bolt agent.\n   * @param {NotificationFilter} notificationFilter the notification filter configured\n   * @param {Object} routing server side routing, set to routing context to turn on server side routing (> 4.1)\n   * @return {RequestMessage} new HELLO message.\n   */\n  RequestMessage.hello5x3 = function (userAgent, boltAgent, notificationFilter, routing) {\n    if (notificationFilter === void 0) {\n      notificationFilter = null;\n    }\n    if (routing === void 0) {\n      routing = null;\n    }\n    var metadata = {};\n    if (userAgent) {\n      metadata.user_agent = userAgent;\n    }\n    if (boltAgent) {\n      metadata.bolt_agent = {\n        product: boltAgent.product,\n        platform: boltAgent.platform,\n        language: boltAgent.language,\n        language_details: boltAgent.languageDetails\n      };\n    }\n    appendLegacyNotificationFilterToMetadata(metadata, notificationFilter);\n    if (routing) {\n      metadata.routing = routing;\n    }\n    return new RequestMessage(HELLO, [metadata], function () {\n      return \"HELLO \".concat(neo4j_driver_core_1.json.stringify(metadata));\n    });\n  };\n  /**\n   * Create a new HELLO message.\n   * @param {string} userAgent the user agent.\n   * @param {string} boltAgent the bolt agent.\n   * @param {NotificationFilter} notificationFilter the notification filter configured\n   * @param {Object} routing server side routing, set to routing context to turn on server side routing (> 4.1)\n   * @return {RequestMessage} new HELLO message.\n   */\n  RequestMessage.hello5x5 = function (userAgent, boltAgent, notificationFilter, routing) {\n    if (notificationFilter === void 0) {\n      notificationFilter = null;\n    }\n    if (routing === void 0) {\n      routing = null;\n    }\n    var metadata = {};\n    if (userAgent) {\n      metadata.user_agent = userAgent;\n    }\n    if (boltAgent) {\n      metadata.bolt_agent = {\n        product: boltAgent.product,\n        platform: boltAgent.platform,\n        language: boltAgent.language,\n        language_details: boltAgent.languageDetails\n      };\n    }\n    appendGqlNotificationFilterToMetadata(metadata, notificationFilter);\n    if (routing) {\n      metadata.routing = routing;\n    }\n    return new RequestMessage(HELLO, [metadata], function () {\n      return \"HELLO \".concat(neo4j_driver_core_1.json.stringify(metadata));\n    });\n  };\n  /**\n   * Create a new LOGON message.\n   *\n   * @param {object} authToken The auth token\n   * @returns {RequestMessage} new LOGON message\n   */\n  RequestMessage.logon = function (authToken) {\n    return new RequestMessage(LOGON, [authToken], function () {\n      return 'LOGON { ... }';\n    });\n  };\n  /**\n   * Create a new LOGOFF message.\n   *\n   * @returns {RequestMessage} new LOGOFF message\n   */\n  RequestMessage.logoff = function () {\n    return new RequestMessage(LOGOFF, [], function () {\n      return 'LOGOFF';\n    });\n  };\n  /**\n   * Create a new BEGIN message.\n   * @param {Bookmarks} bookmarks the bookmarks.\n   * @param {TxConfig} txConfig the configuration.\n   * @param {string} database the database name.\n   * @param {string} mode the access mode.\n   * @param {string} impersonatedUser the impersonated user.\n   * @param {NotificationFilter} notificationFilter the notification filter\n   * @return {RequestMessage} new BEGIN message.\n   */\n  RequestMessage.begin = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      bookmarks = _b.bookmarks,\n      txConfig = _b.txConfig,\n      database = _b.database,\n      mode = _b.mode,\n      impersonatedUser = _b.impersonatedUser,\n      notificationFilter = _b.notificationFilter;\n    var metadata = buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter);\n    return new RequestMessage(BEGIN, [metadata], function () {\n      return \"BEGIN \".concat(neo4j_driver_core_1.json.stringify(metadata));\n    });\n  };\n  /**\n   * Create a new BEGIN message.\n   * @param {Bookmarks} bookmarks the bookmarks.\n   * @param {TxConfig} txConfig the configuration.\n   * @param {string} database the database name.\n   * @param {string} mode the access mode.\n   * @param {string} impersonatedUser the impersonated user.\n   * @param {NotificationFilter} notificationFilter the notification filter\n   * @return {RequestMessage} new BEGIN message.\n   */\n  RequestMessage.begin5x5 = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      bookmarks = _b.bookmarks,\n      txConfig = _b.txConfig,\n      database = _b.database,\n      mode = _b.mode,\n      impersonatedUser = _b.impersonatedUser,\n      notificationFilter = _b.notificationFilter;\n    var metadata = buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter, {\n      appendNotificationFilter: appendGqlNotificationFilterToMetadata\n    });\n    return new RequestMessage(BEGIN, [metadata], function () {\n      return \"BEGIN \".concat(neo4j_driver_core_1.json.stringify(metadata));\n    });\n  };\n  /**\n   * Get a COMMIT message.\n   * @return {RequestMessage} the COMMIT message.\n   */\n  RequestMessage.commit = function () {\n    return COMMIT_MESSAGE;\n  };\n  /**\n   * Get a ROLLBACK message.\n   * @return {RequestMessage} the ROLLBACK message.\n   */\n  RequestMessage.rollback = function () {\n    return ROLLBACK_MESSAGE;\n  };\n  /**\n   * Create a new RUN message with additional metadata.\n   * @param {string} query the cypher query.\n   * @param {Object} parameters the query parameters.\n   * @param {Object} extra - extra params\n   * @param {Bookmarks} extra.bookmarks the bookmarks.\n   * @param {TxConfig} extra.txConfig the configuration.\n   * @param {string} extra.database the database name.\n   * @param {string} extra.mode the access mode.\n   * @param {string} extra.impersonatedUser the impersonated user.\n   * @param {notificationFilter} extra.notificationFilter the notification filter\n   * @return {RequestMessage} new RUN message with additional metadata.\n   */\n  RequestMessage.runWithMetadata = function (query, parameters, _a) {\n    var _b = _a === void 0 ? {} : _a,\n      bookmarks = _b.bookmarks,\n      txConfig = _b.txConfig,\n      database = _b.database,\n      mode = _b.mode,\n      impersonatedUser = _b.impersonatedUser,\n      notificationFilter = _b.notificationFilter;\n    var metadata = buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter);\n    return new RequestMessage(RUN, [query, parameters, metadata], function () {\n      return \"RUN \".concat(query, \" \").concat(neo4j_driver_core_1.json.stringify(parameters), \" \").concat(neo4j_driver_core_1.json.stringify(metadata));\n    });\n  };\n  /**\n   * Create a new RUN message with additional metadata.\n   * @param {string} query the cypher query.\n   * @param {Object} parameters the query parameters.\n   * @param {Object} extra - extra params\n   * @param {Bookmarks} extra.bookmarks the bookmarks.\n   * @param {TxConfig} extra.txConfig the configuration.\n   * @param {string} extra.database the database name.\n   * @param {string} extra.mode the access mode.\n   * @param {string} extra.impersonatedUser the impersonated user.\n   * @param {notificationFilter} extra.notificationFilter the notification filter\n   * @return {RequestMessage} new RUN message with additional metadata.\n   */\n  RequestMessage.runWithMetadata5x5 = function (query, parameters, _a) {\n    var _b = _a === void 0 ? {} : _a,\n      bookmarks = _b.bookmarks,\n      txConfig = _b.txConfig,\n      database = _b.database,\n      mode = _b.mode,\n      impersonatedUser = _b.impersonatedUser,\n      notificationFilter = _b.notificationFilter;\n    var metadata = buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter, {\n      appendNotificationFilter: appendGqlNotificationFilterToMetadata\n    });\n    return new RequestMessage(RUN, [query, parameters, metadata], function () {\n      return \"RUN \".concat(query, \" \").concat(neo4j_driver_core_1.json.stringify(parameters), \" \").concat(neo4j_driver_core_1.json.stringify(metadata));\n    });\n  };\n  /**\n   * Get a GOODBYE message.\n   * @return {RequestMessage} the GOODBYE message.\n   */\n  RequestMessage.goodbye = function () {\n    return GOODBYE_MESSAGE;\n  };\n  /**\n   * Generates a new PULL message with additional metadata.\n   * @param {Integer|number} stmtId\n   * @param {Integer|number} n\n   * @return {RequestMessage} the PULL message.\n   */\n  RequestMessage.pull = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.stmtId,\n      stmtId = _c === void 0 ? NO_STATEMENT_ID : _c,\n      _d = _b.n,\n      n = _d === void 0 ? FETCH_ALL : _d;\n    var metadata = buildStreamMetadata(stmtId === null || stmtId === undefined ? NO_STATEMENT_ID : stmtId, n || FETCH_ALL);\n    return new RequestMessage(PULL, [metadata], function () {\n      return \"PULL \".concat(neo4j_driver_core_1.json.stringify(metadata));\n    });\n  };\n  /**\n   * Generates a new DISCARD message with additional metadata.\n   * @param {Integer|number} stmtId\n   * @param {Integer|number} n\n   * @return {RequestMessage} the PULL message.\n   */\n  RequestMessage.discard = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.stmtId,\n      stmtId = _c === void 0 ? NO_STATEMENT_ID : _c,\n      _d = _b.n,\n      n = _d === void 0 ? FETCH_ALL : _d;\n    var metadata = buildStreamMetadata(stmtId === null || stmtId === undefined ? NO_STATEMENT_ID : stmtId, n || FETCH_ALL);\n    return new RequestMessage(DISCARD, [metadata], function () {\n      return \"DISCARD \".concat(neo4j_driver_core_1.json.stringify(metadata));\n    });\n  };\n  RequestMessage.telemetry = function (_a) {\n    var api = _a.api;\n    var parsedApi = (0, neo4j_driver_core_1.int)(api);\n    return new RequestMessage(TELEMETRY, [parsedApi], function () {\n      return \"TELEMETRY \".concat(parsedApi.toString());\n    });\n  };\n  /**\n   * Generate the ROUTE message, this message is used to fetch the routing table from the server\n   *\n   * @param {object} routingContext The routing context used to define the routing table. Multi-datacenter deployments is one of its use cases\n   * @param {string[]} bookmarks The list of the bookmarks should be used\n   * @param {string} databaseName The name of the database to get the routing table for.\n   * @return {RequestMessage} the ROUTE message.\n   */\n  RequestMessage.route = function (routingContext, bookmarks, databaseName) {\n    if (routingContext === void 0) {\n      routingContext = {};\n    }\n    if (bookmarks === void 0) {\n      bookmarks = [];\n    }\n    if (databaseName === void 0) {\n      databaseName = null;\n    }\n    return new RequestMessage(ROUTE, [routingContext, bookmarks, databaseName], function () {\n      return \"ROUTE \".concat(neo4j_driver_core_1.json.stringify(routingContext), \" \").concat(neo4j_driver_core_1.json.stringify(bookmarks), \" \").concat(databaseName);\n    });\n  };\n  /**\n   * Generate the ROUTE message, this message is used to fetch the routing table from the server\n   *\n   * @param {object} routingContext The routing context used to define the routing table. Multi-datacenter deployments is one of its use cases\n   * @param {string[]} bookmarks The list of the bookmarks should be used\n   * @param {object} databaseContext The context inforamtion of the database to get the routing table for.\n   * @param {string} databaseContext.databaseName The name of the database to get the routing table.\n   * @param {string} databaseContext.impersonatedUser The name of the user to impersonation when getting the routing table.\n   * @return {RequestMessage} the ROUTE message.\n   */\n  RequestMessage.routeV4x4 = function (routingContext, bookmarks, databaseContext) {\n    if (routingContext === void 0) {\n      routingContext = {};\n    }\n    if (bookmarks === void 0) {\n      bookmarks = [];\n    }\n    if (databaseContext === void 0) {\n      databaseContext = {};\n    }\n    var dbContext = {};\n    if (databaseContext.databaseName) {\n      dbContext.db = databaseContext.databaseName;\n    }\n    if (databaseContext.impersonatedUser) {\n      dbContext.imp_user = databaseContext.impersonatedUser;\n    }\n    return new RequestMessage(ROUTE, [routingContext, bookmarks, dbContext], function () {\n      return \"ROUTE \".concat(neo4j_driver_core_1.json.stringify(routingContext), \" \").concat(neo4j_driver_core_1.json.stringify(bookmarks), \" \").concat(neo4j_driver_core_1.json.stringify(dbContext));\n    });\n  };\n  return RequestMessage;\n}();\nexports.default = RequestMessage;\n/**\n * Create an object that represent transaction metadata.\n * @param {Bookmarks} bookmarks the bookmarks.\n * @param {TxConfig} txConfig the configuration.\n * @param {string} database the database name.\n * @param {string} mode the access mode.\n * @param {string} impersonatedUser the impersonated user mode.\n * @param {notificationFilter} notificationFilter the notification filter\n * @param {Object} functions Transformation functions applied to metadata\n * @param {function(metadata,notificationFilter):void} functions.appendNotificationFilter Changes metadata by appending the Notification Filter to it.\n * @return {Object} a metadata object.\n */\nfunction buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter, functions) {\n  var _a;\n  if (functions === void 0) {\n    functions = {};\n  }\n  var metadata = {};\n  if (!bookmarks.isEmpty()) {\n    metadata.bookmarks = bookmarks.values();\n  }\n  if (txConfig.timeout !== null) {\n    metadata.tx_timeout = txConfig.timeout;\n  }\n  if (txConfig.metadata) {\n    metadata.tx_metadata = txConfig.metadata;\n  }\n  if (database) {\n    metadata.db = assertString(database, 'database');\n  }\n  if (impersonatedUser) {\n    metadata.imp_user = assertString(impersonatedUser, 'impersonatedUser');\n  }\n  if (mode === ACCESS_MODE_READ) {\n    metadata.mode = READ_MODE;\n  }\n  var appendNotificationFilter = (_a = functions.appendNotificationFilter) !== null && _a !== void 0 ? _a : appendLegacyNotificationFilterToMetadata;\n  appendNotificationFilter(metadata, notificationFilter);\n  return metadata;\n}\n/**\n * Create an object that represents streaming metadata.\n * @param {Integer|number} stmtId The query id to stream its results.\n * @param {Integer|number} n The number of records to stream.\n * @returns {Object} a metadata object.\n */\nfunction buildStreamMetadata(stmtId, n) {\n  var metadata = {\n    n: (0, neo4j_driver_core_1.int)(n)\n  };\n  if (stmtId !== NO_STATEMENT_ID) {\n    metadata.qid = (0, neo4j_driver_core_1.int)(stmtId);\n  }\n  return metadata;\n}\nfunction appendLegacyNotificationFilterToMetadata(metadata, notificationFilter) {\n  if (notificationFilter) {\n    if (notificationFilter.minimumSeverityLevel) {\n      metadata.notifications_minimum_severity = notificationFilter.minimumSeverityLevel;\n    }\n    if (notificationFilter.disabledCategories) {\n      metadata.notifications_disabled_categories = notificationFilter.disabledCategories;\n    }\n    if (notificationFilter.disabledClassifications) {\n      metadata.notifications_disabled_categories = notificationFilter.disabledClassifications;\n    }\n  }\n}\nfunction appendGqlNotificationFilterToMetadata(metadata, notificationFilter) {\n  if (notificationFilter) {\n    if (notificationFilter.minimumSeverityLevel) {\n      metadata.notifications_minimum_severity = notificationFilter.minimumSeverityLevel;\n    }\n    if (notificationFilter.disabledCategories) {\n      metadata.notifications_disabled_classifications = notificationFilter.disabledCategories;\n    }\n    if (notificationFilter.disabledClassifications) {\n      metadata.notifications_disabled_classifications = notificationFilter.disabledClassifications;\n    }\n  }\n}\n// constants for messages that never change\nvar PULL_ALL_MESSAGE = new RequestMessage(PULL_ALL, [], function () {\n  return 'PULL_ALL';\n});\nvar RESET_MESSAGE = new RequestMessage(RESET, [], function () {\n  return 'RESET';\n});\nvar COMMIT_MESSAGE = new RequestMessage(COMMIT, [], function () {\n  return 'COMMIT';\n});\nvar ROLLBACK_MESSAGE = new RequestMessage(ROLLBACK, [], function () {\n  return 'ROLLBACK';\n});\nvar GOODBYE_MESSAGE = new RequestMessage(GOODBYE, [], function () {\n  return 'GOODBYE';\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","SIGNATURES","neo4j_driver_core_1","require","_a","internal","constants","ACCESS_MODE_READ","FETCH_ALL","assertString","util","INIT","ACK_FAILURE","RESET","RUN","DISCARD_ALL","PULL_ALL","HELLO","GOODBYE","BEGIN","COMMIT","ROLLBACK","TELEMETRY","ROUTE","LOGON","LOGOFF","DISCARD","PULL","READ_MODE","NO_STATEMENT_ID","freeze","RequestMessage","signature","fields","toString","init","clientName","authToken","concat","run","query","parameters","json","stringify","pullAll","PULL_ALL_MESSAGE","reset","RESET_MESSAGE","hello","userAgent","routing","patchs","metadata","assign","user_agent","patch_bolt","hello5x1","hello5x2","notificationFilter","appendLegacyNotificationFilterToMetadata","hello5x3","boltAgent","bolt_agent","product","platform","language","language_details","languageDetails","hello5x5","appendGqlNotificationFilterToMetadata","logon","logoff","begin","_b","bookmarks","txConfig","database","mode","impersonatedUser","buildTxMetadata","begin5x5","appendNotificationFilter","commit","COMMIT_MESSAGE","rollback","ROLLBACK_MESSAGE","runWithMetadata","runWithMetadata5x5","goodbye","GOODBYE_MESSAGE","pull","_c","stmtId","_d","n","buildStreamMetadata","undefined","discard","telemetry","api","parsedApi","int","route","routingContext","databaseName","routeV4x4","databaseContext","dbContext","db","imp_user","default","functions","isEmpty","values","timeout","tx_timeout","tx_metadata","qid","minimumSeverityLevel","notifications_minimum_severity","disabledCategories","notifications_disabled_categories","disabledClassifications","notifications_disabled_classifications"],"sources":["D:/Study/Projects/Copy 4/client/node_modules/neo4j-driver-bolt-connection/lib/bolt/request-message.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SIGNATURES = void 0;\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar _a = neo4j_driver_core_1.internal.constants, ACCESS_MODE_READ = _a.ACCESS_MODE_READ, FETCH_ALL = _a.FETCH_ALL, assertString = neo4j_driver_core_1.internal.util.assertString;\n/* eslint-disable no-unused-vars */\n// Signature bytes for each request message type\nvar INIT = 0x01; // 0000 0001 // INIT <user_agent> <authentication_token>\nvar ACK_FAILURE = 0x0e; // 0000 1110 // ACK_FAILURE - unused\nvar RESET = 0x0f; // 0000 1111 // RESET\nvar RUN = 0x10; // 0001 0000 // RUN <query> <parameters>\nvar DISCARD_ALL = 0x2f; // 0010 1111 // DISCARD_ALL - unused\nvar PULL_ALL = 0x3f; // 0011 1111 // PULL_ALL\nvar HELLO = 0x01; // 0000 0001 // HELLO <metadata>\nvar GOODBYE = 0x02; // 0000 0010 // GOODBYE\nvar BEGIN = 0x11; // 0001 0001 // BEGIN <metadata>\nvar COMMIT = 0x12; // 0001 0010 // COMMIT\nvar ROLLBACK = 0x13; // 0001 0011 // ROLLBACK\nvar TELEMETRY = 0x54; // 0101 0100 // TELEMETRY <api>\nvar ROUTE = 0x66; // 0110 0110 // ROUTE\nvar LOGON = 0x6A; // LOGON\nvar LOGOFF = 0x6B; // LOGOFF\nvar DISCARD = 0x2f; // 0010 1111 // DISCARD\nvar PULL = 0x3f; // 0011 1111 // PULL\nvar READ_MODE = 'r';\n/* eslint-enable no-unused-vars */\nvar NO_STATEMENT_ID = -1;\nvar SIGNATURES = Object.freeze({\n    INIT: INIT,\n    RESET: RESET,\n    RUN: RUN,\n    PULL_ALL: PULL_ALL,\n    HELLO: HELLO,\n    GOODBYE: GOODBYE,\n    BEGIN: BEGIN,\n    COMMIT: COMMIT,\n    ROLLBACK: ROLLBACK,\n    TELEMETRY: TELEMETRY,\n    ROUTE: ROUTE,\n    LOGON: LOGON,\n    LOGOFF: LOGOFF,\n    DISCARD: DISCARD,\n    PULL: PULL\n});\nexports.SIGNATURES = SIGNATURES;\nvar RequestMessage = /** @class */ (function () {\n    function RequestMessage(signature, fields, toString) {\n        this.signature = signature;\n        this.fields = fields;\n        this.toString = toString;\n    }\n    /**\n     * Create a new INIT message.\n     * @param {string} clientName the client name.\n     * @param {Object} authToken the authentication token.\n     * @return {RequestMessage} new INIT message.\n     */\n    RequestMessage.init = function (clientName, authToken) {\n        return new RequestMessage(INIT, [clientName, authToken], function () { return \"INIT \".concat(clientName, \" {...}\"); });\n    };\n    /**\n     * Create a new RUN message.\n     * @param {string} query the cypher query.\n     * @param {Object} parameters the query parameters.\n     * @return {RequestMessage} new RUN message.\n     */\n    RequestMessage.run = function (query, parameters) {\n        return new RequestMessage(RUN, [query, parameters], function () { return \"RUN \".concat(query, \" \").concat(neo4j_driver_core_1.json.stringify(parameters)); });\n    };\n    /**\n     * Get a PULL_ALL message.\n     * @return {RequestMessage} the PULL_ALL message.\n     */\n    RequestMessage.pullAll = function () {\n        return PULL_ALL_MESSAGE;\n    };\n    /**\n     * Get a RESET message.\n     * @return {RequestMessage} the RESET message.\n     */\n    RequestMessage.reset = function () {\n        return RESET_MESSAGE;\n    };\n    /**\n     * Create a new HELLO message.\n     * @param {string} userAgent the user agent.\n     * @param {Object} authToken the authentication token.\n     * @param {Object} optional server side routing, set to routing context to turn on server side routing (> 4.1)\n     * @return {RequestMessage} new HELLO message.\n     */\n    RequestMessage.hello = function (userAgent, authToken, routing, patchs) {\n        if (routing === void 0) { routing = null; }\n        if (patchs === void 0) { patchs = null; }\n        var metadata = Object.assign({ user_agent: userAgent }, authToken);\n        if (routing) {\n            metadata.routing = routing;\n        }\n        if (patchs) {\n            metadata.patch_bolt = patchs;\n        }\n        return new RequestMessage(HELLO, [metadata], function () { return \"HELLO {user_agent: '\".concat(userAgent, \"', ...}\"); });\n    };\n    /**\n     * Create a new HELLO message.\n     * @param {string} userAgent the user agent.\n     * @param {Object} optional server side routing, set to routing context to turn on server side routing (> 4.1)\n     * @return {RequestMessage} new HELLO message.\n     */\n    RequestMessage.hello5x1 = function (userAgent, routing) {\n        if (routing === void 0) { routing = null; }\n        var metadata = { user_agent: userAgent };\n        if (routing) {\n            metadata.routing = routing;\n        }\n        return new RequestMessage(HELLO, [metadata], function () { return \"HELLO {user_agent: '\".concat(userAgent, \"', ...}\"); });\n    };\n    /**\n     * Create a new HELLO message.\n     * @param {string} userAgent the user agent.\n     * @param {NotificationFilter} notificationFilter the notification filter configured\n     * @param {Object} routing server side routing, set to routing context to turn on server side routing (> 4.1)\n     * @return {RequestMessage} new HELLO message.\n     */\n    RequestMessage.hello5x2 = function (userAgent, notificationFilter, routing) {\n        if (notificationFilter === void 0) { notificationFilter = null; }\n        if (routing === void 0) { routing = null; }\n        var metadata = { user_agent: userAgent };\n        appendLegacyNotificationFilterToMetadata(metadata, notificationFilter);\n        if (routing) {\n            metadata.routing = routing;\n        }\n        return new RequestMessage(HELLO, [metadata], function () { return \"HELLO \".concat(neo4j_driver_core_1.json.stringify(metadata)); });\n    };\n    /**\n     * Create a new HELLO message.\n     * @param {string} userAgent the user agent.\n     * @param {string} boltAgent the bolt agent.\n     * @param {NotificationFilter} notificationFilter the notification filter configured\n     * @param {Object} routing server side routing, set to routing context to turn on server side routing (> 4.1)\n     * @return {RequestMessage} new HELLO message.\n     */\n    RequestMessage.hello5x3 = function (userAgent, boltAgent, notificationFilter, routing) {\n        if (notificationFilter === void 0) { notificationFilter = null; }\n        if (routing === void 0) { routing = null; }\n        var metadata = {};\n        if (userAgent) {\n            metadata.user_agent = userAgent;\n        }\n        if (boltAgent) {\n            metadata.bolt_agent = {\n                product: boltAgent.product,\n                platform: boltAgent.platform,\n                language: boltAgent.language,\n                language_details: boltAgent.languageDetails\n            };\n        }\n        appendLegacyNotificationFilterToMetadata(metadata, notificationFilter);\n        if (routing) {\n            metadata.routing = routing;\n        }\n        return new RequestMessage(HELLO, [metadata], function () { return \"HELLO \".concat(neo4j_driver_core_1.json.stringify(metadata)); });\n    };\n    /**\n     * Create a new HELLO message.\n     * @param {string} userAgent the user agent.\n     * @param {string} boltAgent the bolt agent.\n     * @param {NotificationFilter} notificationFilter the notification filter configured\n     * @param {Object} routing server side routing, set to routing context to turn on server side routing (> 4.1)\n     * @return {RequestMessage} new HELLO message.\n     */\n    RequestMessage.hello5x5 = function (userAgent, boltAgent, notificationFilter, routing) {\n        if (notificationFilter === void 0) { notificationFilter = null; }\n        if (routing === void 0) { routing = null; }\n        var metadata = {};\n        if (userAgent) {\n            metadata.user_agent = userAgent;\n        }\n        if (boltAgent) {\n            metadata.bolt_agent = {\n                product: boltAgent.product,\n                platform: boltAgent.platform,\n                language: boltAgent.language,\n                language_details: boltAgent.languageDetails\n            };\n        }\n        appendGqlNotificationFilterToMetadata(metadata, notificationFilter);\n        if (routing) {\n            metadata.routing = routing;\n        }\n        return new RequestMessage(HELLO, [metadata], function () { return \"HELLO \".concat(neo4j_driver_core_1.json.stringify(metadata)); });\n    };\n    /**\n     * Create a new LOGON message.\n     *\n     * @param {object} authToken The auth token\n     * @returns {RequestMessage} new LOGON message\n     */\n    RequestMessage.logon = function (authToken) {\n        return new RequestMessage(LOGON, [authToken], function () { return 'LOGON { ... }'; });\n    };\n    /**\n     * Create a new LOGOFF message.\n     *\n     * @returns {RequestMessage} new LOGOFF message\n     */\n    RequestMessage.logoff = function () {\n        return new RequestMessage(LOGOFF, [], function () { return 'LOGOFF'; });\n    };\n    /**\n     * Create a new BEGIN message.\n     * @param {Bookmarks} bookmarks the bookmarks.\n     * @param {TxConfig} txConfig the configuration.\n     * @param {string} database the database name.\n     * @param {string} mode the access mode.\n     * @param {string} impersonatedUser the impersonated user.\n     * @param {NotificationFilter} notificationFilter the notification filter\n     * @return {RequestMessage} new BEGIN message.\n     */\n    RequestMessage.begin = function (_a) {\n        var _b = _a === void 0 ? {} : _a, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter;\n        var metadata = buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter);\n        return new RequestMessage(BEGIN, [metadata], function () { return \"BEGIN \".concat(neo4j_driver_core_1.json.stringify(metadata)); });\n    };\n    /**\n     * Create a new BEGIN message.\n     * @param {Bookmarks} bookmarks the bookmarks.\n     * @param {TxConfig} txConfig the configuration.\n     * @param {string} database the database name.\n     * @param {string} mode the access mode.\n     * @param {string} impersonatedUser the impersonated user.\n     * @param {NotificationFilter} notificationFilter the notification filter\n     * @return {RequestMessage} new BEGIN message.\n     */\n    RequestMessage.begin5x5 = function (_a) {\n        var _b = _a === void 0 ? {} : _a, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter;\n        var metadata = buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter, {\n            appendNotificationFilter: appendGqlNotificationFilterToMetadata\n        });\n        return new RequestMessage(BEGIN, [metadata], function () { return \"BEGIN \".concat(neo4j_driver_core_1.json.stringify(metadata)); });\n    };\n    /**\n     * Get a COMMIT message.\n     * @return {RequestMessage} the COMMIT message.\n     */\n    RequestMessage.commit = function () {\n        return COMMIT_MESSAGE;\n    };\n    /**\n     * Get a ROLLBACK message.\n     * @return {RequestMessage} the ROLLBACK message.\n     */\n    RequestMessage.rollback = function () {\n        return ROLLBACK_MESSAGE;\n    };\n    /**\n     * Create a new RUN message with additional metadata.\n     * @param {string} query the cypher query.\n     * @param {Object} parameters the query parameters.\n     * @param {Object} extra - extra params\n     * @param {Bookmarks} extra.bookmarks the bookmarks.\n     * @param {TxConfig} extra.txConfig the configuration.\n     * @param {string} extra.database the database name.\n     * @param {string} extra.mode the access mode.\n     * @param {string} extra.impersonatedUser the impersonated user.\n     * @param {notificationFilter} extra.notificationFilter the notification filter\n     * @return {RequestMessage} new RUN message with additional metadata.\n     */\n    RequestMessage.runWithMetadata = function (query, parameters, _a) {\n        var _b = _a === void 0 ? {} : _a, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter;\n        var metadata = buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter);\n        return new RequestMessage(RUN, [query, parameters, metadata], function () {\n            return \"RUN \".concat(query, \" \").concat(neo4j_driver_core_1.json.stringify(parameters), \" \").concat(neo4j_driver_core_1.json.stringify(metadata));\n        });\n    };\n    /**\n     * Create a new RUN message with additional metadata.\n     * @param {string} query the cypher query.\n     * @param {Object} parameters the query parameters.\n     * @param {Object} extra - extra params\n     * @param {Bookmarks} extra.bookmarks the bookmarks.\n     * @param {TxConfig} extra.txConfig the configuration.\n     * @param {string} extra.database the database name.\n     * @param {string} extra.mode the access mode.\n     * @param {string} extra.impersonatedUser the impersonated user.\n     * @param {notificationFilter} extra.notificationFilter the notification filter\n     * @return {RequestMessage} new RUN message with additional metadata.\n     */\n    RequestMessage.runWithMetadata5x5 = function (query, parameters, _a) {\n        var _b = _a === void 0 ? {} : _a, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter;\n        var metadata = buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter, {\n            appendNotificationFilter: appendGqlNotificationFilterToMetadata\n        });\n        return new RequestMessage(RUN, [query, parameters, metadata], function () {\n            return \"RUN \".concat(query, \" \").concat(neo4j_driver_core_1.json.stringify(parameters), \" \").concat(neo4j_driver_core_1.json.stringify(metadata));\n        });\n    };\n    /**\n     * Get a GOODBYE message.\n     * @return {RequestMessage} the GOODBYE message.\n     */\n    RequestMessage.goodbye = function () {\n        return GOODBYE_MESSAGE;\n    };\n    /**\n     * Generates a new PULL message with additional metadata.\n     * @param {Integer|number} stmtId\n     * @param {Integer|number} n\n     * @return {RequestMessage} the PULL message.\n     */\n    RequestMessage.pull = function (_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.stmtId, stmtId = _c === void 0 ? NO_STATEMENT_ID : _c, _d = _b.n, n = _d === void 0 ? FETCH_ALL : _d;\n        var metadata = buildStreamMetadata(stmtId === null || stmtId === undefined ? NO_STATEMENT_ID : stmtId, n || FETCH_ALL);\n        return new RequestMessage(PULL, [metadata], function () { return \"PULL \".concat(neo4j_driver_core_1.json.stringify(metadata)); });\n    };\n    /**\n     * Generates a new DISCARD message with additional metadata.\n     * @param {Integer|number} stmtId\n     * @param {Integer|number} n\n     * @return {RequestMessage} the PULL message.\n     */\n    RequestMessage.discard = function (_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.stmtId, stmtId = _c === void 0 ? NO_STATEMENT_ID : _c, _d = _b.n, n = _d === void 0 ? FETCH_ALL : _d;\n        var metadata = buildStreamMetadata(stmtId === null || stmtId === undefined ? NO_STATEMENT_ID : stmtId, n || FETCH_ALL);\n        return new RequestMessage(DISCARD, [metadata], function () { return \"DISCARD \".concat(neo4j_driver_core_1.json.stringify(metadata)); });\n    };\n    RequestMessage.telemetry = function (_a) {\n        var api = _a.api;\n        var parsedApi = (0, neo4j_driver_core_1.int)(api);\n        return new RequestMessage(TELEMETRY, [parsedApi], function () { return \"TELEMETRY \".concat(parsedApi.toString()); });\n    };\n    /**\n     * Generate the ROUTE message, this message is used to fetch the routing table from the server\n     *\n     * @param {object} routingContext The routing context used to define the routing table. Multi-datacenter deployments is one of its use cases\n     * @param {string[]} bookmarks The list of the bookmarks should be used\n     * @param {string} databaseName The name of the database to get the routing table for.\n     * @return {RequestMessage} the ROUTE message.\n     */\n    RequestMessage.route = function (routingContext, bookmarks, databaseName) {\n        if (routingContext === void 0) { routingContext = {}; }\n        if (bookmarks === void 0) { bookmarks = []; }\n        if (databaseName === void 0) { databaseName = null; }\n        return new RequestMessage(ROUTE, [routingContext, bookmarks, databaseName], function () {\n            return \"ROUTE \".concat(neo4j_driver_core_1.json.stringify(routingContext), \" \").concat(neo4j_driver_core_1.json.stringify(bookmarks), \" \").concat(databaseName);\n        });\n    };\n    /**\n     * Generate the ROUTE message, this message is used to fetch the routing table from the server\n     *\n     * @param {object} routingContext The routing context used to define the routing table. Multi-datacenter deployments is one of its use cases\n     * @param {string[]} bookmarks The list of the bookmarks should be used\n     * @param {object} databaseContext The context inforamtion of the database to get the routing table for.\n     * @param {string} databaseContext.databaseName The name of the database to get the routing table.\n     * @param {string} databaseContext.impersonatedUser The name of the user to impersonation when getting the routing table.\n     * @return {RequestMessage} the ROUTE message.\n     */\n    RequestMessage.routeV4x4 = function (routingContext, bookmarks, databaseContext) {\n        if (routingContext === void 0) { routingContext = {}; }\n        if (bookmarks === void 0) { bookmarks = []; }\n        if (databaseContext === void 0) { databaseContext = {}; }\n        var dbContext = {};\n        if (databaseContext.databaseName) {\n            dbContext.db = databaseContext.databaseName;\n        }\n        if (databaseContext.impersonatedUser) {\n            dbContext.imp_user = databaseContext.impersonatedUser;\n        }\n        return new RequestMessage(ROUTE, [routingContext, bookmarks, dbContext], function () {\n            return \"ROUTE \".concat(neo4j_driver_core_1.json.stringify(routingContext), \" \").concat(neo4j_driver_core_1.json.stringify(bookmarks), \" \").concat(neo4j_driver_core_1.json.stringify(dbContext));\n        });\n    };\n    return RequestMessage;\n}());\nexports.default = RequestMessage;\n/**\n * Create an object that represent transaction metadata.\n * @param {Bookmarks} bookmarks the bookmarks.\n * @param {TxConfig} txConfig the configuration.\n * @param {string} database the database name.\n * @param {string} mode the access mode.\n * @param {string} impersonatedUser the impersonated user mode.\n * @param {notificationFilter} notificationFilter the notification filter\n * @param {Object} functions Transformation functions applied to metadata\n * @param {function(metadata,notificationFilter):void} functions.appendNotificationFilter Changes metadata by appending the Notification Filter to it.\n * @return {Object} a metadata object.\n */\nfunction buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter, functions) {\n    var _a;\n    if (functions === void 0) { functions = {}; }\n    var metadata = {};\n    if (!bookmarks.isEmpty()) {\n        metadata.bookmarks = bookmarks.values();\n    }\n    if (txConfig.timeout !== null) {\n        metadata.tx_timeout = txConfig.timeout;\n    }\n    if (txConfig.metadata) {\n        metadata.tx_metadata = txConfig.metadata;\n    }\n    if (database) {\n        metadata.db = assertString(database, 'database');\n    }\n    if (impersonatedUser) {\n        metadata.imp_user = assertString(impersonatedUser, 'impersonatedUser');\n    }\n    if (mode === ACCESS_MODE_READ) {\n        metadata.mode = READ_MODE;\n    }\n    var appendNotificationFilter = (_a = functions.appendNotificationFilter) !== null && _a !== void 0 ? _a : appendLegacyNotificationFilterToMetadata;\n    appendNotificationFilter(metadata, notificationFilter);\n    return metadata;\n}\n/**\n * Create an object that represents streaming metadata.\n * @param {Integer|number} stmtId The query id to stream its results.\n * @param {Integer|number} n The number of records to stream.\n * @returns {Object} a metadata object.\n */\nfunction buildStreamMetadata(stmtId, n) {\n    var metadata = { n: (0, neo4j_driver_core_1.int)(n) };\n    if (stmtId !== NO_STATEMENT_ID) {\n        metadata.qid = (0, neo4j_driver_core_1.int)(stmtId);\n    }\n    return metadata;\n}\nfunction appendLegacyNotificationFilterToMetadata(metadata, notificationFilter) {\n    if (notificationFilter) {\n        if (notificationFilter.minimumSeverityLevel) {\n            metadata.notifications_minimum_severity = notificationFilter.minimumSeverityLevel;\n        }\n        if (notificationFilter.disabledCategories) {\n            metadata.notifications_disabled_categories = notificationFilter.disabledCategories;\n        }\n        if (notificationFilter.disabledClassifications) {\n            metadata.notifications_disabled_categories = notificationFilter.disabledClassifications;\n        }\n    }\n}\nfunction appendGqlNotificationFilterToMetadata(metadata, notificationFilter) {\n    if (notificationFilter) {\n        if (notificationFilter.minimumSeverityLevel) {\n            metadata.notifications_minimum_severity = notificationFilter.minimumSeverityLevel;\n        }\n        if (notificationFilter.disabledCategories) {\n            metadata.notifications_disabled_classifications = notificationFilter.disabledCategories;\n        }\n        if (notificationFilter.disabledClassifications) {\n            metadata.notifications_disabled_classifications = notificationFilter.disabledClassifications;\n        }\n    }\n}\n// constants for messages that never change\nvar PULL_ALL_MESSAGE = new RequestMessage(PULL_ALL, [], function () { return 'PULL_ALL'; });\nvar RESET_MESSAGE = new RequestMessage(RESET, [], function () { return 'RESET'; });\nvar COMMIT_MESSAGE = new RequestMessage(COMMIT, [], function () { return 'COMMIT'; });\nvar ROLLBACK_MESSAGE = new RequestMessage(ROLLBACK, [], function () { return 'ROLLBACK'; });\nvar GOODBYE_MESSAGE = new RequestMessage(GOODBYE, [], function () { return 'GOODBYE'; });\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}