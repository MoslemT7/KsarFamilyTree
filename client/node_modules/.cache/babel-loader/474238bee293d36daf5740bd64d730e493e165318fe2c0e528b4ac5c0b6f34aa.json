{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\Projects\\\\El-Kasr Family Tree\\\\client\\\\src\\\\components\\\\RelationChecker.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './RelationChecker.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst neo4j = require('neo4j-driver');\nconst translations = require('./translation.json');\nconst driver = neo4j.driver('neo4j+s://2cd0ce39.databases.neo4j.io', neo4j.auth.basic('neo4j', 'nW1azrzTK-lrTOO5G1uOkUVFwelcQlEmKPHggPUB7xQ'));\nconst session = driver.session();\nconst getPersonMatches = async (name, lastName, fatherName = \"\", grandfatherName = \"\") => {\n  // Initialize the return statement for the query\n  let returnStatement = `RETURN id(p) AS personID, p.name AS personName, p.lastName AS familyName`;\n\n  // Start building the query to check for the name and last name\n  let query = `\n    MATCH (p:Person)\n    WHERE p.name = $name AND p.lastName = $lastName\n    \n  `;\n\n  // First case: Check if the name and last name are unique\n  let result = await session.run(query + returnStatement, {\n    name,\n    lastName\n  });\n  if (result.records.length === 1) {\n    // If unique, return the result\n    return result.records.map(record => ({\n      id: record.get('personID').toNumber(),\n      name: record.get('personName'),\n      lastName: record.get('familyName'),\n      father: \"Unknown\",\n      grandfather: \"Unknown\"\n    }));\n  }\n\n  // If not unique, we proceed to check for the father and/or grandfather relationships\n\n  // Add father name condition if provided\n  if (fatherName) {\n    query += ` \n      OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(p)\n      WHERE father.name = $fatherName\n    `;\n    returnStatement += `, father.name AS fatherName`;\n  }\n\n  // Add grandfather name condition if provided\n  if (grandfatherName) {\n    query += `\n      OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\n      WHERE grandfather.name = $grandfatherName\n    `;\n    returnStatement += `, grandfather.name AS grandfatherName`;\n  }\n\n  // Finalize the query with the return statement\n  query += returnStatement;\n\n  // Run the query again after adding father/grandfather checks\n  result = await session.run(query, {\n    name,\n    lastName,\n    fatherName,\n    grandfatherName\n  });\n\n  // Return the mapped results with the ID, father, and grandfather names\n  return result.records.map(record => ({\n    id: record.get('personID').toNumber(),\n    name: record.get('personName'),\n    lastName: record.get('familyName'),\n    father: record.get('fatherName') || \"Unknown\",\n    grandfather: record.get('grandfatherName') || \"Unknown\"\n  }));\n};\nconst splitArabicName = fullNameAR => {\n  const trimmedName = fullNameAR.trim();\n  const nameParts = trimmedName.split('بن').map(part => part.trim());\n  let personName = \"\";\n  let fatherName = \"\";\n  let grandfatherName = \"\";\n  let familyName = \"\";\n  switch (nameParts.length) {\n    case 2:\n      [personName, familyName] = nameParts;\n      break;\n    case 3:\n      [personName, fatherName, familyName] = nameParts;\n      break;\n    case 4:\n      [personName, fatherName, grandfatherName] = nameParts;\n      break;\n    case 5:\n      [personName, fatherName, grandfatherName, familyName] = nameParts;\n      break;\n    default:\n      console.error(\"Invalid name format.\");\n      break;\n  }\n  return {\n    personName,\n    fatherName,\n    grandfatherName,\n    familyName\n  };\n};\nconst getRelationship = async (person1FullNameAR, person2FullNameAR) => {\n  const person1FullName = translateName(person1FullNameAR, false);\n  const person2FullName = translateName(person2FullNameAR, false);\n  const {\n    personName: person1Name,\n    fatherName: person1FatherName,\n    grandfatherName: person1GrandfatherName,\n    familyName: person1LastName\n  } = splitArabicName(person1FullNameAR);\n  const {\n    personName: person2Name,\n    fatherName: person2FatherName,\n    grandfatherName: person2GrandfatherName,\n    familyName: person2LastName\n  } = splitArabicName(person2FullNameAR);\n  console.log(\"LOG: \", person1Name, person1LastName, person1FatherName, person1GrandfatherName);\n  const person1Matches = await getPersonMatches(person1Name, person1LastName, person1FatherName, person1GrandfatherName);\n  const person2Matches = await getPersonMatches(person2Name, person2LastName, person2FatherName, person2GrandfatherName);\n  console.log(person1Matches);\n  if (person1Matches.length > 1 || person2Matches.length > 1) {\n    return {\n      error: 'non-unique-name',\n      message: 'تم العثور على عدة أشخاص بنفس الاسم. الرجاء اختيار الصحيح.',\n      duplicates: {\n        person1: person1Matches.length > 1 ? person1Matches : [],\n        person2: person2Matches.length > 1 ? person2Matches : []\n      }\n    };\n  } else {\n    person1ID = person1Matches[0].id;\n    person2ID = person2Matches[0].id;\n  }\n  const gender1 = await getGender(person1FullName);\n  const gender2 = await getGender(person2FullName);\n  try {\n    console.log(`Looking up relationship between: ${person1FullName} and ${person2FullName}`);\n    const getAncestors = async personID => {\n      const result = await session.run(`\n        MATCH path = (ancestor:Person)-[:FATHER_OF|MOTHER_OF*]->(child:Person {name: $personName, lastName: $personLastName})\n        WITH ancestor, id(ancestor) AS ID, length(path) AS level\n        RETURN DISTINCT ID, ancestor.name AS name, ancestor.lastName AS lastName, level\n        ORDER BY level ASC\n      `, {\n        personID\n      });\n      return result.records.map(record => ({\n        id: record.get('ID').toNumber(),\n        name: record.get('name'),\n        lastName: record.get('lastName'),\n        level: record.get('level').toNumber()\n      }));\n    };\n\n    // Get the ancestors for both persons\n    const maxLevels = 4;\n    let person1Ancestors = await getAncestors(person1ID);\n    let person2Ancestors = await getAncestors(person2ID);\n    console.log(`Person 1 Ancestors: ${person1Ancestors.map(a => a.name).join(' ben ')}`);\n    console.log(`Person 2 Ancestors: ${person2Ancestors.map(a => a.name).join(' ben ')}`);\n    const person1Ids = person1Ancestors.map(a => a.id);\n    const person2Ids = person2Ancestors.map(a => a.id);\n    const sharedAncestors = person1Ancestors.filter(a => person2Ids.includes(a.id));\n    const translatedName1 = translateName(person1FullName);\n    const translatedName2 = translateName(person2FullName);\n\n    // Check for common ancestors between the two persons\n    for (let i = 0; i < person1Ancestors.length; i++) {\n      for (let j = 0; j < person2Ancestors.length; j++) {\n        if (person1Ancestors[i].id === person2Ancestors[j].id) {\n          var p1Level = person1Ancestors[i].level;\n          var p2Level = person2Ancestors[j].level;\n          console.log(`Level: (${p1Level}, ${p2Level})`);\n          if (p1Level === 0 && p2Level === 1) {\n            if (gender1 === 'Male') {\n              console.log(`${translatedName1} هو والد ${translatedName2}`);\n              return `${translatedName1} هو والد ${translatedName2}`;\n            } else {\n              console.log(`${translatedName1} هي والدة ${translatedName2}`);\n              return `${translatedName1} هي والدة ${translatedName2}`;\n            }\n          } else if (p1Level === 1 && p2Level === 0) {\n            if (gender1 === 'Male') {\n              console.log(`${translatedName1} هو ابن ${translatedName2}`);\n              return `${translatedName1} هو ابن ${translatedName2}`;\n            } else {\n              console.log(`${translatedName1} هي إبنة ${person2FullName}`);\n              return `${translatedName1} هي إبنة ${translatedName2}`;\n            }\n          } else if (p1Level === 2 && p2Level === 0) {\n            if (gender1 === 'Male') {\n              console.log(`${person1FullName} هو حفيد ${person2FullName}`);\n              return `${translatedName1} هو حفيد ${translatedName2}`;\n            } else {\n              console.log(`${person1FullName} هي حفيدة ${person2FullName}.`);\n              return `${translatedName1} هي حفيدة ${translatedName2}`;\n            }\n          } else if (p1Level === 0 && p2Level === 2) {\n            if (gender1 === 'Male') {\n              console.log(`${person1FullName} هو جدّ ${person2FullName}'.`);\n              return `${translatedName1} هو جدّ ${translatedName2}`;\n            } else {\n              console.log(`${person1FullName} هي جدّة ${person2FullName}.`);\n              return `${translatedName1} هي جدّة ${translatedName2}`;\n            }\n          } else if (p1Level === 3 && p2Level === 0) {\n            if (gender1 === 'Male') {\n              console.log(`${person1FullName} هو إبن حفيد ${person2FullName}.`);\n              return `${translatedName1} هو إبن حفيد ${translatedName2}`;\n            } else {\n              console.log(`${person1FullName} هي إبنة حفيدة ${person2FullName}.`);\n              return `${translatedName1} هي إبنة حفيدة ${translatedName2}`;\n            }\n          } else if (p1Level === 0 && p2Level === 3) {\n            if (gender1 === 'Male') {\n              console.log(`${person1FullName} هو جد والد ${person2FullName}`);\n              return `${translatedName1} و جد والد ${translatedName2}`;\n            } else {\n              console.log(`${person1FullName}هي جدة والدة ${person2FullName}`);\n              return `${translatedName1} هي جدة والدة ${translatedName2}`;\n            }\n          } else if (p1Level === 1 && p2Level === 1) {\n            if (gender1 === 'Male' && gender2 === 'Male') {\n              console.log(`${person1FullName} و ${person2FullName} إخوة.`);\n              return `${translatedName1} و ${translatedName2} إخوة`;\n            } else if (gender1 === 'Female' && gender2 === 'Female') {\n              console.log(`${person1FullName} و ${person2FullName} أخوات.`);\n              return `${translatedName1} و ${translatedName2} أخوات`;\n            } else {\n              console.log(`${person1FullName} و ${person2FullName} إخوة.`);\n              return `${translatedName1} و ${translatedName2} إخوة`;\n            }\n          } else if (p1Level === 2 && p2Level === 1) {\n            if (gender1 === 'Male') {\n              console.log(`${translatedName1} هو ابن أخ ${translatedName2}`);\n              return `${translatedName1} هو ابن أخ ${translatedName2}`;\n            } else {\n              console.log(`${person1FullName} هي إبنة أخ ${person2FullName}.`);\n              return `${translatedName1} هي إبن أخ ${translatedName2}`;\n            }\n          } else if (p1Level === 1 && p2Level === 2) {\n            if (gender1 === 'Male') {\n              console.log(`${person1FullName} هو عم ${person2FullName}.`);\n              return `${translatedName1} هو عم ${translatedName2}'`;\n            } else {\n              console.log(`${person1FullName} هي عمّة ${person2FullName}.`);\n              return `${translatedName1} هي عمّة ${translatedName2}`;\n            }\n          } else if (p1Level === 2 && p2Level === 2) {\n            console.log(`${person1FullName} و ${person2FullName} أولاد العم.`);\n            const p1AncestorFullName = getAncestorFullName(person1Ancestors, 1);\n            const p1AncestorGender = await getGender(p1AncestorFullName);\n            const p2AncestorFullName = getAncestorFullName(person2Ancestors, 1);\n            const p2AncestorGender = await getGender(p2AncestorFullName);\n            console.log(p1AncestorFullName);\n            if (gender1 === 'Male') {\n              if (p1AncestorGender === 'Male') {\n                if (p2AncestorGender === 'Male') {\n                  // ولد عمه\n                  console.log(`${person1FullName} هو إبن عم ${person2FullName}.`);\n                  return `${translatedName1} إبن عم ${translatedName2}`;\n                } else {\n                  // ولد عمته\n                  console.log(`${person1FullName} هو إبن عمّة ${person2FullName}.`);\n                  return `${translatedName1} هو إبن عمّة ${translatedName2}`;\n                }\n              } else {\n                if (p2AncestorGender === 'Male') {\n                  // ولد خاله\n                  console.log(`${person1FullName} هو إبن خال ${person2FullName}.`);\n                  return `${translatedName1} هو إبن خال ${translatedName2}'`;\n                } else {\n                  // ولد خالته\n                  console.log(`${person1FullName} هو إبن خالة ${person2FullName}.`);\n                  return `${translatedName1} هو إبن خالة ${translatedName2}`;\n                }\n              }\n            } else {\n              if (p1AncestorGender === 'Male') {\n                if (p2AncestorGender === 'Male') {\n                  // بنت عمه\n                  console.log(`${person1FullName} هي إبنة عمّ ${person2FullName}.`);\n                  return `${translatedName1} هي إبنة عمّ ${translatedName2}`;\n                } else {\n                  // بنت عمته\n                  console.log(`${person1FullName} هي إبنة عمّة ${person2FullName}.`);\n                  return `${translatedName1} هي إبنة عمّة ${translatedName2}`;\n                }\n              } else {\n                if (p2AncestorGender === 'Male') {\n                  // بنت خاله\n                  console.log(`${person1FullName} هي إبنة خال ${person2FullName}.`);\n                  return `${translatedName1} هي إبنة خال ${translatedName2}`;\n                } else {\n                  // بنت خالته\n                  console.log(`${person1FullName} هي إبنة خالة ${person2FullName}.`);\n                  return `${translatedName1} هي إبنة خالة ${translatedName2}`;\n                }\n              }\n            }\n          } else if (p1Level === 2 && p2Level === 3) {\n            const p1AncestorFullName = getAncestorFullName(person1Ancestors, 1);\n            const p1AncestorGender = await getGender(p1AncestorFullName);\n            const p2AncestorFullName = getAncestorFullName(person2Ancestors, 1);\n            const p2AncestorGender = await getGender(p2AncestorFullName);\n            if (gender1 === 'Male') {\n              if (p1AncestorGender === 'Male') {\n                // father's side\n                if (p2AncestorGender === 'Male') {\n                  // father's brother's son\n                  console.log(`${person1FullName} هو إبن عم والد ${person2FullName}.`);\n                  return `${translatedName1} هو إبن عم والد ${translatedName2}`;\n                } else {\n                  console.log(`${person1FullName} هو إبن عمة والد ${person2FullName}.`);\n                  return `${translatedName1} هو إبن همة والد ${translatedName2}`;\n                }\n              } else {\n                // mother's side\n                if (p2AncestorGender === 'Male') {\n                  // mother's brother's son\n                  console.log(`${person1FullName} هو إبن عم أم ${person2FullName}.`);\n                  return `${translatedName1} هو إبن عم أم ${translatedName2}.`;\n                } else {\n                  // mother's brother's daughter\n                  console.log(`${person1FullName} هو إبن عمّة أم ${person2FullName}.`);\n                  return `${translatedName1} هو إبن عمّة أم ${translatedName2}`;\n                }\n              }\n            } else {\n              // If person1 is female\n\n              if (p1AncestorGender === 'Male') {\n                // father's side\n                if (p2AncestorGender === 'Male') {\n                  // father's brother's son\n                  console.log(`${person1FullName} هي إبنة عم والد ${person2FullName}.`);\n                  return `${translatedName1} هي إبنة عم والد ${translatedName2}`;\n                } else {\n                  // father's brother's daughter\n                  console.log(`${person1FullName} هي إبنة عمة والد ${person2FullName}.`);\n                  return `${translatedName1} هي إبنة عمة والد ${translatedName2}`;\n                }\n              } else {\n                // mother's side\n                if (p2AncestorGender === 'Male') {\n                  // mother's brother's son\n                  console.log(`${person1FullName} هي إبنة عم والدة ${person2FullName}.`);\n                  return `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\n                } else {\n                  // mother's brother's daughter\n                  console.log(`${person1FullName} هي إبنة عمة والدة ${person2FullName}.`);\n                  return `${translatedName1} هي إبنة عمة والدة ${translatedName2}`;\n                }\n              }\n            }\n          } else if (p1Level === 3 && p2Level === 2) {\n            const p1AncestorFullName = getAncestorFullName(person1Ancestors, 1);\n            const p1AncestorGender = await getGender(p1AncestorFullName);\n            const p2AncestorFullName = getAncestorFullName(person2Ancestors, 1);\n            const p2AncestorGender = await getGender(p2AncestorFullName);\n            if (p1AncestorGender === 'Male') {\n              // father's side\n              if (p2AncestorGender === 'Male') {\n                // father's brother's son\n                console.log(`والد ${person1FullName} هو إبن عم ${person2FullName}`);\n                return `والد ${translatedName1} هو إبن عم ${translatedName2}`;\n              } else {\n                console.log(`والد ${person1FullName} هو إبن خال ${person2FullName}.`);\n                return `والد ${translatedName1} هو إبن خال ${translatedName2}`;\n              }\n            } else {\n              // mother's side\n              if (p2AncestorGender === 'Male') {\n                // mother's brother's son\n                console.log(`والدة ${person1FullName} هي إبنة عم ${person2FullName}.`);\n                return `والدة ${translatedName1} هي إبنة عم ${translatedName2}`;\n              } else {\n                // mother's brother's daughter\n                console.log(`والدة ${person1FullName} هي إبنة خال ${person2FullName}.`);\n                return `والدة ${translatedName1} هي إبنة خال  ${translatedName2}`;\n              }\n            }\n          }\n\n          // Their father are cousins OR Their Grandfathers/grandmothers are siblings.\n          else if (p1Level === 3 && p2Level === 3) {\n            const p1AncestorFullName = getAncestorFullName(person1Ancestors, 1);\n            const p1AncestorGender = await getGender(p1AncestorFullName);\n            const p1GreatAncestorFullName = getAncestorFullName(person1Ancestors, 2);\n            const p1GreatAncestorGender = await getGender(p1GreatAncestorFullName);\n            const p2AncestorFullName = getAncestorFullName(person2Ancestors, 1);\n            const p2AncestorGender = await getGender(p2AncestorFullName);\n            const p2GreatAncestorFullName = getAncestorFullName(person2Ancestors, 2);\n            const p2GreatAncestorGender = await getGender(p2GreatAncestorFullName);\n            // Ancestor changes paternal/maternal\n            // Great Ancestor changes grandfather/grandmother\n            if (p1AncestorGender === 'Male') {\n              if (p2AncestorGender === 'Male') {\n                if (p1GreatAncestorGender === 'Male') {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`جدّ ${person1FullName} من الأب و جد ${person2FullName} من الأب إخوة.`);\n                    return `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\n                  } else {\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s paternal grandmother are siblings.`);\n                    return `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\n                  }\n                } else {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s paternal grandfather are siblings.`);\n                    return `جدّة ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\n                  } else {\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s paternal grandmother are sisters.`);\n                    return `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\n                  }\n                }\n              } else {\n                if (p1GreatAncestorGender === 'Male') {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s maternal grandfather are brothers.`);\n                    return `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأم إخوة.`;\n                  } else {\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s maternal grandmother are siblings.`);\n                    return `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\n                  }\n                } else {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s maternal grandfather are siblings.`);\n                    return `جدّة ${translatedName1} من الأب و جد${translatedName2} من الأم إخوة.`;\n                  } else {\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s maternal grandmother are sisters.`);\n                    return `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\n                  }\n                }\n              }\n            } else {\n              if (p2AncestorGender === 'Male') {\n                if (p1GreatAncestorGender === 'Male') {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s paternal grandfather are brothers.`);\n                    return `جدّ ${translatedName1} من الأم و جد${translatedName2} من الأب إخوة.`;\n                  } else {\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s paternal grandmother are siblings.`);\n                    return `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\n                  }\n                } else {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s paternal grandfather are siblings.`);\n                    return `جدّة ${translatedName1} من الأم و جد ${translatedName2} من الأب إخوة.`;\n                  } else {\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s paternal grandmother are sisters.`);\n                    return `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب أخوات.`;\n                  }\n                }\n              } else {\n                if (p1GreatAncestorGender === 'Male') {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s maternal grandfather are brothers.`);\n                    return `جدّ ${translatedName1} من الأم و جد ${translatedName2} من الأم إخوة.`;\n                  } else {\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s maternal grandmother are siblings.`);\n                    return `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\n                  }\n                } else {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s maternal grandfather are siblings.`);\n                    return `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\n                  } else {\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s maternal grandmother are sisters.`);\n                    return `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    console.log('No direct relation found.');\n    return 'No direct relation found';\n  } catch (error) {\n    console.error('Error in relationship lookup:', error);\n    return 'Error in relationship lookup';\n  }\n};\nconst getGender = async fullName => {\n  const session = driver.session(); // Open a session\n\n  try {\n    // Split the full name into first and last name\n    const [firstName, lastName] = fullName.split(\" \");\n\n    // Run the query using both first name and last name\n    const result = await session.run(`MATCH (p:Person) WHERE toLower(p.name) = toLower($firstName) AND toLower(p.lastName) = toLower($lastName) RETURN p.gender AS gender`, {\n      firstName,\n      lastName\n    });\n    if (result.records.length > 0) {\n      const gender = result.records[0].get('gender');\n      // console.log(`Gender of ${fullName}: ${gender}`);\n      return gender; // Return the gender value\n    } else {\n      console.log(`No person found with the name ${fullName}`);\n      return null; // Return null when no person is found\n    }\n  } catch (error) {\n    console.error('Error retrieving gender:', error);\n    return null; // Return null in case of an error\n  } finally {\n    await session.close(); // Always close the session after the query\n  }\n};\nconst getAncestorFullName = (personAncestors, level) => {\n  // Check if the ancestor exists at the given level\n  if (!personAncestors[level - 1] || !personAncestors[level - 1].properties) {\n    return `Unknown (Level: ${level})`;\n  }\n  const ancestor = personAncestors[level - 1].properties;\n  const name = ancestor.name || \"Unknown\"; // Default to \"Unknown\" if name is missing\n  const lastName = ancestor.lastName || \"Unknown\"; // Default to \"Unknown\" if lastName is missing\n\n  return `${name} ${lastName}`;\n};\nexport const translateName = (fullName, language = true) => {\n  const nameParts = fullName.split(' ');\n\n  // Build reverse translation map if needed\n  const reverseTranslations = Object.fromEntries(Object.entries(translations).map(([key, value]) => [value, key]));\n  const dict = language ? translations : reverseTranslations;\n  const translatedParts = nameParts.map(part => dict[part] || part);\n  return translatedParts.join(' ');\n};\nconst RelationPage = () => {\n  _s();\n  const [person1, setPerson1] = useState('');\n  const [person2, setPerson2] = useState('');\n  const [relationship, setRelationship] = useState('');\n  const [duplicates, setDuplicates] = useState({\n    person1: [],\n    person2: []\n  });\n  const fetchRelationship = async (name1, name2) => {\n    const relationshipResult = await getRelationship(name1, name2);\n    console.log(relationshipResult);\n    return relationshipResult;\n  };\n  const FetchRelationship = async e => {\n    e.preventDefault();\n    const result = await fetchRelationship(person1, person2);\n    if (result.error === 'non-unique-name') {\n      setDuplicates(result.duplicates);\n      setRelationship(result.message); // optional message\n    } else {\n      setDuplicates({\n        person1: [],\n        person2: []\n      }); // clear if no dups\n      setRelationship(result);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relation-page\",\n    children: [(duplicates.person1.length > 0 || duplicates.person2.length > 0) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dups_list\",\n      children: [duplicates.person1.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \": \\u0623\\u0643\\u062A\\u0628 \\u0627\\u0644\\u0627\\u0633\\u0645 \\u0627\\u0644\\u0643\\u0627\\u0645\\u0644 \\u0644\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0635\\u062D\\u064A\\u062D \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 633,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: duplicates.person1.map((p, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: `${translateName(p.name)} بن ${translateName(p.father)} بن ${translateName(p.grandfather)} ${translateName(p.lastName)}`\n          }, `p1-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), duplicates.person2.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"\\u0627\\u062E\\u062A\\u0631 \\u0627\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0635\\u062D\\u064A\\u062D \\\"\", person2, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: duplicates.person2.map((p, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: `${translateName(p.name)} بن ${translateName(p.father)} بن ${translateName(p.grandfather)} ${translateName(p.lastName)}`\n          }, `p2-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0645\\u0627\\u0647\\u064A \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629 \\u0628\\u064A\\u0646\\u0647\\u0645\\u0627\\u061F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: FetchRelationship,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"name1\",\n          type: \"text\",\n          placeholder: \"\\u0627\\u0644\\u0625\\u0633\\u0645 \\u0627\\u0644\\u0643\\u0627\\u0645\\u0644 \\u0627\\u0644\\u0623\\u0648\\u0644\",\n          value: person1,\n          onChange: e => setPerson1(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"name2\",\n          type: \"text\",\n          placeholder: \"\\u0627\\u0644\\u0625\\u0633\\u0645 \\u0627\\u0644\\u0643\\u0627\\u0645\\u0644 \\u0627\\u0644\\u062B\\u0627\\u0646\\u064A\",\n          value: person2,\n          onChange: e => setPerson2(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"\\u062A\\u062D\\u0642\\u0642 \\u0645\\u0646 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 57\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"relationHolder\",\n        children: relationship\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 660,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 627,\n    columnNumber: 5\n  }, this);\n};\n_s(RelationPage, \"qHAXbttrKxE0kvX0hfwbhsoSWf0=\");\n_c = RelationPage;\nexport default RelationPage;\nvar _c;\n$RefreshReg$(_c, \"RelationPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","neo4j","require","translations","driver","auth","basic","session","getPersonMatches","name","lastName","fatherName","grandfatherName","returnStatement","query","result","run","records","length","map","record","id","get","toNumber","father","grandfather","splitArabicName","fullNameAR","trimmedName","trim","nameParts","split","part","personName","familyName","console","error","getRelationship","person1FullNameAR","person2FullNameAR","person1FullName","translateName","person2FullName","person1Name","person1FatherName","person1GrandfatherName","person1LastName","person2Name","person2FatherName","person2GrandfatherName","person2LastName","log","person1Matches","person2Matches","message","duplicates","person1","person2","person1ID","person2ID","gender1","getGender","gender2","getAncestors","personID","level","maxLevels","person1Ancestors","person2Ancestors","a","join","person1Ids","person2Ids","sharedAncestors","filter","includes","translatedName1","translatedName2","i","j","p1Level","p2Level","p1AncestorFullName","getAncestorFullName","p1AncestorGender","p2AncestorFullName","p2AncestorGender","p1GreatAncestorFullName","p1GreatAncestorGender","p2GreatAncestorFullName","p2GreatAncestorGender","fullName","firstName","gender","close","personAncestors","properties","ancestor","language","reverseTranslations","Object","fromEntries","entries","key","value","dict","translatedParts","RelationPage","_s","setPerson1","setPerson2","relationship","setRelationship","setDuplicates","fetchRelationship","name1","name2","relationshipResult","FetchRelationship","e","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","p","idx","onSubmit","type","placeholder","onChange","target","_c","$RefreshReg$"],"sources":["D:/Study/Projects/El-Kasr Family Tree/client/src/components/RelationChecker.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './RelationChecker.css';\r\nconst neo4j = require('neo4j-driver');\r\nconst translations = require('./translation.json');\r\n\r\n\r\nconst driver = neo4j.driver(\r\n  'neo4j+s://2cd0ce39.databases.neo4j.io',\r\n  neo4j.auth.basic('neo4j', 'nW1azrzTK-lrTOO5G1uOkUVFwelcQlEmKPHggPUB7xQ'));\r\nconst session = driver.session();\r\n\r\n\r\nconst getPersonMatches = async (name, lastName, fatherName = \"\", grandfatherName = \"\") => {\r\n  // Initialize the return statement for the query\r\n  let returnStatement = `RETURN id(p) AS personID, p.name AS personName, p.lastName AS familyName`;\r\n\r\n  // Start building the query to check for the name and last name\r\n  let query = `\r\n    MATCH (p:Person)\r\n    WHERE p.name = $name AND p.lastName = $lastName\r\n    \r\n  `;\r\n  \r\n\r\n  // First case: Check if the name and last name are unique\r\n  let result = await session.run(query+returnStatement, { name, lastName });\r\n\r\n  if (result.records.length === 1) {\r\n    // If unique, return the result\r\n    return result.records.map(record => ({\r\n      id: record.get('personID').toNumber(), \r\n      name: record.get('personName'),\r\n      lastName: record.get('familyName'),\r\n      father: \"Unknown\",\r\n      grandfather: \"Unknown\"\r\n    }));\r\n  }\r\n\r\n  // If not unique, we proceed to check for the father and/or grandfather relationships\r\n\r\n  // Add father name condition if provided\r\n  if (fatherName) {\r\n    query += ` \r\n      OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(p)\r\n      WHERE father.name = $fatherName\r\n    `;\r\n    returnStatement += `, father.name AS fatherName`;\r\n  }\r\n\r\n  // Add grandfather name condition if provided\r\n  if (grandfatherName) {\r\n    query += `\r\n      OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n      WHERE grandfather.name = $grandfatherName\r\n    `;\r\n    returnStatement += `, grandfather.name AS grandfatherName`;\r\n  }\r\n\r\n  // Finalize the query with the return statement\r\n  query += returnStatement;\r\n\r\n  // Run the query again after adding father/grandfather checks\r\n  result = await session.run(query, { name, lastName, fatherName, grandfatherName });\r\n\r\n  // Return the mapped results with the ID, father, and grandfather names\r\n  return result.records.map(record => ({\r\n    id: record.get('personID').toNumber(),\r\n    name: record.get('personName'),\r\n    lastName: record.get('familyName'),\r\n    father: record.get('fatherName') || \"Unknown\",\r\n    grandfather: record.get('grandfatherName') || \"Unknown\"\r\n  }));\r\n};\r\n\r\nconst splitArabicName = (fullNameAR) => {\r\n  const trimmedName = fullNameAR.trim();\r\n  \r\n  const nameParts = trimmedName.split('بن').map(part => part.trim());\r\n\r\n  let personName = \"\";\r\n  let fatherName = \"\";\r\n  let grandfatherName = \"\";\r\n  let familyName = \"\";\r\n\r\n  switch (nameParts.length) {\r\n    case 2:\r\n      [personName, familyName] = nameParts;\r\n      break;\r\n    case 3:\r\n      [personName, fatherName, familyName] = nameParts;\r\n      break;\r\n    case 4:\r\n      [personName, fatherName, grandfatherName] = nameParts;\r\n      break;\r\n    case 5:\r\n      [personName, fatherName, grandfatherName, familyName] = nameParts;\r\n      break;\r\n    default:\r\n      console.error(\"Invalid name format.\");\r\n      break;\r\n  }\r\n  return { personName, fatherName, grandfatherName, familyName };\r\n};\r\n\r\nconst getRelationship = async (person1FullNameAR, person2FullNameAR) => {\r\n  const person1FullName = translateName(person1FullNameAR, false);\r\n  const person2FullName = translateName(person2FullNameAR, false);\r\n\r\n  const { personName: person1Name, fatherName: person1FatherName, grandfatherName: person1GrandfatherName, familyName: person1LastName } = splitArabicName(person1FullNameAR);\r\n  const { personName: person2Name, fatherName: person2FatherName, grandfatherName: person2GrandfatherName, familyName: person2LastName } = splitArabicName(person2FullNameAR);\r\n  console.log(\"LOG: \" , person1Name, person1LastName, person1FatherName, person1GrandfatherName)\r\n\r\n  const person1Matches = await getPersonMatches(person1Name, person1LastName, person1FatherName, person1GrandfatherName);\r\n  const person2Matches = await getPersonMatches(person2Name, person2LastName, person2FatherName, person2GrandfatherName);\r\n\r\n  console.log(person1Matches);\r\n\r\n  if (person1Matches.length > 1 || person2Matches.length > 1) {\r\n    return {\r\n      error: 'non-unique-name',\r\n      message: 'تم العثور على عدة أشخاص بنفس الاسم. الرجاء اختيار الصحيح.',\r\n      duplicates: {\r\n        person1: person1Matches.length > 1 ? person1Matches : [],\r\n        person2: person2Matches.length > 1 ? person2Matches : []\r\n      }\r\n    };\r\n  }\r\n  else{\r\n    person1ID = person1Matches[0].id;\r\n    person2ID = person2Matches[0].id;\r\n  }\r\n\r\n  const gender1 = await getGender(person1FullName);\r\n  const gender2 = await getGender(person2FullName);\r\n  try {\r\n    console.log(`Looking up relationship between: ${person1FullName} and ${person2FullName}`);\r\n\r\n    const getAncestors = async (personID) => {\r\n      const result = await session.run(`\r\n        MATCH path = (ancestor:Person)-[:FATHER_OF|MOTHER_OF*]->(child:Person {name: $personName, lastName: $personLastName})\r\n        WITH ancestor, id(ancestor) AS ID, length(path) AS level\r\n        RETURN DISTINCT ID, ancestor.name AS name, ancestor.lastName AS lastName, level\r\n        ORDER BY level ASC\r\n      `, {\r\n        personID\r\n      });\r\n    \r\n      return result.records.map(record => ({\r\n        id: record.get('ID').toNumber(),\r\n        name: record.get('name'),\r\n        lastName: record.get('lastName'),\r\n        level: record.get('level').toNumber()\r\n      }));\r\n    };\r\n\r\n    // Get the ancestors for both persons\r\n    const maxLevels = 4; \r\n    let person1Ancestors = await getAncestors(person1ID);\r\n    let person2Ancestors = await getAncestors(person2ID);\r\n    \r\n    console.log(`Person 1 Ancestors: ${person1Ancestors.map(a => a.name).join(' ben ')}`);\r\n    console.log(`Person 2 Ancestors: ${person2Ancestors.map(a => a.name).join(' ben ')}`);\r\n\r\n    const person1Ids = person1Ancestors.map(a => a.id);\r\n    const person2Ids = person2Ancestors.map(a => a.id);\r\n\r\n    const sharedAncestors = person1Ancestors.filter(a => person2Ids.includes(a.id));\r\n\r\n    const translatedName1 = translateName(person1FullName);\r\n    const translatedName2 = translateName(person2FullName);\r\n\r\n    // Check for common ancestors between the two persons\r\n    for (let i = 0; i < person1Ancestors.length; i++) {\r\n      for (let j = 0; j < person2Ancestors.length; j++) {\r\n        if (person1Ancestors[i].id === person2Ancestors[j].id) {\r\n          var p1Level = person1Ancestors[i].level;\r\n          var p2Level = person2Ancestors[j].level;\r\n          \r\n          console.log(`Level: (${p1Level}, ${p2Level})`);\r\n\r\n          if (p1Level === 0 && p2Level === 1) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${translatedName1} هو والد ${translatedName2}`);\r\n              return `${translatedName1} هو والد ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${translatedName1} هي والدة ${translatedName2}`);\r\n              return `${translatedName1} هي والدة ${translatedName2}`;\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 1 && p2Level === 0) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${translatedName1} هو ابن ${translatedName2}`);\r\n              return `${translatedName1} هو ابن ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${translatedName1} هي إبنة ${person2FullName}`);\r\n              return `${translatedName1} هي إبنة ${translatedName2}`;\r\n            }\r\n          } \r\n\r\n          else if (p1Level === 2 && p2Level === 0) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${person1FullName} هو حفيد ${person2FullName}`);\r\n              return `${translatedName1} هو حفيد ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} هي حفيدة ${person2FullName}.`);\r\n              return `${translatedName1} هي حفيدة ${translatedName2}`;\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 0 && p2Level === 2) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${person1FullName} هو جدّ ${person2FullName}'.`);\r\n              return `${translatedName1} هو جدّ ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} هي جدّة ${person2FullName}.`);\r\n              return `${translatedName1} هي جدّة ${translatedName2}`;\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 3 && p2Level === 0) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${person1FullName} هو إبن حفيد ${person2FullName}.`);\r\n              return `${translatedName1} هو إبن حفيد ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} هي إبنة حفيدة ${person2FullName}.`);\r\n              return `${translatedName1} هي إبنة حفيدة ${translatedName2}`;\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 0 && p2Level === 3) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${person1FullName} هو جد والد ${person2FullName}`);\r\n              return `${translatedName1} و جد والد ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName}هي جدة والدة ${person2FullName}`);\r\n              return `${translatedName1} هي جدة والدة ${translatedName2}`;\r\n            }\r\n          } \r\n          \r\n          else if (p1Level === 1 && p2Level === 1) {\r\n            if (gender1 === 'Male' && gender2 === 'Male'){\r\n              console.log(`${person1FullName} و ${person2FullName} إخوة.`);\r\n              return `${translatedName1} و ${translatedName2} إخوة`;\r\n            }\r\n            else if (gender1 === 'Female' && gender2 === 'Female'){\r\n              console.log(`${person1FullName} و ${person2FullName} أخوات.`);\r\n              return `${translatedName1} و ${translatedName2} أخوات`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} و ${person2FullName} إخوة.`);\r\n              return `${translatedName1} و ${translatedName2} إخوة`;\r\n            }\r\n          } \r\n          \r\n          else if (p1Level === 2 && p2Level === 1) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${translatedName1} هو ابن أخ ${translatedName2}`);\r\n              return `${translatedName1} هو ابن أخ ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} هي إبنة أخ ${person2FullName}.`);\r\n              return `${translatedName1} هي إبن أخ ${translatedName2}`;\r\n            }\r\n          } \r\n          \r\n          else if (p1Level === 1 && p2Level === 2) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${person1FullName} هو عم ${person2FullName}.`);\r\n              return `${translatedName1} هو عم ${translatedName2}'`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} هي عمّة ${person2FullName}.`);\r\n              return `${translatedName1} هي عمّة ${translatedName2}`;\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 2 && p2Level === 2) {\r\n            console.log(`${person1FullName} و ${person2FullName} أولاد العم.`);\r\n          \r\n            const p1AncestorFullName = getAncestorFullName(person1Ancestors, 1);\r\n            const p1AncestorGender = await getGender(p1AncestorFullName);\r\n\r\n            const p2AncestorFullName = getAncestorFullName(person2Ancestors, 1);\r\n            const p2AncestorGender = await getGender(p2AncestorFullName);\r\n            console.log(p1AncestorFullName);\r\n\r\n            if (gender1 === 'Male') { \r\n              if (p1AncestorGender === 'Male') { \r\n                if (p2AncestorGender === 'Male'){  // ولد عمه\r\n                  console.log(`${person1FullName} هو إبن عم ${person2FullName}.`);\r\n                  return `${translatedName1} إبن عم ${translatedName2}`;\r\n                }\r\n                else{ // ولد عمته\r\n                  console.log(`${person1FullName} هو إبن عمّة ${person2FullName}.`);\r\n                  return `${translatedName1} هو إبن عمّة ${translatedName2}`;\r\n                }\r\n              } \r\n              else {  \r\n                if (p2AncestorGender === 'Male'){  // ولد خاله\r\n                  console.log(`${person1FullName} هو إبن خال ${person2FullName}.`);\r\n                  return `${translatedName1} هو إبن خال ${translatedName2}'`;\r\n                }\r\n                else{ // ولد خالته\r\n                  console.log(`${person1FullName} هو إبن خالة ${person2FullName}.`);\r\n                  return `${translatedName1} هو إبن خالة ${translatedName2}`;\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (p1AncestorGender === 'Male') { \r\n                if (p2AncestorGender === 'Male'){  // بنت عمه\r\n                  console.log(`${person1FullName} هي إبنة عمّ ${person2FullName}.`);\r\n                  return `${translatedName1} هي إبنة عمّ ${translatedName2}`;\r\n                }\r\n                else{ // بنت عمته\r\n                  console.log(`${person1FullName} هي إبنة عمّة ${person2FullName}.`);\r\n                  return `${translatedName1} هي إبنة عمّة ${translatedName2}`;\r\n                }\r\n              } \r\n              else {  \r\n                if (p2AncestorGender === 'Male'){  // بنت خاله\r\n                  console.log(`${person1FullName} هي إبنة خال ${person2FullName}.`);\r\n                  return `${translatedName1} هي إبنة خال ${translatedName2}`;\r\n                }\r\n                else{ // بنت خالته\r\n                  console.log(`${person1FullName} هي إبنة خالة ${person2FullName}.`);\r\n                  return `${translatedName1} هي إبنة خالة ${translatedName2}`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 2 && p2Level === 3) {          \r\n            const p1AncestorFullName = getAncestorFullName(person1Ancestors, 1);\r\n            const p1AncestorGender = await getGender(p1AncestorFullName);\r\n\r\n            const p2AncestorFullName = getAncestorFullName(person2Ancestors, 1);\r\n            const p2AncestorGender = await getGender(p2AncestorFullName);\r\n\r\n            if (gender1 === 'Male') { \r\n              \r\n              if (p1AncestorGender === 'Male') {  // father's side\r\n                if (p2AncestorGender === 'Male') {  // father's brother's son\r\n                  console.log(`${person1FullName} هو إبن عم والد ${person2FullName}.`);\r\n                  return `${translatedName1} هو إبن عم والد ${translatedName2}`;\r\n                } else { \r\n                  console.log(`${person1FullName} هو إبن عمة والد ${person2FullName}.`);\r\n                  return `${translatedName1} هو إبن همة والد ${translatedName2}`;\r\n                }\r\n              } else {  // mother's side\r\n                if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                  console.log(`${person1FullName} هو إبن عم أم ${person2FullName}.`);\r\n                  return `${translatedName1} هو إبن عم أم ${translatedName2}.`;\r\n                } else {  // mother's brother's daughter\r\n                  console.log(`${person1FullName} هو إبن عمّة أم ${person2FullName}.`);\r\n                  return `${translatedName1} هو إبن عمّة أم ${translatedName2}`;\r\n                }\r\n              }\r\n            } else {  // If person1 is female\r\n            \r\n              if (p1AncestorGender === 'Male') {  // father's side\r\n                if (p2AncestorGender === 'Male') {  // father's brother's son\r\n                  console.log(`${person1FullName} هي إبنة عم والد ${person2FullName}.`);\r\n                  return `${translatedName1} هي إبنة عم والد ${translatedName2}`;\r\n                } else {  // father's brother's daughter\r\n                  console.log(`${person1FullName} هي إبنة عمة والد ${person2FullName}.`);\r\n                  return `${translatedName1} هي إبنة عمة والد ${translatedName2}`;\r\n                }\r\n              } else {  // mother's side\r\n                if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                  console.log(`${person1FullName} هي إبنة عم والدة ${person2FullName}.`);\r\n                  return `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\r\n                } else {  // mother's brother's daughter\r\n                  console.log(`${person1FullName} هي إبنة عمة والدة ${person2FullName}.`);\r\n                  return `${translatedName1} هي إبنة عمة والدة ${translatedName2}`;\r\n                }\r\n              }\r\n            }\r\n            \r\n          }\r\n          \r\n          else if (p1Level === 3 && p2Level === 2) {          \r\n            const p1AncestorFullName = getAncestorFullName(person1Ancestors, 1);\r\n            const p1AncestorGender = await getGender(p1AncestorFullName);\r\n\r\n            const p2AncestorFullName = getAncestorFullName(person2Ancestors, 1);\r\n            const p2AncestorGender = await getGender(p2AncestorFullName);\r\n\r\n            if (p1AncestorGender === 'Male') {  // father's side\r\n              if (p2AncestorGender === 'Male') {  // father's brother's son\r\n                console.log(`والد ${person1FullName} هو إبن عم ${person2FullName}`);\r\n                return `والد ${translatedName1} هو إبن عم ${translatedName2}`;\r\n              } else { \r\n                console.log(`والد ${person1FullName} هو إبن خال ${person2FullName}.`);\r\n                return `والد ${translatedName1} هو إبن خال ${translatedName2}`;\r\n              }\r\n            } \r\n            else {  // mother's side\r\n              if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                console.log(`والدة ${person1FullName} هي إبنة عم ${person2FullName}.`);\r\n                return `والدة ${translatedName1} هي إبنة عم ${translatedName2}`;\r\n              } else {  // mother's brother's daughter\r\n                console.log(`والدة ${person1FullName} هي إبنة خال ${person2FullName}.`);\r\n                return `والدة ${translatedName1} هي إبنة خال  ${translatedName2}`;\r\n              }\r\n            }\r\n            \r\n            \r\n          }\r\n\r\n          // Their father are cousins OR Their Grandfathers/grandmothers are siblings.\r\n          else if (p1Level === 3 && p2Level === 3) {          \r\n            \r\n            const p1AncestorFullName = getAncestorFullName(person1Ancestors, 1);\r\n            const p1AncestorGender = await getGender(p1AncestorFullName);\r\n\r\n            const p1GreatAncestorFullName = getAncestorFullName(person1Ancestors, 2);\r\n            const p1GreatAncestorGender = await getGender(p1GreatAncestorFullName);\r\n\r\n            const p2AncestorFullName = getAncestorFullName(person2Ancestors, 1);\r\n            const p2AncestorGender = await getGender(p2AncestorFullName);\r\n\r\n            const p2GreatAncestorFullName = getAncestorFullName(person2Ancestors, 2);\r\n            const p2GreatAncestorGender = await getGender(p2GreatAncestorFullName);\r\n            // Ancestor changes paternal/maternal\r\n            // Great Ancestor changes grandfather/grandmother\r\n            if (p1AncestorGender === 'Male') { \r\n              if (p2AncestorGender === 'Male'){\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`جدّ ${person1FullName} من الأب و جد ${person2FullName} من الأب إخوة.`);\r\n                    return `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s paternal grandmother are siblings.`);\r\n                    return `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s paternal grandfather are siblings.`);\r\n                    return `جدّة ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s paternal grandmother are sisters.`);\r\n                    return `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                }\r\n              }\r\n              else {\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s maternal grandfather are brothers.`);\r\n                    return `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s maternal grandmother are siblings.`);\r\n                    return `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s maternal grandfather are siblings.`);\r\n                    return `جدّة ${translatedName1} من الأب و جد${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s maternal grandmother are sisters.`);\r\n                    return `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (p2AncestorGender === 'Male'){\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s paternal grandfather are brothers.`);\r\n                    return `جدّ ${translatedName1} من الأم و جد${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s paternal grandmother are siblings.`);\r\n                    return `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s paternal grandfather are siblings.`);\r\n                    return `جدّة ${translatedName1} من الأم و جد ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s paternal grandmother are sisters.`);\r\n                    return `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب أخوات.`;\r\n                  }\r\n                }\r\n              }\r\n              else {\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s maternal grandfather are brothers.`);\r\n                    return `جدّ ${translatedName1} من الأم و جد ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s maternal grandmother are siblings.`);\r\n                    return `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s maternal grandfather are siblings.`);\r\n                    return `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s maternal grandmother are sisters.`);\r\n                    return `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            \r\n          }\r\n\r\n\r\n        }\r\n      }\r\n    }\r\n    console.log('No direct relation found.');\r\n    return 'No direct relation found';\r\n  } catch (error) {\r\n    console.error('Error in relationship lookup:', error);\r\n    return 'Error in relationship lookup';\r\n  }\r\n};\r\n\r\nconst getGender = async (fullName) => {\r\n  const session = driver.session(); // Open a session\r\n\r\n  try {\r\n    // Split the full name into first and last name\r\n    const [firstName, lastName] = fullName.split(\" \");\r\n\r\n    // Run the query using both first name and last name\r\n    const result = await session.run(\r\n      `MATCH (p:Person) WHERE toLower(p.name) = toLower($firstName) AND toLower(p.lastName) = toLower($lastName) RETURN p.gender AS gender`,\r\n      { firstName, lastName }\r\n    );\r\n    \r\n    if (result.records.length > 0) {\r\n      const gender = result.records[0].get('gender');\r\n      // console.log(`Gender of ${fullName}: ${gender}`);\r\n      return gender; // Return the gender value\r\n    } else {\r\n      console.log(`No person found with the name ${fullName}`);\r\n      return null; // Return null when no person is found\r\n    }\r\n  } catch (error) {\r\n    console.error('Error retrieving gender:', error);\r\n    return null; // Return null in case of an error\r\n  } finally {\r\n    await session.close(); // Always close the session after the query\r\n  }\r\n};\r\n\r\nconst getAncestorFullName = (personAncestors, level) => {\r\n  // Check if the ancestor exists at the given level\r\n  if (!personAncestors[level - 1] || !personAncestors[level - 1].properties) {\r\n    return `Unknown (Level: ${level})`;\r\n  }\r\n\r\n  const ancestor = personAncestors[level - 1].properties;\r\n  const name = ancestor.name || \"Unknown\"; // Default to \"Unknown\" if name is missing\r\n  const lastName = ancestor.lastName || \"Unknown\"; // Default to \"Unknown\" if lastName is missing\r\n\r\n  return `${name} ${lastName}`;\r\n};\r\n\r\nexport const translateName = (fullName, language = true) => {\r\n  const nameParts = fullName.split(' ');\r\n\r\n  // Build reverse translation map if needed\r\n  const reverseTranslations = Object.fromEntries(\r\n    Object.entries(translations).map(([key, value]) => [value, key])\r\n  );\r\n\r\n  const dict = language ? translations : reverseTranslations;\r\n\r\n  const translatedParts = nameParts.map(part => dict[part] || part);\r\n\r\n  return translatedParts.join(' ');\r\n};\r\n\r\n\r\nconst RelationPage = () => {\r\n  const [person1, setPerson1] = useState('');\r\n  const [person2, setPerson2] = useState('');\r\n  const [relationship, setRelationship] = useState('');\r\n  const [duplicates, setDuplicates] = useState({ person1: [], person2: [] });\r\n\r\n  const fetchRelationship = async (name1, name2) => {\r\n    \r\n    const relationshipResult = await getRelationship(name1, name2);\r\n    console.log(relationshipResult);\r\n    return relationshipResult;\r\n  };\r\n\r\n  const FetchRelationship = async (e) => {\r\n    e.preventDefault();\r\n  \r\n    const result = await fetchRelationship(person1, person2);\r\n  \r\n    if (result.error === 'non-unique-name') {\r\n      setDuplicates(result.duplicates);\r\n      setRelationship(result.message); // optional message\r\n    } else {\r\n      setDuplicates({ person1: [], person2: [] }); // clear if no dups\r\n      setRelationship(result);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"relation-page\">\r\n      {/* Left-side: Duplicates List */}\r\n      {(duplicates.person1.length > 0 || duplicates.person2.length > 0) && (\r\n        <div className=\"dups_list\">\r\n          {duplicates.person1.length > 0 && (\r\n            <>\r\n              <h3>: أكتب الاسم الكامل للشخص الصحيح </h3>\r\n              <ul>\r\n                {duplicates.person1.map((p, idx) => (\r\n                  <li key={`p1-${idx}`}>\r\n                    {`${translateName(p.name)} بن ${translateName(p.father)} بن ${translateName(p.grandfather)} ${translateName(p.lastName)}`}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </>\r\n          )}\r\n  \r\n          {duplicates.person2.length > 0 && (\r\n            <>\r\n              <h3>اختر الشخص الصحيح \"{person2}\"</h3>\r\n              <ul>\r\n                {duplicates.person2.map((p, idx) => (\r\n                  <li key={`p2-${idx}`}>\r\n                    {`${translateName(p.name)} بن ${translateName(p.father)} بن ${translateName(p.grandfather)} ${translateName(p.lastName)}`}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n  \r\n      {/* Right-side: Main content */}\r\n      <div className=\"main-content\">\r\n        <h2>ماهي العلاقة بينهما؟</h2>\r\n        <form onSubmit={FetchRelationship}>\r\n          <input\r\n            id=\"name1\"\r\n            type=\"text\"\r\n            placeholder=\"الإسم الكامل الأول\"\r\n            value={person1}\r\n            onChange={(e) => setPerson1(e.target.value)}\r\n          />\r\n          <input\r\n            id=\"name2\"\r\n            type=\"text\"\r\n            placeholder=\"الإسم الكامل الثاني\"\r\n            value={person2}\r\n            onChange={(e) => setPerson2(e.target.value)}\r\n          />\r\n          <button type=\"submit\">تحقق من العلاقة</button><br />\r\n        </form>\r\n  \r\n        <p id=\"relationHolder\">{relationship}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RelationPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}