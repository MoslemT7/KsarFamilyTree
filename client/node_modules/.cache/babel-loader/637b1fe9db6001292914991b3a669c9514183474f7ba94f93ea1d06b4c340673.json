{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.floorMod = exports.floorDiv = exports.assertValidZoneId = exports.assertValidNanosecond = exports.assertValidSecond = exports.assertValidMinute = exports.assertValidHour = exports.assertValidDay = exports.assertValidMonth = exports.assertValidYear = exports.timeZoneOffsetInSeconds = exports.totalNanoseconds = exports.newDate = exports.toStandardDate = exports.isoStringToStandardDate = exports.dateToIsoString = exports.timeZoneOffsetToIsoString = exports.timeToIsoString = exports.durationToIsoString = exports.dateToEpochDay = exports.localDateTimeToEpochSecond = exports.localTimeToNanoOfDay = exports.normalizeNanosecondsForDuration = exports.normalizeSecondsForDuration = exports.SECONDS_PER_DAY = exports.DAYS_PER_400_YEAR_CYCLE = exports.DAYS_0000_TO_1970 = exports.NANOS_PER_HOUR = exports.NANOS_PER_MINUTE = exports.NANOS_PER_MILLISECOND = exports.NANOS_PER_SECOND = exports.SECONDS_PER_HOUR = exports.SECONDS_PER_MINUTE = exports.MINUTES_PER_HOUR = exports.NANOSECOND_OF_SECOND_RANGE = exports.SECOND_OF_MINUTE_RANGE = exports.MINUTE_OF_HOUR_RANGE = exports.HOUR_OF_DAY_RANGE = exports.DAY_OF_MONTH_RANGE = exports.MONTH_OF_YEAR_RANGE = exports.YEAR_RANGE = void 0;\nvar integer_1 = __importStar(require(\"../integer\"));\nvar error_1 = require(\"../error\");\nvar util_1 = require(\"./util\");\n/*\n  Code in this util should be compatible with code in the database that uses JSR-310 java.time APIs.\n\n  It is based on a library called ThreeTen (https://github.com/ThreeTen/threetenbp) which was derived\n  from JSR-310 reference implementation previously hosted on GitHub. Code uses `Integer` type everywhere\n  to correctly handle large integer values that are greater than `Number.MAX_SAFE_INTEGER`.\n\n  Please consult either ThreeTen or js-joda (https://github.com/js-joda/js-joda) when working with the\n  conversion functions.\n */\nvar ValueRange = /** @class */function () {\n  function ValueRange(min, max) {\n    this._minNumber = min;\n    this._maxNumber = max;\n    this._minInteger = (0, integer_1.int)(min);\n    this._maxInteger = (0, integer_1.int)(max);\n  }\n  ValueRange.prototype.contains = function (value) {\n    if ((0, integer_1.isInt)(value) && value instanceof integer_1.default) {\n      return value.greaterThanOrEqual(this._minInteger) && value.lessThanOrEqual(this._maxInteger);\n    } else if (typeof value === 'bigint') {\n      var intValue = (0, integer_1.int)(value);\n      return intValue.greaterThanOrEqual(this._minInteger) && intValue.lessThanOrEqual(this._maxInteger);\n    } else {\n      return value >= this._minNumber && value <= this._maxNumber;\n    }\n  };\n  ValueRange.prototype.toString = function () {\n    return \"[\".concat(this._minNumber, \", \").concat(this._maxNumber, \"]\");\n  };\n  return ValueRange;\n}();\nexports.YEAR_RANGE = new ValueRange(-999999999, 999999999);\nexports.MONTH_OF_YEAR_RANGE = new ValueRange(1, 12);\nexports.DAY_OF_MONTH_RANGE = new ValueRange(1, 31);\nexports.HOUR_OF_DAY_RANGE = new ValueRange(0, 23);\nexports.MINUTE_OF_HOUR_RANGE = new ValueRange(0, 59);\nexports.SECOND_OF_MINUTE_RANGE = new ValueRange(0, 59);\nexports.NANOSECOND_OF_SECOND_RANGE = new ValueRange(0, 999999999);\nexports.MINUTES_PER_HOUR = 60;\nexports.SECONDS_PER_MINUTE = 60;\nexports.SECONDS_PER_HOUR = exports.SECONDS_PER_MINUTE * exports.MINUTES_PER_HOUR;\nexports.NANOS_PER_SECOND = 1000000000;\nexports.NANOS_PER_MILLISECOND = 1000000;\nexports.NANOS_PER_MINUTE = exports.NANOS_PER_SECOND * exports.SECONDS_PER_MINUTE;\nexports.NANOS_PER_HOUR = exports.NANOS_PER_MINUTE * exports.MINUTES_PER_HOUR;\nexports.DAYS_0000_TO_1970 = 719528;\nexports.DAYS_PER_400_YEAR_CYCLE = 146097;\nexports.SECONDS_PER_DAY = 86400;\nfunction normalizeSecondsForDuration(seconds, nanoseconds) {\n  return (0, integer_1.int)(seconds).add(floorDiv(nanoseconds, exports.NANOS_PER_SECOND));\n}\nexports.normalizeSecondsForDuration = normalizeSecondsForDuration;\nfunction normalizeNanosecondsForDuration(nanoseconds) {\n  return floorMod(nanoseconds, exports.NANOS_PER_SECOND);\n}\nexports.normalizeNanosecondsForDuration = normalizeNanosecondsForDuration;\n/**\n * Converts given local time into a single integer representing this same time in nanoseconds of the day.\n * @param {Integer|number|string} hour the hour of the local time to convert.\n * @param {Integer|number|string} minute the minute of the local time to convert.\n * @param {Integer|number|string} second the second of the local time to convert.\n * @param {Integer|number|string} nanosecond the nanosecond of the local time to convert.\n * @return {Integer} nanoseconds representing the given local time.\n */\nfunction localTimeToNanoOfDay(hour, minute, second, nanosecond) {\n  hour = (0, integer_1.int)(hour);\n  minute = (0, integer_1.int)(minute);\n  second = (0, integer_1.int)(second);\n  nanosecond = (0, integer_1.int)(nanosecond);\n  var totalNanos = hour.multiply(exports.NANOS_PER_HOUR);\n  totalNanos = totalNanos.add(minute.multiply(exports.NANOS_PER_MINUTE));\n  totalNanos = totalNanos.add(second.multiply(exports.NANOS_PER_SECOND));\n  return totalNanos.add(nanosecond);\n}\nexports.localTimeToNanoOfDay = localTimeToNanoOfDay;\n/**\n * Converts given local date time into a single integer representing this same time in epoch seconds UTC.\n * @param {Integer|number|string} year the year of the local date-time to convert.\n * @param {Integer|number|string} month the month of the local date-time to convert.\n * @param {Integer|number|string} day the day of the local date-time to convert.\n * @param {Integer|number|string} hour the hour of the local date-time to convert.\n * @param {Integer|number|string} minute the minute of the local date-time to convert.\n * @param {Integer|number|string} second the second of the local date-time to convert.\n * @param {Integer|number|string} nanosecond the nanosecond of the local date-time to convert.\n * @return {Integer} epoch second in UTC representing the given local date time.\n */\nfunction localDateTimeToEpochSecond(year, month, day, hour, minute, second, nanosecond) {\n  var epochDay = dateToEpochDay(year, month, day);\n  var localTimeSeconds = localTimeToSecondOfDay(hour, minute, second);\n  return epochDay.multiply(exports.SECONDS_PER_DAY).add(localTimeSeconds);\n}\nexports.localDateTimeToEpochSecond = localDateTimeToEpochSecond;\n/**\n * Converts given local date into a single integer representing it's epoch day.\n * @param {Integer|number|string} year the year of the local date to convert.\n * @param {Integer|number|string} month the month of the local date to convert.\n * @param {Integer|number|string} day the day of the local date to convert.\n * @return {Integer} epoch day representing the given date.\n */\nfunction dateToEpochDay(year, month, day) {\n  year = (0, integer_1.int)(year);\n  month = (0, integer_1.int)(month);\n  day = (0, integer_1.int)(day);\n  var epochDay = year.multiply(365);\n  if (year.greaterThanOrEqual(0)) {\n    epochDay = epochDay.add(year.add(3).div(4).subtract(year.add(99).div(100)).add(year.add(399).div(400)));\n  } else {\n    epochDay = epochDay.subtract(year.div(-4).subtract(year.div(-100)).add(year.div(-400)));\n  }\n  epochDay = epochDay.add(month.multiply(367).subtract(362).div(12));\n  epochDay = epochDay.add(day.subtract(1));\n  if (month.greaterThan(2)) {\n    epochDay = epochDay.subtract(1);\n    if (!isLeapYear(year)) {\n      epochDay = epochDay.subtract(1);\n    }\n  }\n  return epochDay.subtract(exports.DAYS_0000_TO_1970);\n}\nexports.dateToEpochDay = dateToEpochDay;\n/**\n * Format given duration to an ISO 8601 string.\n * @param {Integer|number|string} months the number of months.\n * @param {Integer|number|string} days the number of days.\n * @param {Integer|number|string} seconds the number of seconds.\n * @param {Integer|number|string} nanoseconds the number of nanoseconds.\n * @return {string} ISO string that represents given duration.\n */\nfunction durationToIsoString(months, days, seconds, nanoseconds) {\n  var monthsString = formatNumber(months);\n  var daysString = formatNumber(days);\n  var secondsAndNanosecondsString = formatSecondsAndNanosecondsForDuration(seconds, nanoseconds);\n  return \"P\".concat(monthsString, \"M\").concat(daysString, \"DT\").concat(secondsAndNanosecondsString, \"S\");\n}\nexports.durationToIsoString = durationToIsoString;\n/**\n * Formats given time to an ISO 8601 string.\n * @param {Integer|number|string} hour the hour value.\n * @param {Integer|number|string} minute the minute value.\n * @param {Integer|number|string} second the second value.\n * @param {Integer|number|string} nanosecond the nanosecond value.\n * @return {string} ISO string that represents given time.\n */\nfunction timeToIsoString(hour, minute, second, nanosecond) {\n  var hourString = formatNumber(hour, 2);\n  var minuteString = formatNumber(minute, 2);\n  var secondString = formatNumber(second, 2);\n  var nanosecondString = formatNanosecond(nanosecond);\n  return \"\".concat(hourString, \":\").concat(minuteString, \":\").concat(secondString).concat(nanosecondString);\n}\nexports.timeToIsoString = timeToIsoString;\n/**\n * Formats given time zone offset in seconds to string representation like '±HH:MM', '±HH:MM:SS' or 'Z' for UTC.\n * @param {Integer|number|string} offsetSeconds the offset in seconds.\n * @return {string} ISO string that represents given offset.\n */\nfunction timeZoneOffsetToIsoString(offsetSeconds) {\n  offsetSeconds = (0, integer_1.int)(offsetSeconds);\n  if (offsetSeconds.equals(0)) {\n    return 'Z';\n  }\n  var isNegative = offsetSeconds.isNegative();\n  if (isNegative) {\n    offsetSeconds = offsetSeconds.multiply(-1);\n  }\n  var signPrefix = isNegative ? '-' : '+';\n  var hours = formatNumber(offsetSeconds.div(exports.SECONDS_PER_HOUR), 2);\n  var minutes = formatNumber(offsetSeconds.div(exports.SECONDS_PER_MINUTE).modulo(exports.MINUTES_PER_HOUR), 2);\n  var secondsValue = offsetSeconds.modulo(exports.SECONDS_PER_MINUTE);\n  var seconds = secondsValue.equals(0) ? null : formatNumber(secondsValue, 2);\n  return seconds != null ? \"\".concat(signPrefix).concat(hours, \":\").concat(minutes, \":\").concat(seconds) : \"\".concat(signPrefix).concat(hours, \":\").concat(minutes);\n}\nexports.timeZoneOffsetToIsoString = timeZoneOffsetToIsoString;\n/**\n * Formats given date to an ISO 8601 string.\n * @param {Integer|number|string} year the date year.\n * @param {Integer|number|string} month the date month.\n * @param {Integer|number|string} day the date day.\n * @return {string} ISO string that represents given date.\n */\nfunction dateToIsoString(year, month, day) {\n  var yearString = formatYear(year);\n  var monthString = formatNumber(month, 2);\n  var dayString = formatNumber(day, 2);\n  return \"\".concat(yearString, \"-\").concat(monthString, \"-\").concat(dayString);\n}\nexports.dateToIsoString = dateToIsoString;\n/**\n * Convert the given iso date string to a JavaScript Date object\n *\n * @param {string} isoString The iso date string\n * @returns {Date} the date\n */\nfunction isoStringToStandardDate(isoString) {\n  return new Date(isoString);\n}\nexports.isoStringToStandardDate = isoStringToStandardDate;\n/**\n * Convert the given utc timestamp to a JavaScript Date object\n *\n * @param {number} utc Timestamp in UTC\n * @returns {Date} the date\n */\nfunction toStandardDate(utc) {\n  return new Date(utc);\n}\nexports.toStandardDate = toStandardDate;\n/**\n * Shortcut for creating a new StandardDate\n * @param date\n * @returns {Date} the standard date\n */\nfunction newDate(date) {\n  return new Date(date);\n}\nexports.newDate = newDate;\n/**\n * Get the total number of nanoseconds from the milliseconds of the given standard JavaScript date and optional nanosecond part.\n * @param {global.Date} standardDate the standard JavaScript date.\n * @param {Integer|number|bigint|undefined} nanoseconds the optional number of nanoseconds.\n * @return {Integer|number|bigint} the total amount of nanoseconds.\n */\nfunction totalNanoseconds(standardDate, nanoseconds) {\n  nanoseconds = nanoseconds !== null && nanoseconds !== void 0 ? nanoseconds : 0;\n  var nanosFromMillis = standardDate.getMilliseconds() * exports.NANOS_PER_MILLISECOND;\n  return add(nanoseconds, nanosFromMillis);\n}\nexports.totalNanoseconds = totalNanoseconds;\n/**\n * Get the time zone offset in seconds from the given standard JavaScript date.\n *\n * @param {global.Date} standardDate the standard JavaScript date.\n * @return {number} the time zone offset in seconds.\n */\nfunction timeZoneOffsetInSeconds(standardDate) {\n  var secondsPortion = standardDate.getSeconds() - standardDate.getUTCSeconds();\n  var minutesPortion = standardDate.getMinutes() - standardDate.getUTCMinutes();\n  var hoursPortion = standardDate.getHours() - standardDate.getUTCHours();\n  var daysPortion = _getDayOffset(standardDate);\n  return hoursPortion * exports.SECONDS_PER_HOUR + minutesPortion * exports.SECONDS_PER_MINUTE + secondsPortion + daysPortion * exports.SECONDS_PER_DAY;\n}\nexports.timeZoneOffsetInSeconds = timeZoneOffsetInSeconds;\n/**\n * Get the difference in days from the given JavaScript date in local time and UTC.\n *\n * @private\n * @param {global.Date} standardDate the date to evaluate\n * @returns  {number} the difference in days between date local time and UTC\n */\nfunction _getDayOffset(standardDate) {\n  if (standardDate.getMonth() === standardDate.getUTCMonth()) {\n    return standardDate.getDate() - standardDate.getUTCDate();\n  } else if (standardDate.getFullYear() > standardDate.getUTCFullYear() || standardDate.getMonth() > standardDate.getUTCMonth() && standardDate.getFullYear() === standardDate.getUTCFullYear()) {\n    return standardDate.getDate() + _daysUntilNextMonth(standardDate.getUTCMonth(), standardDate.getUTCFullYear()) - standardDate.getUTCDate();\n  } else {\n    return standardDate.getDate() - (standardDate.getUTCDate() + _daysUntilNextMonth(standardDate.getMonth(), standardDate.getFullYear()));\n  }\n}\n/**\n * Get the number of days in a month, including a check for leap years.\n *\n * @private\n * @param {number} month the month of the date to evalutate\n * @param {number} year the month of the date to evalutate\n * @returns {number} the total number of days in the month evaluated\n */\nfunction _daysUntilNextMonth(month, year) {\n  if (month === 1) {\n    if (year % 400 === 0 || year % 4 === 0 && year % 100 !== 0) {\n      return 29;\n    } else {\n      return 28;\n    }\n  } else if ([0, 2, 4, 6, 7, 9, 11].includes(month)) {\n    return 31;\n  } else {\n    return 30;\n  }\n}\n/**\n * Assert that the year value is valid.\n * @param {Integer|number} year the value to check.\n * @return {Integer|number} the value of the year if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidYear(year) {\n  return assertValidTemporalValue(year, exports.YEAR_RANGE, 'Year');\n}\nexports.assertValidYear = assertValidYear;\n/**\n * Assert that the month value is valid.\n * @param {Integer|number} month the value to check.\n * @return {Integer|number} the value of the month if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidMonth(month) {\n  return assertValidTemporalValue(month, exports.MONTH_OF_YEAR_RANGE, 'Month');\n}\nexports.assertValidMonth = assertValidMonth;\n/**\n * Assert that the day value is valid.\n * @param {Integer|number} day the value to check.\n * @return {Integer|number} the value of the day if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidDay(day) {\n  return assertValidTemporalValue(day, exports.DAY_OF_MONTH_RANGE, 'Day');\n}\nexports.assertValidDay = assertValidDay;\n/**\n * Assert that the hour value is valid.\n * @param {Integer|number} hour the value to check.\n * @return {Integer|number} the value of the hour if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidHour(hour) {\n  return assertValidTemporalValue(hour, exports.HOUR_OF_DAY_RANGE, 'Hour');\n}\nexports.assertValidHour = assertValidHour;\n/**\n * Assert that the minute value is valid.\n * @param {Integer|number} minute the value to check.\n * @return {Integer|number} the value of the minute if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidMinute(minute) {\n  return assertValidTemporalValue(minute, exports.MINUTE_OF_HOUR_RANGE, 'Minute');\n}\nexports.assertValidMinute = assertValidMinute;\n/**\n * Assert that the second value is valid.\n * @param {Integer|number} second the value to check.\n * @return {Integer|number} the value of the second if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidSecond(second) {\n  return assertValidTemporalValue(second, exports.SECOND_OF_MINUTE_RANGE, 'Second');\n}\nexports.assertValidSecond = assertValidSecond;\n/**\n * Assert that the nanosecond value is valid.\n * @param {Integer|number} nanosecond the value to check.\n * @return {Integer|number} the value of the nanosecond if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidNanosecond(nanosecond) {\n  return assertValidTemporalValue(nanosecond, exports.NANOSECOND_OF_SECOND_RANGE, 'Nanosecond');\n}\nexports.assertValidNanosecond = assertValidNanosecond;\nvar timeZoneValidityCache = new Map();\nvar newInvalidZoneIdError = function (zoneId, fieldName) {\n  return (0, error_1.newError)(\"\".concat(fieldName, \" is expected to be a valid ZoneId but was: \\\"\").concat(zoneId, \"\\\"\"));\n};\nfunction assertValidZoneId(fieldName, zoneId) {\n  var cachedResult = timeZoneValidityCache.get(zoneId);\n  if (cachedResult === true) {\n    return;\n  }\n  if (cachedResult === false) {\n    throw newInvalidZoneIdError(zoneId, fieldName);\n  }\n  try {\n    Intl.DateTimeFormat(undefined, {\n      timeZone: zoneId\n    });\n    timeZoneValidityCache.set(zoneId, true);\n  } catch (e) {\n    timeZoneValidityCache.set(zoneId, false);\n    throw newInvalidZoneIdError(zoneId, fieldName);\n  }\n}\nexports.assertValidZoneId = assertValidZoneId;\n/**\n * Check if the given value is of expected type and is in the expected range.\n * @param {Integer|number} value the value to check.\n * @param {ValueRange} range the range.\n * @param {string} name the name of the value.\n * @return {Integer|number} the value if valid. Exception is thrown otherwise.\n */\nfunction assertValidTemporalValue(value, range, name) {\n  (0, util_1.assertNumberOrInteger)(value, name);\n  if (!range.contains(value)) {\n    throw (0, error_1.newError)(\"\".concat(name, \" is expected to be in range \").concat(range.toString(), \" but was: \").concat(value.toString()));\n  }\n  return value;\n}\n/**\n * Converts given local time into a single integer representing this same time in seconds of the day. Nanoseconds are skipped.\n * @param {Integer|number|string} hour the hour of the local time.\n * @param {Integer|number|string} minute the minute of the local time.\n * @param {Integer|number|string} second the second of the local time.\n * @return {Integer} seconds representing the given local time.\n */\nfunction localTimeToSecondOfDay(hour, minute, second) {\n  hour = (0, integer_1.int)(hour);\n  minute = (0, integer_1.int)(minute);\n  second = (0, integer_1.int)(second);\n  var totalSeconds = hour.multiply(exports.SECONDS_PER_HOUR);\n  totalSeconds = totalSeconds.add(minute.multiply(exports.SECONDS_PER_MINUTE));\n  return totalSeconds.add(second);\n}\n/**\n * Check if given year is a leap year. Uses algorithm described here {@link https://en.wikipedia.org/wiki/Leap_year#Algorithm}.\n * @param {Integer|number|string} year the year to check. Will be converted to {@link Integer} for all calculations.\n * @return {boolean} `true` if given year is a leap year, `false` otherwise.\n */\nfunction isLeapYear(year) {\n  year = (0, integer_1.int)(year);\n  if (!year.modulo(4).equals(0)) {\n    return false;\n  } else if (!year.modulo(100).equals(0)) {\n    return true;\n  } else if (!year.modulo(400).equals(0)) {\n    return false;\n  } else {\n    return true;\n  }\n}\n/**\n * @param {Integer|number|string} x the divident.\n * @param {Integer|number|string} y the divisor.\n * @return {Integer} the result.\n */\nfunction floorDiv(x, y) {\n  x = (0, integer_1.int)(x);\n  y = (0, integer_1.int)(y);\n  var result = x.div(y);\n  if (x.isPositive() !== y.isPositive() && result.multiply(y).notEquals(x)) {\n    result = result.subtract(1);\n  }\n  return result;\n}\nexports.floorDiv = floorDiv;\n/**\n * @param {Integer|number|string} x the divident.\n * @param {Integer|number|string} y the divisor.\n * @return {Integer} the result.\n */\nfunction floorMod(x, y) {\n  x = (0, integer_1.int)(x);\n  y = (0, integer_1.int)(y);\n  return x.subtract(floorDiv(x, y).multiply(y));\n}\nexports.floorMod = floorMod;\n/**\n * @param {Integer|number|string} seconds the number of seconds to format.\n * @param {Integer|number|string} nanoseconds the number of nanoseconds to format.\n * @return {string} formatted value.\n */\nfunction formatSecondsAndNanosecondsForDuration(seconds, nanoseconds) {\n  seconds = (0, integer_1.int)(seconds);\n  nanoseconds = (0, integer_1.int)(nanoseconds);\n  var secondsString;\n  var nanosecondsString;\n  var secondsNegative = seconds.isNegative();\n  var nanosecondsGreaterThanZero = nanoseconds.greaterThan(0);\n  if (secondsNegative && nanosecondsGreaterThanZero) {\n    if (seconds.equals(-1)) {\n      secondsString = '-0';\n    } else {\n      secondsString = seconds.add(1).toString();\n    }\n  } else {\n    secondsString = seconds.toString();\n  }\n  if (nanosecondsGreaterThanZero) {\n    if (secondsNegative) {\n      nanosecondsString = formatNanosecond(nanoseconds.negate().add(2 * exports.NANOS_PER_SECOND).modulo(exports.NANOS_PER_SECOND));\n    } else {\n      nanosecondsString = formatNanosecond(nanoseconds.add(exports.NANOS_PER_SECOND).modulo(exports.NANOS_PER_SECOND));\n    }\n  }\n  return nanosecondsString != null ? secondsString + nanosecondsString : secondsString;\n}\n/**\n * @param {Integer|number|string} value the number of nanoseconds to format.\n * @return {string} formatted and possibly left-padded nanoseconds part as string.\n */\nfunction formatNanosecond(value) {\n  value = (0, integer_1.int)(value);\n  return value.equals(0) ? '' : '.' + formatNumber(value, 9);\n}\n/**\n *\n * @param {Integer|number|string} year The year to be formatted\n * @return {string} formatted year\n */\nfunction formatYear(year) {\n  var yearInteger = (0, integer_1.int)(year);\n  if (yearInteger.isNegative() || yearInteger.greaterThan(9999)) {\n    return formatNumber(yearInteger, 6, {\n      usePositiveSign: true\n    });\n  }\n  return formatNumber(yearInteger, 4);\n}\n/**\n * @param {Integer|number|string} num the number to format.\n * @param {number} [stringLength=undefined] the string length to left-pad to.\n * @return {string} formatted and possibly left-padded number as string.\n */\nfunction formatNumber(num, stringLength, params) {\n  num = (0, integer_1.int)(num);\n  var isNegative = num.isNegative();\n  if (isNegative) {\n    num = num.negate();\n  }\n  var numString = num.toString();\n  if (stringLength != null) {\n    // left pad the string with zeroes\n    while (numString.length < stringLength) {\n      numString = '0' + numString;\n    }\n  }\n  if (isNegative) {\n    return '-' + numString;\n  } else if ((params === null || params === void 0 ? void 0 : params.usePositiveSign) === true) {\n    return '+' + numString;\n  }\n  return numString;\n}\nfunction add(x, y) {\n  if (x instanceof integer_1.default) {\n    return x.add(y);\n  } else if (typeof x === 'bigint') {\n    return x + BigInt(y);\n  }\n  return x + y;\n}","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","floorMod","floorDiv","assertValidZoneId","assertValidNanosecond","assertValidSecond","assertValidMinute","assertValidHour","assertValidDay","assertValidMonth","assertValidYear","timeZoneOffsetInSeconds","totalNanoseconds","newDate","toStandardDate","isoStringToStandardDate","dateToIsoString","timeZoneOffsetToIsoString","timeToIsoString","durationToIsoString","dateToEpochDay","localDateTimeToEpochSecond","localTimeToNanoOfDay","normalizeNanosecondsForDuration","normalizeSecondsForDuration","SECONDS_PER_DAY","DAYS_PER_400_YEAR_CYCLE","DAYS_0000_TO_1970","NANOS_PER_HOUR","NANOS_PER_MINUTE","NANOS_PER_MILLISECOND","NANOS_PER_SECOND","SECONDS_PER_HOUR","SECONDS_PER_MINUTE","MINUTES_PER_HOUR","NANOSECOND_OF_SECOND_RANGE","SECOND_OF_MINUTE_RANGE","MINUTE_OF_HOUR_RANGE","HOUR_OF_DAY_RANGE","DAY_OF_MONTH_RANGE","MONTH_OF_YEAR_RANGE","YEAR_RANGE","integer_1","require","error_1","util_1","ValueRange","min","max","_minNumber","_maxNumber","_minInteger","int","_maxInteger","contains","isInt","default","greaterThanOrEqual","lessThanOrEqual","intValue","toString","concat","seconds","nanoseconds","add","hour","minute","second","nanosecond","totalNanos","multiply","year","month","day","epochDay","localTimeSeconds","localTimeToSecondOfDay","div","subtract","greaterThan","isLeapYear","months","days","monthsString","formatNumber","daysString","secondsAndNanosecondsString","formatSecondsAndNanosecondsForDuration","hourString","minuteString","secondString","nanosecondString","formatNanosecond","offsetSeconds","equals","isNegative","signPrefix","hours","minutes","modulo","secondsValue","yearString","formatYear","monthString","dayString","isoString","Date","utc","date","standardDate","nanosFromMillis","getMilliseconds","secondsPortion","getSeconds","getUTCSeconds","minutesPortion","getMinutes","getUTCMinutes","hoursPortion","getHours","getUTCHours","daysPortion","_getDayOffset","getMonth","getUTCMonth","getDate","getUTCDate","getFullYear","getUTCFullYear","_daysUntilNextMonth","includes","assertValidTemporalValue","timeZoneValidityCache","Map","newInvalidZoneIdError","zoneId","fieldName","newError","cachedResult","Intl","DateTimeFormat","timeZone","set","e","range","name","assertNumberOrInteger","totalSeconds","x","y","isPositive","notEquals","secondsString","nanosecondsString","secondsNegative","nanosecondsGreaterThanZero","negate","yearInteger","usePositiveSign","num","stringLength","params","numString","length","BigInt"],"sources":["D:/Study/Projects/El-Kasr Family Tree/client/node_modules/neo4j-driver-core/lib/internal/temporal-util.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.floorMod = exports.floorDiv = exports.assertValidZoneId = exports.assertValidNanosecond = exports.assertValidSecond = exports.assertValidMinute = exports.assertValidHour = exports.assertValidDay = exports.assertValidMonth = exports.assertValidYear = exports.timeZoneOffsetInSeconds = exports.totalNanoseconds = exports.newDate = exports.toStandardDate = exports.isoStringToStandardDate = exports.dateToIsoString = exports.timeZoneOffsetToIsoString = exports.timeToIsoString = exports.durationToIsoString = exports.dateToEpochDay = exports.localDateTimeToEpochSecond = exports.localTimeToNanoOfDay = exports.normalizeNanosecondsForDuration = exports.normalizeSecondsForDuration = exports.SECONDS_PER_DAY = exports.DAYS_PER_400_YEAR_CYCLE = exports.DAYS_0000_TO_1970 = exports.NANOS_PER_HOUR = exports.NANOS_PER_MINUTE = exports.NANOS_PER_MILLISECOND = exports.NANOS_PER_SECOND = exports.SECONDS_PER_HOUR = exports.SECONDS_PER_MINUTE = exports.MINUTES_PER_HOUR = exports.NANOSECOND_OF_SECOND_RANGE = exports.SECOND_OF_MINUTE_RANGE = exports.MINUTE_OF_HOUR_RANGE = exports.HOUR_OF_DAY_RANGE = exports.DAY_OF_MONTH_RANGE = exports.MONTH_OF_YEAR_RANGE = exports.YEAR_RANGE = void 0;\nvar integer_1 = __importStar(require(\"../integer\"));\nvar error_1 = require(\"../error\");\nvar util_1 = require(\"./util\");\n/*\n  Code in this util should be compatible with code in the database that uses JSR-310 java.time APIs.\n\n  It is based on a library called ThreeTen (https://github.com/ThreeTen/threetenbp) which was derived\n  from JSR-310 reference implementation previously hosted on GitHub. Code uses `Integer` type everywhere\n  to correctly handle large integer values that are greater than `Number.MAX_SAFE_INTEGER`.\n\n  Please consult either ThreeTen or js-joda (https://github.com/js-joda/js-joda) when working with the\n  conversion functions.\n */\nvar ValueRange = /** @class */ (function () {\n    function ValueRange(min, max) {\n        this._minNumber = min;\n        this._maxNumber = max;\n        this._minInteger = (0, integer_1.int)(min);\n        this._maxInteger = (0, integer_1.int)(max);\n    }\n    ValueRange.prototype.contains = function (value) {\n        if ((0, integer_1.isInt)(value) && value instanceof integer_1.default) {\n            return (value.greaterThanOrEqual(this._minInteger) &&\n                value.lessThanOrEqual(this._maxInteger));\n        }\n        else if (typeof value === 'bigint') {\n            var intValue = (0, integer_1.int)(value);\n            return (intValue.greaterThanOrEqual(this._minInteger) &&\n                intValue.lessThanOrEqual(this._maxInteger));\n        }\n        else {\n            return value >= this._minNumber && value <= this._maxNumber;\n        }\n    };\n    ValueRange.prototype.toString = function () {\n        return \"[\".concat(this._minNumber, \", \").concat(this._maxNumber, \"]\");\n    };\n    return ValueRange;\n}());\nexports.YEAR_RANGE = new ValueRange(-999999999, 999999999);\nexports.MONTH_OF_YEAR_RANGE = new ValueRange(1, 12);\nexports.DAY_OF_MONTH_RANGE = new ValueRange(1, 31);\nexports.HOUR_OF_DAY_RANGE = new ValueRange(0, 23);\nexports.MINUTE_OF_HOUR_RANGE = new ValueRange(0, 59);\nexports.SECOND_OF_MINUTE_RANGE = new ValueRange(0, 59);\nexports.NANOSECOND_OF_SECOND_RANGE = new ValueRange(0, 999999999);\nexports.MINUTES_PER_HOUR = 60;\nexports.SECONDS_PER_MINUTE = 60;\nexports.SECONDS_PER_HOUR = exports.SECONDS_PER_MINUTE * exports.MINUTES_PER_HOUR;\nexports.NANOS_PER_SECOND = 1000000000;\nexports.NANOS_PER_MILLISECOND = 1000000;\nexports.NANOS_PER_MINUTE = exports.NANOS_PER_SECOND * exports.SECONDS_PER_MINUTE;\nexports.NANOS_PER_HOUR = exports.NANOS_PER_MINUTE * exports.MINUTES_PER_HOUR;\nexports.DAYS_0000_TO_1970 = 719528;\nexports.DAYS_PER_400_YEAR_CYCLE = 146097;\nexports.SECONDS_PER_DAY = 86400;\nfunction normalizeSecondsForDuration(seconds, nanoseconds) {\n    return (0, integer_1.int)(seconds).add(floorDiv(nanoseconds, exports.NANOS_PER_SECOND));\n}\nexports.normalizeSecondsForDuration = normalizeSecondsForDuration;\nfunction normalizeNanosecondsForDuration(nanoseconds) {\n    return floorMod(nanoseconds, exports.NANOS_PER_SECOND);\n}\nexports.normalizeNanosecondsForDuration = normalizeNanosecondsForDuration;\n/**\n * Converts given local time into a single integer representing this same time in nanoseconds of the day.\n * @param {Integer|number|string} hour the hour of the local time to convert.\n * @param {Integer|number|string} minute the minute of the local time to convert.\n * @param {Integer|number|string} second the second of the local time to convert.\n * @param {Integer|number|string} nanosecond the nanosecond of the local time to convert.\n * @return {Integer} nanoseconds representing the given local time.\n */\nfunction localTimeToNanoOfDay(hour, minute, second, nanosecond) {\n    hour = (0, integer_1.int)(hour);\n    minute = (0, integer_1.int)(minute);\n    second = (0, integer_1.int)(second);\n    nanosecond = (0, integer_1.int)(nanosecond);\n    var totalNanos = hour.multiply(exports.NANOS_PER_HOUR);\n    totalNanos = totalNanos.add(minute.multiply(exports.NANOS_PER_MINUTE));\n    totalNanos = totalNanos.add(second.multiply(exports.NANOS_PER_SECOND));\n    return totalNanos.add(nanosecond);\n}\nexports.localTimeToNanoOfDay = localTimeToNanoOfDay;\n/**\n * Converts given local date time into a single integer representing this same time in epoch seconds UTC.\n * @param {Integer|number|string} year the year of the local date-time to convert.\n * @param {Integer|number|string} month the month of the local date-time to convert.\n * @param {Integer|number|string} day the day of the local date-time to convert.\n * @param {Integer|number|string} hour the hour of the local date-time to convert.\n * @param {Integer|number|string} minute the minute of the local date-time to convert.\n * @param {Integer|number|string} second the second of the local date-time to convert.\n * @param {Integer|number|string} nanosecond the nanosecond of the local date-time to convert.\n * @return {Integer} epoch second in UTC representing the given local date time.\n */\nfunction localDateTimeToEpochSecond(year, month, day, hour, minute, second, nanosecond) {\n    var epochDay = dateToEpochDay(year, month, day);\n    var localTimeSeconds = localTimeToSecondOfDay(hour, minute, second);\n    return epochDay.multiply(exports.SECONDS_PER_DAY).add(localTimeSeconds);\n}\nexports.localDateTimeToEpochSecond = localDateTimeToEpochSecond;\n/**\n * Converts given local date into a single integer representing it's epoch day.\n * @param {Integer|number|string} year the year of the local date to convert.\n * @param {Integer|number|string} month the month of the local date to convert.\n * @param {Integer|number|string} day the day of the local date to convert.\n * @return {Integer} epoch day representing the given date.\n */\nfunction dateToEpochDay(year, month, day) {\n    year = (0, integer_1.int)(year);\n    month = (0, integer_1.int)(month);\n    day = (0, integer_1.int)(day);\n    var epochDay = year.multiply(365);\n    if (year.greaterThanOrEqual(0)) {\n        epochDay = epochDay.add(year\n            .add(3)\n            .div(4)\n            .subtract(year.add(99).div(100))\n            .add(year.add(399).div(400)));\n    }\n    else {\n        epochDay = epochDay.subtract(year\n            .div(-4)\n            .subtract(year.div(-100))\n            .add(year.div(-400)));\n    }\n    epochDay = epochDay.add(month\n        .multiply(367)\n        .subtract(362)\n        .div(12));\n    epochDay = epochDay.add(day.subtract(1));\n    if (month.greaterThan(2)) {\n        epochDay = epochDay.subtract(1);\n        if (!isLeapYear(year)) {\n            epochDay = epochDay.subtract(1);\n        }\n    }\n    return epochDay.subtract(exports.DAYS_0000_TO_1970);\n}\nexports.dateToEpochDay = dateToEpochDay;\n/**\n * Format given duration to an ISO 8601 string.\n * @param {Integer|number|string} months the number of months.\n * @param {Integer|number|string} days the number of days.\n * @param {Integer|number|string} seconds the number of seconds.\n * @param {Integer|number|string} nanoseconds the number of nanoseconds.\n * @return {string} ISO string that represents given duration.\n */\nfunction durationToIsoString(months, days, seconds, nanoseconds) {\n    var monthsString = formatNumber(months);\n    var daysString = formatNumber(days);\n    var secondsAndNanosecondsString = formatSecondsAndNanosecondsForDuration(seconds, nanoseconds);\n    return \"P\".concat(monthsString, \"M\").concat(daysString, \"DT\").concat(secondsAndNanosecondsString, \"S\");\n}\nexports.durationToIsoString = durationToIsoString;\n/**\n * Formats given time to an ISO 8601 string.\n * @param {Integer|number|string} hour the hour value.\n * @param {Integer|number|string} minute the minute value.\n * @param {Integer|number|string} second the second value.\n * @param {Integer|number|string} nanosecond the nanosecond value.\n * @return {string} ISO string that represents given time.\n */\nfunction timeToIsoString(hour, minute, second, nanosecond) {\n    var hourString = formatNumber(hour, 2);\n    var minuteString = formatNumber(minute, 2);\n    var secondString = formatNumber(second, 2);\n    var nanosecondString = formatNanosecond(nanosecond);\n    return \"\".concat(hourString, \":\").concat(minuteString, \":\").concat(secondString).concat(nanosecondString);\n}\nexports.timeToIsoString = timeToIsoString;\n/**\n * Formats given time zone offset in seconds to string representation like '±HH:MM', '±HH:MM:SS' or 'Z' for UTC.\n * @param {Integer|number|string} offsetSeconds the offset in seconds.\n * @return {string} ISO string that represents given offset.\n */\nfunction timeZoneOffsetToIsoString(offsetSeconds) {\n    offsetSeconds = (0, integer_1.int)(offsetSeconds);\n    if (offsetSeconds.equals(0)) {\n        return 'Z';\n    }\n    var isNegative = offsetSeconds.isNegative();\n    if (isNegative) {\n        offsetSeconds = offsetSeconds.multiply(-1);\n    }\n    var signPrefix = isNegative ? '-' : '+';\n    var hours = formatNumber(offsetSeconds.div(exports.SECONDS_PER_HOUR), 2);\n    var minutes = formatNumber(offsetSeconds.div(exports.SECONDS_PER_MINUTE).modulo(exports.MINUTES_PER_HOUR), 2);\n    var secondsValue = offsetSeconds.modulo(exports.SECONDS_PER_MINUTE);\n    var seconds = secondsValue.equals(0) ? null : formatNumber(secondsValue, 2);\n    return seconds != null\n        ? \"\".concat(signPrefix).concat(hours, \":\").concat(minutes, \":\").concat(seconds)\n        : \"\".concat(signPrefix).concat(hours, \":\").concat(minutes);\n}\nexports.timeZoneOffsetToIsoString = timeZoneOffsetToIsoString;\n/**\n * Formats given date to an ISO 8601 string.\n * @param {Integer|number|string} year the date year.\n * @param {Integer|number|string} month the date month.\n * @param {Integer|number|string} day the date day.\n * @return {string} ISO string that represents given date.\n */\nfunction dateToIsoString(year, month, day) {\n    var yearString = formatYear(year);\n    var monthString = formatNumber(month, 2);\n    var dayString = formatNumber(day, 2);\n    return \"\".concat(yearString, \"-\").concat(monthString, \"-\").concat(dayString);\n}\nexports.dateToIsoString = dateToIsoString;\n/**\n * Convert the given iso date string to a JavaScript Date object\n *\n * @param {string} isoString The iso date string\n * @returns {Date} the date\n */\nfunction isoStringToStandardDate(isoString) {\n    return new Date(isoString);\n}\nexports.isoStringToStandardDate = isoStringToStandardDate;\n/**\n * Convert the given utc timestamp to a JavaScript Date object\n *\n * @param {number} utc Timestamp in UTC\n * @returns {Date} the date\n */\nfunction toStandardDate(utc) {\n    return new Date(utc);\n}\nexports.toStandardDate = toStandardDate;\n/**\n * Shortcut for creating a new StandardDate\n * @param date\n * @returns {Date} the standard date\n */\nfunction newDate(date) {\n    return new Date(date);\n}\nexports.newDate = newDate;\n/**\n * Get the total number of nanoseconds from the milliseconds of the given standard JavaScript date and optional nanosecond part.\n * @param {global.Date} standardDate the standard JavaScript date.\n * @param {Integer|number|bigint|undefined} nanoseconds the optional number of nanoseconds.\n * @return {Integer|number|bigint} the total amount of nanoseconds.\n */\nfunction totalNanoseconds(standardDate, nanoseconds) {\n    nanoseconds = nanoseconds !== null && nanoseconds !== void 0 ? nanoseconds : 0;\n    var nanosFromMillis = standardDate.getMilliseconds() * exports.NANOS_PER_MILLISECOND;\n    return add(nanoseconds, nanosFromMillis);\n}\nexports.totalNanoseconds = totalNanoseconds;\n/**\n * Get the time zone offset in seconds from the given standard JavaScript date.\n *\n * @param {global.Date} standardDate the standard JavaScript date.\n * @return {number} the time zone offset in seconds.\n */\nfunction timeZoneOffsetInSeconds(standardDate) {\n    var secondsPortion = standardDate.getSeconds() - standardDate.getUTCSeconds();\n    var minutesPortion = standardDate.getMinutes() - standardDate.getUTCMinutes();\n    var hoursPortion = standardDate.getHours() - standardDate.getUTCHours();\n    var daysPortion = _getDayOffset(standardDate);\n    return hoursPortion * exports.SECONDS_PER_HOUR + minutesPortion * exports.SECONDS_PER_MINUTE + secondsPortion + daysPortion * exports.SECONDS_PER_DAY;\n}\nexports.timeZoneOffsetInSeconds = timeZoneOffsetInSeconds;\n/**\n * Get the difference in days from the given JavaScript date in local time and UTC.\n *\n * @private\n * @param {global.Date} standardDate the date to evaluate\n * @returns  {number} the difference in days between date local time and UTC\n */\nfunction _getDayOffset(standardDate) {\n    if (standardDate.getMonth() === standardDate.getUTCMonth()) {\n        return standardDate.getDate() - standardDate.getUTCDate();\n    }\n    else if ((standardDate.getFullYear() > standardDate.getUTCFullYear()) || (standardDate.getMonth() > standardDate.getUTCMonth() && standardDate.getFullYear() === standardDate.getUTCFullYear())) {\n        return standardDate.getDate() + _daysUntilNextMonth(standardDate.getUTCMonth(), standardDate.getUTCFullYear()) - standardDate.getUTCDate();\n    }\n    else {\n        return standardDate.getDate() - (standardDate.getUTCDate() + _daysUntilNextMonth(standardDate.getMonth(), standardDate.getFullYear()));\n    }\n}\n/**\n * Get the number of days in a month, including a check for leap years.\n *\n * @private\n * @param {number} month the month of the date to evalutate\n * @param {number} year the month of the date to evalutate\n * @returns {number} the total number of days in the month evaluated\n */\nfunction _daysUntilNextMonth(month, year) {\n    if (month === 1) {\n        if (year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0)) {\n            return 29;\n        }\n        else {\n            return 28;\n        }\n    }\n    else if ([0, 2, 4, 6, 7, 9, 11].includes(month)) {\n        return 31;\n    }\n    else {\n        return 30;\n    }\n}\n/**\n * Assert that the year value is valid.\n * @param {Integer|number} year the value to check.\n * @return {Integer|number} the value of the year if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidYear(year) {\n    return assertValidTemporalValue(year, exports.YEAR_RANGE, 'Year');\n}\nexports.assertValidYear = assertValidYear;\n/**\n * Assert that the month value is valid.\n * @param {Integer|number} month the value to check.\n * @return {Integer|number} the value of the month if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidMonth(month) {\n    return assertValidTemporalValue(month, exports.MONTH_OF_YEAR_RANGE, 'Month');\n}\nexports.assertValidMonth = assertValidMonth;\n/**\n * Assert that the day value is valid.\n * @param {Integer|number} day the value to check.\n * @return {Integer|number} the value of the day if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidDay(day) {\n    return assertValidTemporalValue(day, exports.DAY_OF_MONTH_RANGE, 'Day');\n}\nexports.assertValidDay = assertValidDay;\n/**\n * Assert that the hour value is valid.\n * @param {Integer|number} hour the value to check.\n * @return {Integer|number} the value of the hour if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidHour(hour) {\n    return assertValidTemporalValue(hour, exports.HOUR_OF_DAY_RANGE, 'Hour');\n}\nexports.assertValidHour = assertValidHour;\n/**\n * Assert that the minute value is valid.\n * @param {Integer|number} minute the value to check.\n * @return {Integer|number} the value of the minute if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidMinute(minute) {\n    return assertValidTemporalValue(minute, exports.MINUTE_OF_HOUR_RANGE, 'Minute');\n}\nexports.assertValidMinute = assertValidMinute;\n/**\n * Assert that the second value is valid.\n * @param {Integer|number} second the value to check.\n * @return {Integer|number} the value of the second if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidSecond(second) {\n    return assertValidTemporalValue(second, exports.SECOND_OF_MINUTE_RANGE, 'Second');\n}\nexports.assertValidSecond = assertValidSecond;\n/**\n * Assert that the nanosecond value is valid.\n * @param {Integer|number} nanosecond the value to check.\n * @return {Integer|number} the value of the nanosecond if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidNanosecond(nanosecond) {\n    return assertValidTemporalValue(nanosecond, exports.NANOSECOND_OF_SECOND_RANGE, 'Nanosecond');\n}\nexports.assertValidNanosecond = assertValidNanosecond;\nvar timeZoneValidityCache = new Map();\nvar newInvalidZoneIdError = function (zoneId, fieldName) { return (0, error_1.newError)(\"\".concat(fieldName, \" is expected to be a valid ZoneId but was: \\\"\").concat(zoneId, \"\\\"\")); };\nfunction assertValidZoneId(fieldName, zoneId) {\n    var cachedResult = timeZoneValidityCache.get(zoneId);\n    if (cachedResult === true) {\n        return;\n    }\n    if (cachedResult === false) {\n        throw newInvalidZoneIdError(zoneId, fieldName);\n    }\n    try {\n        Intl.DateTimeFormat(undefined, { timeZone: zoneId });\n        timeZoneValidityCache.set(zoneId, true);\n    }\n    catch (e) {\n        timeZoneValidityCache.set(zoneId, false);\n        throw newInvalidZoneIdError(zoneId, fieldName);\n    }\n}\nexports.assertValidZoneId = assertValidZoneId;\n/**\n * Check if the given value is of expected type and is in the expected range.\n * @param {Integer|number} value the value to check.\n * @param {ValueRange} range the range.\n * @param {string} name the name of the value.\n * @return {Integer|number} the value if valid. Exception is thrown otherwise.\n */\nfunction assertValidTemporalValue(value, range, name) {\n    (0, util_1.assertNumberOrInteger)(value, name);\n    if (!range.contains(value)) {\n        throw (0, error_1.newError)(\"\".concat(name, \" is expected to be in range \").concat(range.toString(), \" but was: \").concat(value.toString()));\n    }\n    return value;\n}\n/**\n * Converts given local time into a single integer representing this same time in seconds of the day. Nanoseconds are skipped.\n * @param {Integer|number|string} hour the hour of the local time.\n * @param {Integer|number|string} minute the minute of the local time.\n * @param {Integer|number|string} second the second of the local time.\n * @return {Integer} seconds representing the given local time.\n */\nfunction localTimeToSecondOfDay(hour, minute, second) {\n    hour = (0, integer_1.int)(hour);\n    minute = (0, integer_1.int)(minute);\n    second = (0, integer_1.int)(second);\n    var totalSeconds = hour.multiply(exports.SECONDS_PER_HOUR);\n    totalSeconds = totalSeconds.add(minute.multiply(exports.SECONDS_PER_MINUTE));\n    return totalSeconds.add(second);\n}\n/**\n * Check if given year is a leap year. Uses algorithm described here {@link https://en.wikipedia.org/wiki/Leap_year#Algorithm}.\n * @param {Integer|number|string} year the year to check. Will be converted to {@link Integer} for all calculations.\n * @return {boolean} `true` if given year is a leap year, `false` otherwise.\n */\nfunction isLeapYear(year) {\n    year = (0, integer_1.int)(year);\n    if (!year.modulo(4).equals(0)) {\n        return false;\n    }\n    else if (!year.modulo(100).equals(0)) {\n        return true;\n    }\n    else if (!year.modulo(400).equals(0)) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n/**\n * @param {Integer|number|string} x the divident.\n * @param {Integer|number|string} y the divisor.\n * @return {Integer} the result.\n */\nfunction floorDiv(x, y) {\n    x = (0, integer_1.int)(x);\n    y = (0, integer_1.int)(y);\n    var result = x.div(y);\n    if (x.isPositive() !== y.isPositive() && result.multiply(y).notEquals(x)) {\n        result = result.subtract(1);\n    }\n    return result;\n}\nexports.floorDiv = floorDiv;\n/**\n * @param {Integer|number|string} x the divident.\n * @param {Integer|number|string} y the divisor.\n * @return {Integer} the result.\n */\nfunction floorMod(x, y) {\n    x = (0, integer_1.int)(x);\n    y = (0, integer_1.int)(y);\n    return x.subtract(floorDiv(x, y).multiply(y));\n}\nexports.floorMod = floorMod;\n/**\n * @param {Integer|number|string} seconds the number of seconds to format.\n * @param {Integer|number|string} nanoseconds the number of nanoseconds to format.\n * @return {string} formatted value.\n */\nfunction formatSecondsAndNanosecondsForDuration(seconds, nanoseconds) {\n    seconds = (0, integer_1.int)(seconds);\n    nanoseconds = (0, integer_1.int)(nanoseconds);\n    var secondsString;\n    var nanosecondsString;\n    var secondsNegative = seconds.isNegative();\n    var nanosecondsGreaterThanZero = nanoseconds.greaterThan(0);\n    if (secondsNegative && nanosecondsGreaterThanZero) {\n        if (seconds.equals(-1)) {\n            secondsString = '-0';\n        }\n        else {\n            secondsString = seconds.add(1).toString();\n        }\n    }\n    else {\n        secondsString = seconds.toString();\n    }\n    if (nanosecondsGreaterThanZero) {\n        if (secondsNegative) {\n            nanosecondsString = formatNanosecond(nanoseconds\n                .negate()\n                .add(2 * exports.NANOS_PER_SECOND)\n                .modulo(exports.NANOS_PER_SECOND));\n        }\n        else {\n            nanosecondsString = formatNanosecond(nanoseconds.add(exports.NANOS_PER_SECOND).modulo(exports.NANOS_PER_SECOND));\n        }\n    }\n    return nanosecondsString != null ? secondsString + nanosecondsString : secondsString;\n}\n/**\n * @param {Integer|number|string} value the number of nanoseconds to format.\n * @return {string} formatted and possibly left-padded nanoseconds part as string.\n */\nfunction formatNanosecond(value) {\n    value = (0, integer_1.int)(value);\n    return value.equals(0) ? '' : '.' + formatNumber(value, 9);\n}\n/**\n *\n * @param {Integer|number|string} year The year to be formatted\n * @return {string} formatted year\n */\nfunction formatYear(year) {\n    var yearInteger = (0, integer_1.int)(year);\n    if (yearInteger.isNegative() || yearInteger.greaterThan(9999)) {\n        return formatNumber(yearInteger, 6, { usePositiveSign: true });\n    }\n    return formatNumber(yearInteger, 4);\n}\n/**\n * @param {Integer|number|string} num the number to format.\n * @param {number} [stringLength=undefined] the string length to left-pad to.\n * @return {string} formatted and possibly left-padded number as string.\n */\nfunction formatNumber(num, stringLength, params) {\n    num = (0, integer_1.int)(num);\n    var isNegative = num.isNegative();\n    if (isNegative) {\n        num = num.negate();\n    }\n    var numString = num.toString();\n    if (stringLength != null) {\n        // left pad the string with zeroes\n        while (numString.length < stringLength) {\n            numString = '0' + numString;\n        }\n    }\n    if (isNegative) {\n        return '-' + numString;\n    }\n    else if ((params === null || params === void 0 ? void 0 : params.usePositiveSign) === true) {\n        return '+' + numString;\n    }\n    return numString;\n}\nfunction add(x, y) {\n    if (x instanceof integer_1.default) {\n        return x.add(y);\n    }\n    else if (typeof x === 'bigint') {\n        return x + BigInt(y);\n    }\n    return x + y;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}