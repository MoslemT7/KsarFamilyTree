{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\Projects\\\\El-Kasr Family Tree\\\\client\\\\src\\\\components\\\\RelationChecker.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './RelationChecker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst translations = require('./translation.json');\nrequire('dotenv').config();\nconst neo4jURI = process.env.REACT_APP_NEO4J_URI;\nconst neo4jUser = process.env.REACT_APP_NEO4J_USER;\nconst neo4jPassword = process.env.REACT_APP_NEO4J_PASSWORD;\nconst driver = require('neo4j-driver').driver(neo4jURI, require('neo4j-driver').auth.basic(neo4jUser, neo4jPassword));\nconst session = driver.session();\nlet score;\nlet relationDescribtion = '';\nconst getPersonMatches = async (name, fatherName = \"\", grandfatherName = \"\", lastName) => {\n  let query = \"\";\n  if (grandfatherName) {\n    query = `\n      MATCH (grandfather:Person {name: $grandfatherName})-[:FATHER_OF]->(father:Person {name: $fatherName})-[:FATHER_OF]->(p:Person {name: $name, lastName: $lastName})\n      RETURN id(p) AS personID, p.name AS personName, p.lastName AS familyName, father.name AS fatherName, grandfather.name AS grandfatherName\n    `;\n  } else if (fatherName) {\n    query = `\n      MATCH (father:Person {name: $fatherName})-[:FATHER_OF]->(p:Person {name: $name, lastName: $lastName})\n      OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\n      RETURN id(p) AS personID, p.name AS personName, p.lastName AS familyName, father.name AS fatherName, grandfather.name AS grandfatherName\n    `;\n  } else {\n    query = `\n      MATCH (p:Person {name: $name, lastName: $lastName})\n      OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(p)\n      OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\n      RETURN id(p) AS personID, p.name AS personName, p.lastName AS familyName, father.name AS fatherName, grandfather.name AS grandfatherName\n    `;\n  }\n  const params = {\n    name,\n    lastName,\n    fatherName,\n    grandfatherName\n  };\n  const result = await session.run(query, params);\n  return result.records.map(record => ({\n    id: record.get('personID').toNumber(),\n    name: record.get('personName'),\n    father: record.get('fatherName') || \"Unknown\",\n    grandfather: record.get('grandfatherName') || \"Unknown\",\n    lastName: record.get('familyName')\n  }));\n};\n\n// Function that split english translated name that may contain ben to full name only parts.\nfunction splitName(fullName) {\n  const parts = fullName.replace(/ ben /gi, ' ').split(/\\s+/);\n  if (parts.length === 2) {\n    return {\n      personName: parts[0],\n      fatherName: \"\",\n      grandfatherName: \"\",\n      familyName: parts[1]\n    };\n  } else if (parts.length === 3) {\n    return {\n      personName: parts[0],\n      fatherName: parts[1],\n      grandfatherName: \"\",\n      familyName: parts[2]\n    };\n  } else if (parts.length === 4) {\n    return {\n      personName: parts[0],\n      fatherName: parts[1],\n      grandfatherName: parts[2],\n      familyName: parts[3]\n    };\n  }\n  // Default case if structure doesn't match\n  return {\n    personName: parts[0],\n    fatherName: \"\",\n    grandfatherName: \"\",\n    familyName: parts[1]\n  };\n}\nconst getRelationship = async (person1FullName, person2FullName) => {\n  const isArabic = text => /[\\u0600-\\u06FF]/.test(text);\n  let translatedName1, translatedName2;\n  if (isArabic(person1FullName)) {\n    translatedName1 = translateName(person1FullName, false);\n  } else {\n    translatedName1 = person1FullName;\n  }\n  if (isArabic(person2FullName)) {\n    translatedName2 = translateName(person2FullName, false);\n  } else {\n    translatedName2 = person2FullName;\n  }\n  const {\n    personName: person1Name,\n    fatherName: person1FatherName,\n    grandfatherName: person1GrandfatherName,\n    familyName: person1LastName\n  } = splitName(translatedName1);\n  const {\n    personName: person2Name,\n    fatherName: person2FatherName,\n    grandfatherName: person2GrandfatherName,\n    familyName: person2LastName\n  } = splitName(translatedName2);\n  const person1Matches = await getPersonMatches(person1Name, person1FatherName, person1GrandfatherName, person1LastName);\n  const person2Matches = await getPersonMatches(person2Name, person2FatherName, person2GrandfatherName, person2LastName);\n  console.log(\"P1 matches : \", person1Matches);\n  console.log(\"P2 matches : \", person2Matches);\n  let person1ID, person2ID;\n  if (person1Matches.length > 1 || person2Matches.length > 1) {\n    return {\n      error: 'non-unique-name',\n      message: 'تم العثور على عدة أشخاص بنفس الاسم. الرجاء اختيار الصحيح.',\n      duplicates: {\n        person1: person1Matches.length > 1 ? person1Matches : [],\n        person2: person2Matches.length > 1 ? person2Matches : []\n      }\n    };\n  } else {\n    person1ID = person1Matches[0].id;\n    person2ID = person2Matches[0].id;\n  }\n  const gender1 = await getGender(person1ID);\n  const gender2 = await getGender(person2ID);\n  try {\n    // Function that return the ancestors of a given person starting with the person itself and going up to the root.\n    const getAncestors = async personID => {\n      const result = await session.run(`\n        MATCH path = (ancestor:Person)-[:FATHER_OF|MOTHER_OF*]->(child:Person)\n        WHERE id(child) = $personID\n        WITH ancestor, id(ancestor) AS ID, length(path) AS level\n        RETURN DISTINCT ID, ancestor.name AS name, ancestor.lastName AS lastName, level\n        ORDER BY level ASC\n      `, {\n        personID\n      });\n      const personResult = await session.run(`\n        MATCH (p:Person)\n        WHERE id(p) = $personID\n        RETURN id(p) AS ID, p.name AS name, p.lastName AS lastName\n      `, {\n        personID\n      });\n      const person = personResult.records[0];\n      return [{\n        id: person.get('ID').toNumber(),\n        name: person.get('name'),\n        lastName: person.get('lastName'),\n        level: 0\n      }, ...result.records.map(record => ({\n        id: record.get('ID').toNumber(),\n        name: record.get('name'),\n        lastName: record.get('lastName'),\n        level: record.get('level').toNumber()\n      }))];\n    };\n\n    // Get the ancestors for both persons\n    // const maxLevels = 4; \n    let person1Ancestors = await getAncestors(person1ID);\n    let person2Ancestors = await getAncestors(person2ID);\n    console.log(person1Ancestors);\n    console.log(person2Ancestors);\n    console.log(`Person 1 Ancestors: ${person1Ancestors.map(a => a.name).join(' ben ')}`);\n    console.log(`Person 2 Ancestors: ${person2Ancestors.map(a => a.name).join(' ben ')}`);\n    const person1AncestorsIds = person1Ancestors.map(a => a.id);\n    const person2AncestorsIds = person2Ancestors.map(a => a.id);\n    const translatedName1 = translateName(person1FullName);\n    const translatedName2 = translateName(person2FullName);\n\n    // Check for common ancestors between the two persons\n    for (let i = 0; i < person1Ancestors.length; i++) {\n      for (let j = 0; j < person2Ancestors.length; j++) {\n        if (person1Ancestors[i].id === person2Ancestors[j].id) {\n          var p1Level = person1Ancestors[i].level;\n          var p2Level = person2Ancestors[j].level;\n          console.log(`Level: (${p1Level}, ${p2Level})`);\n          if (p1Level === 0 && p2Level === 1) {\n            if (gender1 === 'Male') {\n              score = 100;\n              return `${translatedName1} هو والد ${translatedName2}`;\n            } else {\n              return `${translatedName1} هي والدة ${translatedName2}`;\n            }\n          } else if (p1Level === 1 && p2Level === 0) {\n            if (gender1 === 'Male') {\n              console.log(`${translatedName1} هو ابن ${translatedName2}`);\n              return `${translatedName1} هو ابن ${translatedName2}`;\n            } else {\n              console.log(`${translatedName1} هي إبنة ${person2FullName}`);\n              return `${translatedName1} هي إبنة ${translatedName2}`;\n            }\n          } else if (p1Level === 2 && p2Level === 0) {\n            if (gender1 === 'Male') {\n              console.log(`${person1FullName} هو حفيد ${person2FullName}`);\n              return `${translatedName1} هو حفيد ${translatedName2}`;\n            } else {\n              console.log(`${person1FullName} هي حفيدة ${person2FullName}.`);\n              return `${translatedName1} هي حفيدة ${translatedName2}`;\n            }\n          } else if (p1Level === 0 && p2Level === 2) {\n            if (gender1 === 'Male') {\n              console.log(`${person1FullName} هو جدّ ${person2FullName}'.`);\n              return `${translatedName1} هو جدّ ${translatedName2}`;\n            } else {\n              console.log(`${person1FullName} هي جدّة ${person2FullName}.`);\n              return `${translatedName1} هي جدّة ${translatedName2}`;\n            }\n          } else if (p1Level === 3 && p2Level === 0) {\n            if (gender1 === 'Male') {\n              console.log(`${person1FullName} هو إبن حفيد ${person2FullName}.`);\n              return `${translatedName1} هو إبن حفيد ${translatedName2}`;\n            } else {\n              console.log(`${person1FullName} هي إبنة حفيدة ${person2FullName}.`);\n              return `${translatedName1} هي إبنة حفيدة ${translatedName2}`;\n            }\n          } else if (p1Level === 0 && p2Level === 3) {\n            if (gender1 === 'Male') {\n              console.log(`${person1FullName} هو جد والد ${person2FullName}`);\n              return `${translatedName1} و جد والد ${translatedName2}`;\n            } else {\n              console.log(`${person1FullName}هي جدة والدة ${person2FullName}`);\n              return `${translatedName1} هي جدة والدة ${translatedName2}`;\n            }\n          } else if (p1Level === 1 && p2Level === 1) {\n            if (gender1 === 'Male' && gender2 === 'Male') {\n              console.log(`${person1FullName} و ${person2FullName} إخوة.`);\n              return `${translatedName1} و ${translatedName2} إخوة`;\n            } else if (gender1 === 'Female' && gender2 === 'Female') {\n              console.log(`${person1FullName} و ${person2FullName} أخوات.`);\n              return `${translatedName1} و ${translatedName2} أخوات`;\n            } else {\n              console.log(`${person1FullName} و ${person2FullName} إخوة.`);\n              return `${translatedName1} و ${translatedName2} إخوة`;\n            }\n          } else if (p1Level === 2 && p2Level === 1) {\n            if (gender1 === 'Male') {\n              console.log(`${translatedName1} هو ابن أخ ${translatedName2}`);\n              return `${translatedName1} هو ابن أخ ${translatedName2}`;\n            } else {\n              console.log(`${person1FullName} هي إبنة أخ ${person2FullName}.`);\n              return `${translatedName1} هي إبن أخ ${translatedName2}`;\n            }\n          } else if (p1Level === 1 && p2Level === 2) {\n            if (gender1 === 'Male') {\n              console.log(`${person1FullName} هو عم ${person2FullName}.`);\n              return `${translatedName1} هو عم ${translatedName2}'`;\n            } else {\n              console.log(`${person1FullName} هي عمّة ${person2FullName}.`);\n              return `${translatedName1} هي عمّة ${translatedName2}`;\n            }\n          } else if (p1Level === 2 && p2Level === 2) {\n            console.log(`${translatedName1} و ${translatedName2} أولاد العم.`);\n            const p1AncestorGender = await getGender(person1AncestorsIds[1]);\n            const p2AncestorGender = await getGender(person2AncestorsIds[2]);\n            if (gender1 === 'Male') {\n              if (p1AncestorGender === 'Male') {\n                if (p2AncestorGender === 'Male') {\n                  // ولد عمه\n                  return `${translatedName1} إبن عم ${translatedName2}`;\n                } else {\n                  // ولد عمته\n                  return `${translatedName1} هو إبن عمّة ${translatedName2}`;\n                }\n              } else {\n                if (p2AncestorGender === 'Male') {\n                  // ولد خاله\n                  return `${translatedName1} هو إبن خال ${translatedName2}'`;\n                } else {\n                  // ولد خالته\n                  return `${translatedName1} هو إبن خالة ${translatedName2}`;\n                }\n              }\n            } else {\n              if (p1AncestorGender === 'Male') {\n                if (p2AncestorGender === 'Male') {\n                  // بنت عمه\n                  return `${translatedName1} هي إبنة عمّ ${translatedName2}`;\n                } else {\n                  // بنت عمته\n                  return `${translatedName1} هي إبنة عمّة ${translatedName2}`;\n                }\n              } else {\n                if (p2AncestorGender === 'Male') {\n                  // بنت خاله\n                  return `${translatedName1} هي إبنة خال ${translatedName2}`;\n                } else {\n                  // بنت خالته\n                  return `${translatedName1} هي إبنة خالة ${translatedName2}`;\n                }\n              }\n            }\n          } else if (p1Level === 2 && p2Level === 3) {\n            const p1AncestorFullName = getAncestorFullName(person1Ancestors, 1);\n            const p1AncestorGender = await getGender(p1AncestorFullName);\n            const p2AncestorFullName = getAncestorFullName(person2Ancestors, 1);\n            const p2AncestorGender = await getGender(p2AncestorFullName);\n            if (gender1 === 'Male') {\n              if (p1AncestorGender === 'Male') {\n                // father's side\n                if (p2AncestorGender === 'Male') {\n                  // father's brother's son\n                  console.log(`${person1FullName} هو إبن عم والد ${person2FullName}.`);\n                  return `${translatedName1} هو إبن عم والد ${translatedName2}`;\n                } else {\n                  console.log(`${person1FullName} هو إبن عمة والد ${person2FullName}.`);\n                  return `${translatedName1} هو إبن عمة والد ${translatedName2}`;\n                }\n              } else {\n                // mother's side\n                if (p2AncestorGender === 'Male') {\n                  // mother's brother's son\n                  console.log(`${person1FullName} هو إبن عم أم ${person2FullName}.`);\n                  return `${translatedName1} هو إبن عم أم ${translatedName2}.`;\n                } else {\n                  // mother's brother's daughter\n                  console.log(`${person1FullName} هو إبن عمّة أم ${person2FullName}.`);\n                  return `${translatedName1} هو إبن عمّة أم ${translatedName2}`;\n                }\n              }\n            } else {\n              // If person1 is female\n\n              if (p1AncestorGender === 'Male') {\n                // father's side\n                if (p2AncestorGender === 'Male') {\n                  // father's brother's son\n                  console.log(`${person1FullName} هي إبنة عم والد ${person2FullName}.`);\n                  return `${translatedName1} هي إبنة عم والد ${translatedName2}`;\n                } else {\n                  // father's brother's daughter\n                  console.log(`${person1FullName} هي إبنة عمة والد ${person2FullName}.`);\n                  return `${translatedName1} هي إبنة عمة والد ${translatedName2}`;\n                }\n              } else {\n                // mother's side\n                if (p2AncestorGender === 'Male') {\n                  // mother's brother's son\n                  console.log(`${person1FullName} هي إبنة عم والدة ${person2FullName}.`);\n                  return `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\n                } else {\n                  // mother's brother's daughter\n                  console.log(`${person1FullName} هي إبنة عمة والدة ${person2FullName}.`);\n                  return `${translatedName1} هي إبنة عمة والدة ${translatedName2}`;\n                }\n              }\n            }\n          } else if (p1Level === 3 && p2Level === 2) {\n            const p1AncestorGender = await getGender(person1AncestorsIds[1]);\n            const p2AncestorGender = await getGender(person2AncestorsIds[1]);\n            if (p1AncestorGender === 'Male') {\n              // father's side\n              if (p2AncestorGender === 'Male') {\n                // father's brother's son\n                console.log(`والد ${person1FullName} هو إبن عم ${person2FullName}`);\n                return `والد ${translatedName1} هو إبن عم ${translatedName2}`;\n              } else {\n                console.log(`والد ${person1FullName} هو إبن خال ${person2FullName}.`);\n                return `والد ${translatedName1} هو إبن خال ${translatedName2}`;\n              }\n            } else {\n              // mother's side\n              if (p2AncestorGender === 'Male') {\n                // mother's brother's son\n                console.log(`والدة ${person1FullName} هي إبنة عم ${person2FullName}.`);\n                return `والدة ${translatedName1} هي إبنة عم ${translatedName2}`;\n              } else {\n                // mother's brother's daughter\n                console.log(`والدة ${person1FullName} هي إبنة خال ${person2FullName}.`);\n                return `والدة ${translatedName1} هي إبنة خال  ${translatedName2}`;\n              }\n            }\n          } else if (p1Level === 3 && p2Level === 3) {\n            const p1AncestorGender = await getGender(person1AncestorsIds[1]);\n            const p1GreatAncestorGender = await getGender(person1AncestorsIds[2]);\n            const p2AncestorGender = await getGender(person2AncestorsIds[1]);\n            const p2GreatAncestorGender = await getGender(person2AncestorsIds[2]);\n            // Ancestor changes paternal/maternal\n            // Great Ancestor changes grandfather/grandmother\n            if (p1AncestorGender === 'Male') {\n              if (p2AncestorGender === 'Male') {\n                if (p1GreatAncestorGender === 'Male') {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`جدّ ${person1FullName} من الأب و جد ${person2FullName} من الأب إخوة.`);\n                    return `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\n                  } else {\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s paternal grandmother are siblings.`);\n                    return `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\n                  }\n                } else {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s paternal grandfather are siblings.`);\n                    return `جدّة ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\n                  } else {\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s paternal grandmother are sisters.`);\n                    return `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\n                  }\n                }\n              } else {\n                if (p1GreatAncestorGender === 'Male') {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s maternal grandfather are brothers.`);\n                    return `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأم إخوة.`;\n                  } else {\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s maternal grandmother are siblings.`);\n                    return `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\n                  }\n                } else {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s maternal grandfather are siblings.`);\n                    return `جدّة ${translatedName1} من الأب و جد${translatedName2} من الأم إخوة.`;\n                  } else {\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s maternal grandmother are sisters.`);\n                    return `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\n                  }\n                }\n              }\n            } else {\n              if (p2AncestorGender === 'Male') {\n                if (p1GreatAncestorGender === 'Male') {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s paternal grandfather are brothers.`);\n                    return `جدّ ${translatedName1} من الأم و جد${translatedName2} من الأب إخوة.`;\n                  } else {\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s paternal grandmother are siblings.`);\n                    return `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\n                  }\n                } else {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s paternal grandfather are siblings.`);\n                    return `جدّة ${translatedName1} من الأم و جد ${translatedName2} من الأب إخوة.`;\n                  } else {\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s paternal grandmother are sisters.`);\n                    return `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب أخوات.`;\n                  }\n                }\n              } else {\n                if (p1GreatAncestorGender === 'Male') {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s maternal grandfather are brothers.`);\n                    return `جدّ ${translatedName1} من الأم و جد ${translatedName2} من الأم إخوة.`;\n                  } else {\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s maternal grandmother are siblings.`);\n                    return `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\n                  }\n                } else {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s maternal grandfather are siblings.`);\n                    return `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\n                  } else {\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s maternal grandmother are sisters.`);\n                    return `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\n                  }\n                }\n              }\n            }\n          }\n\n          // Still : (0,4) - (4,0) - (3-1) - (1-3) - (1-4) - (4-1) - (4-2) - (2-4) - (3-4) - (4-3) - (4-4)  \n        }\n      }\n    }\n    console.log('No direct relation found.');\n    return 'No direct relation found';\n  } catch (error) {\n    console.error('Error in relationship lookup:', error);\n    return 'Error in relationship lookup';\n  }\n};\nconst getGender = async personID => {\n  const session = driver.session(); // Open a session\n\n  try {\n    const result = await session.run(`MATCH (p:Person) \n      WHERE id(p) = $personID\n      \n      RETURN p.gender AS gender`, {\n      personID\n    });\n    if (result.records.length > 0) {\n      const gender = result.records[0].get('gender');\n      return gender; // Return the gender value\n    } else {\n      console.log(`No person found with the ID ${personID}`);\n      return null; // Return null when no person is found\n    }\n  } catch (error) {\n    console.error('Error retrieving gender:', error);\n    return null; // Return null in case of an error\n  } finally {\n    await session.close(); // Always close the session after the query\n  }\n};\nconst getAncestorFullName = (personAncestors, level) => {\n  // Check if the ancestor exists at the given level\n  if (!personAncestors[level - 1] || !personAncestors[level - 1].properties) {\n    return `Unknown (Level: ${level})`;\n  }\n  const ancestor = personAncestors[level - 1].properties;\n  const name = ancestor.name || \"Unknown\"; // Default to \"Unknown\" if name is missing\n  const lastName = ancestor.lastName || \"Unknown\"; // Default to \"Unknown\" if lastName is missing\n\n  return `${name} ${lastName}`;\n};\nexport const translateName = (fullName, language = true) => {\n  const nameParts = fullName.split(' ');\n\n  // Build reverse translation map if needed\n  const reverseTranslations = Object.fromEntries(Object.entries(translations).map(([key, value]) => [value, key]));\n  const dict = language ? translations : reverseTranslations;\n  const translatedParts = nameParts.map(part => dict[part] || part);\n  return translatedParts.join(' ');\n};\nconst RelationPage = () => {\n  _s();\n  const [person1, setPerson1] = useState('');\n  const [person2, setPerson2] = useState('');\n  const [relationship, setRelationship] = useState('');\n  const [duplicates, setDuplicates] = useState({\n    person1: [],\n    person2: []\n  });\n  // const relationTypes = [\"Blood\"]; // or [\"In-Law\", \"Marriage\"]\n  // const explanation = \"You both share the same grandfather. This makes you close relatives (blood relation).\";\n  function getArabicClosenessLabel(score) {\n    if (score >= 95) return \"صلة قرابة شديدة جدًا\";\n    if (score >= 85) return \"صلة قرابة قوية\";\n    if (score >= 70) return \"صلة قرابة متوسطة\";\n    if (score >= 50) return \"صلة بعيدة نسبياً\";\n    if (score > 0) return \"صلة ضعيفة جدًا\";\n    return \"لا توجد صلة واضحة\";\n  }\n  const fetchRelationship = async (name1, name2) => {\n    const relationshipResult = await getRelationship(name1, name2);\n    return relationshipResult;\n  };\n  const FetchRelationship = async e => {\n    e.preventDefault();\n    const result = await fetchRelationship(person1, person2);\n    if (result.error === 'non-unique-name') {\n      setDuplicates(result.duplicates);\n      setRelationship(result.message); // optional message\n    } else {\n      setDuplicates({\n        person1: [],\n        person2: []\n      }); // clear if no dups\n      setRelationship(result);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relation-page\",\n    children: [(duplicates.person1.length > 0 || duplicates.person2.length > 0) && /*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"duplicates-panel\",\n      children: [duplicates.person1.length > 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"duplicates-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u0623\\u0643\\u062A\\u0628 \\u0627\\u0644\\u0627\\u0633\\u0645 \\u0627\\u0644\\u0643\\u0627\\u0645\\u0644 \\u0644\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0635\\u062D\\u064A\\u062D:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: duplicates.person1.map((p, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: `${translateName(p.name)} بن ${translateName(p.father)} بن ${translateName(p.grandfather)} ${translateName(p.lastName)}`\n          }, `p1-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 11\n      }, this), duplicates.person2.length > 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"duplicates-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"\\u0627\\u062E\\u062A\\u0631 \\u0627\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0635\\u062D\\u064A\\u062D \\\"\", person2, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: duplicates.person2.map((p, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: `${translateName(p.name)} بن ${translateName(p.father)} بن ${translateName(p.grandfather)} ${translateName(p.lastName)}`\n          }, `p2-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 620,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"relation-form-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"section-title\",\n          children: \"\\u0645\\u0627\\u0647\\u064A \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629 \\u0628\\u064A\\u0646\\u0647\\u0645\\u0627\\u061F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 652,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"DescriptionZone\",\n          children: \"\\u0627\\u0644\\u0647\\u062F\\u0641 \\u0645\\u0646 \\u0647\\u0630\\u0647 \\u0627\\u0644\\u0635\\u0641\\u062D\\u0629 \\u0647\\u0648 \\u062A\\u062D\\u062F\\u064A\\u062F \\u0635\\u0644\\u0629 \\u0627\\u0644\\u0642\\u0631\\u0627\\u0628\\u0629 \\u0628\\u064A\\u0646 \\u0634\\u062E\\u0635\\u064A\\u0646 \\u0628\\u0646\\u0627\\u0621\\u064B\\u0627 \\u0639\\u0644\\u0649 \\u0627\\u0633\\u0645\\u0647\\u0645. \\u0643\\u0644 \\u0645\\u0627\\u0639\\u0644\\u064A\\u0643 \\u0641\\u0639\\u0644\\u0647 \\u0647\\u0648 \\u0627\\u062F\\u062E\\u0627\\u0644 \\u0627\\u0644\\u0627\\u0633\\u0645 \\u0644\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0627\\u0648\\u0644 \\u0648\\u0627\\u0644\\u062B\\u0627\\u0646\\u064A \\u0648\\u062B\\u0645 \\u0627\\u0644\\u0646\\u0642\\u0631 \\u0639\\u0644\\u0649 \\\"\\u0627\\u0644\\u062A\\u062D\\u0642\\u0642 \\u0645\\u0646 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\\\" \\u0633\\u062A\\u0638\\u0647\\u0631 \\u0644\\u0643 \\u0627\\u0644\\u0646\\u062A\\u064A\\u062C\\u0629 \\u0641\\u064A \\u0627\\u0633\\u0647\\u0644 \\u0627\\u0644\\u0635\\u0641\\u062D\\u0629 \\u0648\\u0627\\u0644\\u062A\\u064A \\u064A\\u062A\\u0648\\u0636\\u062D \\u0644\\u0643 \\u0646\\u0648\\u0639 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629 \\u0648\\u0645\\u062F\\u0649 \\u0642\\u0631\\u0627\\u0628\\u062A\\u0647\\u0627\\u061F \\u0641\\u064A \\u062D\\u0627\\u0644 \\u0648\\u062C\\u0648\\u062F \\u0627\\u064A \\u062A\\u0634\\u0627\\u0628\\u0647\\u0627\\u062A \\u0627\\u0648 \\u062A\\u0643\\u0631\\u0627\\u0631\\u0627\\u062A \\u0641\\u064A \\u0627\\u0644\\u0627\\u0633\\u0645\\u0627\\u0621 \\u0633\\u064A\\u0645 \\u062A\\u0648\\u0641\\u064A\\u0631 \\u062E\\u064A\\u0627\\u0631\\u0627\\u062A \\u0644\\u062A\\u062D\\u062F\\u064A\\u062F \\u0627\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0635\\u062D\\u064A\\u062D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: FetchRelationship,\n          className: \"relation-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"\\u0627\\u0644\\u0625\\u0633\\u0645 \\u0627\\u0644\\u0643\\u0627\\u0645\\u0644 \\u0627\\u0644\\u0623\\u0648\\u0644\",\n              value: person1,\n              onChange: e => setPerson1(e.target.value),\n              className: \"inputNames\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 660,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 659,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"\\u0627\\u0644\\u0625\\u0633\\u0645 \\u0627\\u0644\\u0643\\u0627\\u0645\\u0644 \\u0627\\u0644\\u062B\\u0627\\u0646\\u064A\",\n              value: person2,\n              onChange: e => setPerson2(e.target.value),\n              className: \"inputNames\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 669,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 668,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ButtonSection\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"checkButton\",\n              children: \"\\u062A\\u062D\\u0642\\u0642 \\u0645\\u0646 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 678,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"reset\",\n              className: \"resetButton\",\n              children: \"\\u0625\\u0644\\u063A\\u0627\\u0621\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 679,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 677,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 7\n      }, this), relationship && /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"relationship-result\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          id: \"resultTitle\",\n          children: \"\\u0646\\u062A\\u064A\\u062C\\u0629 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"relationText\",\n          children: relationship\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"result-details\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            class: \"result-table\",\n            children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"\\u062F\\u0631\\u062C\\u0629 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 696,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  class: \"score-cell\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    class: \"score-bar-wrapper\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      class: \"score-bar-fill\",\n                      style: {\n                        width: '80%'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 699,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 698,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    class: \"score-meta\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      class: \"score-value\",\n                      children: \"80%\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 702,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      class: \"score-category high\",\n                      children: \"\\u0642\\u0648\\u064A\\u0629\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 703,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 701,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 697,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 695,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"\\u0646\\u0648\\u0639 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 708,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  class: \"relationship-tag\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    class: \"tag blood\",\n                    children: \"\\u062F\\u0645\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 709,\n                    columnNumber: 48\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 709,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 707,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"\\u062A\\u0641\\u0633\\u064A\\u0631 \\u0625\\u0636\\u0627\\u0641\\u064A\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 712,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  class: \"relation-explanation\",\n                  children: \"\\u0647\\u0624\\u0644\\u0627\\u0621 \\u0627\\u0644\\u0634\\u062E\\u0635\\u064A\\u0646 \\u0645\\u0631\\u062A\\u0628\\u0637\\u064A\\u0646 \\u0639\\u0646 \\u0637\\u0631\\u064A\\u0642 \\u0627\\u0644\\u0623\\u0628\\u0646\\u0627\\u0621 \\u0648\\u0627\\u0644\\u0623\\u062C\\u062F\\u0627\\u062F.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 713,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 711,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"\\u0639\\u062F\\u062F \\u0627\\u0644\\u0623\\u062C\\u064A\\u0627\\u0644 \\u0628\\u064A\\u0646\\u0647\\u0645\\u0627\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 718,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  class: \"generation-distance\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    id: \"numGen\",\n                    children: \"5\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 719,\n                    columnNumber: 51\n                  }, this), \" \\u0623\\u062C\\u064A\\u0627\\u0644\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 719,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 717,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"\\u0623\\u0642\\u0631\\u0628 \\u062C\\u062F \\u0645\\u0634\\u062A\\u0631\\u0643\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 722,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  class: \"common-ancestor\",\n                  children: \"\\u0627\\u0644\\u062D\\u0627\\u062C \\u0645\\u062D\\u0645\\u062F \\u0628\\u0646 \\u0627\\u0644\\u0637\\u064A\\u0628\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 723,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 721,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 694,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 693,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 692,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 650,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 617,\n    columnNumber: 5\n  }, this);\n};\n_s(RelationPage, \"qHAXbttrKxE0kvX0hfwbhsoSWf0=\");\n_c = RelationPage;\nexport default RelationPage;\nvar _c;\n$RefreshReg$(_c, \"RelationPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","translations","require","config","neo4jURI","process","env","REACT_APP_NEO4J_URI","neo4jUser","REACT_APP_NEO4J_USER","neo4jPassword","REACT_APP_NEO4J_PASSWORD","driver","auth","basic","session","score","relationDescribtion","getPersonMatches","name","fatherName","grandfatherName","lastName","query","params","result","run","records","map","record","id","get","toNumber","father","grandfather","splitName","fullName","parts","replace","split","length","personName","familyName","getRelationship","person1FullName","person2FullName","isArabic","text","test","translatedName1","translatedName2","translateName","person1Name","person1FatherName","person1GrandfatherName","person1LastName","person2Name","person2FatherName","person2GrandfatherName","person2LastName","person1Matches","person2Matches","console","log","person1ID","person2ID","error","message","duplicates","person1","person2","gender1","getGender","gender2","getAncestors","personID","personResult","person","level","person1Ancestors","person2Ancestors","a","join","person1AncestorsIds","person2AncestorsIds","i","j","p1Level","p2Level","p1AncestorGender","p2AncestorGender","p1AncestorFullName","getAncestorFullName","p2AncestorFullName","p1GreatAncestorGender","p2GreatAncestorGender","gender","close","personAncestors","properties","ancestor","language","nameParts","reverseTranslations","Object","fromEntries","entries","key","value","dict","translatedParts","part","RelationPage","_s","setPerson1","setPerson2","relationship","setRelationship","setDuplicates","getArabicClosenessLabel","fetchRelationship","name1","name2","relationshipResult","FetchRelationship","e","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","p","idx","onSubmit","type","placeholder","onChange","target","class","style","width","_c","$RefreshReg$"],"sources":["D:/Study/Projects/El-Kasr Family Tree/client/src/components/RelationChecker.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './RelationChecker.css';\r\nconst translations = require('./translation.json');\r\nrequire('dotenv').config();\r\n\r\nconst neo4jURI = process.env.REACT_APP_NEO4J_URI;\r\nconst neo4jUser = process.env.REACT_APP_NEO4J_USER;\r\nconst neo4jPassword = process.env.REACT_APP_NEO4J_PASSWORD;\r\n\r\nconst driver = require('neo4j-driver').driver(\r\n    neo4jURI,\r\n    require('neo4j-driver').auth.basic(neo4jUser, neo4jPassword)\r\n);\r\nconst session = driver.session();\r\n\r\nlet score;\r\nlet relationDescribtion = '';\r\nconst getPersonMatches = async (name, fatherName = \"\", grandfatherName = \"\", lastName) => {\r\n  let query = \"\";\r\n\r\n  if (grandfatherName) {\r\n    query = `\r\n      MATCH (grandfather:Person {name: $grandfatherName})-[:FATHER_OF]->(father:Person {name: $fatherName})-[:FATHER_OF]->(p:Person {name: $name, lastName: $lastName})\r\n      RETURN id(p) AS personID, p.name AS personName, p.lastName AS familyName, father.name AS fatherName, grandfather.name AS grandfatherName\r\n    `;\r\n  } \r\n  else if (fatherName) {\r\n    query = `\r\n      MATCH (father:Person {name: $fatherName})-[:FATHER_OF]->(p:Person {name: $name, lastName: $lastName})\r\n      OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n      RETURN id(p) AS personID, p.name AS personName, p.lastName AS familyName, father.name AS fatherName, grandfather.name AS grandfatherName\r\n    `;\r\n  } \r\n  else {\r\n    query = `\r\n      MATCH (p:Person {name: $name, lastName: $lastName})\r\n      OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(p)\r\n      OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n      RETURN id(p) AS personID, p.name AS personName, p.lastName AS familyName, father.name AS fatherName, grandfather.name AS grandfatherName\r\n    `;\r\n  }\r\n\r\n  const params = { name, lastName, fatherName, grandfatherName };\r\n  const result = await session.run(query, params);\r\n\r\n  return result.records.map(record => ({\r\n    id: record.get('personID').toNumber(),\r\n    name: record.get('personName'),\r\n    father: record.get('fatherName') || \"Unknown\",\r\n    grandfather: record.get('grandfatherName') || \"Unknown\",\r\n    lastName: record.get('familyName')\r\n  }));\r\n};\r\n\r\n// Function that split english translated name that may contain ben to full name only parts.\r\nfunction splitName(fullName) {\r\n  const parts = fullName.replace(/ ben /gi, ' ').split(/\\s+/);\r\n  if (parts.length === 2) {\r\n    return {\r\n      personName: parts[0],\r\n      fatherName: \"\",\r\n      grandfatherName: \"\",\r\n      familyName: parts[1]\r\n    };\r\n  } else if (parts.length === 3) {\r\n    return {\r\n      personName: parts[0],\r\n      fatherName: parts[1],\r\n      grandfatherName: \"\",\r\n      familyName: parts[2]\r\n    };\r\n  } else if (parts.length === 4) {\r\n    return {\r\n      personName: parts[0],\r\n      fatherName: parts[1],\r\n      grandfatherName: parts[2],\r\n      familyName: parts[3]\r\n    };\r\n  }\r\n  // Default case if structure doesn't match\r\n  return { personName: parts[0], fatherName: \"\", grandfatherName: \"\", familyName: parts[1] };\r\n}\r\n\r\nconst getRelationship = async (person1FullName, person2FullName) => {\r\n  const isArabic = (text) => /[\\u0600-\\u06FF]/.test(text);\r\n  let translatedName1, translatedName2;\r\n\r\n  if (isArabic(person1FullName)){\r\n    translatedName1 = translateName(person1FullName, false);\r\n  }\r\n  else{\r\n    translatedName1 = person1FullName;\r\n  }\r\n  if (isArabic(person2FullName)){\r\n    translatedName2 = translateName(person2FullName, false);\r\n  }\r\n  else{\r\n    translatedName2 = person2FullName;\r\n  }\r\n  \r\n  const { personName: person1Name, fatherName: person1FatherName, grandfatherName: person1GrandfatherName, familyName: person1LastName } = splitName(translatedName1);\r\n  const { personName: person2Name, fatherName: person2FatherName, grandfatherName: person2GrandfatherName, familyName: person2LastName } = splitName(translatedName2);\r\n  const person1Matches = await getPersonMatches(person1Name, person1FatherName, person1GrandfatherName, person1LastName);\r\n  const person2Matches = await getPersonMatches(person2Name, person2FatherName, person2GrandfatherName, person2LastName);\r\n\r\n  console.log(\"P1 matches : \", person1Matches);\r\n  console.log(\"P2 matches : \", person2Matches);\r\n\r\n  let person1ID, person2ID;\r\n  if (person1Matches.length > 1 || person2Matches.length > 1) {\r\n    return {\r\n      error: 'non-unique-name',\r\n      message: 'تم العثور على عدة أشخاص بنفس الاسم. الرجاء اختيار الصحيح.',\r\n      duplicates: {\r\n        person1: person1Matches.length > 1 ? person1Matches : [],\r\n        person2: person2Matches.length > 1 ? person2Matches : []\r\n      }\r\n    };\r\n  }\r\n  else{\r\n    person1ID = person1Matches[0].id;\r\n    person2ID = person2Matches[0].id;\r\n  }\r\n\r\n  const gender1 = await getGender(person1ID);\r\n  const gender2 = await getGender(person2ID);\r\n  try {\r\n\r\n    // Function that return the ancestors of a given person starting with the person itself and going up to the root.\r\n    const getAncestors = async (personID) => {\r\n      const result = await session.run(`\r\n        MATCH path = (ancestor:Person)-[:FATHER_OF|MOTHER_OF*]->(child:Person)\r\n        WHERE id(child) = $personID\r\n        WITH ancestor, id(ancestor) AS ID, length(path) AS level\r\n        RETURN DISTINCT ID, ancestor.name AS name, ancestor.lastName AS lastName, level\r\n        ORDER BY level ASC\r\n      `, { personID });\r\n    \r\n      const personResult = await session.run(`\r\n        MATCH (p:Person)\r\n        WHERE id(p) = $personID\r\n        RETURN id(p) AS ID, p.name AS name, p.lastName AS lastName\r\n      `, { personID });\r\n    \r\n      const person = personResult.records[0];\r\n    \r\n      return [\r\n        {\r\n          id: person.get('ID').toNumber(),\r\n          name: person.get('name'),\r\n          lastName: person.get('lastName'),\r\n          level: 0\r\n        },\r\n        ...result.records.map(record => ({\r\n          id: record.get('ID').toNumber(),\r\n          name: record.get('name'),\r\n          lastName: record.get('lastName'),\r\n          level: record.get('level').toNumber()\r\n        }))\r\n      ];\r\n    };\r\n\r\n    // Get the ancestors for both persons\r\n    // const maxLevels = 4; \r\n    let person1Ancestors = await getAncestors(person1ID);\r\n    let person2Ancestors = await getAncestors(person2ID);\r\n    console.log(person1Ancestors);\r\n    console.log(person2Ancestors);\r\n    console.log(`Person 1 Ancestors: ${person1Ancestors.map(a => a.name).join(' ben ')}`);\r\n    console.log(`Person 2 Ancestors: ${person2Ancestors.map(a => a.name).join(' ben ')}`);\r\n\r\n    const person1AncestorsIds = person1Ancestors.map(a => a.id);\r\n    const person2AncestorsIds = person2Ancestors.map(a => a.id);\r\n    const translatedName1 = translateName(person1FullName);\r\n    const translatedName2 = translateName(person2FullName);\r\n\r\n    // Check for common ancestors between the two persons\r\n    for (let i = 0; i < person1Ancestors.length; i++) {\r\n      for (let j = 0; j < person2Ancestors.length; j++) {\r\n        if (person1Ancestors[i].id === person2Ancestors[j].id) {\r\n          var p1Level = person1Ancestors[i].level;\r\n          var p2Level = person2Ancestors[j].level;\r\n          \r\n          console.log(`Level: (${p1Level}, ${p2Level})`);\r\n\r\n          if (p1Level === 0 && p2Level === 1) {\r\n            if (gender1 === 'Male'){\r\n              score = 100;\r\n              return `${translatedName1} هو والد ${translatedName2}`;\r\n            }\r\n            else{\r\n              return `${translatedName1} هي والدة ${translatedName2}`;\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 1 && p2Level === 0) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${translatedName1} هو ابن ${translatedName2}`);\r\n              return `${translatedName1} هو ابن ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${translatedName1} هي إبنة ${person2FullName}`);\r\n              return `${translatedName1} هي إبنة ${translatedName2}`;\r\n            }\r\n          } \r\n\r\n          else if (p1Level === 2 && p2Level === 0) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${person1FullName} هو حفيد ${person2FullName}`);\r\n              return `${translatedName1} هو حفيد ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} هي حفيدة ${person2FullName}.`);\r\n              return `${translatedName1} هي حفيدة ${translatedName2}`;\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 0 && p2Level === 2) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${person1FullName} هو جدّ ${person2FullName}'.`);\r\n              return `${translatedName1} هو جدّ ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} هي جدّة ${person2FullName}.`);\r\n              return `${translatedName1} هي جدّة ${translatedName2}`;\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 3 && p2Level === 0) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${person1FullName} هو إبن حفيد ${person2FullName}.`);\r\n              return `${translatedName1} هو إبن حفيد ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} هي إبنة حفيدة ${person2FullName}.`);\r\n              return `${translatedName1} هي إبنة حفيدة ${translatedName2}`;\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 0 && p2Level === 3) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${person1FullName} هو جد والد ${person2FullName}`);\r\n              return `${translatedName1} و جد والد ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName}هي جدة والدة ${person2FullName}`);\r\n              return `${translatedName1} هي جدة والدة ${translatedName2}`;\r\n            }\r\n          } \r\n          \r\n          else if (p1Level === 1 && p2Level === 1) {\r\n            if (gender1 === 'Male' && gender2 === 'Male'){\r\n              console.log(`${person1FullName} و ${person2FullName} إخوة.`);\r\n              return `${translatedName1} و ${translatedName2} إخوة`;\r\n            }\r\n            else if (gender1 === 'Female' && gender2 === 'Female'){\r\n              console.log(`${person1FullName} و ${person2FullName} أخوات.`);\r\n              return `${translatedName1} و ${translatedName2} أخوات`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} و ${person2FullName} إخوة.`);\r\n              return `${translatedName1} و ${translatedName2} إخوة`;\r\n            }\r\n          } \r\n          \r\n          else if (p1Level === 2 && p2Level === 1) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${translatedName1} هو ابن أخ ${translatedName2}`);\r\n              return `${translatedName1} هو ابن أخ ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} هي إبنة أخ ${person2FullName}.`);\r\n              return `${translatedName1} هي إبن أخ ${translatedName2}`;\r\n            }\r\n          } \r\n          \r\n          else if (p1Level === 1 && p2Level === 2) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${person1FullName} هو عم ${person2FullName}.`);\r\n              return `${translatedName1} هو عم ${translatedName2}'`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} هي عمّة ${person2FullName}.`);\r\n              return `${translatedName1} هي عمّة ${translatedName2}`;\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 2 && p2Level === 2) {\r\n            console.log(`${translatedName1} و ${translatedName2} أولاد العم.`);\r\n          \r\n            const p1AncestorGender = await getGender(person1AncestorsIds[1]);\r\n            const p2AncestorGender = await getGender(person2AncestorsIds[2]);\r\n\r\n            if (gender1 === 'Male') { \r\n              if (p1AncestorGender === 'Male') { \r\n                if (p2AncestorGender === 'Male'){  // ولد عمه\r\n                  return `${translatedName1} إبن عم ${translatedName2}`;\r\n                }\r\n                else{ // ولد عمته\r\n                  return `${translatedName1} هو إبن عمّة ${translatedName2}`;\r\n                }\r\n              } \r\n              else {  \r\n                if (p2AncestorGender === 'Male'){  // ولد خاله\r\n                  return `${translatedName1} هو إبن خال ${translatedName2}'`;\r\n                }\r\n                else{ // ولد خالته\r\n                  return `${translatedName1} هو إبن خالة ${translatedName2}`;\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (p1AncestorGender === 'Male') { \r\n                if (p2AncestorGender === 'Male'){  // بنت عمه\r\n                  return `${translatedName1} هي إبنة عمّ ${translatedName2}`;\r\n                }\r\n                else{ // بنت عمته\r\n                  return `${translatedName1} هي إبنة عمّة ${translatedName2}`;\r\n                }\r\n              } \r\n              else {  \r\n                if (p2AncestorGender === 'Male'){  // بنت خاله\r\n                  return `${translatedName1} هي إبنة خال ${translatedName2}`;\r\n                }\r\n                else{ // بنت خالته\r\n                  return `${translatedName1} هي إبنة خالة ${translatedName2}`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 2 && p2Level === 3) {          \r\n            const p1AncestorFullName = getAncestorFullName(person1Ancestors, 1);\r\n            const p1AncestorGender = await getGender(p1AncestorFullName);\r\n\r\n            const p2AncestorFullName = getAncestorFullName(person2Ancestors, 1);\r\n            const p2AncestorGender = await getGender(p2AncestorFullName);\r\n\r\n            if (gender1 === 'Male') { \r\n              \r\n              if (p1AncestorGender === 'Male') {  // father's side\r\n                if (p2AncestorGender === 'Male') {  // father's brother's son\r\n                  console.log(`${person1FullName} هو إبن عم والد ${person2FullName}.`);\r\n                  return `${translatedName1} هو إبن عم والد ${translatedName2}`;\r\n                } else { \r\n                  console.log(`${person1FullName} هو إبن عمة والد ${person2FullName}.`);\r\n                  return `${translatedName1} هو إبن عمة والد ${translatedName2}`;\r\n                }\r\n              } else {  // mother's side\r\n                if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                  console.log(`${person1FullName} هو إبن عم أم ${person2FullName}.`);\r\n                  return `${translatedName1} هو إبن عم أم ${translatedName2}.`;\r\n                } else {  // mother's brother's daughter\r\n                  console.log(`${person1FullName} هو إبن عمّة أم ${person2FullName}.`);\r\n                  return `${translatedName1} هو إبن عمّة أم ${translatedName2}`;\r\n                }\r\n              }\r\n            } else {  // If person1 is female\r\n            \r\n              if (p1AncestorGender === 'Male') {  // father's side\r\n                if (p2AncestorGender === 'Male') {  // father's brother's son\r\n                  console.log(`${person1FullName} هي إبنة عم والد ${person2FullName}.`);\r\n                  return `${translatedName1} هي إبنة عم والد ${translatedName2}`;\r\n                } else {  // father's brother's daughter\r\n                  console.log(`${person1FullName} هي إبنة عمة والد ${person2FullName}.`);\r\n                  return `${translatedName1} هي إبنة عمة والد ${translatedName2}`;\r\n                }\r\n              } else {  // mother's side\r\n                if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                  console.log(`${person1FullName} هي إبنة عم والدة ${person2FullName}.`);\r\n                  return `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\r\n                } else {  // mother's brother's daughter\r\n                  console.log(`${person1FullName} هي إبنة عمة والدة ${person2FullName}.`);\r\n                  return `${translatedName1} هي إبنة عمة والدة ${translatedName2}`;\r\n                }\r\n              }\r\n            }\r\n            \r\n          }\r\n          \r\n          else if (p1Level === 3 && p2Level === 2) {          \r\n            const p1AncestorGender = await getGender(person1AncestorsIds[1]);\r\n\r\n            const p2AncestorGender = await getGender(person2AncestorsIds[1]);\r\n\r\n            if (p1AncestorGender === 'Male') {  // father's side\r\n              if (p2AncestorGender === 'Male') {  // father's brother's son\r\n                console.log(`والد ${person1FullName} هو إبن عم ${person2FullName}`);\r\n                return `والد ${translatedName1} هو إبن عم ${translatedName2}`;\r\n              } else { \r\n                console.log(`والد ${person1FullName} هو إبن خال ${person2FullName}.`);\r\n                return `والد ${translatedName1} هو إبن خال ${translatedName2}`;\r\n              }\r\n            } \r\n            else {  // mother's side\r\n              if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                console.log(`والدة ${person1FullName} هي إبنة عم ${person2FullName}.`);\r\n                return `والدة ${translatedName1} هي إبنة عم ${translatedName2}`;\r\n              } else {  // mother's brother's daughter\r\n                console.log(`والدة ${person1FullName} هي إبنة خال ${person2FullName}.`);\r\n                return `والدة ${translatedName1} هي إبنة خال  ${translatedName2}`;\r\n              }\r\n            }\r\n            \r\n            \r\n          }\r\n          else if (p1Level === 3 && p2Level === 3) {          \r\n            \r\n            const p1AncestorGender = await getGender(person1AncestorsIds[1]);\r\n\r\n            const p1GreatAncestorGender = await getGender(person1AncestorsIds[2]);\r\n\r\n            const p2AncestorGender = await getGender(person2AncestorsIds[1]);\r\n\r\n            const p2GreatAncestorGender = await getGender(person2AncestorsIds[2]);\r\n            // Ancestor changes paternal/maternal\r\n            // Great Ancestor changes grandfather/grandmother\r\n            if (p1AncestorGender === 'Male') { \r\n              if (p2AncestorGender === 'Male'){\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`جدّ ${person1FullName} من الأب و جد ${person2FullName} من الأب إخوة.`);\r\n                    return `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s paternal grandmother are siblings.`);\r\n                    return `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s paternal grandfather are siblings.`);\r\n                    return `جدّة ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s paternal grandmother are sisters.`);\r\n                    return `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                }\r\n              }\r\n              else {\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s maternal grandfather are brothers.`);\r\n                    return `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s maternal grandmother are siblings.`);\r\n                    return `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s maternal grandfather are siblings.`);\r\n                    return `جدّة ${translatedName1} من الأب و جد${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s maternal grandmother are sisters.`);\r\n                    return `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (p2AncestorGender === 'Male'){\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s paternal grandfather are brothers.`);\r\n                    return `جدّ ${translatedName1} من الأم و جد${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s paternal grandmother are siblings.`);\r\n                    return `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s paternal grandfather are siblings.`);\r\n                    return `جدّة ${translatedName1} من الأم و جد ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s paternal grandmother are sisters.`);\r\n                    return `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب أخوات.`;\r\n                  }\r\n                }\r\n              }\r\n              else {\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s maternal grandfather are brothers.`);\r\n                    return `جدّ ${translatedName1} من الأم و جد ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s maternal grandmother are siblings.`);\r\n                    return `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s maternal grandfather are siblings.`);\r\n                    return `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s maternal grandmother are sisters.`);\r\n                    return `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            \r\n          }\r\n\r\n          // Still : (0,4) - (4,0) - (3-1) - (1-3) - (1-4) - (4-1) - (4-2) - (2-4) - (3-4) - (4-3) - (4-4)  \r\n        }\r\n      }\r\n    }\r\n    console.log('No direct relation found.');\r\n    return 'No direct relation found';\r\n  } catch (error) {\r\n    console.error('Error in relationship lookup:', error);\r\n    return 'Error in relationship lookup';\r\n  }\r\n};\r\n\r\nconst getGender = async (personID) => {\r\n  const session = driver.session(); // Open a session\r\n\r\n  try {\r\n    const result = await session.run(\r\n      `MATCH (p:Person) \r\n      WHERE id(p) = $personID\r\n      \r\n      RETURN p.gender AS gender`,\r\n      { personID }\r\n    );\r\n    \r\n    if (result.records.length > 0) {\r\n      const gender = result.records[0].get('gender');\r\n      return gender; // Return the gender value\r\n    } else {\r\n      console.log(`No person found with the ID ${personID}`);\r\n      return null; // Return null when no person is found\r\n    }\r\n  } catch (error) {\r\n    console.error('Error retrieving gender:', error);\r\n    return null; // Return null in case of an error\r\n  } finally {\r\n    await session.close(); // Always close the session after the query\r\n  }\r\n};\r\n\r\nconst getAncestorFullName = (personAncestors, level) => {\r\n  // Check if the ancestor exists at the given level\r\n  if (!personAncestors[level - 1] || !personAncestors[level - 1].properties) {\r\n    return `Unknown (Level: ${level})`;\r\n  }\r\n\r\n  const ancestor = personAncestors[level - 1].properties;\r\n  const name = ancestor.name || \"Unknown\"; // Default to \"Unknown\" if name is missing\r\n  const lastName = ancestor.lastName || \"Unknown\"; // Default to \"Unknown\" if lastName is missing\r\n\r\n  return `${name} ${lastName}`;\r\n};\r\n\r\nexport const translateName = (fullName, language = true) => {\r\n  const nameParts = fullName.split(' ');\r\n\r\n  // Build reverse translation map if needed\r\n  const reverseTranslations = Object.fromEntries(\r\n    Object.entries(translations).map(([key, value]) => [value, key])\r\n  );\r\n\r\n  const dict = language ? translations : reverseTranslations;\r\n\r\n  const translatedParts = nameParts.map(part => dict[part] || part);\r\n\r\n  return translatedParts.join(' ');\r\n};\r\n\r\n\r\nconst RelationPage = () => {\r\n  const [person1, setPerson1] = useState('');\r\n  const [person2, setPerson2] = useState('');\r\n  const [relationship, setRelationship] = useState('');\r\n  const [duplicates, setDuplicates] = useState({ person1: [], person2: [] });\r\n  // const relationTypes = [\"Blood\"]; // or [\"In-Law\", \"Marriage\"]\r\n  // const explanation = \"You both share the same grandfather. This makes you close relatives (blood relation).\";\r\n  function getArabicClosenessLabel(score) {\r\n    if (score >= 95) return \"صلة قرابة شديدة جدًا\";\r\n    if (score >= 85) return \"صلة قرابة قوية\";\r\n    if (score >= 70) return \"صلة قرابة متوسطة\";\r\n    if (score >= 50) return \"صلة بعيدة نسبياً\";\r\n    if (score > 0) return \"صلة ضعيفة جدًا\";\r\n    return \"لا توجد صلة واضحة\";\r\n  }\r\n  const fetchRelationship = async (name1, name2) => {\r\n    \r\n    const relationshipResult = await getRelationship(name1, name2);\r\n    return relationshipResult;\r\n  };\r\n\r\n  const FetchRelationship = async (e) => {\r\n    e.preventDefault();\r\n  \r\n    const result = await fetchRelationship(person1, person2);\r\n  \r\n    if (result.error === 'non-unique-name') {\r\n      setDuplicates(result.duplicates);\r\n      setRelationship(result.message); // optional message\r\n    } else {\r\n      setDuplicates({ person1: [], person2: [] }); // clear if no dups\r\n      setRelationship(result);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"relation-page\">\r\n    {/* Left Panel: Duplicate Suggestions */}\r\n    {(duplicates.person1.length > 0 || duplicates.person2.length > 0) && (\r\n      <aside className=\"duplicates-panel\">\r\n        {duplicates.person1.length > 0 && (\r\n          <section className=\"duplicates-group\">\r\n            <h3>أكتب الاسم الكامل للشخص الصحيح:</h3>\r\n            <ul>\r\n              {duplicates.person1.map((p, idx) => (\r\n                <li key={`p1-${idx}`}>\r\n                  {`${translateName(p.name)} بن ${translateName(p.father)} بن ${translateName(p.grandfather)} ${translateName(p.lastName)}`}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </section>\r\n        )}\r\n  \r\n        {duplicates.person2.length > 0 && (\r\n          <section className=\"duplicates-group\">\r\n            <h3>اختر الشخص الصحيح \"{person2}\"</h3>\r\n            <ul>\r\n              {duplicates.person2.map((p, idx) => (\r\n                <li key={`p2-${idx}`}>\r\n                  {`${translateName(p.name)} بن ${translateName(p.father)} بن ${translateName(p.grandfather)} ${translateName(p.lastName)}`}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </section>\r\n        )}\r\n      </aside>\r\n    )}\r\n  \r\n    {/* Main Panel: Form + Result */}\r\n    <main className=\"main-panel\">\r\n      <section className=\"relation-form-section\">\r\n        <h2 className=\"section-title\">ماهي العلاقة بينهما؟</h2>\r\n        <p id=\"DescriptionZone\">\r\n          الهدف من هذه الصفحة هو تحديد صلة القرابة بين شخصين بناءًا على اسمهم. كل ماعليك فعله\r\n          هو ادخال الاسم للشخص الاول والثاني وثم النقر على \"التحقق من العلاقة\" ستظهر لك النتيجة في اسهل الصفحة\r\n          والتي يتوضح لك نوع العلاقة ومدى قرابتها؟ في حال وجود اي تشابهات او تكرارات في الاسماء سيم توفير خيارات لتحديد الشخص الصحيح\r\n        </p>\r\n        <form onSubmit={FetchRelationship} className=\"relation-form\">\r\n          <div className=\"input-group\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"الإسم الكامل الأول\"\r\n              value={person1}\r\n              onChange={(e) => setPerson1(e.target.value)}\r\n              className=\"inputNames\"\r\n            />\r\n          </div>\r\n          <div className=\"input-group\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"الإسم الكامل الثاني\"\r\n              value={person2}\r\n              onChange={(e) => setPerson2(e.target.value)}\r\n              className=\"inputNames\"\r\n            />\r\n          </div>\r\n          <div className='ButtonSection'>\r\n            <button type=\"submit\" className=\"checkButton\">تحقق من العلاقة</button>\r\n            <button type=\"reset\" className='resetButton'>إلغاء</button>\r\n          </div>\r\n          \r\n        </form>\r\n      </section>\r\n\r\n  \r\n      {/* Result */}\r\n      {relationship && (\r\n        <section className=\"relationship-result\">\r\n          <h2 id=\"resultTitle\">نتيجة العلاقة</h2>\r\n          <p className=\"relationText\">{relationship}</p>\r\n  \r\n          <div class=\"result-details\">\r\n            <table class=\"result-table\">\r\n              <tbody>\r\n                <tr>\r\n                  <th>درجة العلاقة</th>\r\n                  <td class=\"score-cell\">\r\n                    <div class=\"score-bar-wrapper\">\r\n                      <div class=\"score-bar-fill\" style={{width: '80%'}}></div>\r\n                    </div>\r\n                    <div class=\"score-meta\">\r\n                      <span class=\"score-value\">80%</span>\r\n                      <span class=\"score-category high\">قوية</span>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>نوع العلاقة</th>\r\n                  <td class=\"relationship-tag\"><span class=\"tag blood\">دم</span></td>\r\n                </tr>\r\n                <tr>\r\n                  <th>تفسير إضافي</th>\r\n                  <td class=\"relation-explanation\">\r\n                    هؤلاء الشخصين مرتبطين عن طريق الأبناء والأجداد.\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>عدد الأجيال بينهما</th>\r\n                  <td class=\"generation-distance\"><span id=\"numGen\">5</span> أجيال</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>أقرب جد مشترك</th>\r\n                  <td class=\"common-ancestor\">الحاج محمد بن الطيب</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n\r\n        </section>\r\n      )}\r\n    </main>\r\n  </div>\r\n  \r\n  );\r\n};\r\n\r\nexport default RelationPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}