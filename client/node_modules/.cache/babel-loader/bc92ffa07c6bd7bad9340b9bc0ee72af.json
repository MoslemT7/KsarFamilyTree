{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line no-unused-vars\nvar result_rx_1 = __importDefault(require(\"./result-rx\"));\n// eslint-disable-next-line no-unused-vars\nvar transaction_rx_1 = __importDefault(require(\"./transaction-rx\"));\n/**\n * Represents a rx transaction that is managed by the transaction executor.\n *\n * @public\n */\nvar RxManagedTransaction = /** @class */function () {\n  /**\n   * @private\n   */\n  function RxManagedTransaction(_a) {\n    var run = _a.run;\n    this._run = run;\n  }\n  /**\n   * @private\n   * @param {RxTransaction} txc - The transaction to be wrapped\n   * @returns {RxManagedTransaction} The managed transaction\n   */\n  RxManagedTransaction.fromTransaction = function (txc) {\n    return new RxManagedTransaction({\n      run: txc.run.bind(txc)\n    });\n  };\n  /**\n   * Creates a reactive result that will execute the query in this transaction, with the provided parameters.\n   *\n   * @public\n   * @param {string} query - Query to be executed.\n   * @param {Object} parameters - Parameter values to use in query execution.\n   * @returns {RxResult} - A reactive result\n   */\n  RxManagedTransaction.prototype.run = function (query, parameters) {\n    return this._run(query, parameters);\n  };\n  return RxManagedTransaction;\n}();\nexports.default = RxManagedTransaction;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","result_rx_1","require","transaction_rx_1","RxManagedTransaction","_a","run","_run","fromTransaction","txc","bind","prototype","query","parameters","default"],"sources":["D:/Study/Projects/Copy 4/client/node_modules/neo4j-driver/lib/transaction-managed-rx.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line no-unused-vars\nvar result_rx_1 = __importDefault(require(\"./result-rx\"));\n// eslint-disable-next-line no-unused-vars\nvar transaction_rx_1 = __importDefault(require(\"./transaction-rx\"));\n/**\n * Represents a rx transaction that is managed by the transaction executor.\n *\n * @public\n */\nvar RxManagedTransaction = /** @class */ (function () {\n    /**\n     * @private\n     */\n    function RxManagedTransaction(_a) {\n        var run = _a.run;\n        this._run = run;\n    }\n    /**\n     * @private\n     * @param {RxTransaction} txc - The transaction to be wrapped\n     * @returns {RxManagedTransaction} The managed transaction\n     */\n    RxManagedTransaction.fromTransaction = function (txc) {\n        return new RxManagedTransaction({\n            run: txc.run.bind(txc)\n        });\n    };\n    /**\n     * Creates a reactive result that will execute the query in this transaction, with the provided parameters.\n     *\n     * @public\n     * @param {string} query - Query to be executed.\n     * @param {Object} parameters - Parameter values to use in query execution.\n     * @returns {RxResult} - A reactive result\n     */\n    RxManagedTransaction.prototype.run = function (query, parameters) {\n        return this._run(query, parameters);\n    };\n    return RxManagedTransaction;\n}());\nexports.default = RxManagedTransaction;"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,WAAW,GAAGP,eAAe,CAACQ,OAAO,CAAC,aAAa,CAAC,CAAC;AACzD;AACA,IAAIC,gBAAgB,GAAGT,eAAe,CAACQ,OAAO,CAAC,kBAAkB,CAAC,CAAC;AACnE;AACA;AACA;AACA;AACA;AACA,IAAIE,oBAAoB,GAAG,aAAe,YAAY;EAClD;AACJ;AACA;EACI,SAASA,oBAAoBA,CAACC,EAAE,EAAE;IAC9B,IAAIC,GAAG,GAAGD,EAAE,CAACC,GAAG;IAChB,IAAI,CAACC,IAAI,GAAGD,GAAG;EACnB;EACA;AACJ;AACA;AACA;AACA;EACIF,oBAAoB,CAACI,eAAe,GAAG,UAAUC,GAAG,EAAE;IAClD,OAAO,IAAIL,oBAAoB,CAAC;MAC5BE,GAAG,EAAEG,GAAG,CAACH,GAAG,CAACI,IAAI,CAACD,GAAG;IACzB,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIL,oBAAoB,CAACO,SAAS,CAACL,GAAG,GAAG,UAAUM,KAAK,EAAEC,UAAU,EAAE;IAC9D,OAAO,IAAI,CAACN,IAAI,CAACK,KAAK,EAAEC,UAAU,CAAC;EACvC,CAAC;EACD,OAAOT,oBAAoB;AAC/B,CAAC,CAAC,CAAE;AACJL,OAAO,CAACe,OAAO,GAAGV,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"script"}