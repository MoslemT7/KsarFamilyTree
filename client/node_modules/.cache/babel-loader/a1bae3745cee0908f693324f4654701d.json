{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\Projects\\\\El-Kasr Family Tree\\\\client\\\\src\\\\components\\\\RelationChecker.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Tree from 'react-d3-tree';\nimport './RelationChecker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst translations = require('./translation.json');\nrequire('dotenv').config();\nconst neo4jURI = process.env.REACT_APP_NEO4J_URI;\nconst neo4jUser = process.env.REACT_APP_NEO4J_USER;\nconst neo4jPassword = process.env.REACT_APP_NEO4J_PASSWORD;\nconst driver = require('neo4j-driver').driver(neo4jURI, require('neo4j-driver').auth.basic(neo4jUser, neo4jPassword));\nconst session = driver.session();\nfunction countBenAndBent(str) {\n  const matches = str.match(/\\b(ben|bent)\\b/gi);\n  return matches ? matches.length : 0;\n}\nfunction splitName(fullName) {\n  const parts = fullName.replace(/\\s+(ben|bent)\\s+/gi, ' ').trim().split(/\\s+/);\n  const bentCount = countBenAndBent(fullName);\n  if (parts.length === 2) {\n    if (bentCount === 0) {\n      return {\n        personName: parts[0],\n        fatherName: \"\",\n        grandfatherName: \"\",\n        familyName: parts[1]\n      };\n    } else if (bentCount === 1) {\n      return {\n        personName: parts[0],\n        fatherName: parts[1],\n        grandfatherName: \"\",\n        familyName: \"\"\n      };\n    }\n  } else if (parts.length === 3) {\n    if (bentCount === 1) {\n      return {\n        personName: parts[0],\n        fatherName: parts[1],\n        grandfatherName: \"\",\n        familyName: parts[2]\n      };\n    } else if (bentCount === 2) {\n      return {\n        personName: parts[0],\n        fatherName: parts[1],\n        grandfatherName: parts[2],\n        familyName: \"\"\n      };\n    }\n  } else if (parts.length === 4) {\n    return {\n      personName: parts[0],\n      fatherName: parts[1],\n      grandfatherName: parts[2],\n      familyName: parts[3]\n    };\n  }\n  // Default case if structure doesn't match\n  return {\n    personName: parts[0],\n    fatherName: \"\",\n    grandfatherName: \"\",\n    familyName: parts[1]\n  };\n}\nfunction buildTreePath(path) {\n  // Handle case where the path is empty\n  if (path.length === 0) return null;\n  return path.reduceRight((acc, person) => {\n    return {\n      id: person.id.toNumber(),\n      name: `${person.name} ${person.lastName}`,\n      children: acc ? [acc] : []\n    };\n  }, null);\n}\nfunction mergePaths(pathToP1, pathToP2) {\n  // Handle empty paths by returning null or an empty object\n  if (pathToP1.length === 0 && pathToP2.length === 0) return null;\n  const ancestor = pathToP1[0]; // Assuming both paths share the same ancestor\n  const branch1 = pathToP1.slice(1);\n  const branch2 = pathToP2.slice(1);\n\n  // Check if any of the branches are empty and handle accordingly\n  const children = [];\n  if (branch1.length > 0) {\n    children.push(buildTreePath(branch1));\n  }\n  if (branch2.length > 0) {\n    children.push(buildTreePath(branch2));\n  }\n\n  // Return the merged structure\n  return {\n    id: ancestor.id.toNumber(),\n    name: `${ancestor.name} ${ancestor.lastName}`,\n    children: children.length > 0 ? children : undefined // Only include children if there are any\n  };\n}\nexport const translateName = (fullName, language = true) => {\n  const nameParts = fullName.split(' ');\n\n  // Build reverse translation map if needed\n  const reverseTranslations = Object.fromEntries(Object.entries(translations).map(([key, value]) => [value, key]));\n  const dict = language ? translations : reverseTranslations;\n  const translatedParts = nameParts.map(part => dict[part] || part);\n  return translatedParts.join(' ');\n};\nconst RelationPage = () => {\n  _s();\n  var _relationship$relatio, _relationship$relatio2, _relationship$relatio3, _relationship$relatio4, _relationship$relatio5, _relationship$commonA, _relationship$commonA2, _relationship$commonA3, _relationship$commonA4, _relationship$commonA5, _relationship$commonA6, _relationship$commonA7, _relationship$commonA8, _relationship$relatio6, _relationship$relatio7, _relationship$relatio8, _relationship$relatio9;\n  const [person1, setPerson1] = useState('');\n  const [person2, setPerson2] = useState('');\n  const [relationship, setRelationship] = useState('');\n  const [duplicates, setDuplicates] = useState({\n    person1: [],\n    person2: []\n  });\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState(\"\");\n  const fetchRelationship = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError(false);\n    setLoadingMessage(\"بداية البحث عن العلاقة...\");\n    try {\n      const result = await getRelationship(person1, person2);\n      if (result.error === 'non-unique-name') {\n        setDuplicates(result.duplicates);\n        setRelationship(result.message);\n      } else {\n        var _result$score, _result$levelsTuple, _result$generation, _result$explanation$t, _result$explanation, _result$explanation$e, _result$explanation2, _result$ancestor, _result$treeData, _result$person1ID, _result$person2ID;\n        setDuplicates({\n          person1: [],\n          person2: []\n        });\n        setRelationship({\n          relationshipDescription: result.relation,\n          relationshipScore: (_result$score = result.score) !== null && _result$score !== void 0 ? _result$score : null,\n          relationshipLevels: (_result$levelsTuple = result.levelsTuple) !== null && _result$levelsTuple !== void 0 ? _result$levelsTuple : null,\n          relationshipGenerationGap: (_result$generation = result.generation) !== null && _result$generation !== void 0 ? _result$generation : null,\n          relationshipExplanationType: (_result$explanation$t = (_result$explanation = result.explanation) === null || _result$explanation === void 0 ? void 0 : _result$explanation.type) !== null && _result$explanation$t !== void 0 ? _result$explanation$t : null,\n          relationshipExplanationDesc: (_result$explanation$e = (_result$explanation2 = result.explanation) === null || _result$explanation2 === void 0 ? void 0 : _result$explanation2.explanation) !== null && _result$explanation$e !== void 0 ? _result$explanation$e : null,\n          commonAncestor: (_result$ancestor = result.ancestor) !== null && _result$ancestor !== void 0 ? _result$ancestor : null,\n          ancestorstreeData: (_result$treeData = result.treeData) !== null && _result$treeData !== void 0 ? _result$treeData : null,\n          person1ID: (_result$person1ID = result.person1ID) !== null && _result$person1ID !== void 0 ? _result$person1ID : null,\n          person2ID: (_result$person2ID = result.person2ID) !== null && _result$person2ID !== void 0 ? _result$person2ID : null\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching relationship:', error);\n      setRelationship({\n        relationshipDescription: 'An error occurred',\n        relationshipScore: null\n      });\n      setError(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const checkMarriage = async (person1ID, person2ID, gender1, gender2) => {\n    if (gender1 === gender2) {\n      return {\n        areMarried: false\n      };\n    }\n    setLoadingMessage(\"جاري البحث عن علاقة زواج\");\n    const result = await session.run(`\n          MATCH (Husband:Person)-[:HUSBAND_OF]->(Wife:Person)\n          MATCH (Wife)-[:WIFE_OF]->(Husband)\n          WHERE (id(Wife) = $person1ID AND id(Husband) = $person2ID) \n            OR (id(Wife) = $person2ID AND id(Husband) = $person1ID)\n          RETURN Husband AS P1, Wife AS P2\n        `, {\n      person1ID,\n      person2ID\n    });\n    if (result.records.length === 0) {\n      return {\n        areMarried: false\n      };\n    }\n    const record = result.records[0];\n    const P1 = record.get(\"P1\").properties;\n    const P2 = record.get(\"P2\").properties;\n    return record.length === 0 ? {\n      areMarried: false\n    } : {\n      areMarried: true,\n      P1,\n      P2\n    };\n  };\n  async function getMarriageRelation(session, person1ID, person2ID, translatedName1, translatedName2, gender1, gender2) {\n    var _ownRecord$get$toNumb, _ownRecord$get, _ownRecord$get$toNumb2, _ownRecord$get2, _ownRecord$get3, _ownRecord$get4, _spouseRecord$get$toN, _spouseRecord$get, _spouseRecord$get$toN2, _spouseRecord$get2, _spouseRecord$get3, _spouseRecord$get4, _spouseRecord$get5;\n    console.log('🔍 Checking marriage-based relationship between', translatedName1, 'and', translatedName2);\n\n    // Step 1: Person's own family\n    const ownFamilyQuery = `\n    MATCH (P:Person)\n    WHERE id(P) = $personId\n\n    OPTIONAL MATCH (Father:Person)-[:FATHER_OF]->(P)\n    OPTIONAL MATCH (Mother:Person)-[:MOTHER_OF]->(P)\n    OPTIONAL MATCH (Father)-[:FATHER_OF]->(Sibling:Person)\n    WHERE Sibling <> P\n\n    OPTIONAL MATCH (Sibling)-[:HUSBAND_OF|:WIFE_OF]->(SiblingSpouse:Person)\n\n    RETURN \n      id(Father) AS fatherId,\n      id(Mother) AS motherId,\n      collect(DISTINCT id(Sibling)) AS siblingIds,\n      collect(DISTINCT id(SiblingSpouse)) AS siblingSpouseIds\n  `;\n    const ownResult = await session.run(ownFamilyQuery, {\n      personId: person1ID\n    });\n    const ownRecord = ownResult.records[0];\n    const fatherId = (_ownRecord$get$toNumb = (_ownRecord$get = ownRecord.get(\"fatherId\")) === null || _ownRecord$get === void 0 ? void 0 : _ownRecord$get.toNumber()) !== null && _ownRecord$get$toNumb !== void 0 ? _ownRecord$get$toNumb : null;\n    const motherId = (_ownRecord$get$toNumb2 = (_ownRecord$get2 = ownRecord.get(\"motherId\")) === null || _ownRecord$get2 === void 0 ? void 0 : _ownRecord$get2.toNumber()) !== null && _ownRecord$get$toNumb2 !== void 0 ? _ownRecord$get$toNumb2 : null;\n    const siblingIds = ((_ownRecord$get3 = ownRecord.get(\"siblingIds\")) !== null && _ownRecord$get3 !== void 0 ? _ownRecord$get3 : []).map(id => id.toNumber());\n    const siblingSpouseIds = ((_ownRecord$get4 = ownRecord.get(\"siblingSpouseIds\")) !== null && _ownRecord$get4 !== void 0 ? _ownRecord$get4 : []).map(id => id.toNumber());\n    console.log('👨‍👩‍👧 Own Family:');\n    console.log('Father ID:', fatherId);\n    console.log('Mother ID:', motherId);\n    console.log('Sibling IDs:', siblingIds);\n    console.log('Sibling Spouse IDs:', siblingSpouseIds);\n\n    // Step 2: Spouse's family\n    const spouseFamilyQuery = `\n    MATCH (P:Person)-[:HUSBAND_OF|:WIFE_OF]->(Spouse:Person)\n    WHERE id(P) = $personId\n\n    OPTIONAL MATCH (SFather:Person)-[:FATHER_OF]->(Spouse)\n    OPTIONAL MATCH (SMother:Person)-[:MOTHER_OF]->(Spouse)\n    OPTIONAL MATCH (SFather)-[:FATHER_OF]->(SSibling:Person)\n    WHERE SSibling <> Spouse\n\n    OPTIONAL MATCH (SSibling)-[:HUSBAND_OF|:WIFE_OF]->(SSiblingSpouse:Person)\n\n    // Get children of the spouse\n    OPTIONAL MATCH (Spouse)-[:MOTHER_OF|:FATHER_OF]->(Child:Person)\n    OPTIONAL MATCH (Child)-[:HUSBAND_OF|:WIFE_OF]->(ChildSpouse:Person)\n\n    RETURN \n      id(SFather) AS sFatherId,\n      id(SMother) AS sMotherId,\n      collect(DISTINCT id(SSibling)) AS sSiblingIds,\n      collect(DISTINCT id(SSiblingSpouse)) AS sSiblingSpouseIds,\n      collect(DISTINCT id(Child)) AS childIds,\n      collect(DISTINCT id(ChildSpouse)) AS childSpouseIds\n  `;\n    const spouseResult = await session.run(spouseFamilyQuery, {\n      personId: person1ID\n    });\n    const spouseRecord = spouseResult.records[0];\n    const sFatherId = (_spouseRecord$get$toN = spouseRecord === null || spouseRecord === void 0 ? void 0 : (_spouseRecord$get = spouseRecord.get(\"sFatherId\")) === null || _spouseRecord$get === void 0 ? void 0 : _spouseRecord$get.toNumber()) !== null && _spouseRecord$get$toN !== void 0 ? _spouseRecord$get$toN : null;\n    const sMotherId = (_spouseRecord$get$toN2 = spouseRecord === null || spouseRecord === void 0 ? void 0 : (_spouseRecord$get2 = spouseRecord.get(\"sMotherId\")) === null || _spouseRecord$get2 === void 0 ? void 0 : _spouseRecord$get2.toNumber()) !== null && _spouseRecord$get$toN2 !== void 0 ? _spouseRecord$get$toN2 : null;\n    const sSiblingIds = ((_spouseRecord$get3 = spouseRecord === null || spouseRecord === void 0 ? void 0 : spouseRecord.get(\"sSiblingIds\")) !== null && _spouseRecord$get3 !== void 0 ? _spouseRecord$get3 : []).map(id => id.toNumber());\n    const sSiblingSpouseIds = ((_spouseRecord$get4 = spouseRecord === null || spouseRecord === void 0 ? void 0 : spouseRecord.get(\"sSiblingSpouseIds\")) !== null && _spouseRecord$get4 !== void 0 ? _spouseRecord$get4 : []).map(id => id.toNumber());\n    const childrenSpouseIds = ((_spouseRecord$get5 = spouseRecord === null || spouseRecord === void 0 ? void 0 : spouseRecord.get(\"childSpouseIds\")) !== null && _spouseRecord$get5 !== void 0 ? _spouseRecord$get5 : []).map(id => id.toNumber());\n    console.log('🧑‍🤝‍🧑 Spouse Family:');\n    console.log('Spouse Father ID:', sFatherId);\n    console.log('Spouse Mother ID:', sMotherId);\n    console.log('Spouse Sibling IDs:', sSiblingIds);\n    console.log('Spouse Sibling Spouse IDs:', sSiblingSpouseIds);\n    console.log('Children Spouse IDs:', childrenSpouseIds);\n\n    // Step 3: Matching\n    const match = id => id !== null && id === person2ID;\n    const isIn = list => list.some(id => id === person2ID);\n    if (isIn(sSiblingIds)) {\n      console.log('✅ Match: Sibling');\n      if (gender1 === 'Male') {\n        return `${translatedName1} هو زوج اخت ${translatedName2}`;\n      } else {\n        return `${translatedName1} هي زوجة اخ ${translatedName2}`;\n      }\n    }\n    if (isIn(siblingSpouseIds)) {\n      console.log('✅ Match: Spouse Siblings');\n      // CORRECT ✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅\n      if (gender1 === 'Male') {\n        // Male person with male sibling-in-law (spouse of the sibling)\n        return `${translatedName1} هو اخ زوج ${translatedName2} (سلف)`;\n      } else {\n        // Female person with female sibling-in-law (spouse of the sibling)\n        return `${translatedName1} هي اخت زوج ${translatedName2} (حماة) `;\n      }\n    }\n    if (match(sFatherId) || match(sMotherId)) {\n      console.log('✅ Match: Children spouses');\n      if (gender2 === 'Male') {\n        return `${translatedName1} هو زوج ابنة ${translatedName2}`;\n      } else {\n        return `${translatedName1} هي زوجة ابن ${translatedName2} (كنة)`;\n      }\n    }\n    if (isIn(childrenSpouseIds)) {\n      if (gender2 === 'Male') {\n        return `${translatedName1} هو أب زوج ${translatedName2}`;\n      } else {\n        return `${translatedName1} هي أم ابن ${translatedName2}`;\n      }\n    }\n    return \"لا توجد علاقة واضحة\";\n  }\n  const getAncestors = async (person1ID, person2ID) => {\n    setLoadingMessage(\"جاري البحث عن الأجداد المشتركة\");\n    const result = await session.run(`\n          MATCH path1 = (common:Person)-[:FATHER_OF|MOTHER_OF*0..4]->(p1:Person)\n          WHERE id(p1) = $person1ID\n      \n          MATCH path2 = (common)-[:FATHER_OF|MOTHER_OF*0..4]->(p2:Person)\n          WHERE id(p2) = $person2ID\n            AND id(p1) <> id(p2)\n      \n          WITH common, path1, path2, length(path1) AS level1, length(path2) AS level2\n          OPTIONAL MATCH (cGF:Person)-[:FATHER_OF]->(cF:Person)-[:FATHER_OF]->(common)\n\n          ORDER BY (level1 + level2) ASC\n          LIMIT 1\n      \n          RETURN \n            common.name AS commonAncestorName,\n            cF.name AS commonAncestorFatherName,\n            cGF.name AS commonAncestorGrandFatherName,\n            common.lastName AS commonAncestorLastName,\n            id(common) AS commonAncestorID,\n            common.gender AS commonAncestorGender,\n            level1 AS generationsFromP1,\n            level2 AS generationsFromP2,\n            [n IN nodes(path1) | { id: id(n), name: n.name, lastName: n.lastName, gender: n.gender }] AS pathToP1,\n            [n IN nodes(path2) | { id: id(n), name: n.name, lastName: n.lastName, gender: n.gender }] AS pathToP2\n        `, {\n      person1ID,\n      person2ID\n    });\n    const record = result.records[0];\n    if (result.records.length === 0) {\n      return null;\n    }\n    return {\n      id: record.get('commonAncestorID').toNumber(),\n      name: record.get('commonAncestorName'),\n      lastName: record.get('commonAncestorLastName'),\n      fatherName: record.get('commonAncestorFatherName'),\n      grandfatherName: record.get('commonAncestorGrandFatherName'),\n      gender: record.get('commonAncestorGender'),\n      levelFromP1: record.get('generationsFromP1').toNumber(),\n      levelFromP2: record.get('generationsFromP2').toNumber(),\n      pathFromAncestorToP1: record.get('pathToP1'),\n      pathFromAncestorToP2: record.get('pathToP2')\n    };\n  };\n  const getPersonMatches = async (personName, fatherName = \"\", grandfatherName = \"\", familyName) => {\n    let cypherQuery = ``;\n    const queryParamsObject = {};\n    if (personName) {\n      if (fatherName) {\n        if (grandfatherName) {\n          if (familyName) {\n            cypherQuery += `\n              MATCH (grandfather:Person)-[:FATHER_OF]->(father:Person)-[:FATHER_OF]->(child:Person)\n              WHERE child.name = $personName AND \n                    father.name = $fatherName AND \n                    grandfather.name = $grandfatherName AND \n                    child.lastName = $familyName\n              RETURN \n                id(child) AS childID,\n                child.name AS childName, \n                father.name AS fatherName, \n                grandfather.name AS grandfatherName, \n                child.lastName AS familyName  \n            `;\n            queryParamsObject.personName = personName;\n            queryParamsObject.fatherName = fatherName;\n            queryParamsObject.grandfatherName = grandfatherName;\n            queryParamsObject.familyName = familyName;\n          } else {\n            cypherQuery += `\n              MATCH (grandfather:Person)-[:FATHER_OF]->(father:Person)-[:FATHER_OF]->(child:Person)\n              WHERE child.name = $personName AND \n                    father.name = $fatherName AND\n                    grandfather.name = $grandfatherName\n              RETURN \n                    id(child) AS childID, \n                    child.name AS childName, \n                    father.name AS fatherName, \n                    grandfather.name AS grandfatherName,\n                    child.lastName AS familyName,\n                    child.gender AS gender      \n              `;\n            queryParamsObject.personName = personName;\n            queryParamsObject.fatherName = fatherName;\n            queryParamsObject.grandfatherName = grandfatherName;\n          }\n        } else {\n          if (familyName) {\n            cypherQuery += `\n            MATCH (father:Person)-[:FATHER_OF]->(child:Person)\n            WHERE child.name = $personName AND \n                  father.name = $fatherName AND\n                  child.lastName = $familyName\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\n            RETURN  \n              id(child) AS childID,\n              child.name AS childName, \n              father.name AS fatherName,\n              grandfather.name AS grandfatherName,\n              child.lastName AS familyName,\n              child.gender AS gender\n            `;\n            queryParamsObject.personName = personName;\n            queryParamsObject.fatherName = fatherName;\n            queryParamsObject.familyName = familyName;\n          } else {\n            cypherQuery += `\n            MATCH (father:Person)-[:FATHER_OF]->(child:Person)\n            \n            WHERE child.name = $personName AND \n                  father.name = $fatherName\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\n            RETURN  id(child) AS childID, \n                    child.name AS childName, \n                    father.name AS fatherName, \n                    grandfather.name AS grandfatherName,\n                    child.lastName AS familyName,\n                    child.gender AS gender\n            `;\n            queryParamsObject.personName = personName;\n            queryParamsObject.fatherName = fatherName;\n          }\n        }\n      } else {\n        if (familyName) {\n          cypherQuery += `\n          MATCH (child:Person)\n          WHERE child.name = $personName AND child.lastName = $familyName\n          OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(child)\n          OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\n          RETURN \n            id(child) AS childID,\n            child.name AS childName, \n            father.name AS fatherName,\n            grandfather.name AS grandfatherName,\n            child.lastName AS familyName,\n            child.gender AS gender\n        `;\n          queryParamsObject.personName = personName;\n          queryParamsObject.familyName = familyName;\n        } else {\n          cypherQuery += `\n            MATCH (child:Person)\n            WHERE child.name = $personName\n            OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(child)\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\n            RETURN\n              id(child) AS childID,\n              child.name AS childName, \n              father.name AS fatherName, \n              grandfather.name AS grandfatherName,\n              child.lastName AS familyName,\n              child.gender AS gender\n          `;\n          queryParamsObject.personName = personName;\n        }\n      }\n    }\n    const session = driver.session();\n    try {\n      const result = await session.run(cypherQuery, queryParamsObject);\n      return result.records.map(record => ({\n        id: record.get('childID').toNumber(),\n        gender: record.get('gender'),\n        name: record.get('childName'),\n        father: record.get('fatherName') || \"\",\n        grandfather: record.get('grandfatherName') || \"\",\n        lastName: record.get('familyName')\n      }));\n    } catch (Error) {\n      console.error('Query Error:', Error);\n      setError('حدث خطأ أثناء البحث.');\n    } finally {\n      await session.close();\n    }\n  };\n  const getRelationship = async (person1FullName, person2FullName) => {\n    const isArabic = text => /[\\u0600-\\u06FF]/.test(text);\n    let translatedName1, translatedName2;\n    let gender1, gender2;\n    if (isArabic(person1FullName)) {\n      translatedName1 = translateName(person1FullName, false);\n    } else {\n      translatedName1 = person1FullName;\n    }\n    if (isArabic(person2FullName)) {\n      translatedName2 = translateName(person2FullName, false);\n    } else {\n      translatedName2 = person2FullName;\n    }\n    const {\n      personName: person1Name,\n      fatherName: person1FatherName,\n      grandfatherName: person1GrandfatherName,\n      familyName: person1LastName\n    } = splitName(translatedName1);\n    const {\n      personName: person2Name,\n      fatherName: person2FatherName,\n      grandfatherName: person2GrandfatherName,\n      familyName: person2LastName\n    } = splitName(translatedName2);\n    const errorContainer = document.getElementById('error-container');\n    try {\n      const person1Matches = await getPersonMatches(person1Name, person1FatherName, person1GrandfatherName, person1LastName);\n      if (person1Matches.length === 0) {\n        throw new Error(`لا يوجد أشخاص بإسم ${person1FullName} الرجاء التثبت في الإسم جيدا`);\n      }\n      const person2Matches = await getPersonMatches(person2Name, person2FatherName, person2GrandfatherName, person2LastName);\n      if (person2Matches.length === 0) {\n        throw new Error(`لا يوجد أشخاص بإسم ${person2FullName} الرجاء التثبت في الإسم جيدا`);\n      }\n      setLoadingMessage(\"جاري البحث عن الأشخاص\");\n      console.log(\"P1 matches : \", person1Matches);\n      console.log(\"P2 matches : \", person2Matches);\n      let person1ID, person2ID;\n      if (person1Matches.length > 1 || person2Matches.length > 1) {\n        return {\n          error: 'non-unique-name',\n          message: 'تم العثور على عدة أشخاص بنفس الاسم. الرجاء اختيار الصحيح.',\n          duplicates: {\n            person1: person1Matches.length > 1 ? person1Matches : [],\n            person2: person2Matches.length > 1 ? person2Matches : []\n          }\n        };\n      } else {\n        person1ID = person1Matches[0].id;\n        person2ID = person2Matches[0].id;\n        gender1 = person1Matches[0].gender;\n        gender2 = person2Matches[0].gender;\n      }\n      const translatedName1 = translateName(person1FullName);\n      const translatedName2 = translateName(person2FullName);\n      console.log(person1ID, person2ID, gender1, gender2);\n      let marraigeRecord = await checkMarriage(person1ID, person2ID, gender1, gender2);\n      console.log(\"ARE MARRIED ? \", marraigeRecord.areMarried);\n      if (marraigeRecord.areMarried === true) {\n        let gender1 = marraigeRecord.P1.gender;\n        let gender2 = marraigeRecord.P2.gender;\n        let relation = '';\n        let score = 100;\n        if (gender1 === 'Male') {\n          relation = `${translatedName1} هو زوج ${translatedName2}`;\n        } else {\n          relation = `${translatedName1} هي زوجة ${translatedName2}`;\n        }\n        setLoading(false);\n        console.log(relation);\n        return {\n          relation,\n          score\n        };\n      } else {\n        console.log(\"Checking relations\");\n        let relationRecord = await getAncestors(person1ID, person2ID);\n        if (relationRecord === null) {\n          // setError(\"لا يوجد جد مشترك بين هاذان الشخصين.\");\n          console.log(\"There's no common ancestor between these.\");\n          let relation = await getMarriageRelation(session, person1ID, person2ID, translatedName1, translatedName2, gender1, gender2);\n          console.log(relation);\n          if (relation) {\n            console.log(\"Relaition found.\");\n            return {\n              relation\n            };\n          } else {\n            setError(\"لا يوجد اي قاسم مشترك أو علاقة مشتركة بين هاذين الشخصين.\");\n            setError(true);\n            return 'لا توجد اي علاقة بين هاذين الشخصين';\n          }\n        } else {\n          const ancestorID = relationRecord.id;\n          const ancestorName = relationRecord.name ? translateName(relationRecord.name) : '';\n          const ancestorLastName = relationRecord.lastName ? translateName(relationRecord.lastName) : '';\n          const ancestorFatherName = relationRecord.fatherName ? translateName(relationRecord.fatherName) : '';\n          const ancestorGrandFatherName = relationRecord.grandfatherName ? translateName(relationRecord.grandfatherName) : '';\n          const ancestorGender = relationRecord.gender;\n          let levelFromP1, levelFromP2, pathFromAncestorToP1, pathFromAncestorToP2;\n          const ancestor = {\n            ancestorID,\n            ancestorName,\n            ancestorFatherName,\n            ancestorGrandFatherName,\n            ancestorLastName,\n            ancestorGender\n          };\n          ({\n            levelFromP1,\n            levelFromP2,\n            pathFromAncestorToP1,\n            pathFromAncestorToP2\n          } = relationRecord);\n          const pathToP1 = pathFromAncestorToP1;\n          const pathToP2 = pathFromAncestorToP2;\n          const treeData = mergePaths(pathToP1, pathToP2);\n          console.log(pathFromAncestorToP1.reverse().map(a => a.name).join(\" ben \"));\n          console.log(pathFromAncestorToP2.reverse().map(a => a.name).join(\" ben \"));\n          var p1Level = levelFromP1;\n          var p2Level = levelFromP2;\n          const gender1 = pathToP1[0].gender;\n          const gender2 = pathToP2[0].gender;\n          let relation = '',\n            score = 0;\n          let relationshipExplanation = [{\n            type: \"العائلة\",\n            explanation: \"هؤلاء الشخصين مرتبطين من خلال العائلة ذو الدرجة الأولى.\"\n          }, {\n            type: \"العائلة المقربة\",\n            explanation: \"هؤلاء الشخصين مرتبطين من خلال أعمام وأخوال مشتركين.\"\n          }, {\n            type: \"العائلة الموسعة\",\n            explanation: \"هؤلاء الشخصين مرتبطين من خلال أعمام أو أخوال الأب وأحفادهم.\"\n          }, {\n            type: \"قرابة الزواج\",\n            explanation: \"هذان الشخصان مرتبطان من خلال الزواج.\"\n          }, {\n            type: \"صهر / نسيب\",\n            explanation: \"هذان الشخصان مرتبطان عبر الزواج وليس النسب الدموي.\"\n          }, {\n            type: \"لا توجد علاقة\",\n            explanation: \"لم يتم العثور على أي صلة قرابة بين الشخصين في قاعدة البيانات.\"\n          }, {\n            type: \"نفس الشخص\",\n            explanation: \"الاسمين يشيران إلى نفس الشخص.\"\n          }];\n          console.log(`Level: (${p1Level}, ${p2Level})`);\n          setLoadingMessage(\"جاري البحث عن العلاقة بين الشخصين\");\n          if (p1Level === 0 && p2Level === 1) {\n            if (gender1 === 'Male') {\n              relation = `${translatedName1} هو والد ${translatedName2}`;\n            } else {\n              relation = `${translatedName1} هي والدة ${translatedName2}`;\n            }\n            score = 100;\n          } else if (p1Level === 1 && p2Level === 0) {\n            if (gender1 === 'Male') {\n              relation = `${translatedName1} هو ابن ${translatedName2}`;\n            } else {\n              relation = `${translatedName1} هي إبنة ${translatedName2}`;\n            }\n            score = 100;\n          } else if (p1Level === 2 && p2Level === 0) {\n            if (gender1 === 'Male') {\n              relation = `${translatedName1} هو حفيد ${translatedName2}`;\n            } else {\n              relation = `${translatedName1} هي حفيدة ${translatedName2}`;\n            }\n            score = 90;\n          } else if (p1Level === 0 && p2Level === 2) {\n            if (gender1 === 'Male') {\n              relation = `${translatedName1} هو جدّ ${translatedName2}`;\n            } else {\n              relation = `${translatedName1} هي جدّة ${translatedName2}`;\n            }\n            score = 90;\n          } else if (p1Level === 3 && p2Level === 0) {\n            if (gender1 === 'Male') {\n              relation = `${translatedName1} هو إبن حفيد ${translatedName2}`;\n            } else {\n              relation = `${translatedName1} هي إبنة حفيدة ${translatedName2}`;\n            }\n            score = 75;\n          } else if (p1Level === 0 && p2Level === 3) {\n            if (gender1 === 'Male') {\n              relation = `${translatedName1} و جد والد ${translatedName2}`;\n            } else {\n              relation = `${translatedName1} هي جدة والدة ${translatedName2}`;\n            }\n            score = 80;\n          } else if (p1Level === 0 && p2Level === 4) {\n            // ADD FROM MOTHER FROM FATHER GRANDFATHER \n            const p2GreatAncestorGender = pathToP1[2].gender;\n            if (gender1 === 'Male') {\n              if (p2GreatAncestorGender === 'Male') {\n                relation = `${translatedName1} هو جد جد ${translatedName2}`;\n              } else {\n                relation = `${translatedName1} هو جد جدة ${translatedName2}`;\n              }\n            } else {\n              if (p2GreatAncestorGender === 'Male') {\n                relation = `${translatedName1} هي جدة جد ${translatedName2}`;\n              } else {\n                relation = `${translatedName1} هي جدة جدة ${translatedName2}`;\n              }\n            }\n            score = 75;\n          } else if (p1Level === 4 && p2Level === 0) {\n            // ADD FROM MOTHER FROM FATHER GRANDFATHER \n            const p1GreatAncestorGender = pathToP1[2].gender;\n            if (gender1 === 'Male') {\n              if (p1GreatAncestorGender === 'Male') {\n                relation = `${translatedName1} هو حفيد حفيد ${translatedName2}`;\n              } else {\n                relation = `${translatedName1} هو حفيد حفيدة ${translatedName2}`;\n              }\n            } else {\n              if (p1GreatAncestorGender === 'Male') {\n                relation = `${translatedName1} هي حفيدة حفيد ${translatedName2}`;\n              } else {\n                relation = `${translatedName1} هي حفيدة حفيد ${translatedName2}`;\n              }\n            }\n            score = 75;\n          } else if (p1Level === 1 && p2Level === 1) {\n            if (gender1 === 'Male' && gender2 === 'Male') {\n              relation = `${translatedName1} و ${translatedName2} إخوة`;\n            } else if (gender1 === 'Female' && gender2 === 'Female') {\n              relation = `${translatedName1} و ${translatedName2} أخوات`;\n            } else {\n              relation = `${translatedName1} و ${translatedName2} إخوة`;\n            }\n            score = 98;\n          } else if (p1Level === 2 && p2Level === 1) {\n            const p1AncestorGender = pathToP1[1].gender;\n            if (gender1 === 'Male') {\n              if (p1AncestorGender === 'Male') {\n                relation = `${translatedName1} هو ابن أخ ${translatedName2}`;\n              } else {\n                relation = `${translatedName1} هو ابن أخت ${translatedName2}`;\n              }\n              score = 93;\n            } else {\n              if (p1AncestorGender === 'Male') {\n                relation = `${translatedName1} هي ابن أخ ${translatedName2}`;\n              } else {\n                relation = `${translatedName1} هي ابنة أخت ${translatedName2}`;\n              }\n              score = 93;\n            }\n          } else if (p1Level === 1 && p2Level === 2) {\n            const p2AncestorGender = pathToP2[1].gender;\n            if (gender1 === 'Male') {\n              if (p2AncestorGender === 'Male') {\n                relation = `${translatedName1} هو عم ${translatedName2}`;\n                score = 95;\n              } else {\n                relation = `${translatedName1} هو خال ${translatedName2}`;\n                score = 94;\n              }\n            } else {\n              if (p2AncestorGender === 'Male') {\n                relation = `${translatedName1} هي عمة ${translatedName2}`;\n                score = 95;\n              } else {\n                relation = `${translatedName1} هي خالة ${translatedName2}`;\n                score = 94;\n              }\n            }\n          } else if (p1Level === 1 && p2Level === 3) {\n            const p2AncestorGender = pathToP2[1].gender;\n            const p2GreatAncestorGender = pathToP2[2].gender;\n            if (gender1 === 'Male') {\n              if (p2AncestorGender === 'Male') {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `${translatedName1} هو عم والد ${translatedName2}`;\n                  score = 80;\n                } else {\n                  relation = `${translatedName1} هو خال والد ${translatedName2}`;\n                  score = 75;\n                }\n              } else {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `${translatedName1} هو عم والدة ${translatedName2}`;\n                  score = 80;\n                } else {\n                  relation = `${translatedName1} هو خال والدة ${translatedName2}`;\n                  score = 70;\n                }\n              }\n            } else {\n              if (p2AncestorGender === 'Male') {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `${translatedName1} هي عمة والد ${translatedName2}`;\n                  score = 80;\n                } else {\n                  relation = `${translatedName1} هي خالة والد ${translatedName2}`;\n                  score = 75;\n                }\n              } else {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `${translatedName1} هي عمة والدة ${translatedName2}`;\n                  score = 80;\n                } else {\n                  relation = `${translatedName1} هي خالة والدة ${translatedName2}`;\n                  score = 75;\n                }\n              }\n            }\n          } else if (p1Level === 3 && p2Level === 1) {\n            const p1GreatAncestorGender = pathToP1[2].gender;\n            if (gender1 === 'Male') {\n              if (p1GreatAncestorGender === 'Male') {\n                relation = `${translatedName1} هو حفيد اخ ${translatedName2}`;\n                score = 78;\n              } else {\n                relation = `${translatedName1} هو حفيد اخت ${translatedName2}`;\n                score = 78;\n              }\n            } else {\n              if (p1GreatAncestorGender === 'Male') {\n                relation = `${translatedName1} هي حفيدة اخ ${translatedName2}`;\n                score = 78;\n              } else {\n                relation = `${translatedName1} هي حفيدة اخت ${translatedName2}`;\n                score = 78;\n              }\n            }\n          } else if (p1Level === 2 && p2Level === 2) {\n            const p1AncestorGender = pathToP1[1].gender;\n            const p2AncestorGender = pathToP2[1].gender;\n            if (gender1 === 'Male') {\n              if (p2AncestorGender === 'Male') {\n                if (p1AncestorGender === 'Male') {\n                  // ولد عمه\n                  relation = `${translatedName1} إبن عم ${translatedName2}`;\n                  score = 90;\n                } else {\n                  relation = `${translatedName1} هو إبن عمّة ${translatedName2}`;\n                  score = 89;\n                }\n              } else {\n                if (p1AncestorGender === 'Male') {\n                  // ولد خاله\n                  relation = `${translatedName1} هو إبن خال ${translatedName2}`;\n                  score = 88;\n                } else {\n                  relation = `${translatedName1} هو إبن خالة ${translatedName2}`;\n                  score = 86;\n                }\n              }\n            } else {\n              if (p1AncestorGender === 'Male') {\n                if (p2AncestorGender === 'Male') {\n                  // بنت عمه\n                  relation = `${translatedName1} هي إبنة عمّ ${translatedName2}`;\n                  score = 90;\n                } else {\n                  relation = `${translatedName1} هي إبنة عمّة ${translatedName2}`;\n                  score = 89;\n                }\n              } else {\n                if (p2AncestorGender === 'Male') {\n                  // بنت خاله\n                  relation = `${translatedName1} هي إبنة خال ${translatedName2}`;\n                  score = 88;\n                } else {\n                  relation = `${translatedName1} هي إبنة خالة ${translatedName2}`;\n                  score = 86;\n                }\n              }\n            }\n          } else if (p1Level === 2 && p2Level === 3) {\n            const p1AncestorGender = pathToP1[1].gender;\n            const p2AncestorGender = pathToP2[1].gender;\n            if (gender1 === 'Male') {\n              if (p1AncestorGender === 'Male') {\n                if (p2AncestorGender === 'Male') {\n                  relation = `${translatedName1} هو إبن عم والد ${translatedName2}`;\n                  score = 80;\n                } else {\n                  relation = `${translatedName1} هو إبن عمة والد ${translatedName2}`;\n                  score = 78;\n                }\n              } else {\n                // mother's side\n                if (p2AncestorGender === 'Male') {\n                  // mother's brother's son\n                  relation = `${translatedName1} هو إبن عم والدة ${translatedName2}.`;\n                  score = 74;\n                } else {\n                  // mother's brother's daughter\n                  relation = `${translatedName1} هو إبن عمّة والدة ${translatedName2}`;\n                  score = 72;\n                }\n              }\n            } else {\n              // If person1 is female\n              if (p1AncestorGender === 'Male') {\n                // father's side\n                if (p2AncestorGender === 'Male') {\n                  // father's brother's son\n                  relation = `${translatedName1} هي إبنة عم والد ${translatedName2}`;\n                  score = 80;\n                } else {\n                  // father's brother's daughter\n                  relation = `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\n                  score = 78;\n                }\n              } else {\n                // mother's side\n                if (p2AncestorGender === 'Male') {\n                  // mother's brother's son\n                  relation = `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\n                  score = 74;\n                } else {\n                  // mother's brother's daughter\n                  relation = `${translatedName1} هي إبنة عمة والدة ${translatedName2}`;\n                  score = 72;\n                }\n              }\n            }\n          } else if (p1Level === 3 && p2Level === 2) {\n            const p1AncestorGender = pathToP1[1].gender;\n            const p2AncestorGender = pathToP2[1].gender;\n            if (p1AncestorGender === 'Male') {\n              // father's side\n              if (p2AncestorGender === 'Male') {\n                // father's brother's son\n                relation = `والد ${translatedName1} هو إبن عم ${translatedName2}`;\n                score = 80;\n              } else {\n                relation = `والد ${translatedName1} هو إبن خال ${translatedName2}`;\n                score = 75;\n              }\n            } else {\n              // mother's side\n              if (p2AncestorGender === 'Male') {\n                // mother's brother's son\n                relation = `والدة ${translatedName1} هي إبنة عم ${translatedName2}`;\n                score = 80;\n              } else {\n                // mother's brother's daughter\n                relation = `والدة ${translatedName1} هي إبنة خال  ${translatedName2}`;\n                score = 75;\n              }\n            }\n          } else if (p1Level === 3 && p2Level === 3) {\n            const p1AncestorGender = pathToP1[1].gender;\n            const p2AncestorGender = pathToP2[1].gender;\n            const p1GreatAncestorGender = pathToP1[2].gender;\n            const p2GreatAncestorGender = pathToP2[2].gender;\n            if (p1AncestorGender === 'Male') {\n              if (p2AncestorGender === 'Male') {\n                if (p1GreatAncestorGender === 'Male') {\n                  if (p2GreatAncestorGender === 'Male') {\n                    relation = `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\n                  } else {\n                    relation = `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\n                  }\n                } else {\n                  if (p2GreatAncestorGender === 'Male') {\n                    relation = `جدّة ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\n                  } else {\n                    relation = `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\n                  }\n                }\n              } else {\n                if (p1GreatAncestorGender === 'Male') {\n                  if (p2GreatAncestorGender === 'Male') {\n                    relation = `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأم إخوة.`;\n                  } else {\n                    relation = `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\n                  }\n                } else {\n                  if (p2GreatAncestorGender === 'Male') {\n                    relation = `جدّة ${translatedName1} من الأب و جد${translatedName2} من الأم إخوة.`;\n                  } else {\n                    relation = `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\n                  }\n                }\n              }\n            } else {\n              if (p2AncestorGender === 'Male') {\n                if (p1GreatAncestorGender === 'Male') {\n                  if (p2GreatAncestorGender === 'Male') {\n                    relation = `جدّ ${translatedName1} من الأم و جد${translatedName2} من الأب إخوة.`;\n                  } else {\n                    relation = `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\n                  }\n                } else {\n                  if (p2GreatAncestorGender === 'Male') {\n                    relation = `جدّة ${translatedName1} من الأم و جد ${translatedName2} من الأب إخوة.`;\n                  } else {\n                    relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب أخوات.`;\n                  }\n                }\n              } else {\n                if (p1GreatAncestorGender === 'Male') {\n                  if (p2GreatAncestorGender === 'Male') {\n                    relation = `جدّ ${translatedName1} من الأم و جد ${translatedName2} من الأم إخوة.`;\n                  } else {\n                    relation = `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\n                  }\n                } else {\n                  if (p2GreatAncestorGender === 'Male') {\n                    relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\n                  } else {\n                    relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\n                  }\n                }\n              }\n            }\n          } else {\n            setLoading(false);\n            console.log('No direct relation found.');\n            errorContainer.innerText = 'لا يوجد قرابة مباشرة.';\n            relation = await getMarriageRelation(session, person1ID, person2ID, translatedName1, translatedName2, gender1);\n            return {\n              relation\n            };\n          }\n          if (relation != '') {\n            setLoading(false);\n            console.log(relation);\n            return {\n              relation,\n              score,\n              generation: Math.abs(p1Level - p2Level),\n              levelsTuple: {\n                levelFromP1,\n                levelFromP2\n              },\n              explanation: relationshipExplanation[0],\n              ancestor,\n              treeData,\n              person1ID,\n              person2ID\n            };\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error in relationship lookup:', error);\n      setError(`❌ خطأ: ${error.message || error}`);\n      if (errorContainer) {\n        errorContainer.innerText = `❌ خطأ: ${error.message || error}`;\n      }\n      setLoading(false);\n      return '';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relation-page\",\n    children: [(duplicates.person1.length > 0 || duplicates.person2.length > 0) && /*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"duplicates-panel\",\n      children: [duplicates.person1.length > 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"duplicates-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u0623\\u0643\\u062A\\u0628 \\u0627\\u0644\\u0627\\u0633\\u0645 \\u0627\\u0644\\u0643\\u0627\\u0645\\u0644 \\u0644\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0635\\u062D\\u064A\\u062D:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1146,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: duplicates.person1.map((p, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: `${translateName(p.name)} بن ${translateName(p.father)} بن ${translateName(p.grandfather)} ${translateName(p.lastName)}`\n          }, `p1-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1149,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1147,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1145,\n        columnNumber: 11\n      }, this), duplicates.person2.length > 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"duplicates-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"\\u0627\\u062E\\u062A\\u0631 \\u0627\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0635\\u062D\\u064A\\u062D \\\"\", person2, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1159,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: duplicates.person2.map((p, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: `${translateName(p.name)} بن ${translateName(p.father)} بن ${translateName(p.grandfather)} ${translateName(p.lastName)}`\n          }, `p2-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1162,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1160,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1158,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"relation-form-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"section-title\",\n          children: \"\\u0645\\u0627\\u0647\\u064A \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629 \\u0628\\u064A\\u0646\\u0647\\u0645\\u0627\\u061F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1174,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"DescriptionZone\",\n          children: \"\\u0627\\u0644\\u0647\\u062F\\u0641 \\u0645\\u0646 \\u0647\\u0630\\u0647 \\u0627\\u0644\\u0635\\u0641\\u062D\\u0629 \\u0647\\u0648 \\u062A\\u062D\\u062F\\u064A\\u062F \\u0635\\u0644\\u0629 \\u0627\\u0644\\u0642\\u0631\\u0627\\u0628\\u0629 \\u0628\\u064A\\u0646 \\u0634\\u062E\\u0635\\u064A\\u0646 \\u0628\\u0646\\u0627\\u0621\\u064B\\u0627 \\u0639\\u0644\\u0649 \\u0627\\u0633\\u0645\\u0647\\u0645. \\u0643\\u0644 \\u0645\\u0627\\u0639\\u0644\\u064A\\u0643 \\u0641\\u0639\\u0644\\u0647 \\u0647\\u0648 \\u0627\\u062F\\u062E\\u0627\\u0644 \\u0627\\u0644\\u0627\\u0633\\u0645 \\u0644\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0627\\u0648\\u0644 \\u0648\\u0627\\u0644\\u062B\\u0627\\u0646\\u064A \\u0648\\u062B\\u0645 \\u0627\\u0644\\u0646\\u0642\\u0631 \\u0639\\u0644\\u0649 \\\"\\u0627\\u0644\\u062A\\u062D\\u0642\\u0642 \\u0645\\u0646 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\\\" \\u0633\\u062A\\u0638\\u0647\\u0631 \\u0644\\u0643 \\u0627\\u0644\\u0646\\u062A\\u064A\\u062C\\u0629 \\u0641\\u064A \\u0627\\u0633\\u0647\\u0644 \\u0627\\u0644\\u0635\\u0641\\u062D\\u0629 \\u0648\\u0627\\u0644\\u062A\\u064A \\u064A\\u062A\\u0648\\u0636\\u062D \\u0644\\u0643 \\u0646\\u0648\\u0639 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629 \\u0648\\u0645\\u062F\\u0649 \\u0642\\u0631\\u0627\\u0628\\u062A\\u0647\\u0627\\u061F \\u0641\\u064A \\u062D\\u0627\\u0644 \\u0648\\u062C\\u0648\\u062F \\u0627\\u064A \\u062A\\u0634\\u0627\\u0628\\u0647\\u0627\\u062A \\u0627\\u0648 \\u062A\\u0643\\u0631\\u0627\\u0631\\u0627\\u062A \\u0641\\u064A \\u0627\\u0644\\u0627\\u0633\\u0645\\u0627\\u0621 \\u0633\\u064A\\u0645 \\u062A\\u0648\\u0641\\u064A\\u0631 \\u062E\\u064A\\u0627\\u0631\\u0627\\u062A \\u0644\\u062A\\u062D\\u062F\\u064A\\u062F \\u0627\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0635\\u062D\\u064A\\u062D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1175,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: fetchRelationship,\n          className: \"relation-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"\\u0627\\u0644\\u0625\\u0633\\u0645 \\u0627\\u0644\\u0643\\u0627\\u0645\\u0644 \\u0627\\u0644\\u0623\\u0648\\u0644\",\n              value: person1,\n              onChange: e => setPerson1(e.target.value),\n              className: \"inputNames\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1182,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1181,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"\\u0627\\u0644\\u0625\\u0633\\u0645 \\u0627\\u0644\\u0643\\u0627\\u0645\\u0644 \\u0627\\u0644\\u062B\\u0627\\u0646\\u064A\",\n              value: person2,\n              onChange: e => setPerson2(e.target.value),\n              className: \"inputNames\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1191,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1190,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ButtonSection\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"checkButton\",\n              children: \"\\u062A\\u062D\\u0642\\u0642 \\u0645\\u0646 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1200,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"reset\",\n              className: \"resetButton\",\n              children: \"\\u0625\\u0644\\u063A\\u0627\\u0621\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1201,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1199,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1180,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1173,\n        columnNumber: 7\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1207,\n        columnNumber: 17\n      }, this), \" \", loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: loadingMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1211,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1209,\n        columnNumber: 9\n      }, this), !loading && relationship && !error && /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"relationship-result\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          id: \"resultTitle\",\n          children: \"\\u0646\\u062A\\u064A\\u062C\\u0629 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1217,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"relationText\",\n          children: relationship.relationshipDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1218,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"result-table\",\n            children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"\\u062F\\u0631\\u062C\\u0629 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1223,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"score-cell\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"score-bar-wrapper\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"score-bar-fill\",\n                      style: {\n                        width: `${(_relationship$relatio = relationship.relationshipScore) !== null && _relationship$relatio !== void 0 ? _relationship$relatio : 0}%`\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1226,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1225,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"score-meta\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"score-value\",\n                      children: (_relationship$relatio2 = relationship.relationshipScore) !== null && _relationship$relatio2 !== void 0 ? _relationship$relatio2 : 'N/A'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1229,\n                      columnNumber: 23\n                    }, this), relationship.relationshipScore !== null && relationship.relationshipScore !== undefined && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: relationship.relationshipScore >= 80 ? \"score-category high\" : relationship.relationshipScore >= 60 ? \"score-category medium\" : \"score-category low\",\n                      children: relationship.relationshipScore >= 80 ? \"قوية\" : relationship.relationshipScore >= 60 ? \"متوسطة\" : \"ضعيفة\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1231,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1228,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1224,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1222,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"\\u0646\\u0648\\u0639 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1251,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"relationship-tag\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"tag blood\",\n                    children: \"\\u062F\\u0645\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1252,\n                    columnNumber: 52\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1252,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1250,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"\\u062A\\u0641\\u0633\\u064A\\u0631 \\u0625\\u0636\\u0627\\u0641\\u064A\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1255,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"relation-explanation\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"relation-explanation-type\",\n                    children: (_relationship$relatio3 = relationship.relationshipExplanationType) !== null && _relationship$relatio3 !== void 0 ? _relationship$relatio3 : 'نوع التفسير غير متاح'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1257,\n                    columnNumber: 21\n                  }, this), \":\", (_relationship$relatio4 = relationship.relationshipExplanationDesc) !== null && _relationship$relatio4 !== void 0 ? _relationship$relatio4 : \"لا يوجد تفسير متاح.\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1256,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1254,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"\\u0639\\u062F\\u062F \\u0627\\u0644\\u0623\\u062C\\u064A\\u0627\\u0644 \\u0628\\u064A\\u0646\\u0647\\u0645\\u0627 \\u062D\\u0633\\u0628 \\u0627\\u0644\\u062C\\u062F \\u0627\\u0644\\u0645\\u0634\\u062A\\u0631\\u0643\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1265,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"generation-distance\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"tooltip-container\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      id: \"numGen\",\n                      children: (_relationship$relatio5 = relationship.relationshipGenerationGap) !== null && _relationship$relatio5 !== void 0 ? _relationship$relatio5 : 'N/A'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1268,\n                      columnNumber: 23\n                    }, this), \" \\u0623\\u062C\\u064A\\u0627\\u0644\", /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"custom-tooltip\",\n                      children: \"\\u0639\\u062F\\u062F \\u0627\\u0644\\u0623\\u062C\\u064A\\u0627\\u0644 \\u0647\\u0648 \\u0639\\u062F\\u062F \\u0627\\u0644\\u0623\\u0634\\u062E\\u0627\\u0635 \\u0627\\u0644\\u0641\\u0627\\u0635\\u0644\\u064A\\u0646 \\u0641\\u064A \\u0634\\u062C\\u0631\\u0629 \\u0627\\u0644\\u0639\\u0627\\u0626\\u0644\\u0629 \\u0628\\u064A\\u0646 \\u0627\\u0644\\u0634\\u062E\\u0635\\u064A\\u0646.\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1269,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1267,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1266,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1264,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"tooltip-container\",\n                    children: [\"\\u0627\\u0644\\u062C\\u062F \\u0627\\u0644\\u0645\\u0634\\u062A\\u0631\\u0643\", /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"custom-tooltip\",\n                      children: \"\\u0639\\u062F\\u062F \\u0627\\u0644\\u0623\\u062C\\u064A\\u0627\\u0644 \\u0647\\u0648 \\u0639\\u062F\\u062F \\u0627\\u0644\\u0623\\u0634\\u062E\\u0627\\u0635 \\u0627\\u0644\\u0641\\u0627\\u0635\\u0644\\u064A\\u0646 \\u0641\\u064A \\u0634\\u062C\\u0631\\u0629 \\u0627\\u0644\\u0639\\u0627\\u0626\\u0644\\u0629 \\u0628\\u064A\\u0646 \\u0627\\u0644\\u0634\\u062E\\u0635\\u064A\\u0646.\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1279,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1277,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1276,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"generation-distance\",\n                  children: [\"`$\", (_relationship$commonA = (_relationship$commonA2 = relationship.commonAncestor) === null || _relationship$commonA2 === void 0 ? void 0 : _relationship$commonA2.ancestorName) !== null && _relationship$commonA !== void 0 ? _relationship$commonA : '', \" \\u0628\\u0646 $\", (_relationship$commonA3 = (_relationship$commonA4 = relationship.commonAncestor) === null || _relationship$commonA4 === void 0 ? void 0 : _relationship$commonA4.ancestorFatherName) !== null && _relationship$commonA3 !== void 0 ? _relationship$commonA3 : '', \" \\u0628\\u0646 $\", (_relationship$commonA5 = (_relationship$commonA6 = relationship.commonAncestor) === null || _relationship$commonA6 === void 0 ? void 0 : _relationship$commonA6.ancestorGrandFatherName) !== null && _relationship$commonA5 !== void 0 ? _relationship$commonA5 : '', \"$\", (_relationship$commonA7 = (_relationship$commonA8 = relationship.commonAncestor) === null || _relationship$commonA8 === void 0 ? void 0 : _relationship$commonA8.ancestorLastName) !== null && _relationship$commonA7 !== void 0 ? _relationship$commonA7 : '', \"`\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1284,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1275,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1221,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1220,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tree-wrapper\",\n            style: {\n              height: `${Math.max((Math.max((_relationship$relatio6 = (_relationship$relatio7 = relationship.relationshipLevels) === null || _relationship$relatio7 === void 0 ? void 0 : _relationship$relatio7.levelFromP1) !== null && _relationship$relatio6 !== void 0 ? _relationship$relatio6 : 0, (_relationship$relatio8 = (_relationship$relatio9 = relationship.relationshipLevels) === null || _relationship$relatio9 === void 0 ? void 0 : _relationship$relatio9.levelFromP2) !== null && _relationship$relatio8 !== void 0 ? _relationship$relatio8 : 0) + 1) * 100, 100 // Ensure minimum height is 100px\n              ) + 1}px`\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"titleTree\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1300,\n              columnNumber: 17\n            }, this), relationship.ancestorstreeData && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tree-container\",\n              children: /*#__PURE__*/_jsxDEV(Tree, {\n                data: relationship.ancestorstreeData,\n                orientation: \"vertical\",\n                pathFunc: \"step\",\n                nodeSize: {\n                  x: 50,\n                  y: 90\n                },\n                separation: {\n                  siblings: 3,\n                  nonSiblings: 3\n                },\n                translate: {\n                  x: 325,\n                  y: 27\n                },\n                renderCustomNodeElement: ({\n                  nodeDatum\n                }) => /*#__PURE__*/_jsxDEV(\"g\", {\n                  className: \"tree-node\",\n                  children: [/*#__PURE__*/_jsxDEV(\"title\", {\n                    children: nodeDatum.id\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1313,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n                    className: \"tree-node-rect\",\n                    x: \"-50\",\n                    y: \"-20\",\n                    width: \"100\",\n                    height: \"40\",\n                    style: {\n                      fill: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID ? '#d3f9d8' // Leaf node color (light green)\n                      : nodeDatum.id === relationship.commonAncestor.ancestorID ? '#ffe4b5' // Ancestor node color (light yellow)\n                      : '#ffffff',\n                      // Default color for other nodes\n                      stroke: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID ? '#4caf50' // Leaf node border (green)\n                      : nodeDatum.id === relationship.commonAncestor.ancestorID ? '#ffa500' // Ancestor node border (orange)\n                      : '#4a90e2',\n                      // Default border color\n                      strokeWidth: '2.5px',\n                      rx: '10',\n                      // Rounded corners\n                      ry: '10' // Rounded corners\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1314,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                    className: \"tree-node-text\",\n                    x: \"0\",\n                    y: \"5\",\n                    style: {\n                      fontSize: '16px',\n                      fontFamily: 'Cairo',\n                      fill: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID ? '#388e3c' // Leaf node text color (dark green)\n                      : nodeDatum.id === relationship.commonAncestor.ancestorID ? '#ff9800' // Ancestor node text color (orange)\n                      : '#333',\n                      // Default text color (dark gray)\n                      textAnchor: 'middle',\n                      dominantBaseline: 'middle',\n                      letterSpacing: '1px',\n                      strokeWidth: '1px',\n                      pointerEvents: 'none'\n                    },\n                    children: translateName(nodeDatum.name)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1337,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1312,\n                  columnNumber: 22\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1304,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1303,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1293,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1219,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1172,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1141,\n    columnNumber: 5\n  }, this);\n};\n_s(RelationPage, \"WyOSWDbV6P5OHQ/BVc1fTtxGH6Y=\");\n_c = RelationPage;\nexport default RelationPage;\nvar _c;\n$RefreshReg$(_c, \"RelationPage\");","map":{"version":3,"names":["React","useEffect","useState","Tree","jsxDEV","_jsxDEV","translations","require","config","neo4jURI","process","env","REACT_APP_NEO4J_URI","neo4jUser","REACT_APP_NEO4J_USER","neo4jPassword","REACT_APP_NEO4J_PASSWORD","driver","auth","basic","session","countBenAndBent","str","matches","match","length","splitName","fullName","parts","replace","trim","split","bentCount","personName","fatherName","grandfatherName","familyName","buildTreePath","path","reduceRight","acc","person","id","toNumber","name","lastName","children","mergePaths","pathToP1","pathToP2","ancestor","branch1","slice","branch2","push","undefined","translateName","language","nameParts","reverseTranslations","Object","fromEntries","entries","map","key","value","dict","translatedParts","part","join","RelationPage","_s","_relationship$relatio","_relationship$relatio2","_relationship$relatio3","_relationship$relatio4","_relationship$relatio5","_relationship$commonA","_relationship$commonA2","_relationship$commonA3","_relationship$commonA4","_relationship$commonA5","_relationship$commonA6","_relationship$commonA7","_relationship$commonA8","_relationship$relatio6","_relationship$relatio7","_relationship$relatio8","_relationship$relatio9","person1","setPerson1","person2","setPerson2","relationship","setRelationship","duplicates","setDuplicates","error","setError","loading","setLoading","loadingMessage","setLoadingMessage","fetchRelationship","e","preventDefault","result","getRelationship","message","_result$score","_result$levelsTuple","_result$generation","_result$explanation$t","_result$explanation","_result$explanation$e","_result$explanation2","_result$ancestor","_result$treeData","_result$person1ID","_result$person2ID","relationshipDescription","relation","relationshipScore","score","relationshipLevels","levelsTuple","relationshipGenerationGap","generation","relationshipExplanationType","explanation","type","relationshipExplanationDesc","commonAncestor","ancestorstreeData","treeData","person1ID","person2ID","console","checkMarriage","gender1","gender2","areMarried","run","records","record","P1","get","properties","P2","getMarriageRelation","translatedName1","translatedName2","_ownRecord$get$toNumb","_ownRecord$get","_ownRecord$get$toNumb2","_ownRecord$get2","_ownRecord$get3","_ownRecord$get4","_spouseRecord$get$toN","_spouseRecord$get","_spouseRecord$get$toN2","_spouseRecord$get2","_spouseRecord$get3","_spouseRecord$get4","_spouseRecord$get5","log","ownFamilyQuery","ownResult","personId","ownRecord","fatherId","motherId","siblingIds","siblingSpouseIds","spouseFamilyQuery","spouseResult","spouseRecord","sFatherId","sMotherId","sSiblingIds","sSiblingSpouseIds","childrenSpouseIds","isIn","list","some","getAncestors","gender","levelFromP1","levelFromP2","pathFromAncestorToP1","pathFromAncestorToP2","getPersonMatches","cypherQuery","queryParamsObject","father","grandfather","Error","close","person1FullName","person2FullName","isArabic","text","test","person1Name","person1FatherName","person1GrandfatherName","person1LastName","person2Name","person2FatherName","person2GrandfatherName","person2LastName","errorContainer","document","getElementById","person1Matches","person2Matches","marraigeRecord","relationRecord","ancestorID","ancestorName","ancestorLastName","ancestorFatherName","ancestorGrandFatherName","ancestorGender","reverse","a","p1Level","p2Level","relationshipExplanation","p2GreatAncestorGender","p1GreatAncestorGender","p1AncestorGender","p2AncestorGender","innerText","Math","abs","className","fileName","_jsxFileName","lineNumber","columnNumber","p","idx","onSubmit","placeholder","onChange","target","style","width","height","max","data","orientation","pathFunc","nodeSize","x","y","separation","siblings","nonSiblings","translate","renderCustomNodeElement","nodeDatum","fill","stroke","strokeWidth","rx","ry","fontSize","fontFamily","textAnchor","dominantBaseline","letterSpacing","pointerEvents","_c","$RefreshReg$"],"sources":["D:/Study/Projects/El-Kasr Family Tree/client/src/components/RelationChecker.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Tree from 'react-d3-tree';\r\nimport './RelationChecker.css';\r\nconst translations = require('./translation.json');\r\nrequire('dotenv').config();\r\n\r\nconst neo4jURI = process.env.REACT_APP_NEO4J_URI;\r\nconst neo4jUser = process.env.REACT_APP_NEO4J_USER;\r\nconst neo4jPassword = process.env.REACT_APP_NEO4J_PASSWORD;\r\n\r\nconst driver = require('neo4j-driver').driver(\r\n    neo4jURI,\r\n    require('neo4j-driver').auth.basic(neo4jUser, neo4jPassword)\r\n);\r\nconst session = driver.session();\r\n\r\nfunction countBenAndBent(str) {\r\n  const matches = str.match(/\\b(ben|bent)\\b/gi);\r\n  return matches ? matches.length : 0;\r\n}\r\n\r\nfunction splitName(fullName) {\r\n  const parts = fullName.replace(/\\s+(ben|bent)\\s+/gi, ' ').trim().split(/\\s+/);\r\n  const bentCount = countBenAndBent(fullName);\r\n  if (parts.length === 2) {\r\n    if (bentCount === 0){\r\n      return {\r\n        personName: parts[0],\r\n        fatherName: \"\",\r\n        grandfatherName: \"\",\r\n        familyName: parts[1]\r\n      };\r\n    }\r\n    else if (bentCount === 1){\r\n      return {\r\n        personName: parts[0],\r\n        fatherName: parts[1],\r\n        grandfatherName: \"\",\r\n        familyName: \"\"\r\n      };\r\n    }\r\n    \r\n  } \r\n  else if (parts.length === 3) {\r\n    if (bentCount === 1){\r\n      return {\r\n        personName: parts[0],\r\n        fatherName: parts[1],\r\n        grandfatherName: \"\",\r\n        familyName: parts[2]\r\n      };\r\n    }\r\n    else if (bentCount === 2){\r\n      return {\r\n        personName: parts[0],\r\n        fatherName: parts[1],\r\n        grandfatherName: parts[2],\r\n        familyName: \"\"\r\n      };\r\n    }\r\n    \r\n  } else if (parts.length === 4) {\r\n    return {\r\n      personName: parts[0],\r\n      fatherName: parts[1],\r\n      grandfatherName: parts[2],\r\n      familyName: parts[3]\r\n    };\r\n  }\r\n  // Default case if structure doesn't match\r\n  return { personName: parts[0], fatherName: \"\", grandfatherName: \"\", familyName: parts[1] };\r\n}\r\n\r\nfunction buildTreePath(path) {\r\n  // Handle case where the path is empty\r\n  if (path.length === 0) return null;\r\n\r\n  return path.reduceRight((acc, person) => {\r\n    return {\r\n      id: (person.id).toNumber(),\r\n      name: `${person.name} ${person.lastName}`,\r\n      children: acc ? [acc] : []\r\n    };\r\n  }, null);\r\n}\r\n\r\nfunction mergePaths(pathToP1, pathToP2) {\r\n  // Handle empty paths by returning null or an empty object\r\n  if (pathToP1.length === 0 && pathToP2.length === 0) return null;\r\n\r\n  const ancestor = pathToP1[0]; // Assuming both paths share the same ancestor\r\n  const branch1 = pathToP1.slice(1);\r\n  const branch2 = pathToP2.slice(1);\r\n\r\n  // Check if any of the branches are empty and handle accordingly\r\n  const children = [];\r\n  if (branch1.length > 0) {\r\n    children.push(buildTreePath(branch1));\r\n  }\r\n  if (branch2.length > 0) {\r\n    children.push(buildTreePath(branch2));\r\n  }\r\n\r\n  // Return the merged structure\r\n  return {\r\n    id: (ancestor.id).toNumber(),\r\n    name: `${ancestor.name} ${ancestor.lastName}`,\r\n    children: children.length > 0 ? children : undefined // Only include children if there are any\r\n  };\r\n}\r\n\r\nexport const translateName = (fullName, language = true) => {\r\n  const nameParts = fullName.split(' ');\r\n\r\n  // Build reverse translation map if needed\r\n  const reverseTranslations = Object.fromEntries(\r\n    Object.entries(translations).map(([key, value]) => [value, key])\r\n  );\r\n\r\n  const dict = language ? translations : reverseTranslations;\r\n\r\n  const translatedParts = nameParts.map(part => dict[part] || part);\r\n\r\n  return translatedParts.join(' ');\r\n};\r\n\r\nconst RelationPage = () => {\r\n  const [person1, setPerson1] = useState('');\r\n  const [person2, setPerson2] = useState('');\r\n  const [relationship, setRelationship] = useState('');\r\n  const [duplicates, setDuplicates] = useState({ person1: [], person2: [] });\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingMessage, setLoadingMessage] = useState(\"\");\r\n\r\n  const fetchRelationship = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setError(false);\r\n    setLoadingMessage(\"بداية البحث عن العلاقة...\");\r\n\r\n    try {\r\n      const result = await getRelationship(person1, person2);\r\n\r\n      if (result.error === 'non-unique-name') {\r\n        setDuplicates(result.duplicates);\r\n        setRelationship(result.message);\r\n      } else {\r\n        setDuplicates({ person1: [], person2: [] });\r\n        setRelationship({\r\n          relationshipDescription: result.relation,\r\n          relationshipScore: result.score ?? null,\r\n          relationshipLevels: result.levelsTuple ?? null,\r\n          relationshipGenerationGap: result.generation ?? null,\r\n          relationshipExplanationType: result.explanation?.type ?? null,\r\n          relationshipExplanationDesc: result.explanation?.explanation ?? null,\r\n          commonAncestor: result.ancestor ?? null,\r\n          ancestorstreeData: result.treeData ?? null,\r\n          person1ID: result.person1ID ?? null,\r\n          person2ID: result.person2ID ?? null\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching relationship:', error);\r\n      setRelationship({ relationshipDescription: 'An error occurred', relationshipScore: null });\r\n      setError(true);\r\n    } finally{\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const checkMarriage = async (person1ID, person2ID, gender1, gender2) => {\r\n    if (gender1 === gender2) {return {areMarried : false}}\r\n        setLoadingMessage(\"جاري البحث عن علاقة زواج\");\r\n        const result = await session.run(`\r\n          MATCH (Husband:Person)-[:HUSBAND_OF]->(Wife:Person)\r\n          MATCH (Wife)-[:WIFE_OF]->(Husband)\r\n          WHERE (id(Wife) = $person1ID AND id(Husband) = $person2ID) \r\n            OR (id(Wife) = $person2ID AND id(Husband) = $person1ID)\r\n          RETURN Husband AS P1, Wife AS P2\r\n        `, { person1ID, person2ID });\r\n\r\n        if (result.records.length === 0) {\r\n          return { areMarried: false };\r\n        }\r\n        const record = result.records[0];\r\n        const P1 = record.get(\"P1\").properties;\r\n        const P2 = record.get(\"P2\").properties;\r\n        return record.length === 0 ? {areMarried : false} : {areMarried : true, P1, P2};\r\n  };\r\n\r\nasync function getMarriageRelation(session, person1ID, person2ID, translatedName1, translatedName2, gender1, gender2) {\r\n  console.log('🔍 Checking marriage-based relationship between', translatedName1, 'and', translatedName2);\r\n\r\n  // Step 1: Person's own family\r\n  const ownFamilyQuery = `\r\n    MATCH (P:Person)\r\n    WHERE id(P) = $personId\r\n\r\n    OPTIONAL MATCH (Father:Person)-[:FATHER_OF]->(P)\r\n    OPTIONAL MATCH (Mother:Person)-[:MOTHER_OF]->(P)\r\n    OPTIONAL MATCH (Father)-[:FATHER_OF]->(Sibling:Person)\r\n    WHERE Sibling <> P\r\n\r\n    OPTIONAL MATCH (Sibling)-[:HUSBAND_OF|:WIFE_OF]->(SiblingSpouse:Person)\r\n\r\n    RETURN \r\n      id(Father) AS fatherId,\r\n      id(Mother) AS motherId,\r\n      collect(DISTINCT id(Sibling)) AS siblingIds,\r\n      collect(DISTINCT id(SiblingSpouse)) AS siblingSpouseIds\r\n  `;\r\n\r\n  const ownResult = await session.run(ownFamilyQuery, { personId: person1ID });\r\n  const ownRecord = ownResult.records[0];\r\n\r\n  const fatherId = ownRecord.get(\"fatherId\")?.toNumber() ?? null;\r\n  const motherId = ownRecord.get(\"motherId\")?.toNumber() ?? null;\r\n  const siblingIds = (ownRecord.get(\"siblingIds\") ?? []).map(id => id.toNumber());\r\n  const siblingSpouseIds = (ownRecord.get(\"siblingSpouseIds\") ?? []).map(id => id.toNumber());\r\n\r\n  console.log('👨‍👩‍👧 Own Family:');\r\n  console.log('Father ID:', fatherId);\r\n  console.log('Mother ID:', motherId);\r\n  console.log('Sibling IDs:', siblingIds);\r\n  console.log('Sibling Spouse IDs:', siblingSpouseIds);\r\n\r\n  // Step 2: Spouse's family\r\n  const spouseFamilyQuery = `\r\n    MATCH (P:Person)-[:HUSBAND_OF|:WIFE_OF]->(Spouse:Person)\r\n    WHERE id(P) = $personId\r\n\r\n    OPTIONAL MATCH (SFather:Person)-[:FATHER_OF]->(Spouse)\r\n    OPTIONAL MATCH (SMother:Person)-[:MOTHER_OF]->(Spouse)\r\n    OPTIONAL MATCH (SFather)-[:FATHER_OF]->(SSibling:Person)\r\n    WHERE SSibling <> Spouse\r\n\r\n    OPTIONAL MATCH (SSibling)-[:HUSBAND_OF|:WIFE_OF]->(SSiblingSpouse:Person)\r\n\r\n    // Get children of the spouse\r\n    OPTIONAL MATCH (Spouse)-[:MOTHER_OF|:FATHER_OF]->(Child:Person)\r\n    OPTIONAL MATCH (Child)-[:HUSBAND_OF|:WIFE_OF]->(ChildSpouse:Person)\r\n\r\n    RETURN \r\n      id(SFather) AS sFatherId,\r\n      id(SMother) AS sMotherId,\r\n      collect(DISTINCT id(SSibling)) AS sSiblingIds,\r\n      collect(DISTINCT id(SSiblingSpouse)) AS sSiblingSpouseIds,\r\n      collect(DISTINCT id(Child)) AS childIds,\r\n      collect(DISTINCT id(ChildSpouse)) AS childSpouseIds\r\n  `;\r\n\r\n\r\n  const spouseResult = await session.run(spouseFamilyQuery, { personId: person1ID });\r\n  const spouseRecord = spouseResult.records[0];\r\n\r\n  const sFatherId = spouseRecord?.get(\"sFatherId\")?.toNumber() ?? null;\r\n  const sMotherId = spouseRecord?.get(\"sMotherId\")?.toNumber() ?? null;\r\n  const sSiblingIds = (spouseRecord?.get(\"sSiblingIds\") ?? []).map(id => id.toNumber());\r\n  const sSiblingSpouseIds = (spouseRecord?.get(\"sSiblingSpouseIds\") ?? []).map(id => id.toNumber());\r\n  const childrenSpouseIds = (spouseRecord?.get(\"childSpouseIds\") ?? []).map(id => id.toNumber());\r\n\r\n  console.log('🧑‍🤝‍🧑 Spouse Family:');\r\n  console.log('Spouse Father ID:', sFatherId);\r\n  console.log('Spouse Mother ID:', sMotherId);\r\n  console.log('Spouse Sibling IDs:', sSiblingIds);\r\n  console.log('Spouse Sibling Spouse IDs:', sSiblingSpouseIds);\r\n  console.log('Children Spouse IDs:', childrenSpouseIds);\r\n\r\n  // Step 3: Matching\r\n  const match = (id) => id !== null && id === person2ID;\r\n  const isIn = (list) => list.some(id => id === person2ID);\r\n\r\nif (isIn(sSiblingIds)) {\r\n  console.log('✅ Match: Sibling');\r\n  if (gender1 === 'Male') {\r\n    return `${translatedName1} هو زوج اخت ${translatedName2}`;\r\n  } else {\r\n    return `${translatedName1} هي زوجة اخ ${translatedName2}`;\r\n  }\r\n}\r\n\r\nif (isIn(siblingSpouseIds)) {\r\n  console.log('✅ Match: Spouse Siblings');\r\n  // CORRECT ✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅\r\n  if (gender1 === 'Male') {\r\n    // Male person with male sibling-in-law (spouse of the sibling)\r\n    return `${translatedName1} هو اخ زوج ${translatedName2} (سلف)`;\r\n  } else {\r\n    // Female person with female sibling-in-law (spouse of the sibling)\r\n    return `${translatedName1} هي اخت زوج ${translatedName2} (حماة) `;\r\n  }\r\n}\r\n\r\nif (match(sFatherId) || match(sMotherId)){\r\n  console.log('✅ Match: Children spouses');\r\n  if (gender2 === 'Male'){\r\n    return `${translatedName1} هو زوج ابنة ${translatedName2}`;\r\n  }\r\n  else{\r\n    return `${translatedName1} هي زوجة ابن ${translatedName2} (كنة)`;\r\n  }\r\n}\r\n\r\nif (isIn(childrenSpouseIds)){\r\n  if (gender2 === 'Male'){\r\n    return `${translatedName1} هو أب زوج ${translatedName2}`;\r\n  }\r\n  else{\r\n    return `${translatedName1} هي أم ابن ${translatedName2}`;\r\n  }\r\n}\r\n\r\nreturn \"لا توجد علاقة واضحة\";\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n\r\n  const getAncestors = async (person1ID, person2ID) => {\r\n        setLoadingMessage(\"جاري البحث عن الأجداد المشتركة\");\r\n        const result = await session.run(`\r\n          MATCH path1 = (common:Person)-[:FATHER_OF|MOTHER_OF*0..4]->(p1:Person)\r\n          WHERE id(p1) = $person1ID\r\n      \r\n          MATCH path2 = (common)-[:FATHER_OF|MOTHER_OF*0..4]->(p2:Person)\r\n          WHERE id(p2) = $person2ID\r\n            AND id(p1) <> id(p2)\r\n      \r\n          WITH common, path1, path2, length(path1) AS level1, length(path2) AS level2\r\n          OPTIONAL MATCH (cGF:Person)-[:FATHER_OF]->(cF:Person)-[:FATHER_OF]->(common)\r\n\r\n          ORDER BY (level1 + level2) ASC\r\n          LIMIT 1\r\n      \r\n          RETURN \r\n            common.name AS commonAncestorName,\r\n            cF.name AS commonAncestorFatherName,\r\n            cGF.name AS commonAncestorGrandFatherName,\r\n            common.lastName AS commonAncestorLastName,\r\n            id(common) AS commonAncestorID,\r\n            common.gender AS commonAncestorGender,\r\n            level1 AS generationsFromP1,\r\n            level2 AS generationsFromP2,\r\n            [n IN nodes(path1) | { id: id(n), name: n.name, lastName: n.lastName, gender: n.gender }] AS pathToP1,\r\n            [n IN nodes(path2) | { id: id(n), name: n.name, lastName: n.lastName, gender: n.gender }] AS pathToP2\r\n        `, { person1ID, person2ID });\r\n\r\n        const record = result.records[0];\r\n        if (result.records.length === 0){\r\n            return null;\r\n        }\r\n        return {\r\n            id: record.get('commonAncestorID').toNumber(),\r\n            name: record.get('commonAncestorName'),\r\n            lastName: record.get('commonAncestorLastName'),\r\n            fatherName: record.get('commonAncestorFatherName'),\r\n            grandfatherName: record.get('commonAncestorGrandFatherName'),\r\n            gender: record.get('commonAncestorGender'),\r\n            levelFromP1: record.get('generationsFromP1').toNumber(),\r\n            levelFromP2: record.get('generationsFromP2').toNumber(),\r\n            pathFromAncestorToP1: record.get('pathToP1'),\r\n            pathFromAncestorToP2: record.get('pathToP2')\r\n        };\r\n  };\r\n\r\n  const getPersonMatches = async (personName, fatherName = \"\", grandfatherName = \"\", familyName) => {\r\n\r\n    let cypherQuery = ``;\r\n    const queryParamsObject = {};\r\n  \r\n    if (personName){\r\n      if (fatherName) {\r\n        if (grandfatherName) {\r\n          if (familyName) {\r\n            cypherQuery += `\r\n              MATCH (grandfather:Person)-[:FATHER_OF]->(father:Person)-[:FATHER_OF]->(child:Person)\r\n              WHERE child.name = $personName AND \r\n                    father.name = $fatherName AND \r\n                    grandfather.name = $grandfatherName AND \r\n                    child.lastName = $familyName\r\n              RETURN \r\n                id(child) AS childID,\r\n                child.name AS childName, \r\n                father.name AS fatherName, \r\n                grandfather.name AS grandfatherName, \r\n                child.lastName AS familyName  \r\n            `;\r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n            queryParamsObject.grandfatherName = grandfatherName;\r\n            queryParamsObject.familyName = familyName;\r\n          } \r\n          else {\r\n            cypherQuery += `\r\n              MATCH (grandfather:Person)-[:FATHER_OF]->(father:Person)-[:FATHER_OF]->(child:Person)\r\n              WHERE child.name = $personName AND \r\n                    father.name = $fatherName AND\r\n                    grandfather.name = $grandfatherName\r\n              RETURN \r\n                    id(child) AS childID, \r\n                    child.name AS childName, \r\n                    father.name AS fatherName, \r\n                    grandfather.name AS grandfatherName,\r\n                    child.lastName AS familyName,\r\n                    child.gender AS gender      \r\n              `;\r\n            \r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n            queryParamsObject.grandfatherName = grandfatherName;\r\n          }\r\n          \r\n        } else {\r\n          if (familyName){\r\n            cypherQuery += `\r\n            MATCH (father:Person)-[:FATHER_OF]->(child:Person)\r\n            WHERE child.name = $personName AND \r\n                  father.name = $fatherName AND\r\n                  child.lastName = $familyName\r\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n            RETURN  \r\n              id(child) AS childID,\r\n              child.name AS childName, \r\n              father.name AS fatherName,\r\n              grandfather.name AS grandfatherName,\r\n              child.lastName AS familyName,\r\n              child.gender AS gender\r\n            `;\r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n            queryParamsObject.familyName = familyName;\r\n          }\r\n          else{\r\n            cypherQuery += `\r\n            MATCH (father:Person)-[:FATHER_OF]->(child:Person)\r\n            \r\n            WHERE child.name = $personName AND \r\n                  father.name = $fatherName\r\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n            RETURN  id(child) AS childID, \r\n                    child.name AS childName, \r\n                    father.name AS fatherName, \r\n                    grandfather.name AS grandfatherName,\r\n                    child.lastName AS familyName,\r\n                    child.gender AS gender\r\n            `;\r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n          }\r\n          }\r\n      }\r\n      else {\r\n        if (familyName){\r\n          cypherQuery += `\r\n          MATCH (child:Person)\r\n          WHERE child.name = $personName AND child.lastName = $familyName\r\n          OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(child)\r\n          OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n          RETURN \r\n            id(child) AS childID,\r\n            child.name AS childName, \r\n            father.name AS fatherName,\r\n            grandfather.name AS grandfatherName,\r\n            child.lastName AS familyName,\r\n            child.gender AS gender\r\n        `;\r\n        queryParamsObject.personName = personName;\r\n        queryParamsObject.familyName = familyName;\r\n        }\r\n        else{\r\n          cypherQuery += `\r\n            MATCH (child:Person)\r\n            WHERE child.name = $personName\r\n            OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(child)\r\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n            RETURN\r\n              id(child) AS childID,\r\n              child.name AS childName, \r\n              father.name AS fatherName, \r\n              grandfather.name AS grandfatherName,\r\n              child.lastName AS familyName,\r\n              child.gender AS gender\r\n          `;\r\n          queryParamsObject.personName = personName;\r\n        }\r\n      }\r\n    }\r\n\r\n    const session = driver.session();\r\n    try {\r\n      const result = await session.run(cypherQuery, queryParamsObject);\r\n  \r\n      return result.records.map(record => ({\r\n        id: record.get('childID').toNumber(),\r\n        gender: record.get('gender'),\r\n        name: record.get('childName'),\r\n        father: record.get('fatherName') || \"\",\r\n        grandfather: record.get('grandfatherName') || \"\",\r\n        lastName: record.get('familyName')\r\n      }));\r\n    } \r\n    catch (Error) {\r\n      console.error('Query Error:', Error);\r\n      setError('حدث خطأ أثناء البحث.');\r\n    } \r\n    finally {\r\n      await session.close();\r\n    }\r\n  };\r\n  const getRelationship = async (person1FullName, person2FullName) => {\r\n    const isArabic = (text) => /[\\u0600-\\u06FF]/.test(text);\r\n    let translatedName1, translatedName2;\r\n    let gender1, gender2;\r\n    if (isArabic(person1FullName)){\r\n      translatedName1 = translateName(person1FullName, false);\r\n    }\r\n    else{\r\n      translatedName1 = person1FullName;\r\n    }\r\n    if (isArabic(person2FullName)){\r\n      translatedName2 = translateName(person2FullName, false);\r\n    }\r\n    else{\r\n      translatedName2 = person2FullName;\r\n    }\r\n    \r\n    const { personName: person1Name, fatherName: person1FatherName, grandfatherName: person1GrandfatherName, familyName: person1LastName } = splitName(translatedName1);\r\n    const { personName: person2Name, fatherName: person2FatherName, grandfatherName: person2GrandfatherName, familyName: person2LastName } = splitName(translatedName2);\r\n    const errorContainer = document.getElementById('error-container');\r\n    try {\r\n      const person1Matches = await getPersonMatches(person1Name, person1FatherName, person1GrandfatherName, person1LastName);\r\n      if (person1Matches.length === 0) {\r\n        throw new Error(`لا يوجد أشخاص بإسم ${person1FullName} الرجاء التثبت في الإسم جيدا`);\r\n      }\r\n      const person2Matches = await getPersonMatches(person2Name, person2FatherName, person2GrandfatherName, person2LastName);\r\n      if (person2Matches.length === 0) {\r\n        throw new Error(`لا يوجد أشخاص بإسم ${person2FullName} الرجاء التثبت في الإسم جيدا`);\r\n      }\r\n      setLoadingMessage(\"جاري البحث عن الأشخاص\");\r\n\r\n      console.log(\"P1 matches : \", person1Matches);\r\n      console.log(\"P2 matches : \", person2Matches);\r\n      \r\n      let person1ID, person2ID;\r\n      if (person1Matches.length > 1 || person2Matches.length > 1) {\r\n        return {\r\n          error: 'non-unique-name',\r\n          message: 'تم العثور على عدة أشخاص بنفس الاسم. الرجاء اختيار الصحيح.',\r\n          duplicates: {\r\n            person1: person1Matches.length > 1 ? person1Matches : [],\r\n            person2: person2Matches.length > 1 ? person2Matches : []\r\n          }\r\n        };\r\n      }\r\n      else{\r\n        person1ID = person1Matches[0].id;\r\n        person2ID = person2Matches[0].id;\r\n        gender1 = person1Matches[0].gender;\r\n        gender2 = person2Matches[0].gender;\r\n      }      \r\n      const translatedName1 = translateName(person1FullName);\r\n      const translatedName2 = translateName(person2FullName);\r\n      console.log(person1ID, person2ID, gender1, gender2);\r\n      let marraigeRecord = await checkMarriage(person1ID, person2ID, gender1, gender2);\r\n      console.log(\"ARE MARRIED ? \", marraigeRecord.areMarried);\r\n      if (marraigeRecord.areMarried === true){\r\n        let gender1 = marraigeRecord.P1.gender;\r\n        let gender2 = marraigeRecord.P2.gender;\r\n        let relation = '';\r\n        let score = 100;\r\n        if (gender1 === 'Male'){\r\n          relation = `${translatedName1} هو زوج ${translatedName2}`;\r\n        }\r\n        else{\r\n          relation = `${translatedName1} هي زوجة ${translatedName2}`;\r\n        }\r\n        setLoading(false);\r\n        console.log(relation);\r\n        return {relation, score}\r\n      } \r\n      else {\r\n        console.log(\"Checking relations\");\r\n        let relationRecord = await getAncestors(person1ID, person2ID);\r\n        if (relationRecord === null){\r\n          // setError(\"لا يوجد جد مشترك بين هاذان الشخصين.\");\r\n          console.log(\"There's no common ancestor between these.\");\r\n          let relation = await getMarriageRelation(session, person1ID, person2ID, translatedName1, translatedName2, gender1, gender2);\r\n          console.log(relation);\r\n          if (relation){\r\n            console.log(\"Relaition found.\");\r\n            return {relation};\r\n          }\r\n          else {\r\n            setError(\"لا يوجد اي قاسم مشترك أو علاقة مشتركة بين هاذين الشخصين.\");\r\n            setError(true);\r\n            return 'لا توجد اي علاقة بين هاذين الشخصين';\r\n          } \r\n        }\r\n        else{\r\n          const ancestorID = relationRecord.id;\r\n          const ancestorName = relationRecord.name ? translateName(relationRecord.name) : '';\r\n          const ancestorLastName = relationRecord.lastName ? translateName(relationRecord.lastName) : '';\r\n          const ancestorFatherName = relationRecord.fatherName ? translateName(relationRecord.fatherName) : '';\r\n          const ancestorGrandFatherName = relationRecord.grandfatherName ? translateName(relationRecord.grandfatherName) : '';\r\n          const ancestorGender = relationRecord.gender;\r\n          let levelFromP1, levelFromP2, pathFromAncestorToP1, pathFromAncestorToP2;\r\n          const ancestor = {ancestorID, \r\n                          ancestorName, ancestorFatherName, ancestorGrandFatherName, ancestorLastName, ancestorGender};\r\n\r\n          ({\r\n            levelFromP1, \r\n            levelFromP2, \r\n            pathFromAncestorToP1, \r\n            pathFromAncestorToP2 \r\n          } = relationRecord);\r\n          const pathToP1 = pathFromAncestorToP1;\r\n          const pathToP2 = pathFromAncestorToP2;\r\n          \r\n          const treeData = mergePaths(pathToP1, pathToP2);\r\n          console.log(pathFromAncestorToP1.reverse().map(a => a.name).join(\" ben \"));\r\n          console.log(pathFromAncestorToP2.reverse().map(a => a.name).join(\" ben \"));\r\n      \r\n          var p1Level = levelFromP1;\r\n          var p2Level = levelFromP2;\r\n      \r\n          const gender1 = pathToP1[0].gender;\r\n          const gender2 = pathToP2[0].gender;\r\n          let relation = '', score = 0;\r\n          let relationshipExplanation = [\r\n            {\r\n              type: \"العائلة\",\r\n              explanation: \"هؤلاء الشخصين مرتبطين من خلال العائلة ذو الدرجة الأولى.\"\r\n            },\r\n            {\r\n              type: \"العائلة المقربة\",\r\n              explanation: \"هؤلاء الشخصين مرتبطين من خلال أعمام وأخوال مشتركين.\"\r\n            },\r\n            {\r\n              type: \"العائلة الموسعة\",\r\n              explanation: \"هؤلاء الشخصين مرتبطين من خلال أعمام أو أخوال الأب وأحفادهم.\"\r\n            },\r\n            {\r\n              type: \"قرابة الزواج\",\r\n              explanation: \"هذان الشخصان مرتبطان من خلال الزواج.\"\r\n            },\r\n            {\r\n              type: \"صهر / نسيب\",\r\n              explanation: \"هذان الشخصان مرتبطان عبر الزواج وليس النسب الدموي.\"\r\n            },\r\n            {\r\n              type: \"لا توجد علاقة\",\r\n              explanation: \"لم يتم العثور على أي صلة قرابة بين الشخصين في قاعدة البيانات.\"\r\n            },\r\n            {\r\n              type: \"نفس الشخص\",\r\n              explanation: \"الاسمين يشيران إلى نفس الشخص.\"\r\n            }\r\n          ];\r\n          \r\n          console.log(`Level: (${p1Level}, ${p2Level})`);\r\n          setLoadingMessage(\"جاري البحث عن العلاقة بين الشخصين\");\r\n          if (p1Level === 0 && p2Level === 1) {\r\n            if (gender1 === 'Male'){\r\n              relation = `${translatedName1} هو والد ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي والدة ${translatedName2}`;\r\n            }\r\n            score = 100;\r\n          }\r\n      \r\n          else if (p1Level === 1 && p2Level === 0) {\r\n            if (gender1 === 'Male'){\r\n              relation = `${translatedName1} هو ابن ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي إبنة ${translatedName2}`;\r\n            }\r\n            score = 100;\r\n          } \r\n      \r\n          else if (p1Level === 2 && p2Level === 0) {\r\n            if (gender1 === 'Male'){\r\n              relation = `${translatedName1} هو حفيد ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي حفيدة ${translatedName2}`;\r\n            }\r\n            score = 90;\r\n          }\r\n\r\n          else if (p1Level === 0 && p2Level === 2) {\r\n            if (gender1 === 'Male'){\r\n              relation = `${translatedName1} هو جدّ ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي جدّة ${translatedName2}`;\r\n            }\r\n            score = 90;\r\n          }\r\n      \r\n          else if (p1Level === 3 && p2Level === 0) {\r\n            if (gender1 === 'Male'){\r\n              relation = `${translatedName1} هو إبن حفيد ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي إبنة حفيدة ${translatedName2}`;\r\n            }\r\n            score = 75;\r\n          }\r\n      \r\n          else if (p1Level === 0 && p2Level === 3) {\r\n            if (gender1 === 'Male'){\r\n              relation = `${translatedName1} و جد والد ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي جدة والدة ${translatedName2}`;\r\n            }\r\n            score = 80;\r\n          } \r\n          \r\n          else if (p1Level === 0 && p2Level === 4){ // ADD FROM MOTHER FROM FATHER GRANDFATHER \r\n            const p2GreatAncestorGender = pathToP1[2].gender;\r\n            if (gender1 === 'Male'){\r\n              if (p2GreatAncestorGender === 'Male'){\r\n                relation = `${translatedName1} هو جد جد ${translatedName2}`;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هو جد جدة ${translatedName2}`;\r\n              }\r\n            }\r\n            else{\r\n              if (p2GreatAncestorGender === 'Male'){\r\n                relation = `${translatedName1} هي جدة جد ${translatedName2}`;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هي جدة جدة ${translatedName2}`;\r\n              }\r\n            }\r\n            score = 75;\r\n          }\r\n\r\n          else if (p1Level === 4 && p2Level === 0){ // ADD FROM MOTHER FROM FATHER GRANDFATHER \r\n            const p1GreatAncestorGender = pathToP1[2].gender;\r\n            if (gender1 === 'Male'){\r\n              if (p1GreatAncestorGender === 'Male'){\r\n                relation = `${translatedName1} هو حفيد حفيد ${translatedName2}`;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هو حفيد حفيدة ${translatedName2}`;\r\n              }\r\n            }\r\n            else{\r\n              if (p1GreatAncestorGender === 'Male'){\r\n                relation = `${translatedName1} هي حفيدة حفيد ${translatedName2}`;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هي حفيدة حفيد ${translatedName2}`;\r\n              }\r\n            }\r\n            score = 75;\r\n          }\r\n\r\n          else if (p1Level === 1 && p2Level === 1) {\r\n            if (gender1 === 'Male' && gender2 === 'Male'){\r\n              relation = `${translatedName1} و ${translatedName2} إخوة`;\r\n            }\r\n            else if (gender1 === 'Female' && gender2 === 'Female'){\r\n              relation = `${translatedName1} و ${translatedName2} أخوات`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} و ${translatedName2} إخوة`;\r\n            }\r\n            score = 98;\r\n          } \r\n          \r\n          else if (p1Level === 2 && p2Level === 1) {\r\n            const p1AncestorGender = pathToP1[1].gender;\r\n            if (gender1 === 'Male'){\r\n              if (p1AncestorGender === 'Male'){\r\n                relation = `${translatedName1} هو ابن أخ ${translatedName2}`;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هو ابن أخت ${translatedName2}`;\r\n              }\r\n              score = 93;\r\n            }\r\n            else{\r\n              if (p1AncestorGender === 'Male'){\r\n                relation = `${translatedName1} هي ابن أخ ${translatedName2}`;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هي ابنة أخت ${translatedName2}`;\r\n              }\r\n              score = 93;\r\n            }\r\n          } \r\n          \r\n          else if (p1Level === 1 && p2Level === 2) {\r\n            const p2AncestorGender = pathToP2[1].gender;\r\n            if (gender1 === 'Male'){\r\n              if (p2AncestorGender === 'Male'){\r\n                relation = `${translatedName1} هو عم ${translatedName2}`;\r\n                score = 95;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هو خال ${translatedName2}`;\r\n                score = 94;\r\n              }\r\n            }\r\n            else{\r\n              if (p2AncestorGender === 'Male'){\r\n                relation = `${translatedName1} هي عمة ${translatedName2}`;\r\n                score = 95;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هي خالة ${translatedName2}`;\r\n                score = 94;\r\n              }\r\n            }\r\n          }\r\n          \r\n          else if (p1Level === 1 && p2Level === 3){\r\n            const p2AncestorGender = pathToP2[1].gender;\r\n            const p2GreatAncestorGender = pathToP2[2].gender;\r\n            if (gender1 === 'Male'){\r\n              if (p2AncestorGender === 'Male'){\r\n                if (p2GreatAncestorGender === 'Male'){\r\n                  relation = `${translatedName1} هو عم والد ${translatedName2}`;\r\n                  score = 80;\r\n                }\r\n                else {\r\n                  relation = `${translatedName1} هو خال والد ${translatedName2}`;\r\n                  score = 75;\r\n                }\r\n              }\r\n              else{\r\n                if (p2GreatAncestorGender === 'Male'){\r\n                  relation = `${translatedName1} هو عم والدة ${translatedName2}`;\r\n                  score = 80;\r\n                }\r\n                else {\r\n                  relation = `${translatedName1} هو خال والدة ${translatedName2}`;\r\n                  score = 70;\r\n                }\r\n              }\r\n            } else{\r\n              if (p2AncestorGender === 'Male'){\r\n                if (p2GreatAncestorGender === 'Male'){\r\n                  relation = `${translatedName1} هي عمة والد ${translatedName2}`;\r\n                  score = 80;\r\n                }\r\n                else {\r\n                  relation = `${translatedName1} هي خالة والد ${translatedName2}`;\r\n                  score = 75\r\n                }\r\n              }\r\n              else{\r\n                if (p2GreatAncestorGender === 'Male'){\r\n                  relation = `${translatedName1} هي عمة والدة ${translatedName2}`;\r\n                  score = 80;\r\n                }\r\n                else {\r\n                  relation = `${translatedName1} هي خالة والدة ${translatedName2}`;\r\n                  score = 75;\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 3 && p2Level === 1){\r\n            const p1GreatAncestorGender = pathToP1[2].gender;\r\n            if (gender1 === 'Male'){\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  relation = `${translatedName1} هو حفيد اخ ${translatedName2}`;\r\n                  score = 78;\r\n                }\r\n                else {\r\n                  relation = `${translatedName1} هو حفيد اخت ${translatedName2}`;\r\n                  score = 78;\r\n                }\r\n            } \r\n            else{\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  relation = `${translatedName1} هي حفيدة اخ ${translatedName2}`;\r\n                  score = 78;\r\n                }\r\n                else {\r\n                  relation = `${translatedName1} هي حفيدة اخت ${translatedName2}`;\r\n                  score = 78;\r\n                }\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 2 && p2Level === 2) {    \r\n            const p1AncestorGender = pathToP1[1].gender;\r\n            const p2AncestorGender = pathToP2[1].gender;\r\n      \r\n            if (gender1 === 'Male') { \r\n              if (p2AncestorGender === 'Male') { \r\n                if (p1AncestorGender === 'Male'){  // ولد عمه\r\n                  relation = `${translatedName1} إبن عم ${translatedName2}`;\r\n                  score = 90;\r\n                }\r\n                else{\r\n                  relation = `${translatedName1} هو إبن عمّة ${translatedName2}`;\r\n                  score = 89;\r\n\r\n                }\r\n              } \r\n              else {  \r\n                if (p1AncestorGender === 'Male'){  // ولد خاله\r\n                  relation = `${translatedName1} هو إبن خال ${translatedName2}`;\r\n                  score = 88;\r\n                }\r\n                else{\r\n                  relation = `${translatedName1} هو إبن خالة ${translatedName2}`;\r\n                  score = 86;\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (p1AncestorGender === 'Male') { \r\n                if (p2AncestorGender === 'Male'){  // بنت عمه\r\n                  relation = `${translatedName1} هي إبنة عمّ ${translatedName2}`;\r\n                  score = 90;\r\n                }\r\n                else{\r\n                  relation = `${translatedName1} هي إبنة عمّة ${translatedName2}`;\r\n                  score = 89;\r\n                }\r\n              } \r\n              else {  \r\n                if (p2AncestorGender === 'Male'){  // بنت خاله\r\n                  relation = `${translatedName1} هي إبنة خال ${translatedName2}`;\r\n                  score = 88;\r\n                }\r\n                else{\r\n                  relation = `${translatedName1} هي إبنة خالة ${translatedName2}`;\r\n                  score = 86;\r\n                }\r\n              }\r\n            }\r\n          }\r\n      \r\n          else if (p1Level === 2 && p2Level === 3) {         \r\n      \r\n            const p1AncestorGender = pathToP1[1].gender;\r\n            const p2AncestorGender = pathToP2[1].gender;\r\n\r\n            if (gender1 === 'Male') { \r\n              if (p1AncestorGender === 'Male') {\r\n                if (p2AncestorGender === 'Male') {\r\n                  relation = `${translatedName1} هو إبن عم والد ${translatedName2}`;\r\n                  score = 80;\r\n                } else { \r\n                  relation = `${translatedName1} هو إبن عمة والد ${translatedName2}`;\r\n                  score = 78;\r\n                }\r\n              } else {  // mother's side\r\n                if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                  relation = `${translatedName1} هو إبن عم والدة ${translatedName2}.`;\r\n                  score = 74;\r\n                } else {  // mother's brother's daughter\r\n                  relation = `${translatedName1} هو إبن عمّة والدة ${translatedName2}`;\r\n                  score = 72;\r\n                }\r\n              }\r\n            } \r\n            else {  // If person1 is female\r\n              if (p1AncestorGender === 'Male') {  // father's side\r\n                if (p2AncestorGender === 'Male') {  // father's brother's son\r\n                  relation = `${translatedName1} هي إبنة عم والد ${translatedName2}`;\r\n                  score = 80;\r\n                } else {  // father's brother's daughter\r\n                  relation = `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\r\n                  score = 78;\r\n                }\r\n              } else {  // mother's side\r\n                if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                  relation = `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\r\n                  score = 74;\r\n                } else {  // mother's brother's daughter\r\n                  relation = `${translatedName1} هي إبنة عمة والدة ${translatedName2}`;\r\n                  score = 72;\r\n                }\r\n              }\r\n            }\r\n          }\r\n          \r\n          else if (p1Level === 3 && p2Level === 2) {          \r\n            const p1AncestorGender = pathToP1[1].gender;\r\n            const p2AncestorGender = pathToP2[1].gender;\r\n\r\n            if (p1AncestorGender === 'Male') {  // father's side\r\n              if (p2AncestorGender === 'Male') {  // father's brother's son\r\n                relation = `والد ${translatedName1} هو إبن عم ${translatedName2}`;\r\n                score = 80;\r\n              } else { \r\n                relation = `والد ${translatedName1} هو إبن خال ${translatedName2}`;\r\n                score = 75;\r\n              }\r\n            } \r\n            else {  // mother's side\r\n              if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                relation = `والدة ${translatedName1} هي إبنة عم ${translatedName2}`;\r\n                score = 80;\r\n              } else {  // mother's brother's daughter\r\n                relation = `والدة ${translatedName1} هي إبنة خال  ${translatedName2}`;\r\n                score = 75;\r\n              }\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 3 && p2Level === 3) {          \r\n            \r\n            const p1AncestorGender = pathToP1[1].gender;\r\n            const p2AncestorGender = pathToP2[1].gender;\r\n            const p1GreatAncestorGender = pathToP1[2].gender;\r\n            const p2GreatAncestorGender = pathToP2[2].gender;\r\n\r\n            if (p1AncestorGender === 'Male') { \r\n              if (p2AncestorGender === 'Male'){\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّة ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                }\r\n              }\r\n              else {\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّة ${translatedName1} من الأب و جد${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (p2AncestorGender === 'Male'){\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّ ${translatedName1} من الأم و جد${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّة ${translatedName1} من الأم و جد ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب أخوات.`;\r\n                  }\r\n                }\r\n              }\r\n              else {\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّ ${translatedName1} من الأم و جد ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          else {\r\n            setLoading(false);\r\n            console.log('No direct relation found.');\r\n            errorContainer.innerText = 'لا يوجد قرابة مباشرة.';\r\n            relation = await getMarriageRelation(session, person1ID, person2ID, translatedName1, translatedName2, gender1);\r\n            return {relation};\r\n          }\r\n          if (relation != ''){\r\n              setLoading(false);\r\n              console.log(relation);\r\n              return {relation, score, \r\n                      generation:Math.abs(p1Level-p2Level), \r\n                      levelsTuple: {levelFromP1, levelFromP2},\r\n                      explanation: relationshipExplanation[0],\r\n                      ancestor,\r\n                      treeData,\r\n                      person1ID,\r\n                      person2ID};\r\n            }\r\n        }\r\n      }\r\n      \r\n      \r\n    } catch (error) {\r\n      console.error('Error in relationship lookup:', error);\r\n    \r\n      setError(`❌ خطأ: ${error.message || error}`);\r\n    \r\n      if (errorContainer) {\r\n        errorContainer.innerText = `❌ خطأ: ${error.message || error}`;\r\n      }\r\n      setLoading(false);\r\n      return '';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"relation-page\">\r\n    {(duplicates.person1.length > 0 || duplicates.person2.length > 0) && (\r\n      <aside className=\"duplicates-panel\">\r\n        {duplicates.person1.length > 0 && (\r\n          <section className=\"duplicates-group\">\r\n            <h3>أكتب الاسم الكامل للشخص الصحيح:</h3>\r\n            <ul>\r\n              {duplicates.person1.map((p, idx) => (\r\n                <li key={`p1-${idx}`}>\r\n                  {`${translateName(p.name)} بن ${translateName(p.father)} بن ${translateName(p.grandfather)} ${translateName(p.lastName)}`}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </section>\r\n        )}\r\n  \r\n        {duplicates.person2.length > 0 && (\r\n          <section className=\"duplicates-group\">\r\n            <h3>اختر الشخص الصحيح \"{person2}\"</h3>\r\n            <ul>\r\n              {duplicates.person2.map((p, idx) => (\r\n                <li key={`p2-${idx}`}>\r\n                  {`${translateName(p.name)} بن ${translateName(p.father)} بن ${translateName(p.grandfather)} ${translateName(p.lastName)}`}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </section>\r\n        )}\r\n      </aside>\r\n    )}    \r\n    {/* Main Panel: Form + Result */}\r\n    <main className=\"main-panel\">\r\n      <section className=\"relation-form-section\">\r\n        <h2 className=\"section-title\">ماهي العلاقة بينهما؟</h2>\r\n        <p id=\"DescriptionZone\">\r\n          الهدف من هذه الصفحة هو تحديد صلة القرابة بين شخصين بناءًا على اسمهم. كل ماعليك فعله\r\n          هو ادخال الاسم للشخص الاول والثاني وثم النقر على \"التحقق من العلاقة\" ستظهر لك النتيجة في اسهل الصفحة\r\n          والتي يتوضح لك نوع العلاقة ومدى قرابتها؟ في حال وجود اي تشابهات او تكرارات في الاسماء سيم توفير خيارات لتحديد الشخص الصحيح\r\n        </p>\r\n        <form onSubmit={fetchRelationship} className=\"relation-form\">\r\n          <div className=\"input-group\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"الإسم الكامل الأول\"\r\n              value={person1}\r\n              onChange={(e) => setPerson1(e.target.value)}\r\n              className=\"inputNames\"\r\n            />\r\n          </div>\r\n          <div className=\"input-group\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"الإسم الكامل الثاني\"\r\n              value={person2}\r\n              onChange={(e) => setPerson2(e.target.value)}\r\n              className=\"inputNames\"\r\n            />\r\n          </div>\r\n          <div className='ButtonSection'>\r\n            <button type=\"submit\" className=\"checkButton\">تحقق من العلاقة</button>\r\n            <button type=\"reset\" className='resetButton'>إلغاء</button>\r\n          </div>\r\n          \r\n        </form>\r\n      </section>\r\n\r\n      {error && <div className=\"error-message\">{error}</div>} {/* Show the error message */}\r\n      {loading && (\r\n        <div className=\"loading-message\">\r\n          <div className=\"spinner\"></div>\r\n          <p>{loadingMessage}</p>\r\n        </div>\r\n      )}\r\n\r\n      {!loading && relationship && !error  && (\r\n        <section className=\"relationship-result\">\r\n          <h2 id=\"resultTitle\">نتيجة العلاقة</h2>\r\n          <p className=\"relationText\">{relationship.relationshipDescription}</p>\r\n          <div className=\"result-details\">\r\n            <table className=\"result-table\">\r\n              <tbody>\r\n                <tr>\r\n                  <th>درجة العلاقة</th>\r\n                  <td className=\"score-cell\">\r\n                    <div className=\"score-bar-wrapper\">\r\n                      <div className=\"score-bar-fill\" style={{ width: `${relationship.relationshipScore ?? 0}%` }}></div>\r\n                    </div>\r\n                    <div className=\"score-meta\">\r\n                      <span className=\"score-value\">{relationship.relationshipScore ?? 'N/A'}</span>\r\n                      {relationship.relationshipScore !== null && relationship.relationshipScore !== undefined && (\r\n                        <span className={\r\n                          relationship.relationshipScore >= 80\r\n                            ? \"score-category high\"\r\n                            : relationship.relationshipScore >= 60\r\n                            ? \"score-category medium\"\r\n                            : \"score-category low\"\r\n                        }>\r\n                          {\r\n                            relationship.relationshipScore >= 80\r\n                              ? \"قوية\"\r\n                              : relationship.relationshipScore >= 60\r\n                              ? \"متوسطة\"\r\n                              : \"ضعيفة\"\r\n                          }\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>نوع العلاقة</th>\r\n                  <td className=\"relationship-tag\"><span className=\"tag blood\">دم</span></td>\r\n                </tr>\r\n                <tr>\r\n                  <th>تفسير إضافي</th>\r\n                  <td className=\"relation-explanation\">\r\n                    <span className='relation-explanation-type'>\r\n                      {relationship.relationshipExplanationType ?? 'نوع التفسير غير متاح'}\r\n                    </span>: \r\n                    {relationship.relationshipExplanationDesc ?? \"لا يوجد تفسير متاح.\"}\r\n                  </td>\r\n\r\n                </tr>\r\n                <tr>\r\n                  <th>عدد الأجيال بينهما حسب الجد المشترك</th>\r\n                  <td className=\"generation-distance\">\r\n                    <div className=\"tooltip-container\">\r\n                      <span id=\"numGen\">{relationship.relationshipGenerationGap ?? 'N/A'}</span> أجيال\r\n                      <div className=\"custom-tooltip\">\r\n                        عدد الأجيال هو عدد الأشخاص الفاصلين في شجرة العائلة بين الشخصين.\r\n                      </div>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>\r\n                    <div className=\"tooltip-container\">\r\n                      الجد المشترك\r\n                      <span className=\"custom-tooltip\">\r\n                        عدد الأجيال هو عدد الأشخاص الفاصلين في شجرة العائلة بين الشخصين.\r\n                      </span>\r\n                    </div>\r\n                  </th>\r\n                  <td className=\"generation-distance\">\r\n                    `${relationship.commonAncestor?.ancestorName ?? ''} بن \r\n                    ${relationship.commonAncestor?.ancestorFatherName ?? ''} بن \r\n                    ${relationship.commonAncestor?.ancestorGrandFatherName ?? ''} \r\n                    ${relationship.commonAncestor?.ancestorLastName ?? ''}`\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n            <div className=\"tree-wrapper\" style={{\r\n              height: `${Math.max(\r\n                ((Math.max(relationship.relationshipLevels?.levelFromP1 ?? 0, relationship.relationshipLevels?.levelFromP2 ?? 0)) + 1) * 100,\r\n                100 // Ensure minimum height is 100px\r\n              ) + 1}px`\r\n            }}>\r\n\r\n                <div className='titleTree'>\r\n                </div>\r\n                {relationship.ancestorstreeData && (\r\n                <div className=\"tree-container\">\r\n                  <Tree\r\n                    data={relationship.ancestorstreeData}\r\n                    orientation=\"vertical\"\r\n                    pathFunc=\"step\"\r\n                    nodeSize={{ x: 50, y: 90 }}\r\n                    separation={{ siblings: 3, nonSiblings: 3 }}\r\n                    translate={{ x: 325, y: 27 }} \r\n                    renderCustomNodeElement={({ nodeDatum }) => (\r\n                     <g className=\"tree-node\">\r\n                        <title>{nodeDatum.id}</title>\r\n                        <rect\r\n                          className=\"tree-node-rect\"\r\n                          x=\"-50\"\r\n                          y=\"-20\"\r\n                          width=\"100\"\r\n                          \r\n                          height=\"40\"\r\n                          style={{\r\n                            fill: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID\r\n                              ? '#d3f9d8'  // Leaf node color (light green)\r\n                              : nodeDatum.id === relationship.commonAncestor.ancestorID\r\n                              ? '#ffe4b5'  // Ancestor node color (light yellow)\r\n                              : '#ffffff', // Default color for other nodes\r\n                            stroke: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID\r\n                              ? '#4caf50'  // Leaf node border (green)\r\n                              : nodeDatum.id === relationship.commonAncestor.ancestorID\r\n                              ? '#ffa500'  // Ancestor node border (orange)\r\n                              : '#4a90e2', // Default border color\r\n                            strokeWidth: '2.5px',\r\n                            rx: '10',  // Rounded corners\r\n                            ry: '10',  // Rounded corners\r\n                          }}\r\n                        />\r\n                        <text\r\n                          className=\"tree-node-text\"\r\n                          x=\"0\"\r\n                          y=\"5\"\r\n                          style={{\r\n                            fontSize: '16px',\r\n                            fontFamily: 'Cairo',\r\n                            fill: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID\r\n                              ? '#388e3c'  // Leaf node text color (dark green)\r\n                              : nodeDatum.id === relationship.commonAncestor.ancestorID\r\n                              ? '#ff9800'  // Ancestor node text color (orange)\r\n                              : '#333',    // Default text color (dark gray)\r\n                            textAnchor: 'middle',\r\n                            dominantBaseline: 'middle',\r\n                            letterSpacing: '1px',\r\n                            strokeWidth: '1px',\r\n                            pointerEvents: 'none',\r\n                          }}\r\n                        >\r\n                          {translateName(nodeDatum.name)}\r\n                        </text>\r\n                      </g>\r\n                    )}\r\n                  />\r\n                </div>\r\n              )}\r\n               </div>\r\n          </div>\r\n        </section>\r\n      )}\r\n    </main>\r\n  </div>\r\n  \r\n  );\r\n};\r\n\r\nexport default RelationPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}