{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isPoint = exports.Point = void 0;\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar util_1 = require(\"./internal/util\");\nvar POINT_IDENTIFIER_PROPERTY = '__isPoint__';\n/**\n * Represents a single two or three-dimensional point in a particular coordinate reference system.\n * Created `Point` objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Point = /** @class */function () {\n  /**\n   * @constructor\n   * @param {T} srid - The coordinate reference system identifier.\n   * @param {number} x - The `x` coordinate of the point.\n   * @param {number} y - The `y` coordinate of the point.\n   * @param {number} [z=undefined] - The `z` coordinate of the point or `undefined` if point has 2 dimensions.\n   */\n  function Point(srid, x, y, z) {\n    /**\n     * The coordinate reference system identifier.\n     * @type {T}\n     */\n    this.srid = (0, util_1.assertNumberOrInteger)(srid, 'SRID');\n    /**\n     * The `x` coordinate of the point.\n     * @type {number}\n     */\n    this.x = (0, util_1.assertNumber)(x, 'X coordinate');\n    /**\n     * The `y` coordinate of the point.\n     * @type {number}\n     */\n    this.y = (0, util_1.assertNumber)(y, 'Y coordinate');\n    /**\n     * The `z` coordinate of the point or `undefined` if point is 2-dimensional.\n     * @type {number}\n     */\n    this.z = z === null || z === undefined ? z : (0, util_1.assertNumber)(z, 'Z coordinate');\n    Object.freeze(this);\n  }\n  /**\n   * @ignore\n   */\n  Point.prototype.toString = function () {\n    return this.z != null && !isNaN(this.z) ? \"Point{srid=\".concat(formatAsFloat(this.srid), \", x=\").concat(formatAsFloat(this.x), \", y=\").concat(formatAsFloat(this.y), \", z=\").concat(formatAsFloat(this.z), \"}\") : \"Point{srid=\".concat(formatAsFloat(this.srid), \", x=\").concat(formatAsFloat(this.x), \", y=\").concat(formatAsFloat(this.y), \"}\");\n  };\n  return Point;\n}();\nexports.Point = Point;\nfunction formatAsFloat(number) {\n  return Number.isInteger(number) ? number.toString() + '.0' : number.toString();\n}\nObject.defineProperty(Point.prototype, POINT_IDENTIFIER_PROPERTY, {\n  value: true,\n  enumerable: false,\n  configurable: false,\n  writable: false\n});\n/**\n * Test if given object is an instance of {@link Point} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Point}, `false` otherwise.\n */\nfunction isPoint(obj) {\n  var anyObj = obj;\n  return obj != null && anyObj[POINT_IDENTIFIER_PROPERTY] === true;\n}\nexports.isPoint = isPoint;","map":{"version":3,"names":["Object","defineProperty","exports","value","isPoint","Point","util_1","require","POINT_IDENTIFIER_PROPERTY","srid","x","y","z","assertNumberOrInteger","assertNumber","undefined","freeze","prototype","toString","isNaN","concat","formatAsFloat","number","Number","isInteger","enumerable","configurable","writable","obj","anyObj"],"sources":["D:/Study/Projects/Copy 4/client/node_modules/neo4j-driver-core/lib/spatial-types.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isPoint = exports.Point = void 0;\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar util_1 = require(\"./internal/util\");\nvar POINT_IDENTIFIER_PROPERTY = '__isPoint__';\n/**\n * Represents a single two or three-dimensional point in a particular coordinate reference system.\n * Created `Point` objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Point = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {T} srid - The coordinate reference system identifier.\n     * @param {number} x - The `x` coordinate of the point.\n     * @param {number} y - The `y` coordinate of the point.\n     * @param {number} [z=undefined] - The `z` coordinate of the point or `undefined` if point has 2 dimensions.\n     */\n    function Point(srid, x, y, z) {\n        /**\n         * The coordinate reference system identifier.\n         * @type {T}\n         */\n        this.srid = (0, util_1.assertNumberOrInteger)(srid, 'SRID');\n        /**\n         * The `x` coordinate of the point.\n         * @type {number}\n         */\n        this.x = (0, util_1.assertNumber)(x, 'X coordinate');\n        /**\n         * The `y` coordinate of the point.\n         * @type {number}\n         */\n        this.y = (0, util_1.assertNumber)(y, 'Y coordinate');\n        /**\n         * The `z` coordinate of the point or `undefined` if point is 2-dimensional.\n         * @type {number}\n         */\n        this.z = z === null || z === undefined ? z : (0, util_1.assertNumber)(z, 'Z coordinate');\n        Object.freeze(this);\n    }\n    /**\n     * @ignore\n     */\n    Point.prototype.toString = function () {\n        return this.z != null && !isNaN(this.z)\n            ? \"Point{srid=\".concat(formatAsFloat(this.srid), \", x=\").concat(formatAsFloat(this.x), \", y=\").concat(formatAsFloat(this.y), \", z=\").concat(formatAsFloat(this.z), \"}\")\n            : \"Point{srid=\".concat(formatAsFloat(this.srid), \", x=\").concat(formatAsFloat(this.x), \", y=\").concat(formatAsFloat(this.y), \"}\");\n    };\n    return Point;\n}());\nexports.Point = Point;\nfunction formatAsFloat(number) {\n    return Number.isInteger(number) ? number.toString() + '.0' : number.toString();\n}\nObject.defineProperty(Point.prototype, POINT_IDENTIFIER_PROPERTY, {\n    value: true,\n    enumerable: false,\n    configurable: false,\n    writable: false\n});\n/**\n * Test if given object is an instance of {@link Point} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Point}, `false` otherwise.\n */\nfunction isPoint(obj) {\n    var anyObj = obj;\n    return obj != null && anyObj[POINT_IDENTIFIER_PROPERTY] === true;\n}\nexports.isPoint = isPoint;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}