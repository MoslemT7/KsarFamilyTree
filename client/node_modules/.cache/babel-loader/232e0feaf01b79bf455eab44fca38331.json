{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* eslint-disable @typescript-eslint/promise-function-async */\nvar util_1 = require(\"./internal/util\");\nvar connection_holder_1 = require(\"./internal/connection-holder\");\nvar bookmarks_1 = require(\"./internal/bookmarks\");\nvar tx_config_1 = require(\"./internal/tx-config\");\nvar observers_1 = require(\"./internal/observers\");\nvar error_1 = require(\"./error\");\nvar result_1 = __importDefault(require(\"./result\"));\n/**\n * Represents a transaction in the Neo4j database.\n *\n * @access public\n */\nvar Transaction = /** @class */function () {\n  /**\n   * @constructor\n   * @param {object} args\n   * @param {ConnectionHolder} args.connectionHolder - the connection holder to get connection from.\n   * @param {function()} args.onClose - Function to be called when transaction is committed or rolled back.\n   * @param {function(bookmarks: Bookmarks)} args.onBookmarks callback invoked when new bookmark is produced.\n   * @param {function()} args.onConnection - Function to be called when a connection is obtained to ensure the conneciton\n   * is not yet released.\n   * @param {boolean} args.reactive whether this transaction generates reactive streams\n   * @param {number} args.fetchSize - the record fetch size in each pulling batch.\n   * @param {string} args.impersonatedUser - The name of the user which should be impersonated for the duration of the session.\n   * @param {number} args.highRecordWatermark - The high watermark for the record buffer.\n   * @param {number} args.lowRecordWatermark - The low watermark for the record buffer.\n   * @param {NotificationFilter} args.notificationFilter - The notification filter used for this transaction.\n   * @param {NonAutoCommitApiTelemetryConfig} args.apiTelemetryConfig - The api telemetry configuration. Empty/Null for disabling telemetry\n   */\n  function Transaction(_a) {\n    var connectionHolder = _a.connectionHolder,\n      onClose = _a.onClose,\n      onBookmarks = _a.onBookmarks,\n      onConnection = _a.onConnection,\n      reactive = _a.reactive,\n      fetchSize = _a.fetchSize,\n      impersonatedUser = _a.impersonatedUser,\n      highRecordWatermark = _a.highRecordWatermark,\n      lowRecordWatermark = _a.lowRecordWatermark,\n      notificationFilter = _a.notificationFilter,\n      apiTelemetryConfig = _a.apiTelemetryConfig;\n    var _this = this;\n    this._connectionHolder = connectionHolder;\n    this._reactive = reactive;\n    this._state = _states.ACTIVE;\n    this._onClose = onClose;\n    this._onBookmarks = onBookmarks;\n    this._onConnection = onConnection;\n    this._onError = this._onErrorCallback.bind(this);\n    this._fetchSize = fetchSize;\n    this._onComplete = this._onCompleteCallback.bind(this);\n    this._results = [];\n    this._impersonatedUser = impersonatedUser;\n    this._lowRecordWatermak = lowRecordWatermark;\n    this._highRecordWatermark = highRecordWatermark;\n    this._bookmarks = bookmarks_1.Bookmarks.empty();\n    this._notificationFilter = notificationFilter;\n    this._apiTelemetryConfig = apiTelemetryConfig;\n    this._acceptActive = function () {}; // satisfy DenoJS\n    this._activePromise = new Promise(function (resolve, reject) {\n      _this._acceptActive = resolve;\n    });\n  }\n  /**\n   * @private\n   * @param {Bookmarks | string |  string []} bookmarks\n   * @param {TxConfig} txConfig\n   * @param {Object} events List of observers to events\n   * @returns {void}\n   */\n  Transaction.prototype._begin = function (getBookmarks, txConfig, events) {\n    var _this = this;\n    this._connectionHolder.getConnection().then(function (connection) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a;\n        var _this = this;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              this._onConnection();\n              if (!(connection != null)) return [3 /*break*/, 2];\n              _a = this;\n              return [4 /*yield*/, getBookmarks()];\n            case 1:\n              _a._bookmarks = _b.sent();\n              return [2 /*return*/, connection.beginTransaction({\n                bookmarks: this._bookmarks,\n                txConfig: txConfig,\n                mode: this._connectionHolder.mode(),\n                database: this._connectionHolder.database(),\n                impersonatedUser: this._impersonatedUser,\n                notificationFilter: this._notificationFilter,\n                apiTelemetryConfig: this._apiTelemetryConfig,\n                beforeError: function (error) {\n                  if (events != null) {\n                    events.onError(error);\n                  }\n                  _this._onError(error).catch(function () {});\n                },\n                afterComplete: function (metadata) {\n                  if (events != null) {\n                    events.onComplete(metadata);\n                  }\n                  if (metadata.db !== undefined && (events === null || events === void 0 ? void 0 : events.onDB) != null) {\n                    events.onDB(metadata.db);\n                  }\n                  _this._onComplete(metadata);\n                }\n              })];\n            case 2:\n              throw (0, error_1.newError)('No connection available');\n          }\n        });\n      });\n    }).catch(function (error) {\n      if (events != null) {\n        events.onError(error);\n      }\n      _this._onError(error).catch(function () {});\n    })\n    // It should make the transaction active anyway\n    // further errors will be treated by the existing\n    // observers\n    .finally(function () {\n      return _this._acceptActive();\n    });\n  };\n  /**\n   * Run Cypher query\n   * Could be called with a query object i.e.: `{text: \"MATCH ...\", parameters: {param: 1}}`\n   * or with the query and parameters as separate arguments.\n   * @param {mixed} query - Cypher query to execute\n   * @param {Object} parameters - Map with parameters to use in query\n   * @return {Result} New Result\n   */\n  Transaction.prototype.run = function (query, parameters) {\n    var _a = (0, util_1.validateQueryAndParameters)(query, parameters),\n      validatedQuery = _a.validatedQuery,\n      params = _a.params;\n    var result = this._state.run(validatedQuery, params, {\n      connectionHolder: this._connectionHolder,\n      onError: this._onError,\n      onComplete: this._onComplete,\n      onConnection: this._onConnection,\n      reactive: this._reactive,\n      fetchSize: this._fetchSize,\n      highRecordWatermark: this._highRecordWatermark,\n      lowRecordWatermark: this._lowRecordWatermak,\n      preparationJob: this._activePromise\n    });\n    this._results.push(result);\n    return result;\n  };\n  /**\n   * Commits the transaction and returns the result.\n   *\n   * After committing the transaction can no longer be used.\n   *\n   * @returns {Promise<void>} An empty promise if committed successfully or error if any error happened during commit.\n   */\n  Transaction.prototype.commit = function () {\n    var _this = this;\n    var committed = this._state.commit({\n      connectionHolder: this._connectionHolder,\n      onError: this._onError,\n      onComplete: function (meta) {\n        return _this._onCompleteCallback(meta, _this._bookmarks);\n      },\n      onConnection: this._onConnection,\n      pendingResults: this._results,\n      preparationJob: this._activePromise\n    });\n    this._state = committed.state;\n    // clean up\n    this._onClose();\n    return new Promise(function (resolve, reject) {\n      committed.result.subscribe({\n        onCompleted: function () {\n          return resolve();\n        },\n        onError: function (error) {\n          return reject(error);\n        }\n      });\n    });\n  };\n  /**\n   * Rollbacks the transaction.\n   *\n   * After rolling back, the transaction can no longer be used.\n   *\n   * @returns {Promise<void>} An empty promise if rolled back successfully or error if any error happened during\n   * rollback.\n   */\n  Transaction.prototype.rollback = function () {\n    var rolledback = this._state.rollback({\n      connectionHolder: this._connectionHolder,\n      onError: this._onError,\n      onComplete: this._onComplete,\n      onConnection: this._onConnection,\n      pendingResults: this._results,\n      preparationJob: this._activePromise\n    });\n    this._state = rolledback.state;\n    // clean up\n    this._onClose();\n    return new Promise(function (resolve, reject) {\n      rolledback.result.subscribe({\n        onCompleted: function () {\n          return resolve();\n        },\n        onError: function (error) {\n          return reject(error);\n        }\n      });\n    });\n  };\n  /**\n   * Check if this transaction is active, which means commit and rollback did not happen.\n   * @return {boolean} `true` when not committed and not rolled back, `false` otherwise.\n   */\n  Transaction.prototype.isOpen = function () {\n    return this._state === _states.ACTIVE;\n  };\n  /**\n   * Closes the transaction\n   *\n   * This method will roll back the transaction if it is not already committed or rolled back.\n   *\n   * @returns {Promise<void>} An empty promise if closed successfully or error if any error happened during\n   */\n  Transaction.prototype.close = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isOpen()) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.rollback()];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  // eslint-disable-next-line\n  // @ts-ignore\n  Transaction.prototype[Symbol.asyncDispose] = function () {\n    return this.close();\n  };\n  Transaction.prototype._onErrorCallback = function (error) {\n    // error will be \"acknowledged\" by sending a RESET message\n    // database will then forget about this transaction and cleanup all corresponding resources\n    // it is thus safe to move this transaction to a FAILED state and disallow any further interactions with it\n    if (this._state === _states.FAILED) {\n      // already failed, nothing to do\n      // if we call onError for each result again, we might run into an infinite loop, that causes an OOM eventually\n      return Promise.resolve(null);\n    }\n    this._state = _states.FAILED;\n    this._onClose();\n    this._results.forEach(function (result) {\n      if (result.isOpen()) {\n        // @ts-expect-error\n        result._streamObserverPromise.then(function (resultStreamObserver) {\n          return resultStreamObserver.onError(error);\n        })\n        // Nothing to do since we don't have a observer to notify the error\n        // the result will be already broke in other ways.\n        .catch(function (_) {});\n      }\n    });\n    // release connection back to the pool\n    return this._connectionHolder.releaseConnection();\n  };\n  /**\n   * @private\n   * @param {object} meta The meta with bookmarks\n   * @returns {void}\n   */\n  Transaction.prototype._onCompleteCallback = function (meta, previousBookmarks) {\n    this._onBookmarks(new bookmarks_1.Bookmarks(meta === null || meta === void 0 ? void 0 : meta.bookmark), previousBookmarks !== null && previousBookmarks !== void 0 ? previousBookmarks : bookmarks_1.Bookmarks.empty(), meta === null || meta === void 0 ? void 0 : meta.db);\n  };\n  return Transaction;\n}();\nvar _states = {\n  // The transaction is running with no explicit success or failure marked\n  ACTIVE: {\n    commit: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete,\n        onConnection = _a.onConnection,\n        pendingResults = _a.pendingResults,\n        preparationJob = _a.preparationJob;\n      return {\n        result: finishTransaction(true, connectionHolder, onError, onComplete, onConnection, pendingResults, preparationJob),\n        state: _states.SUCCEEDED\n      };\n    },\n    rollback: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete,\n        onConnection = _a.onConnection,\n        pendingResults = _a.pendingResults,\n        preparationJob = _a.preparationJob;\n      return {\n        result: finishTransaction(false, connectionHolder, onError, onComplete, onConnection, pendingResults, preparationJob),\n        state: _states.ROLLED_BACK\n      };\n    },\n    run: function (query, parameters, _a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete,\n        onConnection = _a.onConnection,\n        reactive = _a.reactive,\n        fetchSize = _a.fetchSize,\n        highRecordWatermark = _a.highRecordWatermark,\n        lowRecordWatermark = _a.lowRecordWatermark,\n        preparationJob = _a.preparationJob;\n      // RUN in explicit transaction can't contain bookmarks and transaction configuration\n      // No need to include mode and database name as it shall be included in begin\n      var requirements = preparationJob !== null && preparationJob !== void 0 ? preparationJob : Promise.resolve();\n      var observerPromise = connectionHolder.getConnection().then(function (conn) {\n        return requirements.then(function () {\n          return conn;\n        });\n      }).then(function (conn) {\n        onConnection();\n        if (conn != null) {\n          return conn.run(query, parameters, {\n            bookmarks: bookmarks_1.Bookmarks.empty(),\n            txConfig: tx_config_1.TxConfig.empty(),\n            beforeError: onError,\n            afterComplete: onComplete,\n            reactive: reactive,\n            fetchSize: fetchSize,\n            highRecordWatermark: highRecordWatermark,\n            lowRecordWatermark: lowRecordWatermark\n          });\n        } else {\n          throw (0, error_1.newError)('No connection available');\n        }\n      }).catch(function (error) {\n        return new observers_1.FailedObserver({\n          error: error,\n          onError: onError\n        });\n      });\n      return newCompletedResult(observerPromise, query, parameters, connectionHolder, highRecordWatermark, lowRecordWatermark);\n    }\n  },\n  // An error has occurred, transaction can no longer be used and no more messages will\n  // be sent for this transaction.\n  FAILED: {\n    commit: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.FailedObserver({\n          error: (0, error_1.newError)('Cannot commit this transaction, because it has been rolled back either because of an error or explicit termination.'),\n          onError: onError\n        }), 'COMMIT', {}, connectionHolder, 0,\n        // high watermark\n        0 // low watermark\n        ),\n        state: _states.FAILED\n      };\n    },\n    rollback: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.CompletedObserver(), 'ROLLBACK', {}, connectionHolder, 0,\n        // high watermark\n        0 // low watermark\n        ),\n        state: _states.FAILED\n      };\n    },\n    run: function (query, parameters, _a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete;\n      return newCompletedResult(new observers_1.FailedObserver({\n        error: (0, error_1.newError)('Cannot run query in this transaction, because it has been rolled back either because of an error or explicit termination.'),\n        onError: onError\n      }), query, parameters, connectionHolder, 0,\n      // high watermark\n      0 // low watermark\n      );\n    }\n  },\n  // This transaction has successfully committed\n  SUCCEEDED: {\n    commit: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.FailedObserver({\n          error: (0, error_1.newError)('Cannot commit this transaction, because it has already been committed.'),\n          onError: onError\n        }), 'COMMIT', {}, connection_holder_1.EMPTY_CONNECTION_HOLDER, 0,\n        // high watermark\n        0 // low watermark\n        ),\n        state: _states.SUCCEEDED,\n        connectionHolder: connectionHolder\n      };\n    },\n    rollback: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.FailedObserver({\n          error: (0, error_1.newError)('Cannot rollback this transaction, because it has already been committed.'),\n          onError: onError\n        }), 'ROLLBACK', {}, connection_holder_1.EMPTY_CONNECTION_HOLDER, 0,\n        // high watermark\n        0 // low watermark\n        ),\n        state: _states.SUCCEEDED,\n        connectionHolder: connectionHolder\n      };\n    },\n    run: function (query, parameters, _a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete;\n      return newCompletedResult(new observers_1.FailedObserver({\n        error: (0, error_1.newError)('Cannot run query in this transaction, because it has already been committed.'),\n        onError: onError\n      }), query, parameters, connectionHolder, 0,\n      // high watermark\n      0 // low watermark\n      );\n    }\n  },\n  // This transaction has been rolled back\n  ROLLED_BACK: {\n    commit: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.FailedObserver({\n          error: (0, error_1.newError)('Cannot commit this transaction, because it has already been rolled back.'),\n          onError: onError\n        }), 'COMMIT', {}, connectionHolder, 0,\n        // high watermark\n        0 // low watermark\n        ),\n        state: _states.ROLLED_BACK\n      };\n    },\n    rollback: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.FailedObserver({\n          error: (0, error_1.newError)('Cannot rollback this transaction, because it has already been rolled back.')\n        }), 'ROLLBACK', {}, connectionHolder, 0,\n        // high watermark\n        0 // low watermark\n        ),\n        state: _states.ROLLED_BACK\n      };\n    },\n    run: function (query, parameters, _a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete;\n      return newCompletedResult(new observers_1.FailedObserver({\n        error: (0, error_1.newError)('Cannot run query in this transaction, because it has already been rolled back.'),\n        onError: onError\n      }), query, parameters, connectionHolder, 0,\n      // high watermark\n      0 // low watermark\n      );\n    }\n  }\n};\n/**\n *\n * @param {boolean} commit\n * @param {ConnectionHolder} connectionHolder\n * @param {function(err:Error): any} onError\n * @param {function(metadata:object): any} onComplete\n * @param {function() : any} onConnection\n * @param {list<Result>>}pendingResults all run results in this transaction\n */\nfunction finishTransaction(commit, connectionHolder, onError, onComplete, onConnection, pendingResults, preparationJob) {\n  var requirements = preparationJob !== null && preparationJob !== void 0 ? preparationJob : Promise.resolve();\n  var observerPromise = connectionHolder.getConnection().then(function (conn) {\n    return requirements.then(function () {\n      return conn;\n    });\n  }).then(function (connection) {\n    onConnection();\n    pendingResults.forEach(function (r) {\n      return r._cancel();\n    });\n    return Promise.all(pendingResults.map(function (result) {\n      return result.summary();\n    })).then(function (results) {\n      if (connection != null) {\n        if (commit) {\n          return connection.commitTransaction({\n            beforeError: onError,\n            afterComplete: onComplete\n          });\n        } else {\n          return connection.rollbackTransaction({\n            beforeError: onError,\n            afterComplete: onComplete\n          });\n        }\n      } else {\n        throw (0, error_1.newError)('No connection available');\n      }\n    });\n  }).catch(function (error) {\n    return new observers_1.FailedObserver({\n      error: error,\n      onError: onError\n    });\n  });\n  // for commit & rollback we need result that uses real connection holder and notifies it when\n  // connection is not needed and can be safely released to the pool\n  return new result_1.default(observerPromise, commit ? 'COMMIT' : 'ROLLBACK', {}, connectionHolder, {\n    high: Number.MAX_VALUE,\n    low: Number.MAX_VALUE\n  });\n}\n/**\n * Creates a {@link Result} with empty connection holder.\n * For cases when result represents an intermediate or failed action, does not require any metadata and does not\n * need to influence real connection holder to release connections.\n * @param {ResultStreamObserver} observer - an observer for the created result.\n * @param {string} query - the cypher query that produced the result.\n * @param {Object} parameters - the parameters for cypher query that produced the result.\n * @param {ConnectionHolder} connectionHolder - the connection holder used to get the result\n * @return {Result} new result.\n * @private\n */\nfunction newCompletedResult(observerPromise, query, parameters, connectionHolder, highRecordWatermark, lowRecordWatermark) {\n  if (connectionHolder === void 0) {\n    connectionHolder = connection_holder_1.EMPTY_CONNECTION_HOLDER;\n  }\n  return new result_1.default(Promise.resolve(observerPromise), query, parameters, new connection_holder_1.ReadOnlyConnectionHolder(connectionHolder !== null && connectionHolder !== void 0 ? connectionHolder : connection_holder_1.EMPTY_CONNECTION_HOLDER), {\n    low: lowRecordWatermark,\n    high: highRecordWatermark\n  });\n}\nexports.default = Transaction;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","__importDefault","mod","__esModule","Object","defineProperty","exports","util_1","require","connection_holder_1","bookmarks_1","tx_config_1","observers_1","error_1","result_1","Transaction","_a","connectionHolder","onClose","onBookmarks","onConnection","reactive","fetchSize","impersonatedUser","highRecordWatermark","lowRecordWatermark","notificationFilter","apiTelemetryConfig","_this","_connectionHolder","_reactive","_state","_states","ACTIVE","_onClose","_onBookmarks","_onConnection","_onError","_onErrorCallback","bind","_fetchSize","_onComplete","_onCompleteCallback","_results","_impersonatedUser","_lowRecordWatermak","_highRecordWatermark","_bookmarks","Bookmarks","empty","_notificationFilter","_apiTelemetryConfig","_acceptActive","_activePromise","prototype","_begin","getBookmarks","txConfig","events","getConnection","connection","_b","beginTransaction","bookmarks","mode","database","beforeError","error","onError","catch","afterComplete","metadata","onComplete","db","undefined","onDB","newError","finally","run","query","parameters","validateQueryAndParameters","validatedQuery","params","preparationJob","commit","committed","meta","pendingResults","state","subscribe","onCompleted","rollback","rolledback","isOpen","close","asyncDispose","FAILED","forEach","_streamObserverPromise","resultStreamObserver","releaseConnection","previousBookmarks","bookmark","finishTransaction","SUCCEEDED","ROLLED_BACK","requirements","observerPromise","conn","TxConfig","FailedObserver","newCompletedResult","CompletedObserver","EMPTY_CONNECTION_HOLDER","r","_cancel","all","map","summary","results","commitTransaction","rollbackTransaction","default","high","Number","MAX_VALUE","low","ReadOnlyConnectionHolder"],"sources":["D:/Study/Projects/El-Kasr Family Tree/client/node_modules/neo4j-driver-core/lib/transaction.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* eslint-disable @typescript-eslint/promise-function-async */\nvar util_1 = require(\"./internal/util\");\nvar connection_holder_1 = require(\"./internal/connection-holder\");\nvar bookmarks_1 = require(\"./internal/bookmarks\");\nvar tx_config_1 = require(\"./internal/tx-config\");\nvar observers_1 = require(\"./internal/observers\");\nvar error_1 = require(\"./error\");\nvar result_1 = __importDefault(require(\"./result\"));\n/**\n * Represents a transaction in the Neo4j database.\n *\n * @access public\n */\nvar Transaction = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {object} args\n     * @param {ConnectionHolder} args.connectionHolder - the connection holder to get connection from.\n     * @param {function()} args.onClose - Function to be called when transaction is committed or rolled back.\n     * @param {function(bookmarks: Bookmarks)} args.onBookmarks callback invoked when new bookmark is produced.\n     * @param {function()} args.onConnection - Function to be called when a connection is obtained to ensure the conneciton\n     * is not yet released.\n     * @param {boolean} args.reactive whether this transaction generates reactive streams\n     * @param {number} args.fetchSize - the record fetch size in each pulling batch.\n     * @param {string} args.impersonatedUser - The name of the user which should be impersonated for the duration of the session.\n     * @param {number} args.highRecordWatermark - The high watermark for the record buffer.\n     * @param {number} args.lowRecordWatermark - The low watermark for the record buffer.\n     * @param {NotificationFilter} args.notificationFilter - The notification filter used for this transaction.\n     * @param {NonAutoCommitApiTelemetryConfig} args.apiTelemetryConfig - The api telemetry configuration. Empty/Null for disabling telemetry\n     */\n    function Transaction(_a) {\n        var connectionHolder = _a.connectionHolder, onClose = _a.onClose, onBookmarks = _a.onBookmarks, onConnection = _a.onConnection, reactive = _a.reactive, fetchSize = _a.fetchSize, impersonatedUser = _a.impersonatedUser, highRecordWatermark = _a.highRecordWatermark, lowRecordWatermark = _a.lowRecordWatermark, notificationFilter = _a.notificationFilter, apiTelemetryConfig = _a.apiTelemetryConfig;\n        var _this = this;\n        this._connectionHolder = connectionHolder;\n        this._reactive = reactive;\n        this._state = _states.ACTIVE;\n        this._onClose = onClose;\n        this._onBookmarks = onBookmarks;\n        this._onConnection = onConnection;\n        this._onError = this._onErrorCallback.bind(this);\n        this._fetchSize = fetchSize;\n        this._onComplete = this._onCompleteCallback.bind(this);\n        this._results = [];\n        this._impersonatedUser = impersonatedUser;\n        this._lowRecordWatermak = lowRecordWatermark;\n        this._highRecordWatermark = highRecordWatermark;\n        this._bookmarks = bookmarks_1.Bookmarks.empty();\n        this._notificationFilter = notificationFilter;\n        this._apiTelemetryConfig = apiTelemetryConfig;\n        this._acceptActive = function () { }; // satisfy DenoJS\n        this._activePromise = new Promise(function (resolve, reject) {\n            _this._acceptActive = resolve;\n        });\n    }\n    /**\n     * @private\n     * @param {Bookmarks | string |  string []} bookmarks\n     * @param {TxConfig} txConfig\n     * @param {Object} events List of observers to events\n     * @returns {void}\n     */\n    Transaction.prototype._begin = function (getBookmarks, txConfig, events) {\n        var _this = this;\n        this._connectionHolder\n            .getConnection()\n            .then(function (connection) { return __awaiter(_this, void 0, void 0, function () {\n            var _a;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        this._onConnection();\n                        if (!(connection != null)) return [3 /*break*/, 2];\n                        _a = this;\n                        return [4 /*yield*/, getBookmarks()];\n                    case 1:\n                        _a._bookmarks = _b.sent();\n                        return [2 /*return*/, connection.beginTransaction({\n                                bookmarks: this._bookmarks,\n                                txConfig: txConfig,\n                                mode: this._connectionHolder.mode(),\n                                database: this._connectionHolder.database(),\n                                impersonatedUser: this._impersonatedUser,\n                                notificationFilter: this._notificationFilter,\n                                apiTelemetryConfig: this._apiTelemetryConfig,\n                                beforeError: function (error) {\n                                    if (events != null) {\n                                        events.onError(error);\n                                    }\n                                    _this._onError(error).catch(function () { });\n                                },\n                                afterComplete: function (metadata) {\n                                    if (events != null) {\n                                        events.onComplete(metadata);\n                                    }\n                                    if (metadata.db !== undefined && ((events === null || events === void 0 ? void 0 : events.onDB) != null)) {\n                                        events.onDB(metadata.db);\n                                    }\n                                    _this._onComplete(metadata);\n                                }\n                            })];\n                    case 2: throw (0, error_1.newError)('No connection available');\n                }\n            });\n        }); })\n            .catch(function (error) {\n            if (events != null) {\n                events.onError(error);\n            }\n            _this._onError(error).catch(function () { });\n        })\n            // It should make the transaction active anyway\n            // further errors will be treated by the existing\n            // observers\n            .finally(function () { return _this._acceptActive(); });\n    };\n    /**\n     * Run Cypher query\n     * Could be called with a query object i.e.: `{text: \"MATCH ...\", parameters: {param: 1}}`\n     * or with the query and parameters as separate arguments.\n     * @param {mixed} query - Cypher query to execute\n     * @param {Object} parameters - Map with parameters to use in query\n     * @return {Result} New Result\n     */\n    Transaction.prototype.run = function (query, parameters) {\n        var _a = (0, util_1.validateQueryAndParameters)(query, parameters), validatedQuery = _a.validatedQuery, params = _a.params;\n        var result = this._state.run(validatedQuery, params, {\n            connectionHolder: this._connectionHolder,\n            onError: this._onError,\n            onComplete: this._onComplete,\n            onConnection: this._onConnection,\n            reactive: this._reactive,\n            fetchSize: this._fetchSize,\n            highRecordWatermark: this._highRecordWatermark,\n            lowRecordWatermark: this._lowRecordWatermak,\n            preparationJob: this._activePromise\n        });\n        this._results.push(result);\n        return result;\n    };\n    /**\n     * Commits the transaction and returns the result.\n     *\n     * After committing the transaction can no longer be used.\n     *\n     * @returns {Promise<void>} An empty promise if committed successfully or error if any error happened during commit.\n     */\n    Transaction.prototype.commit = function () {\n        var _this = this;\n        var committed = this._state.commit({\n            connectionHolder: this._connectionHolder,\n            onError: this._onError,\n            onComplete: function (meta) { return _this._onCompleteCallback(meta, _this._bookmarks); },\n            onConnection: this._onConnection,\n            pendingResults: this._results,\n            preparationJob: this._activePromise\n        });\n        this._state = committed.state;\n        // clean up\n        this._onClose();\n        return new Promise(function (resolve, reject) {\n            committed.result.subscribe({\n                onCompleted: function () { return resolve(); },\n                onError: function (error) { return reject(error); }\n            });\n        });\n    };\n    /**\n     * Rollbacks the transaction.\n     *\n     * After rolling back, the transaction can no longer be used.\n     *\n     * @returns {Promise<void>} An empty promise if rolled back successfully or error if any error happened during\n     * rollback.\n     */\n    Transaction.prototype.rollback = function () {\n        var rolledback = this._state.rollback({\n            connectionHolder: this._connectionHolder,\n            onError: this._onError,\n            onComplete: this._onComplete,\n            onConnection: this._onConnection,\n            pendingResults: this._results,\n            preparationJob: this._activePromise\n        });\n        this._state = rolledback.state;\n        // clean up\n        this._onClose();\n        return new Promise(function (resolve, reject) {\n            rolledback.result.subscribe({\n                onCompleted: function () { return resolve(); },\n                onError: function (error) { return reject(error); }\n            });\n        });\n    };\n    /**\n     * Check if this transaction is active, which means commit and rollback did not happen.\n     * @return {boolean} `true` when not committed and not rolled back, `false` otherwise.\n     */\n    Transaction.prototype.isOpen = function () {\n        return this._state === _states.ACTIVE;\n    };\n    /**\n     * Closes the transaction\n     *\n     * This method will roll back the transaction if it is not already committed or rolled back.\n     *\n     * @returns {Promise<void>} An empty promise if closed successfully or error if any error happened during\n     */\n    Transaction.prototype.close = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.isOpen()) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.rollback()];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // eslint-disable-next-line\n    // @ts-ignore\n    Transaction.prototype[Symbol.asyncDispose] = function () {\n        return this.close();\n    };\n    Transaction.prototype._onErrorCallback = function (error) {\n        // error will be \"acknowledged\" by sending a RESET message\n        // database will then forget about this transaction and cleanup all corresponding resources\n        // it is thus safe to move this transaction to a FAILED state and disallow any further interactions with it\n        if (this._state === _states.FAILED) {\n            // already failed, nothing to do\n            // if we call onError for each result again, we might run into an infinite loop, that causes an OOM eventually\n            return Promise.resolve(null);\n        }\n        this._state = _states.FAILED;\n        this._onClose();\n        this._results.forEach(function (result) {\n            if (result.isOpen()) {\n                // @ts-expect-error\n                result._streamObserverPromise\n                    .then(function (resultStreamObserver) { return resultStreamObserver.onError(error); })\n                    // Nothing to do since we don't have a observer to notify the error\n                    // the result will be already broke in other ways.\n                    .catch(function (_) { });\n            }\n        });\n        // release connection back to the pool\n        return this._connectionHolder.releaseConnection();\n    };\n    /**\n     * @private\n     * @param {object} meta The meta with bookmarks\n     * @returns {void}\n     */\n    Transaction.prototype._onCompleteCallback = function (meta, previousBookmarks) {\n        this._onBookmarks(new bookmarks_1.Bookmarks(meta === null || meta === void 0 ? void 0 : meta.bookmark), previousBookmarks !== null && previousBookmarks !== void 0 ? previousBookmarks : bookmarks_1.Bookmarks.empty(), meta === null || meta === void 0 ? void 0 : meta.db);\n    };\n    return Transaction;\n}());\nvar _states = {\n    // The transaction is running with no explicit success or failure marked\n    ACTIVE: {\n        commit: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete, onConnection = _a.onConnection, pendingResults = _a.pendingResults, preparationJob = _a.preparationJob;\n            return {\n                result: finishTransaction(true, connectionHolder, onError, onComplete, onConnection, pendingResults, preparationJob),\n                state: _states.SUCCEEDED\n            };\n        },\n        rollback: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete, onConnection = _a.onConnection, pendingResults = _a.pendingResults, preparationJob = _a.preparationJob;\n            return {\n                result: finishTransaction(false, connectionHolder, onError, onComplete, onConnection, pendingResults, preparationJob),\n                state: _states.ROLLED_BACK\n            };\n        },\n        run: function (query, parameters, _a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete, onConnection = _a.onConnection, reactive = _a.reactive, fetchSize = _a.fetchSize, highRecordWatermark = _a.highRecordWatermark, lowRecordWatermark = _a.lowRecordWatermark, preparationJob = _a.preparationJob;\n            // RUN in explicit transaction can't contain bookmarks and transaction configuration\n            // No need to include mode and database name as it shall be included in begin\n            var requirements = preparationJob !== null && preparationJob !== void 0 ? preparationJob : Promise.resolve();\n            var observerPromise = connectionHolder.getConnection()\n                .then(function (conn) { return requirements.then(function () { return conn; }); })\n                .then(function (conn) {\n                onConnection();\n                if (conn != null) {\n                    return conn.run(query, parameters, {\n                        bookmarks: bookmarks_1.Bookmarks.empty(),\n                        txConfig: tx_config_1.TxConfig.empty(),\n                        beforeError: onError,\n                        afterComplete: onComplete,\n                        reactive: reactive,\n                        fetchSize: fetchSize,\n                        highRecordWatermark: highRecordWatermark,\n                        lowRecordWatermark: lowRecordWatermark\n                    });\n                }\n                else {\n                    throw (0, error_1.newError)('No connection available');\n                }\n            })\n                .catch(function (error) { return new observers_1.FailedObserver({ error: error, onError: onError }); });\n            return newCompletedResult(observerPromise, query, parameters, connectionHolder, highRecordWatermark, lowRecordWatermark);\n        }\n    },\n    // An error has occurred, transaction can no longer be used and no more messages will\n    // be sent for this transaction.\n    FAILED: {\n        commit: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.FailedObserver({\n                    error: (0, error_1.newError)('Cannot commit this transaction, because it has been rolled back either because of an error or explicit termination.'),\n                    onError: onError\n                }), 'COMMIT', {}, connectionHolder, 0, // high watermark\n                0 // low watermark\n                ),\n                state: _states.FAILED\n            };\n        },\n        rollback: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.CompletedObserver(), 'ROLLBACK', {}, connectionHolder, 0, // high watermark\n                0 // low watermark\n                ),\n                state: _states.FAILED\n            };\n        },\n        run: function (query, parameters, _a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return newCompletedResult(new observers_1.FailedObserver({\n                error: (0, error_1.newError)('Cannot run query in this transaction, because it has been rolled back either because of an error or explicit termination.'),\n                onError: onError\n            }), query, parameters, connectionHolder, 0, // high watermark\n            0 // low watermark\n            );\n        }\n    },\n    // This transaction has successfully committed\n    SUCCEEDED: {\n        commit: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.FailedObserver({\n                    error: (0, error_1.newError)('Cannot commit this transaction, because it has already been committed.'),\n                    onError: onError\n                }), 'COMMIT', {}, connection_holder_1.EMPTY_CONNECTION_HOLDER, 0, // high watermark\n                0 // low watermark\n                ),\n                state: _states.SUCCEEDED,\n                connectionHolder: connectionHolder\n            };\n        },\n        rollback: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.FailedObserver({\n                    error: (0, error_1.newError)('Cannot rollback this transaction, because it has already been committed.'),\n                    onError: onError\n                }), 'ROLLBACK', {}, connection_holder_1.EMPTY_CONNECTION_HOLDER, 0, // high watermark\n                0 // low watermark\n                ),\n                state: _states.SUCCEEDED,\n                connectionHolder: connectionHolder\n            };\n        },\n        run: function (query, parameters, _a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return newCompletedResult(new observers_1.FailedObserver({\n                error: (0, error_1.newError)('Cannot run query in this transaction, because it has already been committed.'),\n                onError: onError\n            }), query, parameters, connectionHolder, 0, // high watermark\n            0 // low watermark\n            );\n        }\n    },\n    // This transaction has been rolled back\n    ROLLED_BACK: {\n        commit: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.FailedObserver({\n                    error: (0, error_1.newError)('Cannot commit this transaction, because it has already been rolled back.'),\n                    onError: onError\n                }), 'COMMIT', {}, connectionHolder, 0, // high watermark\n                0 // low watermark\n                ),\n                state: _states.ROLLED_BACK\n            };\n        },\n        rollback: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.FailedObserver({\n                    error: (0, error_1.newError)('Cannot rollback this transaction, because it has already been rolled back.')\n                }), 'ROLLBACK', {}, connectionHolder, 0, // high watermark\n                0 // low watermark\n                ),\n                state: _states.ROLLED_BACK\n            };\n        },\n        run: function (query, parameters, _a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return newCompletedResult(new observers_1.FailedObserver({\n                error: (0, error_1.newError)('Cannot run query in this transaction, because it has already been rolled back.'),\n                onError: onError\n            }), query, parameters, connectionHolder, 0, // high watermark\n            0 // low watermark\n            );\n        }\n    }\n};\n/**\n *\n * @param {boolean} commit\n * @param {ConnectionHolder} connectionHolder\n * @param {function(err:Error): any} onError\n * @param {function(metadata:object): any} onComplete\n * @param {function() : any} onConnection\n * @param {list<Result>>}pendingResults all run results in this transaction\n */\nfunction finishTransaction(commit, connectionHolder, onError, onComplete, onConnection, pendingResults, preparationJob) {\n    var requirements = preparationJob !== null && preparationJob !== void 0 ? preparationJob : Promise.resolve();\n    var observerPromise = connectionHolder.getConnection()\n        .then(function (conn) { return requirements.then(function () { return conn; }); })\n        .then(function (connection) {\n        onConnection();\n        pendingResults.forEach(function (r) { return r._cancel(); });\n        return Promise.all(pendingResults.map(function (result) { return result.summary(); })).then(function (results) {\n            if (connection != null) {\n                if (commit) {\n                    return connection.commitTransaction({\n                        beforeError: onError,\n                        afterComplete: onComplete\n                    });\n                }\n                else {\n                    return connection.rollbackTransaction({\n                        beforeError: onError,\n                        afterComplete: onComplete\n                    });\n                }\n            }\n            else {\n                throw (0, error_1.newError)('No connection available');\n            }\n        });\n    })\n        .catch(function (error) { return new observers_1.FailedObserver({ error: error, onError: onError }); });\n    // for commit & rollback we need result that uses real connection holder and notifies it when\n    // connection is not needed and can be safely released to the pool\n    return new result_1.default(observerPromise, commit ? 'COMMIT' : 'ROLLBACK', {}, connectionHolder, {\n        high: Number.MAX_VALUE,\n        low: Number.MAX_VALUE\n    });\n}\n/**\n * Creates a {@link Result} with empty connection holder.\n * For cases when result represents an intermediate or failed action, does not require any metadata and does not\n * need to influence real connection holder to release connections.\n * @param {ResultStreamObserver} observer - an observer for the created result.\n * @param {string} query - the cypher query that produced the result.\n * @param {Object} parameters - the parameters for cypher query that produced the result.\n * @param {ConnectionHolder} connectionHolder - the connection holder used to get the result\n * @return {Result} new result.\n * @private\n */\nfunction newCompletedResult(observerPromise, query, parameters, connectionHolder, highRecordWatermark, lowRecordWatermark) {\n    if (connectionHolder === void 0) { connectionHolder = connection_holder_1.EMPTY_CONNECTION_HOLDER; }\n    return new result_1.default(Promise.resolve(observerPromise), query, parameters, new connection_holder_1.ReadOnlyConnectionHolder(connectionHolder !== null && connectionHolder !== void 0 ? connectionHolder : connection_holder_1.EMPTY_CONNECTION_HOLDER), {\n        low: lowRecordWatermark,\n        high: highRecordWatermark\n    });\n}\nexports.default = Transaction;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}