{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isDateTime = exports.DateTime = exports.isLocalDateTime = exports.LocalDateTime = exports.isDate = exports.Date = exports.isTime = exports.Time = exports.isLocalTime = exports.LocalTime = exports.isDuration = exports.Duration = void 0;\nvar util = __importStar(require(\"./internal/temporal-util\"));\nvar util_1 = require(\"./internal/util\");\nvar error_1 = require(\"./error\");\nvar integer_1 = __importStar(require(\"./integer\"));\nvar IDENTIFIER_PROPERTY_ATTRIBUTES = {\n  value: true,\n  enumerable: false,\n  configurable: false,\n  writable: false\n};\nvar DURATION_IDENTIFIER_PROPERTY = '__isDuration__';\nvar LOCAL_TIME_IDENTIFIER_PROPERTY = '__isLocalTime__';\nvar TIME_IDENTIFIER_PROPERTY = '__isTime__';\nvar DATE_IDENTIFIER_PROPERTY = '__isDate__';\nvar LOCAL_DATE_TIME_IDENTIFIER_PROPERTY = '__isLocalDateTime__';\nvar DATE_TIME_IDENTIFIER_PROPERTY = '__isDateTime__';\n/**\n * Represents an ISO 8601 duration. Contains both date-based values (years, months, days) and time-based values (seconds, nanoseconds).\n * Created `Duration` objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Duration = /** @class */function () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} months - The number of months for the new duration.\n   * @param {NumberOrInteger} days - The number of days for the new duration.\n   * @param {NumberOrInteger} seconds - The number of seconds for the new duration.\n   * @param {NumberOrInteger} nanoseconds - The number of nanoseconds for the new duration.\n   */\n  function Duration(months, days, seconds, nanoseconds) {\n    /**\n     * The number of months.\n     * @type {NumberOrInteger}\n     */\n    this.months = (0, util_1.assertNumberOrInteger)(months, 'Months');\n    /**\n     * The number of days.\n     * @type {NumberOrInteger}\n     */\n    this.days = (0, util_1.assertNumberOrInteger)(days, 'Days');\n    (0, util_1.assertNumberOrInteger)(seconds, 'Seconds');\n    (0, util_1.assertNumberOrInteger)(nanoseconds, 'Nanoseconds');\n    /**\n     * The number of seconds.\n     * @type {NumberOrInteger}\n     */\n    this.seconds = util.normalizeSecondsForDuration(seconds, nanoseconds);\n    /**\n     * The number of nanoseconds.\n     * @type {NumberOrInteger}\n     */\n    this.nanoseconds = util.normalizeNanosecondsForDuration(nanoseconds);\n    Object.freeze(this);\n  }\n  /**\n   * @ignore\n   */\n  Duration.prototype.toString = function () {\n    return util.durationToIsoString(this.months, this.days, this.seconds, this.nanoseconds);\n  };\n  return Duration;\n}();\nexports.Duration = Duration;\nObject.defineProperty(Duration.prototype, DURATION_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Duration} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Duration}, `false` otherwise.\n */\nfunction isDuration(obj) {\n  return hasIdentifierProperty(obj, DURATION_IDENTIFIER_PROPERTY);\n}\nexports.isDuration = isDuration;\n/**\n * Represents an instant capturing the time of day, but not the date, nor the timezone.\n * Created {@link LocalTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar LocalTime = /** @class */function () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} hour - The hour for the new local time.\n   * @param {NumberOrInteger} minute - The minute for the new local time.\n   * @param {NumberOrInteger} second - The second for the new local time.\n   * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n   */\n  function LocalTime(hour, minute, second, nanosecond) {\n    /**\n     * The hour.\n     * @type {NumberOrInteger}\n     */\n    this.hour = util.assertValidHour(hour);\n    /**\n     * The minute.\n     * @type {NumberOrInteger}\n     */\n    this.minute = util.assertValidMinute(minute);\n    /**\n     * The second.\n     * @type {NumberOrInteger}\n     */\n    this.second = util.assertValidSecond(second);\n    /**\n     * The nanosecond.\n     * @type {NumberOrInteger}\n     */\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    Object.freeze(this);\n  }\n  /**\n   * Create a {@link LocalTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n   * Year, month, day and time zone offset components of the given date are ignored.\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\n   * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n   * @return {LocalTime<number>} New LocalTime.\n   */\n  LocalTime.fromStandardDate = function (standardDate, nanosecond) {\n    verifyStandardDateAndNanos(standardDate, nanosecond);\n    var totalNanoseconds = util.totalNanoseconds(standardDate, nanosecond);\n    return new LocalTime(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), totalNanoseconds instanceof integer_1.default ? totalNanoseconds.toInt() : typeof totalNanoseconds === 'bigint' ? (0, integer_1.int)(totalNanoseconds).toInt() : totalNanoseconds);\n  };\n  /**\n   * @ignore\n   */\n  LocalTime.prototype.toString = function () {\n    return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond);\n  };\n  return LocalTime;\n}();\nexports.LocalTime = LocalTime;\nObject.defineProperty(LocalTime.prototype, LOCAL_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link LocalTime} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link LocalTime}, `false` otherwise.\n */\nfunction isLocalTime(obj) {\n  return hasIdentifierProperty(obj, LOCAL_TIME_IDENTIFIER_PROPERTY);\n}\nexports.isLocalTime = isLocalTime;\n/**\n * Represents an instant capturing the time of day, and the timezone offset in seconds, but not the date.\n * Created {@link Time} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Time = /** @class */function () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} hour - The hour for the new local time.\n   * @param {NumberOrInteger} minute - The minute for the new local time.\n   * @param {NumberOrInteger} second - The second for the new local time.\n   * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n   * @param {NumberOrInteger} timeZoneOffsetSeconds - The time zone offset in seconds. Value represents the difference, in seconds, from UTC to local time.\n   * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\n   */\n  function Time(hour, minute, second, nanosecond, timeZoneOffsetSeconds) {\n    /**\n     * The hour.\n     * @type {NumberOrInteger}\n     */\n    this.hour = util.assertValidHour(hour);\n    /**\n     * The minute.\n     * @type {NumberOrInteger}\n     */\n    this.minute = util.assertValidMinute(minute);\n    /**\n     * The second.\n     * @type {NumberOrInteger}\n     */\n    this.second = util.assertValidSecond(second);\n    /**\n     * The nanosecond.\n     * @type {NumberOrInteger}\n     */\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    /**\n     * The time zone offset in seconds.\n     * @type {NumberOrInteger}\n     */\n    this.timeZoneOffsetSeconds = (0, util_1.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\n    Object.freeze(this);\n  }\n  /**\n   * Create a {@link Time} object from the given standard JavaScript `Date` and optional nanoseconds.\n   * Year, month and day components of the given date are ignored.\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\n   * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n   * @return {Time<number>} New Time.\n   */\n  Time.fromStandardDate = function (standardDate, nanosecond) {\n    verifyStandardDateAndNanos(standardDate, nanosecond);\n    return new Time(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)), util.timeZoneOffsetInSeconds(standardDate));\n  };\n  /**\n   * @ignore\n   */\n  Time.prototype.toString = function () {\n    return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond) + util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds);\n  };\n  return Time;\n}();\nexports.Time = Time;\nObject.defineProperty(Time.prototype, TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Time} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Time}, `false` otherwise.\n */\nfunction isTime(obj) {\n  return hasIdentifierProperty(obj, TIME_IDENTIFIER_PROPERTY);\n}\nexports.isTime = isTime;\n/**\n * Represents an instant capturing the date, but not the time, nor the timezone.\n * Created {@link Date} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Date = /** @class */function () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} year - The year for the new local date.\n   * @param {NumberOrInteger} month - The month for the new local date.\n   * @param {NumberOrInteger} day - The day for the new local date.\n   */\n  function Date(year, month, day) {\n    /**\n     * The year.\n     * @type {NumberOrInteger}\n     */\n    this.year = util.assertValidYear(year);\n    /**\n     * The month.\n     * @type {NumberOrInteger}\n     */\n    this.month = util.assertValidMonth(month);\n    /**\n     * The day.\n     * @type {NumberOrInteger}\n     */\n    this.day = util.assertValidDay(day);\n    Object.freeze(this);\n  }\n  /**\n   * Create a {@link Date} object from the given standard JavaScript `Date`.\n   * Hour, minute, second, millisecond and time zone offset components of the given date are ignored.\n   *\n   * NOTE: the function {@link toStandardDate} and {@link fromStandardDate} are not inverses of one another. {@link fromStandardDate} takes the Day, Month and Year in local time from the supplies JavaScript Date object, while {@link toStandardDate} creates a new JavaScript Date object at midnight UTC. This incongruity will be rectified in 6.0\n   * If your timezone has a negative offset from UTC, creating a JavaScript Date at midnight UTC and converting it with {@link fromStandardDate} will result in a Date for the day before.\n   *\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\n   * @return {Date} New Date.\n   */\n  Date.fromStandardDate = function (standardDate) {\n    verifyStandardDateAndNanos(standardDate);\n    return new Date(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate());\n  };\n  /**\n   * Convert date to standard JavaScript `Date`.\n   *\n   * The time component of the returned `Date` is set to midnight\n   * and the time zone is set to UTC.\n   *\n   * NOTE: the function {@link toStandardDate} and {@link fromStandardDate} are not inverses of one another. {@link fromStandardDate} takes the Day, Month and Year in local time from the supplies JavaScript Date object, while {@link toStandardDate} creates a new JavaScript Date object at midnight UTC. This incongruity will be rectified in 6.0\n   *\n   * @returns {StandardDate} Standard JavaScript `Date` at `00:00:00.000` UTC.\n   */\n  Date.prototype.toStandardDate = function () {\n    return util.isoStringToStandardDate(this.toString());\n  };\n  /**\n   * @ignore\n   */\n  Date.prototype.toString = function () {\n    return util.dateToIsoString(this.year, this.month, this.day);\n  };\n  return Date;\n}();\nexports.Date = Date;\nObject.defineProperty(Date.prototype, DATE_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Date} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link Date}, `false` otherwise.\n */\nfunction isDate(obj) {\n  return hasIdentifierProperty(obj, DATE_IDENTIFIER_PROPERTY);\n}\nexports.isDate = isDate;\n/**\n * Represents an instant capturing the date and the time, but not the timezone.\n * Created {@link LocalDateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar LocalDateTime = /** @class */function () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} year - The year for the new local date.\n   * @param {NumberOrInteger} month - The month for the new local date.\n   * @param {NumberOrInteger} day - The day for the new local date.\n   * @param {NumberOrInteger} hour - The hour for the new local time.\n   * @param {NumberOrInteger} minute - The minute for the new local time.\n   * @param {NumberOrInteger} second - The second for the new local time.\n   * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n   */\n  function LocalDateTime(year, month, day, hour, minute, second, nanosecond) {\n    /**\n     * The year.\n     * @type {NumberOrInteger}\n     */\n    this.year = util.assertValidYear(year);\n    /**\n     * The month.\n     * @type {NumberOrInteger}\n     */\n    this.month = util.assertValidMonth(month);\n    /**\n     * The day.\n     * @type {NumberOrInteger}\n     */\n    this.day = util.assertValidDay(day);\n    /**\n     * The hour.\n     * @type {NumberOrInteger}\n     */\n    this.hour = util.assertValidHour(hour);\n    /**\n     * The minute.\n     * @type {NumberOrInteger}\n     */\n    this.minute = util.assertValidMinute(minute);\n    /**\n     * The second.\n     * @type {NumberOrInteger}\n     */\n    this.second = util.assertValidSecond(second);\n    /**\n     * The nanosecond.\n     * @type {NumberOrInteger}\n     */\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    Object.freeze(this);\n  }\n  /**\n   * Create a {@link LocalDateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n   * Time zone offset component of the given date is ignored.\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\n   * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n   * @return {LocalDateTime} New LocalDateTime.\n   */\n  LocalDateTime.fromStandardDate = function (standardDate, nanosecond) {\n    verifyStandardDateAndNanos(standardDate, nanosecond);\n    return new LocalDateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)));\n  };\n  /**\n   * Convert date to standard JavaScript `Date`.\n   *\n   * @returns {StandardDate} Standard JavaScript `Date` at the local timezone\n   */\n  LocalDateTime.prototype.toStandardDate = function () {\n    return util.isoStringToStandardDate(this.toString());\n  };\n  /**\n   * @ignore\n   */\n  LocalDateTime.prototype.toString = function () {\n    return localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n  };\n  return LocalDateTime;\n}();\nexports.LocalDateTime = LocalDateTime;\nObject.defineProperty(LocalDateTime.prototype, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link LocalDateTime} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link LocalDateTime}, `false` otherwise.\n */\nfunction isLocalDateTime(obj) {\n  return hasIdentifierProperty(obj, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY);\n}\nexports.isLocalDateTime = isLocalDateTime;\n/**\n * Represents an instant capturing the date, the time and the timezone identifier.\n * Created {@ DateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar DateTime = /** @class */function () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} year - The year for the new date-time.\n   * @param {NumberOrInteger} month - The month for the new date-time.\n   * @param {NumberOrInteger} day - The day for the new date-time.\n   * @param {NumberOrInteger} hour - The hour for the new date-time.\n   * @param {NumberOrInteger} minute - The minute for the new date-time.\n   * @param {NumberOrInteger} second - The second for the new date-time.\n   * @param {NumberOrInteger} nanosecond - The nanosecond for the new date-time.\n   * @param {NumberOrInteger} timeZoneOffsetSeconds - The time zone offset in seconds. Either this argument or `timeZoneId` should be defined.\n   * Value represents the difference, in seconds, from UTC to local time.\n   * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\n   * @param {string|null} timeZoneId - The time zone id for the new date-time. Either this argument or `timeZoneOffsetSeconds` should be defined.\n   */\n  function DateTime(year, month, day, hour, minute, second, nanosecond, timeZoneOffsetSeconds, timeZoneId) {\n    /**\n     * The year.\n     * @type {NumberOrInteger}\n     */\n    this.year = util.assertValidYear(year);\n    /**\n     * The month.\n     * @type {NumberOrInteger}\n     */\n    this.month = util.assertValidMonth(month);\n    /**\n     * The day.\n     * @type {NumberOrInteger}\n     */\n    this.day = util.assertValidDay(day);\n    /**\n     * The hour.\n     * @type {NumberOrInteger}\n     */\n    this.hour = util.assertValidHour(hour);\n    /**\n     * The minute.\n     * @type {NumberOrInteger}\n     */\n    this.minute = util.assertValidMinute(minute);\n    /**\n     * The second.\n     * @type {NumberOrInteger}\n     */\n    this.second = util.assertValidSecond(second);\n    /**\n     * The nanosecond.\n     * @type {NumberOrInteger}\n     */\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    var _a = __read(verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId), 2),\n      offset = _a[0],\n      id = _a[1];\n    /**\n     * The time zone offset in seconds.\n     *\n     * *Either this or {@link timeZoneId} is defined.*\n     *\n     * @type {NumberOrInteger}\n     */\n    this.timeZoneOffsetSeconds = offset;\n    /**\n     * The time zone id.\n     *\n     * *Either this or {@link timeZoneOffsetSeconds} is defined.*\n     *\n     * @type {string}\n     */\n    this.timeZoneId = id !== null && id !== void 0 ? id : undefined;\n    Object.freeze(this);\n  }\n  /**\n   * Create a {@link DateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\n   * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n   * @return {DateTime} New DateTime.\n   */\n  DateTime.fromStandardDate = function (standardDate, nanosecond) {\n    verifyStandardDateAndNanos(standardDate, nanosecond);\n    return new DateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)), util.timeZoneOffsetInSeconds(standardDate), null /* no time zone id */);\n  };\n  /**\n   * Convert date to standard JavaScript `Date`.\n   *\n   * @returns {StandardDate} Standard JavaScript `Date` at the defined time zone offset\n   * @throws {Error} If the time zone offset is not defined in the object.\n   */\n  DateTime.prototype.toStandardDate = function () {\n    return util.toStandardDate(this._toUTC());\n  };\n  /**\n   * @ignore\n   */\n  DateTime.prototype.toString = function () {\n    var _a;\n    var localDateTimeStr = localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n    var timeOffset = this.timeZoneOffsetSeconds != null ? util.timeZoneOffsetToIsoString((_a = this.timeZoneOffsetSeconds) !== null && _a !== void 0 ? _a : 0) : '';\n    var timeZoneStr = this.timeZoneId != null ? \"[\".concat(this.timeZoneId, \"]\") : '';\n    return localDateTimeStr + timeOffset + timeZoneStr;\n  };\n  /**\n   * @private\n   * @returns {number}\n   */\n  DateTime.prototype._toUTC = function () {\n    var _a;\n    if (this.timeZoneOffsetSeconds === undefined) {\n      throw new Error('Requires DateTime created with time zone offset');\n    }\n    var epochSecond = util.localDateTimeToEpochSecond(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n    var utcSecond = epochSecond.subtract((_a = this.timeZoneOffsetSeconds) !== null && _a !== void 0 ? _a : 0);\n    return (0, integer_1.int)(utcSecond).multiply(1000).add((0, integer_1.int)(this.nanosecond).div(1000000)).toNumber();\n  };\n  return DateTime;\n}();\nexports.DateTime = DateTime;\nObject.defineProperty(DateTime.prototype, DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link DateTime} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link DateTime}, `false` otherwise.\n */\nfunction isDateTime(obj) {\n  return hasIdentifierProperty(obj, DATE_TIME_IDENTIFIER_PROPERTY);\n}\nexports.isDateTime = isDateTime;\nfunction hasIdentifierProperty(obj, property) {\n  return obj != null && obj[property] === true;\n}\nfunction localDateTimeToString(year, month, day, hour, minute, second, nanosecond) {\n  return util.dateToIsoString(year, month, day) + 'T' + util.timeToIsoString(hour, minute, second, nanosecond);\n}\n/**\n * @private\n * @param {NumberOrInteger} timeZoneOffsetSeconds\n * @param {string | null } timeZoneId\n * @returns {Array<NumberOrInteger | undefined | null, string | undefined | null>}\n */\nfunction verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId) {\n  var offsetDefined = timeZoneOffsetSeconds !== null && timeZoneOffsetSeconds !== undefined;\n  var idDefined = timeZoneId !== null && timeZoneId !== undefined && timeZoneId !== '';\n  if (!offsetDefined && !idDefined) {\n    throw (0, error_1.newError)(\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    \"Unable to create DateTime without either time zone offset or id. Please specify either of them. Given offset: \".concat(timeZoneOffsetSeconds, \" and id: \").concat(timeZoneId));\n  }\n  var result = [undefined, undefined];\n  if (offsetDefined) {\n    (0, util_1.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\n    result[0] = timeZoneOffsetSeconds;\n  }\n  if (idDefined) {\n    (0, util_1.assertString)(timeZoneId, 'Time zone ID');\n    util.assertValidZoneId('Time zone ID', timeZoneId);\n    result[1] = timeZoneId;\n  }\n  return result;\n}\n/**\n * @private\n * @param {StandardDate} standardDate\n * @param {NumberOrInteger} nanosecond\n * @returns {void}\n */\nfunction verifyStandardDateAndNanos(standardDate, nanosecond) {\n  (0, util_1.assertValidDate)(standardDate, 'Standard date');\n  if (nanosecond !== null && nanosecond !== undefined) {\n    (0, util_1.assertNumberOrInteger)(nanosecond, 'Nanosecond');\n  }\n}","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__read","n","Symbol","iterator","i","r","ar","e","next","done","push","error","exports","isDateTime","DateTime","isLocalDateTime","LocalDateTime","isDate","Date","isTime","Time","isLocalTime","LocalTime","isDuration","Duration","util","require","util_1","error_1","integer_1","IDENTIFIER_PROPERTY_ATTRIBUTES","DURATION_IDENTIFIER_PROPERTY","LOCAL_TIME_IDENTIFIER_PROPERTY","TIME_IDENTIFIER_PROPERTY","DATE_IDENTIFIER_PROPERTY","LOCAL_DATE_TIME_IDENTIFIER_PROPERTY","DATE_TIME_IDENTIFIER_PROPERTY","months","days","seconds","nanoseconds","assertNumberOrInteger","normalizeSecondsForDuration","normalizeNanosecondsForDuration","freeze","toString","durationToIsoString","obj","hasIdentifierProperty","hour","minute","second","nanosecond","assertValidHour","assertValidMinute","assertValidSecond","assertValidNanosecond","fromStandardDate","standardDate","verifyStandardDateAndNanos","totalNanoseconds","getHours","getMinutes","getSeconds","default","toInt","int","timeToIsoString","timeZoneOffsetSeconds","toNumber","timeZoneOffsetInSeconds","timeZoneOffsetToIsoString","year","month","day","assertValidYear","assertValidMonth","assertValidDay","getFullYear","getMonth","getDate","toStandardDate","isoStringToStandardDate","dateToIsoString","localDateTimeToString","timeZoneId","_a","verifyTimeZoneArguments","offset","id","_toUTC","localDateTimeStr","timeOffset","timeZoneStr","concat","Error","epochSecond","localDateTimeToEpochSecond","utcSecond","subtract","multiply","add","div","property","offsetDefined","idDefined","newError","assertString","assertValidZoneId","assertValidDate"],"sources":["D:/Study/Projects/Copy 4/client/node_modules/neo4j-driver-core/lib/temporal-types.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isDateTime = exports.DateTime = exports.isLocalDateTime = exports.LocalDateTime = exports.isDate = exports.Date = exports.isTime = exports.Time = exports.isLocalTime = exports.LocalTime = exports.isDuration = exports.Duration = void 0;\nvar util = __importStar(require(\"./internal/temporal-util\"));\nvar util_1 = require(\"./internal/util\");\nvar error_1 = require(\"./error\");\nvar integer_1 = __importStar(require(\"./integer\"));\nvar IDENTIFIER_PROPERTY_ATTRIBUTES = {\n    value: true,\n    enumerable: false,\n    configurable: false,\n    writable: false\n};\nvar DURATION_IDENTIFIER_PROPERTY = '__isDuration__';\nvar LOCAL_TIME_IDENTIFIER_PROPERTY = '__isLocalTime__';\nvar TIME_IDENTIFIER_PROPERTY = '__isTime__';\nvar DATE_IDENTIFIER_PROPERTY = '__isDate__';\nvar LOCAL_DATE_TIME_IDENTIFIER_PROPERTY = '__isLocalDateTime__';\nvar DATE_TIME_IDENTIFIER_PROPERTY = '__isDateTime__';\n/**\n * Represents an ISO 8601 duration. Contains both date-based values (years, months, days) and time-based values (seconds, nanoseconds).\n * Created `Duration` objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Duration = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} months - The number of months for the new duration.\n     * @param {NumberOrInteger} days - The number of days for the new duration.\n     * @param {NumberOrInteger} seconds - The number of seconds for the new duration.\n     * @param {NumberOrInteger} nanoseconds - The number of nanoseconds for the new duration.\n     */\n    function Duration(months, days, seconds, nanoseconds) {\n        /**\n         * The number of months.\n         * @type {NumberOrInteger}\n         */\n        this.months = (0, util_1.assertNumberOrInteger)(months, 'Months');\n        /**\n         * The number of days.\n         * @type {NumberOrInteger}\n         */\n        this.days = (0, util_1.assertNumberOrInteger)(days, 'Days');\n        (0, util_1.assertNumberOrInteger)(seconds, 'Seconds');\n        (0, util_1.assertNumberOrInteger)(nanoseconds, 'Nanoseconds');\n        /**\n         * The number of seconds.\n         * @type {NumberOrInteger}\n         */\n        this.seconds = util.normalizeSecondsForDuration(seconds, nanoseconds);\n        /**\n         * The number of nanoseconds.\n         * @type {NumberOrInteger}\n         */\n        this.nanoseconds = util.normalizeNanosecondsForDuration(nanoseconds);\n        Object.freeze(this);\n    }\n    /**\n     * @ignore\n     */\n    Duration.prototype.toString = function () {\n        return util.durationToIsoString(this.months, this.days, this.seconds, this.nanoseconds);\n    };\n    return Duration;\n}());\nexports.Duration = Duration;\nObject.defineProperty(Duration.prototype, DURATION_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Duration} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Duration}, `false` otherwise.\n */\nfunction isDuration(obj) {\n    return hasIdentifierProperty(obj, DURATION_IDENTIFIER_PROPERTY);\n}\nexports.isDuration = isDuration;\n/**\n * Represents an instant capturing the time of day, but not the date, nor the timezone.\n * Created {@link LocalTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar LocalTime = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} hour - The hour for the new local time.\n     * @param {NumberOrInteger} minute - The minute for the new local time.\n     * @param {NumberOrInteger} second - The second for the new local time.\n     * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n     */\n    function LocalTime(hour, minute, second, nanosecond) {\n        /**\n         * The hour.\n         * @type {NumberOrInteger}\n         */\n        this.hour = util.assertValidHour(hour);\n        /**\n         * The minute.\n         * @type {NumberOrInteger}\n         */\n        this.minute = util.assertValidMinute(minute);\n        /**\n         * The second.\n         * @type {NumberOrInteger}\n         */\n        this.second = util.assertValidSecond(second);\n        /**\n         * The nanosecond.\n         * @type {NumberOrInteger}\n         */\n        this.nanosecond = util.assertValidNanosecond(nanosecond);\n        Object.freeze(this);\n    }\n    /**\n     * Create a {@link LocalTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n     * Year, month, day and time zone offset components of the given date are ignored.\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\n     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n     * @return {LocalTime<number>} New LocalTime.\n     */\n    LocalTime.fromStandardDate = function (standardDate, nanosecond) {\n        verifyStandardDateAndNanos(standardDate, nanosecond);\n        var totalNanoseconds = util.totalNanoseconds(standardDate, nanosecond);\n        return new LocalTime(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), totalNanoseconds instanceof integer_1.default\n            ? totalNanoseconds.toInt()\n            : typeof totalNanoseconds === 'bigint'\n                ? (0, integer_1.int)(totalNanoseconds).toInt()\n                : totalNanoseconds);\n    };\n    /**\n     * @ignore\n     */\n    LocalTime.prototype.toString = function () {\n        return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond);\n    };\n    return LocalTime;\n}());\nexports.LocalTime = LocalTime;\nObject.defineProperty(LocalTime.prototype, LOCAL_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link LocalTime} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link LocalTime}, `false` otherwise.\n */\nfunction isLocalTime(obj) {\n    return hasIdentifierProperty(obj, LOCAL_TIME_IDENTIFIER_PROPERTY);\n}\nexports.isLocalTime = isLocalTime;\n/**\n * Represents an instant capturing the time of day, and the timezone offset in seconds, but not the date.\n * Created {@link Time} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Time = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} hour - The hour for the new local time.\n     * @param {NumberOrInteger} minute - The minute for the new local time.\n     * @param {NumberOrInteger} second - The second for the new local time.\n     * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n     * @param {NumberOrInteger} timeZoneOffsetSeconds - The time zone offset in seconds. Value represents the difference, in seconds, from UTC to local time.\n     * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\n     */\n    function Time(hour, minute, second, nanosecond, timeZoneOffsetSeconds) {\n        /**\n         * The hour.\n         * @type {NumberOrInteger}\n         */\n        this.hour = util.assertValidHour(hour);\n        /**\n         * The minute.\n         * @type {NumberOrInteger}\n         */\n        this.minute = util.assertValidMinute(minute);\n        /**\n         * The second.\n         * @type {NumberOrInteger}\n         */\n        this.second = util.assertValidSecond(second);\n        /**\n         * The nanosecond.\n         * @type {NumberOrInteger}\n         */\n        this.nanosecond = util.assertValidNanosecond(nanosecond);\n        /**\n         * The time zone offset in seconds.\n         * @type {NumberOrInteger}\n         */\n        this.timeZoneOffsetSeconds = (0, util_1.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\n        Object.freeze(this);\n    }\n    /**\n     * Create a {@link Time} object from the given standard JavaScript `Date` and optional nanoseconds.\n     * Year, month and day components of the given date are ignored.\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\n     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n     * @return {Time<number>} New Time.\n     */\n    Time.fromStandardDate = function (standardDate, nanosecond) {\n        verifyStandardDateAndNanos(standardDate, nanosecond);\n        return new Time(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)), util.timeZoneOffsetInSeconds(standardDate));\n    };\n    /**\n     * @ignore\n     */\n    Time.prototype.toString = function () {\n        return (util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond) + util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds));\n    };\n    return Time;\n}());\nexports.Time = Time;\nObject.defineProperty(Time.prototype, TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Time} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Time}, `false` otherwise.\n */\nfunction isTime(obj) {\n    return hasIdentifierProperty(obj, TIME_IDENTIFIER_PROPERTY);\n}\nexports.isTime = isTime;\n/**\n * Represents an instant capturing the date, but not the time, nor the timezone.\n * Created {@link Date} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Date = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} year - The year for the new local date.\n     * @param {NumberOrInteger} month - The month for the new local date.\n     * @param {NumberOrInteger} day - The day for the new local date.\n     */\n    function Date(year, month, day) {\n        /**\n         * The year.\n         * @type {NumberOrInteger}\n         */\n        this.year = util.assertValidYear(year);\n        /**\n         * The month.\n         * @type {NumberOrInteger}\n         */\n        this.month = util.assertValidMonth(month);\n        /**\n         * The day.\n         * @type {NumberOrInteger}\n         */\n        this.day = util.assertValidDay(day);\n        Object.freeze(this);\n    }\n    /**\n     * Create a {@link Date} object from the given standard JavaScript `Date`.\n     * Hour, minute, second, millisecond and time zone offset components of the given date are ignored.\n     *\n     * NOTE: the function {@link toStandardDate} and {@link fromStandardDate} are not inverses of one another. {@link fromStandardDate} takes the Day, Month and Year in local time from the supplies JavaScript Date object, while {@link toStandardDate} creates a new JavaScript Date object at midnight UTC. This incongruity will be rectified in 6.0\n     * If your timezone has a negative offset from UTC, creating a JavaScript Date at midnight UTC and converting it with {@link fromStandardDate} will result in a Date for the day before.\n     *\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\n     * @return {Date} New Date.\n     */\n    Date.fromStandardDate = function (standardDate) {\n        verifyStandardDateAndNanos(standardDate);\n        return new Date(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate());\n    };\n    /**\n     * Convert date to standard JavaScript `Date`.\n     *\n     * The time component of the returned `Date` is set to midnight\n     * and the time zone is set to UTC.\n     *\n     * NOTE: the function {@link toStandardDate} and {@link fromStandardDate} are not inverses of one another. {@link fromStandardDate} takes the Day, Month and Year in local time from the supplies JavaScript Date object, while {@link toStandardDate} creates a new JavaScript Date object at midnight UTC. This incongruity will be rectified in 6.0\n     *\n     * @returns {StandardDate} Standard JavaScript `Date` at `00:00:00.000` UTC.\n     */\n    Date.prototype.toStandardDate = function () {\n        return util.isoStringToStandardDate(this.toString());\n    };\n    /**\n     * @ignore\n     */\n    Date.prototype.toString = function () {\n        return util.dateToIsoString(this.year, this.month, this.day);\n    };\n    return Date;\n}());\nexports.Date = Date;\nObject.defineProperty(Date.prototype, DATE_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Date} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link Date}, `false` otherwise.\n */\nfunction isDate(obj) {\n    return hasIdentifierProperty(obj, DATE_IDENTIFIER_PROPERTY);\n}\nexports.isDate = isDate;\n/**\n * Represents an instant capturing the date and the time, but not the timezone.\n * Created {@link LocalDateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar LocalDateTime = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} year - The year for the new local date.\n     * @param {NumberOrInteger} month - The month for the new local date.\n     * @param {NumberOrInteger} day - The day for the new local date.\n     * @param {NumberOrInteger} hour - The hour for the new local time.\n     * @param {NumberOrInteger} minute - The minute for the new local time.\n     * @param {NumberOrInteger} second - The second for the new local time.\n     * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n     */\n    function LocalDateTime(year, month, day, hour, minute, second, nanosecond) {\n        /**\n         * The year.\n         * @type {NumberOrInteger}\n         */\n        this.year = util.assertValidYear(year);\n        /**\n         * The month.\n         * @type {NumberOrInteger}\n         */\n        this.month = util.assertValidMonth(month);\n        /**\n         * The day.\n         * @type {NumberOrInteger}\n         */\n        this.day = util.assertValidDay(day);\n        /**\n         * The hour.\n         * @type {NumberOrInteger}\n         */\n        this.hour = util.assertValidHour(hour);\n        /**\n         * The minute.\n         * @type {NumberOrInteger}\n         */\n        this.minute = util.assertValidMinute(minute);\n        /**\n         * The second.\n         * @type {NumberOrInteger}\n         */\n        this.second = util.assertValidSecond(second);\n        /**\n         * The nanosecond.\n         * @type {NumberOrInteger}\n         */\n        this.nanosecond = util.assertValidNanosecond(nanosecond);\n        Object.freeze(this);\n    }\n    /**\n     * Create a {@link LocalDateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n     * Time zone offset component of the given date is ignored.\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\n     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n     * @return {LocalDateTime} New LocalDateTime.\n     */\n    LocalDateTime.fromStandardDate = function (standardDate, nanosecond) {\n        verifyStandardDateAndNanos(standardDate, nanosecond);\n        return new LocalDateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)));\n    };\n    /**\n     * Convert date to standard JavaScript `Date`.\n     *\n     * @returns {StandardDate} Standard JavaScript `Date` at the local timezone\n     */\n    LocalDateTime.prototype.toStandardDate = function () {\n        return util.isoStringToStandardDate(this.toString());\n    };\n    /**\n     * @ignore\n     */\n    LocalDateTime.prototype.toString = function () {\n        return localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n    };\n    return LocalDateTime;\n}());\nexports.LocalDateTime = LocalDateTime;\nObject.defineProperty(LocalDateTime.prototype, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link LocalDateTime} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link LocalDateTime}, `false` otherwise.\n */\nfunction isLocalDateTime(obj) {\n    return hasIdentifierProperty(obj, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY);\n}\nexports.isLocalDateTime = isLocalDateTime;\n/**\n * Represents an instant capturing the date, the time and the timezone identifier.\n * Created {@ DateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar DateTime = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} year - The year for the new date-time.\n     * @param {NumberOrInteger} month - The month for the new date-time.\n     * @param {NumberOrInteger} day - The day for the new date-time.\n     * @param {NumberOrInteger} hour - The hour for the new date-time.\n     * @param {NumberOrInteger} minute - The minute for the new date-time.\n     * @param {NumberOrInteger} second - The second for the new date-time.\n     * @param {NumberOrInteger} nanosecond - The nanosecond for the new date-time.\n     * @param {NumberOrInteger} timeZoneOffsetSeconds - The time zone offset in seconds. Either this argument or `timeZoneId` should be defined.\n     * Value represents the difference, in seconds, from UTC to local time.\n     * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\n     * @param {string|null} timeZoneId - The time zone id for the new date-time. Either this argument or `timeZoneOffsetSeconds` should be defined.\n     */\n    function DateTime(year, month, day, hour, minute, second, nanosecond, timeZoneOffsetSeconds, timeZoneId) {\n        /**\n         * The year.\n         * @type {NumberOrInteger}\n         */\n        this.year = util.assertValidYear(year);\n        /**\n         * The month.\n         * @type {NumberOrInteger}\n         */\n        this.month = util.assertValidMonth(month);\n        /**\n         * The day.\n         * @type {NumberOrInteger}\n         */\n        this.day = util.assertValidDay(day);\n        /**\n         * The hour.\n         * @type {NumberOrInteger}\n         */\n        this.hour = util.assertValidHour(hour);\n        /**\n         * The minute.\n         * @type {NumberOrInteger}\n         */\n        this.minute = util.assertValidMinute(minute);\n        /**\n         * The second.\n         * @type {NumberOrInteger}\n         */\n        this.second = util.assertValidSecond(second);\n        /**\n         * The nanosecond.\n         * @type {NumberOrInteger}\n         */\n        this.nanosecond = util.assertValidNanosecond(nanosecond);\n        var _a = __read(verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId), 2), offset = _a[0], id = _a[1];\n        /**\n         * The time zone offset in seconds.\n         *\n         * *Either this or {@link timeZoneId} is defined.*\n         *\n         * @type {NumberOrInteger}\n         */\n        this.timeZoneOffsetSeconds = offset;\n        /**\n         * The time zone id.\n         *\n         * *Either this or {@link timeZoneOffsetSeconds} is defined.*\n         *\n         * @type {string}\n         */\n        this.timeZoneId = id !== null && id !== void 0 ? id : undefined;\n        Object.freeze(this);\n    }\n    /**\n     * Create a {@link DateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\n     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n     * @return {DateTime} New DateTime.\n     */\n    DateTime.fromStandardDate = function (standardDate, nanosecond) {\n        verifyStandardDateAndNanos(standardDate, nanosecond);\n        return new DateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)), util.timeZoneOffsetInSeconds(standardDate), null /* no time zone id */);\n    };\n    /**\n     * Convert date to standard JavaScript `Date`.\n     *\n     * @returns {StandardDate} Standard JavaScript `Date` at the defined time zone offset\n     * @throws {Error} If the time zone offset is not defined in the object.\n     */\n    DateTime.prototype.toStandardDate = function () {\n        return util.toStandardDate(this._toUTC());\n    };\n    /**\n     * @ignore\n     */\n    DateTime.prototype.toString = function () {\n        var _a;\n        var localDateTimeStr = localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n        var timeOffset = this.timeZoneOffsetSeconds != null\n            ? util.timeZoneOffsetToIsoString((_a = this.timeZoneOffsetSeconds) !== null && _a !== void 0 ? _a : 0)\n            : '';\n        var timeZoneStr = this.timeZoneId != null\n            ? \"[\".concat(this.timeZoneId, \"]\")\n            : '';\n        return localDateTimeStr + timeOffset + timeZoneStr;\n    };\n    /**\n     * @private\n     * @returns {number}\n     */\n    DateTime.prototype._toUTC = function () {\n        var _a;\n        if (this.timeZoneOffsetSeconds === undefined) {\n            throw new Error('Requires DateTime created with time zone offset');\n        }\n        var epochSecond = util.localDateTimeToEpochSecond(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n        var utcSecond = epochSecond.subtract((_a = this.timeZoneOffsetSeconds) !== null && _a !== void 0 ? _a : 0);\n        return (0, integer_1.int)(utcSecond)\n            .multiply(1000)\n            .add((0, integer_1.int)(this.nanosecond).div(1000000))\n            .toNumber();\n    };\n    return DateTime;\n}());\nexports.DateTime = DateTime;\nObject.defineProperty(DateTime.prototype, DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link DateTime} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link DateTime}, `false` otherwise.\n */\nfunction isDateTime(obj) {\n    return hasIdentifierProperty(obj, DATE_TIME_IDENTIFIER_PROPERTY);\n}\nexports.isDateTime = isDateTime;\nfunction hasIdentifierProperty(obj, property) {\n    return obj != null && obj[property] === true;\n}\nfunction localDateTimeToString(year, month, day, hour, minute, second, nanosecond) {\n    return (util.dateToIsoString(year, month, day) +\n        'T' +\n        util.timeToIsoString(hour, minute, second, nanosecond));\n}\n/**\n * @private\n * @param {NumberOrInteger} timeZoneOffsetSeconds\n * @param {string | null } timeZoneId\n * @returns {Array<NumberOrInteger | undefined | null, string | undefined | null>}\n */\nfunction verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId) {\n    var offsetDefined = timeZoneOffsetSeconds !== null && timeZoneOffsetSeconds !== undefined;\n    var idDefined = timeZoneId !== null && timeZoneId !== undefined && timeZoneId !== '';\n    if (!offsetDefined && !idDefined) {\n        throw (0, error_1.newError)(\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        \"Unable to create DateTime without either time zone offset or id. Please specify either of them. Given offset: \".concat(timeZoneOffsetSeconds, \" and id: \").concat(timeZoneId));\n    }\n    var result = [undefined, undefined];\n    if (offsetDefined) {\n        (0, util_1.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\n        result[0] = timeZoneOffsetSeconds;\n    }\n    if (idDefined) {\n        (0, util_1.assertString)(timeZoneId, 'Time zone ID');\n        util.assertValidZoneId('Time zone ID', timeZoneId);\n        result[1] = timeZoneId;\n    }\n    return result;\n}\n/**\n * @private\n * @param {StandardDate} standardDate\n * @param {NumberOrInteger} nanosecond\n * @returns {void}\n */\nfunction verifyStandardDateAndNanos(standardDate, nanosecond) {\n    (0, util_1.assertValidDate)(standardDate, 'Standard date');\n    if (nanosecond !== null && nanosecond !== undefined) {\n        (0, util_1.assertNumberOrInteger)(nanosecond, 'Nanosecond');\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}