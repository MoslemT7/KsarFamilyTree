{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InternalConfig = exports.Config = void 0;\n/**\n * The Neo4j Driver configuration.\n *\n * @interface\n */\nvar Config = /** @class */function () {\n  /**\n   * @constructor\n   * @private\n   */\n  function Config() {\n    /**\n     * Encryption level\n     *\n     * @type {'ENCRYPTION_ON'|'ENCRYPTION_OFF'|undefined}\n     */\n    this.encrypted = undefined;\n    /**\n     * Trust strategy to use if encryption is enabled.\n     *\n     * There is no mode to disable trust other than disabling encryption altogether. The reason for\n     * this is that if you don't know who you are talking to, it is easy for an\n     * attacker to hijack your encrypted connection, rendering encryption pointless.\n     *\n     * TRUST_SYSTEM_CA_SIGNED_CERTIFICATES is the default choice. For NodeJS environments, this\n     * means that you trust whatever certificates are in the default trusted certificate\n     * store of the underlying system. For Browser environments, the trusted certificate\n     * store is usually managed by the browser. Refer to your system or browser documentation\n     * if you want to explicitly add a certificate as trusted.\n     *\n     * TRUST_CUSTOM_CA_SIGNED_CERTIFICATES is another option for trust verification -\n     * whenever we establish an encrypted connection, we ensure the host is using\n     * an encryption certificate that is in, or is signed by, a certificate given\n     * as trusted through configuration. This option is only available for NodeJS environments.\n     *\n     * TRUST_ALL_CERTIFICATES means that you trust everything without any verifications\n     * steps carried out.  This option is only available for NodeJS environments and should not\n     * be used on production systems.\n     *\n     * @type {'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES'|'TRUST_CUSTOM_CA_SIGNED_CERTIFICATES'|'TRUST_ALL_CERTIFICATES'|undefined}\n     */\n    this.trust = undefined;\n    /**\n     * List of one or more paths to trusted encryption certificates.\n     *\n     * This only works in the NodeJS bundle,\n     * and only matters if you use \"TRUST_CUSTOM_CA_SIGNED_CERTIFICATES\".\n     *\n     * The certificate files should be in regular X.509 PEM format.\n     *\n     * For instance, ['./trusted.pem']\n     *\n     * @type {?string[]}\n     * @see {@link Config#trust}\n     */\n    this.trustedCertificates = [];\n    /**\n     * The maximum total number of connections allowed to be managed by the connection pool, per host.\n     *\n     * This includes both in-use and idle connections.\n     *\n     * **Default**: ```100```\n     *\n     * @type {number|undefined}\n     */\n    this.maxConnectionPoolSize = 100;\n    /**\n     * The maximum allowed lifetime for a pooled connection in milliseconds.\n     *\n     * Pooled connections older than this\n     * threshold will be closed and removed from the pool. Such discarding happens during connection acquisition\n     * so that new session is never backed by an old connection. Setting this option to a low value will cause\n     * a high connection churn and might result in a performance hit. It is recommended to set maximum lifetime\n     * to a slightly smaller value than the one configured in network equipment (load balancer, proxy, firewall,\n     * etc. can also limit maximum connection lifetime). No maximum lifetime limit is imposed by default. Zero\n     * and negative values result in lifetime not being checked.\n     *\n     * **Default**: ```60 * 60 * 1000``` (1 hour)\n     *\n     * @type {number|undefined}\n     */\n    this.maxConnectionLifetime = 60 * 60 * 1000; // 1 hour\n    /**\n     * The maximum amount of time to wait to acquire a connection from the pool (to either create a new\n     * connection or borrow an existing one).\n     *\n     * **Default**: ```60000``` (1 minute)\n     *\n     * @type {number|undefined}\n     */\n    this.connectionAcquisitionTimeout = 60000; // 1 minute\n    /**\n     * Specify the maximum time in milliseconds transactions are allowed to retry via\n     * {@link Session#executeRead} and {@link Session#executeWrite} functions.\n     *\n     * These functions will retry the given unit of work on `ServiceUnavailable`, `SessionExpired` and transient\n     * errors with exponential backoff using an initial delay of 1 second.\n     *\n     * **Default**: ```30000``` (30 seconds)\n     *\n     * @type {number|undefined}\n     */\n    this.maxTransactionRetryTime = 30000; // 30 seconds\n    /**\n     * Specify the maximum time in milliseconds the connection can be idle without needing\n     * to perform a liveness check on acquire from the pool.\n     *\n     * Pooled connections that have been idle in the pool for longer than this\n     * timeout will be tested before they are used again, to ensure they are still live.\n     * If this option is set too low, an additional network call will be incurred\n     * when acquiring a connection, which causes a performance hit.\n     *\n     * If this is set high, you may receive sessions that are backed by no longer\n     * live connections, which will lead to exceptions in your application.\n     * Assuming the database is running, these exceptions will go away if you retry\n     * acquiring sessions.\n     *\n     * Hence, this parameter tunes a balance between the likelihood of your application\n     * seeing connection problems, and performance.\n     *\n     * You normally should not need to tune this parameter. No connection liveliness\n     * check is done by default. Value 0 means connections will always be tested for\n     * validity and negative values mean connections will never be tested.\n     *\n     * **Default**: ```undefined``` (Disabled)\n     *\n     * @type {number|undefined}\n     */\n    this.connectionLivenessCheckTimeout = undefined; // Disabled\n    /**\n     * Specify socket connection timeout in milliseconds.\n     *\n     * Negative and zero values result in no timeout being applied.\n     * Connection establishment will be then bound by the timeout configured\n     * on the operating system level.\n     *\n     * **Default**: ```30000``` (30 seconds)\n     *\n     * @type {number|undefined}\n     */\n    this.connectionTimeout = 30000; // 30 seconds\n    /**\n     * Make this driver always return native JavaScript numbers for integer values, instead of the\n     * dedicated {@link Integer} class.\n     *\n     * Values that do not fit in native number bit range will be represented as `Number.NEGATIVE_INFINITY` or `Number.POSITIVE_INFINITY`.\n     *\n     * **Warning:** {@link ResultSummary} It is not always safe to enable this setting when JavaScript applications are not the only ones\n     * interacting with the database. Stored numbers might in such case be not representable by native\n     * `Number` type and thus the driver will return lossy values. This might also happen when data was\n     * initially imported using neo4j import tool and contained numbers larger than\n     * `Number.MAX_SAFE_INTEGER`. Driver will then return positive infinity, which is lossy.\n     *\n     * **Default**: ```false```\n     *\n     * Default value for this option is `false` because native JavaScript numbers might result\n     * in loss of precision in the general case.\n     *\n     * @type {boolean|undefined}\n     */\n    this.disableLosslessIntegers = false;\n    /**\n     * Make this driver always return native Javascript `BigInt` for integer values,\n     * instead of the dedicated {@link Integer} class or `Number`.\n     *\n     * **Warning:** `BigInt` doesn't implement the method `toJSON`. To serialize it as `json`,\n     * it's needed to add a custom implementation of the `toJSON` on the\n     * `BigInt.prototype`. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt#use_within_json.\n     *\n     * **Default**: ```false``` (for backwards compatibility)\n     *\n     * @type {boolean|undefined}\n     */\n    this.useBigInt = false;\n    /**\n     * Specify the logging configuration for the driver. Object should have two properties `level` and `logger`.\n     *\n     * Property `level` represents the logging level which should be one of: 'error', 'warn', 'info' or 'debug'. This property is optional and\n     * its default value is 'info'. Levels have priorities: 'error': 0, 'warn': 1, 'info': 2, 'debug': 3. Enabling a certain level also enables all\n     * levels with lower priority. For example: 'error', 'warn' and 'info' will be logged when 'info' level is configured.\n     *\n     * Property `logger` represents the logging function which will be invoked for every log call with an acceptable level. The function should\n     * take two string arguments `level` and `message`. The function should not execute any blocking or long-running operations\n     * because it is often executed on a hot path.\n     *\n     * No logging is done by default. See `neo4j.logging` object that contains predefined logging implementations.\n     *\n     * @type {LoggingConfig|undefined}\n     * @see {@link logging}\n     */\n    this.logging = undefined;\n    /**\n     * Specify a custom server address resolver function used by the routing driver to resolve the initial address used to create the driver.\n     *\n     * Such resolution happens:\n     *   * during the very first rediscovery when driver is created\n     *   * when all the known routers from the current routing table have failed and driver needs to fallback to the initial address\n     *\n     *  In NodeJS environment driver defaults to performing a DNS resolution of the initial address using 'dns' module.\n     *  In browser environment driver uses the initial address as-is.\n     *  Value should be a function that takes a single string argument - the initial address. It should return an array of new addresses.\n     *  Address is a string of shape '<host>:<port>'. Provided function can return either a Promise resolved with an array of addresses\n     *  or array of addresses directly.\n     *\n     * @type {function(address: string) {} |undefined}\n     */\n    this.resolver = undefined;\n    /**\n     * Configure filter for Notification objects returned in {@link ResultSummary#notifications}.\n     *\n     * See {@link SessionConfig#notificationFilter} for usage instructions.\n     *\n     * @type {NotificationFilter|undefined}\n     */\n    this.notificationFilter = undefined;\n    /**\n     * Optionally override the default user agent name.\n     *\n     * **Default**: ```'neo4j-javascript/<version>'```\n     *\n     * @type {string|undefined}\n     */\n    this.userAgent = undefined;\n    /**\n     * Specify if telemetry collection is disabled.\n     *\n     * By default, the driver will send anonymous usage statistics to the server it connects to if the server requests those.\n     * By setting ``telemetryDisabled=true``, the driver will not send any telemetry data.\n     *\n     * The driver transmits the following information:\n     *\n     * Every time one of the following APIs is used to execute a query (for the first time), the server is informed of this\n     * (without any further information like arguments, client identifiers, etc.):\n     *\n     * * {@link Driver#executeQuery}\n     * * {@link Session#run}\n     * * {@link Session#beginTransaction}\n     * * {@link Session#executeRead}\n     * * {@link Session#executeWrite}\n     * * {@link Session#writeTransaction}\n     * * {@link Session#readTransaction}\n     * * The reactive counterparts of methods above.\n     *\n     * Metrics are only collected when enabled both in server and driver instances.\n     *\n     * **Default**: ```false```\n     *\n     * @type {boolean}\n     */\n    this.telemetryDisabled = false;\n    /**\n     * Client Certificate used for mutual TLS.\n     *\n     * A {@link ClientCertificateProvider} can be configure for scenarios\n     * where the {@link ClientCertificate} might change over time.\n     *\n     * @type {ClientCertificate|ClientCertificateProvider|undefined}\n     * @since 5.27\n     */\n    this.clientCertificate = undefined;\n  }\n  return Config;\n}();\nexports.Config = Config;\nvar InternalConfig = /** @class */function (_super) {\n  __extends(InternalConfig, _super);\n  function InternalConfig() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return InternalConfig;\n}(Config);\nexports.InternalConfig = InternalConfig;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","defineProperty","exports","value","InternalConfig","Config","encrypted","undefined","trust","trustedCertificates","maxConnectionPoolSize","maxConnectionLifetime","connectionAcquisitionTimeout","maxTransactionRetryTime","connectionLivenessCheckTimeout","connectionTimeout","disableLosslessIntegers","useBigInt","logging","resolver","notificationFilter","userAgent","telemetryDisabled","clientCertificate","_super","apply","arguments"],"sources":["D:/Study/Projects/Copy 4/client/node_modules/neo4j-driver-core/lib/types.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InternalConfig = exports.Config = void 0;\n/**\n * The Neo4j Driver configuration.\n *\n * @interface\n */\nvar Config = /** @class */ (function () {\n    /**\n     * @constructor\n     * @private\n     */\n    function Config() {\n        /**\n         * Encryption level\n         *\n         * @type {'ENCRYPTION_ON'|'ENCRYPTION_OFF'|undefined}\n         */\n        this.encrypted = undefined;\n        /**\n         * Trust strategy to use if encryption is enabled.\n         *\n         * There is no mode to disable trust other than disabling encryption altogether. The reason for\n         * this is that if you don't know who you are talking to, it is easy for an\n         * attacker to hijack your encrypted connection, rendering encryption pointless.\n         *\n         * TRUST_SYSTEM_CA_SIGNED_CERTIFICATES is the default choice. For NodeJS environments, this\n         * means that you trust whatever certificates are in the default trusted certificate\n         * store of the underlying system. For Browser environments, the trusted certificate\n         * store is usually managed by the browser. Refer to your system or browser documentation\n         * if you want to explicitly add a certificate as trusted.\n         *\n         * TRUST_CUSTOM_CA_SIGNED_CERTIFICATES is another option for trust verification -\n         * whenever we establish an encrypted connection, we ensure the host is using\n         * an encryption certificate that is in, or is signed by, a certificate given\n         * as trusted through configuration. This option is only available for NodeJS environments.\n         *\n         * TRUST_ALL_CERTIFICATES means that you trust everything without any verifications\n         * steps carried out.  This option is only available for NodeJS environments and should not\n         * be used on production systems.\n         *\n         * @type {'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES'|'TRUST_CUSTOM_CA_SIGNED_CERTIFICATES'|'TRUST_ALL_CERTIFICATES'|undefined}\n         */\n        this.trust = undefined;\n        /**\n         * List of one or more paths to trusted encryption certificates.\n         *\n         * This only works in the NodeJS bundle,\n         * and only matters if you use \"TRUST_CUSTOM_CA_SIGNED_CERTIFICATES\".\n         *\n         * The certificate files should be in regular X.509 PEM format.\n         *\n         * For instance, ['./trusted.pem']\n         *\n         * @type {?string[]}\n         * @see {@link Config#trust}\n         */\n        this.trustedCertificates = [];\n        /**\n         * The maximum total number of connections allowed to be managed by the connection pool, per host.\n         *\n         * This includes both in-use and idle connections.\n         *\n         * **Default**: ```100```\n         *\n         * @type {number|undefined}\n         */\n        this.maxConnectionPoolSize = 100;\n        /**\n         * The maximum allowed lifetime for a pooled connection in milliseconds.\n         *\n         * Pooled connections older than this\n         * threshold will be closed and removed from the pool. Such discarding happens during connection acquisition\n         * so that new session is never backed by an old connection. Setting this option to a low value will cause\n         * a high connection churn and might result in a performance hit. It is recommended to set maximum lifetime\n         * to a slightly smaller value than the one configured in network equipment (load balancer, proxy, firewall,\n         * etc. can also limit maximum connection lifetime). No maximum lifetime limit is imposed by default. Zero\n         * and negative values result in lifetime not being checked.\n         *\n         * **Default**: ```60 * 60 * 1000``` (1 hour)\n         *\n         * @type {number|undefined}\n         */\n        this.maxConnectionLifetime = 60 * 60 * 1000; // 1 hour\n        /**\n         * The maximum amount of time to wait to acquire a connection from the pool (to either create a new\n         * connection or borrow an existing one).\n         *\n         * **Default**: ```60000``` (1 minute)\n         *\n         * @type {number|undefined}\n         */\n        this.connectionAcquisitionTimeout = 60000; // 1 minute\n        /**\n         * Specify the maximum time in milliseconds transactions are allowed to retry via\n         * {@link Session#executeRead} and {@link Session#executeWrite} functions.\n         *\n         * These functions will retry the given unit of work on `ServiceUnavailable`, `SessionExpired` and transient\n         * errors with exponential backoff using an initial delay of 1 second.\n         *\n         * **Default**: ```30000``` (30 seconds)\n         *\n         * @type {number|undefined}\n         */\n        this.maxTransactionRetryTime = 30000; // 30 seconds\n        /**\n         * Specify the maximum time in milliseconds the connection can be idle without needing\n         * to perform a liveness check on acquire from the pool.\n         *\n         * Pooled connections that have been idle in the pool for longer than this\n         * timeout will be tested before they are used again, to ensure they are still live.\n         * If this option is set too low, an additional network call will be incurred\n         * when acquiring a connection, which causes a performance hit.\n         *\n         * If this is set high, you may receive sessions that are backed by no longer\n         * live connections, which will lead to exceptions in your application.\n         * Assuming the database is running, these exceptions will go away if you retry\n         * acquiring sessions.\n         *\n         * Hence, this parameter tunes a balance between the likelihood of your application\n         * seeing connection problems, and performance.\n         *\n         * You normally should not need to tune this parameter. No connection liveliness\n         * check is done by default. Value 0 means connections will always be tested for\n         * validity and negative values mean connections will never be tested.\n         *\n         * **Default**: ```undefined``` (Disabled)\n         *\n         * @type {number|undefined}\n         */\n        this.connectionLivenessCheckTimeout = undefined; // Disabled\n        /**\n         * Specify socket connection timeout in milliseconds.\n         *\n         * Negative and zero values result in no timeout being applied.\n         * Connection establishment will be then bound by the timeout configured\n         * on the operating system level.\n         *\n         * **Default**: ```30000``` (30 seconds)\n         *\n         * @type {number|undefined}\n         */\n        this.connectionTimeout = 30000; // 30 seconds\n        /**\n         * Make this driver always return native JavaScript numbers for integer values, instead of the\n         * dedicated {@link Integer} class.\n         *\n         * Values that do not fit in native number bit range will be represented as `Number.NEGATIVE_INFINITY` or `Number.POSITIVE_INFINITY`.\n         *\n         * **Warning:** {@link ResultSummary} It is not always safe to enable this setting when JavaScript applications are not the only ones\n         * interacting with the database. Stored numbers might in such case be not representable by native\n         * `Number` type and thus the driver will return lossy values. This might also happen when data was\n         * initially imported using neo4j import tool and contained numbers larger than\n         * `Number.MAX_SAFE_INTEGER`. Driver will then return positive infinity, which is lossy.\n         *\n         * **Default**: ```false```\n         *\n         * Default value for this option is `false` because native JavaScript numbers might result\n         * in loss of precision in the general case.\n         *\n         * @type {boolean|undefined}\n         */\n        this.disableLosslessIntegers = false;\n        /**\n         * Make this driver always return native Javascript `BigInt` for integer values,\n         * instead of the dedicated {@link Integer} class or `Number`.\n         *\n         * **Warning:** `BigInt` doesn't implement the method `toJSON`. To serialize it as `json`,\n         * it's needed to add a custom implementation of the `toJSON` on the\n         * `BigInt.prototype`. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt#use_within_json.\n         *\n         * **Default**: ```false``` (for backwards compatibility)\n         *\n         * @type {boolean|undefined}\n         */\n        this.useBigInt = false;\n        /**\n         * Specify the logging configuration for the driver. Object should have two properties `level` and `logger`.\n         *\n         * Property `level` represents the logging level which should be one of: 'error', 'warn', 'info' or 'debug'. This property is optional and\n         * its default value is 'info'. Levels have priorities: 'error': 0, 'warn': 1, 'info': 2, 'debug': 3. Enabling a certain level also enables all\n         * levels with lower priority. For example: 'error', 'warn' and 'info' will be logged when 'info' level is configured.\n         *\n         * Property `logger` represents the logging function which will be invoked for every log call with an acceptable level. The function should\n         * take two string arguments `level` and `message`. The function should not execute any blocking or long-running operations\n         * because it is often executed on a hot path.\n         *\n         * No logging is done by default. See `neo4j.logging` object that contains predefined logging implementations.\n         *\n         * @type {LoggingConfig|undefined}\n         * @see {@link logging}\n         */\n        this.logging = undefined;\n        /**\n         * Specify a custom server address resolver function used by the routing driver to resolve the initial address used to create the driver.\n         *\n         * Such resolution happens:\n         *   * during the very first rediscovery when driver is created\n         *   * when all the known routers from the current routing table have failed and driver needs to fallback to the initial address\n         *\n         *  In NodeJS environment driver defaults to performing a DNS resolution of the initial address using 'dns' module.\n         *  In browser environment driver uses the initial address as-is.\n         *  Value should be a function that takes a single string argument - the initial address. It should return an array of new addresses.\n         *  Address is a string of shape '<host>:<port>'. Provided function can return either a Promise resolved with an array of addresses\n         *  or array of addresses directly.\n         *\n         * @type {function(address: string) {} |undefined}\n         */\n        this.resolver = undefined;\n        /**\n         * Configure filter for Notification objects returned in {@link ResultSummary#notifications}.\n         *\n         * See {@link SessionConfig#notificationFilter} for usage instructions.\n         *\n         * @type {NotificationFilter|undefined}\n         */\n        this.notificationFilter = undefined;\n        /**\n         * Optionally override the default user agent name.\n         *\n         * **Default**: ```'neo4j-javascript/<version>'```\n         *\n         * @type {string|undefined}\n         */\n        this.userAgent = undefined;\n        /**\n         * Specify if telemetry collection is disabled.\n         *\n         * By default, the driver will send anonymous usage statistics to the server it connects to if the server requests those.\n         * By setting ``telemetryDisabled=true``, the driver will not send any telemetry data.\n         *\n         * The driver transmits the following information:\n         *\n         * Every time one of the following APIs is used to execute a query (for the first time), the server is informed of this\n         * (without any further information like arguments, client identifiers, etc.):\n         *\n         * * {@link Driver#executeQuery}\n         * * {@link Session#run}\n         * * {@link Session#beginTransaction}\n         * * {@link Session#executeRead}\n         * * {@link Session#executeWrite}\n         * * {@link Session#writeTransaction}\n         * * {@link Session#readTransaction}\n         * * The reactive counterparts of methods above.\n         *\n         * Metrics are only collected when enabled both in server and driver instances.\n         *\n         * **Default**: ```false```\n         *\n         * @type {boolean}\n         */\n        this.telemetryDisabled = false;\n        /**\n         * Client Certificate used for mutual TLS.\n         *\n         * A {@link ClientCertificateProvider} can be configure for scenarios\n         * where the {@link ClientCertificate} might change over time.\n         *\n         * @type {ClientCertificate|ClientCertificateProvider|undefined}\n         * @since 5.27\n         */\n        this.clientCertificate = undefined;\n    }\n    return Config;\n}());\nexports.Config = Config;\nvar InternalConfig = /** @class */ (function (_super) {\n    __extends(InternalConfig, _super);\n    function InternalConfig() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return InternalConfig;\n}(Config));\nexports.InternalConfig = InternalConfig;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAM,YAAY;EACrD,IAAIC,aAAa,GAAG,SAAAA,CAAUC,CAAC,EAAEC,CAAC,EAAE;IAChCF,aAAa,GAAGG,MAAM,CAACC,cAAc,IAChC;MAAEC,SAAS,EAAE;IAAG,CAAC,YAAYC,KAAK,IAAI,UAAUL,CAAC,EAAEC,CAAC,EAAE;MAAED,CAAC,CAACI,SAAS,GAAGH,CAAC;IAAE,CAAE,IAC5E,UAAUD,CAAC,EAAEC,CAAC,EAAE;MAAE,KAAK,IAAIK,CAAC,IAAIL,CAAC,EAAE,IAAIC,MAAM,CAACK,SAAS,CAACC,cAAc,CAACC,IAAI,CAACR,CAAC,EAAEK,CAAC,CAAC,EAAEN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IAAE,CAAC;IACrG,OAAOP,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;EAC9B,CAAC;EACD,OAAO,UAAUD,CAAC,EAAEC,CAAC,EAAE;IACnB,IAAI,OAAOA,CAAC,KAAK,UAAU,IAAIA,CAAC,KAAK,IAAI,EACrC,MAAM,IAAIS,SAAS,CAAC,sBAAsB,GAAGC,MAAM,CAACV,CAAC,CAAC,GAAG,+BAA+B,CAAC;IAC7FF,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;IACnB,SAASW,EAAEA,CAAA,EAAG;MAAE,IAAI,CAACC,WAAW,GAAGb,CAAC;IAAE;IACtCA,CAAC,CAACO,SAAS,GAAGN,CAAC,KAAK,IAAI,GAAGC,MAAM,CAACY,MAAM,CAACb,CAAC,CAAC,IAAIW,EAAE,CAACL,SAAS,GAAGN,CAAC,CAACM,SAAS,EAAE,IAAIK,EAAE,CAAC,CAAC,CAAC;EACxF,CAAC;AACL,CAAC,CAAE,CAAC;AACJV,MAAM,CAACa,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAGF,OAAO,CAACG,MAAM,GAAG,KAAK,CAAC;AAChD;AACA;AACA;AACA;AACA;AACA,IAAIA,MAAM,GAAG,aAAe,YAAY;EACpC;AACJ;AACA;AACA;EACI,SAASA,MAAMA,CAAA,EAAG;IACd;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,SAAS,GAAGC,SAAS;IAC1B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,KAAK,GAAGD,SAAS;IACtB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACE,mBAAmB,GAAG,EAAE;IAC7B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,qBAAqB,GAAG,GAAG;IAChC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,qBAAqB,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;IAC7C;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,4BAA4B,GAAG,KAAK,CAAC,CAAC;IAC3C;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,uBAAuB,GAAG,KAAK,CAAC,CAAC;IACtC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,8BAA8B,GAAGP,SAAS,CAAC,CAAC;IACjD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACQ,iBAAiB,GAAG,KAAK,CAAC,CAAC;IAChC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,uBAAuB,GAAG,KAAK;IACpC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,OAAO,GAAGX,SAAS;IACxB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACY,QAAQ,GAAGZ,SAAS;IACzB;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACa,kBAAkB,GAAGb,SAAS;IACnC;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACc,SAAS,GAAGd,SAAS;IAC1B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACe,iBAAiB,GAAG,KAAK;IAC9B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,iBAAiB,GAAGhB,SAAS;EACtC;EACA,OAAOF,MAAM;AACjB,CAAC,CAAC,CAAE;AACJH,OAAO,CAACG,MAAM,GAAGA,MAAM;AACvB,IAAID,cAAc,GAAG,aAAe,UAAUoB,MAAM,EAAE;EAClDxC,SAAS,CAACoB,cAAc,EAAEoB,MAAM,CAAC;EACjC,SAASpB,cAAcA,CAAA,EAAG;IACtB,OAAOoB,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC,IAAI,IAAI;EACnE;EACA,OAAOtB,cAAc;AACzB,CAAC,CAACC,MAAM,CAAE;AACVH,OAAO,CAACE,cAAc,GAAGA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script"}