{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar _a = neo4j_driver_core_1.internal.util,\n  ENCRYPTION_OFF = _a.ENCRYPTION_OFF,\n  ENCRYPTION_ON = _a.ENCRYPTION_ON;\nvar SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE;\nvar ALLOWED_VALUES_ENCRYPTED = [null, undefined, true, false, ENCRYPTION_ON, ENCRYPTION_OFF];\nvar ALLOWED_VALUES_TRUST = [null, undefined, 'TRUST_ALL_CERTIFICATES', 'TRUST_CUSTOM_CA_SIGNED_CERTIFICATES', 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES'];\nvar ChannelConfig = /** @class */function () {\n  /**\n   * @constructor\n   * @param {ServerAddress} address the address for the channel to connect to.\n   * @param {Object} driverConfig the driver config provided by the user when driver is created.\n   * @param {string} connectionErrorCode the default error code to use on connection errors.\n   * @param {object} clientCertificate the client certificate\n   */\n  function ChannelConfig(address, driverConfig, connectionErrorCode, clientCertificate) {\n    this.address = address;\n    this.encrypted = extractEncrypted(driverConfig);\n    this.trust = extractTrust(driverConfig);\n    this.trustedCertificates = extractTrustedCertificates(driverConfig);\n    this.knownHostsPath = extractKnownHostsPath(driverConfig);\n    this.connectionErrorCode = connectionErrorCode || SERVICE_UNAVAILABLE;\n    this.connectionTimeout = driverConfig.connectionTimeout;\n    this.clientCertificate = clientCertificate;\n  }\n  return ChannelConfig;\n}();\nexports.default = ChannelConfig;\nfunction extractEncrypted(driverConfig) {\n  var value = driverConfig.encrypted;\n  if (ALLOWED_VALUES_ENCRYPTED.indexOf(value) === -1) {\n    throw (0, neo4j_driver_core_1.newError)(\"Illegal value of the encrypted setting \".concat(value, \". Expected one of \").concat(ALLOWED_VALUES_ENCRYPTED));\n  }\n  return value;\n}\nfunction extractTrust(driverConfig) {\n  var value = driverConfig.trust;\n  if (ALLOWED_VALUES_TRUST.indexOf(value) === -1) {\n    throw (0, neo4j_driver_core_1.newError)(\"Illegal value of the trust setting \".concat(value, \". Expected one of \").concat(ALLOWED_VALUES_TRUST));\n  }\n  return value;\n}\nfunction extractTrustedCertificates(driverConfig) {\n  return driverConfig.trustedCertificates || [];\n}\nfunction extractKnownHostsPath(driverConfig) {\n  return driverConfig.knownHosts || null;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","neo4j_driver_core_1","require","_a","internal","util","ENCRYPTION_OFF","ENCRYPTION_ON","SERVICE_UNAVAILABLE","error","ALLOWED_VALUES_ENCRYPTED","undefined","ALLOWED_VALUES_TRUST","ChannelConfig","address","driverConfig","connectionErrorCode","clientCertificate","encrypted","extractEncrypted","trust","extractTrust","trustedCertificates","extractTrustedCertificates","knownHostsPath","extractKnownHostsPath","connectionTimeout","default","indexOf","newError","concat","knownHosts"],"sources":["D:/Study/Projects/Copy 4/client/node_modules/neo4j-driver-bolt-connection/lib/channel/channel-config.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar _a = neo4j_driver_core_1.internal.util, ENCRYPTION_OFF = _a.ENCRYPTION_OFF, ENCRYPTION_ON = _a.ENCRYPTION_ON;\nvar SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE;\nvar ALLOWED_VALUES_ENCRYPTED = [\n    null,\n    undefined,\n    true,\n    false,\n    ENCRYPTION_ON,\n    ENCRYPTION_OFF\n];\nvar ALLOWED_VALUES_TRUST = [\n    null,\n    undefined,\n    'TRUST_ALL_CERTIFICATES',\n    'TRUST_CUSTOM_CA_SIGNED_CERTIFICATES',\n    'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES'\n];\nvar ChannelConfig = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {ServerAddress} address the address for the channel to connect to.\n     * @param {Object} driverConfig the driver config provided by the user when driver is created.\n     * @param {string} connectionErrorCode the default error code to use on connection errors.\n     * @param {object} clientCertificate the client certificate\n     */\n    function ChannelConfig(address, driverConfig, connectionErrorCode, clientCertificate) {\n        this.address = address;\n        this.encrypted = extractEncrypted(driverConfig);\n        this.trust = extractTrust(driverConfig);\n        this.trustedCertificates = extractTrustedCertificates(driverConfig);\n        this.knownHostsPath = extractKnownHostsPath(driverConfig);\n        this.connectionErrorCode = connectionErrorCode || SERVICE_UNAVAILABLE;\n        this.connectionTimeout = driverConfig.connectionTimeout;\n        this.clientCertificate = clientCertificate;\n    }\n    return ChannelConfig;\n}());\nexports.default = ChannelConfig;\nfunction extractEncrypted(driverConfig) {\n    var value = driverConfig.encrypted;\n    if (ALLOWED_VALUES_ENCRYPTED.indexOf(value) === -1) {\n        throw (0, neo4j_driver_core_1.newError)(\"Illegal value of the encrypted setting \".concat(value, \". Expected one of \").concat(ALLOWED_VALUES_ENCRYPTED));\n    }\n    return value;\n}\nfunction extractTrust(driverConfig) {\n    var value = driverConfig.trust;\n    if (ALLOWED_VALUES_TRUST.indexOf(value) === -1) {\n        throw (0, neo4j_driver_core_1.newError)(\"Illegal value of the trust setting \".concat(value, \". Expected one of \").concat(ALLOWED_VALUES_TRUST));\n    }\n    return value;\n}\nfunction extractTrustedCertificates(driverConfig) {\n    return driverConfig.trustedCertificates || [];\n}\nfunction extractKnownHostsPath(driverConfig) {\n    return driverConfig.knownHosts || null;\n}\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,mBAAmB,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACtD,IAAIC,EAAE,GAAGF,mBAAmB,CAACG,QAAQ,CAACC,IAAI;EAAEC,cAAc,GAAGH,EAAE,CAACG,cAAc;EAAEC,aAAa,GAAGJ,EAAE,CAACI,aAAa;AAChH,IAAIC,mBAAmB,GAAGP,mBAAmB,CAACQ,KAAK,CAACD,mBAAmB;AACvE,IAAIE,wBAAwB,GAAG,CAC3B,IAAI,EACJC,SAAS,EACT,IAAI,EACJ,KAAK,EACLJ,aAAa,EACbD,cAAc,CACjB;AACD,IAAIM,oBAAoB,GAAG,CACvB,IAAI,EACJD,SAAS,EACT,wBAAwB,EACxB,qCAAqC,EACrC,qCAAqC,CACxC;AACD,IAAIE,aAAa,GAAG,aAAe,YAAY;EAC3C;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,aAAaA,CAACC,OAAO,EAAEC,YAAY,EAAEC,mBAAmB,EAAEC,iBAAiB,EAAE;IAClF,IAAI,CAACH,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACI,SAAS,GAAGC,gBAAgB,CAACJ,YAAY,CAAC;IAC/C,IAAI,CAACK,KAAK,GAAGC,YAAY,CAACN,YAAY,CAAC;IACvC,IAAI,CAACO,mBAAmB,GAAGC,0BAA0B,CAACR,YAAY,CAAC;IACnE,IAAI,CAACS,cAAc,GAAGC,qBAAqB,CAACV,YAAY,CAAC;IACzD,IAAI,CAACC,mBAAmB,GAAGA,mBAAmB,IAAIR,mBAAmB;IACrE,IAAI,CAACkB,iBAAiB,GAAGX,YAAY,CAACW,iBAAiB;IACvD,IAAI,CAACT,iBAAiB,GAAGA,iBAAiB;EAC9C;EACA,OAAOJ,aAAa;AACxB,CAAC,CAAC,CAAE;AACJd,OAAO,CAAC4B,OAAO,GAAGd,aAAa;AAC/B,SAASM,gBAAgBA,CAACJ,YAAY,EAAE;EACpC,IAAIf,KAAK,GAAGe,YAAY,CAACG,SAAS;EAClC,IAAIR,wBAAwB,CAACkB,OAAO,CAAC5B,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;IAChD,MAAM,CAAC,CAAC,EAAEC,mBAAmB,CAAC4B,QAAQ,EAAE,yCAAyC,CAACC,MAAM,CAAC9B,KAAK,EAAE,oBAAoB,CAAC,CAAC8B,MAAM,CAACpB,wBAAwB,CAAC,CAAC;EAC3J;EACA,OAAOV,KAAK;AAChB;AACA,SAASqB,YAAYA,CAACN,YAAY,EAAE;EAChC,IAAIf,KAAK,GAAGe,YAAY,CAACK,KAAK;EAC9B,IAAIR,oBAAoB,CAACgB,OAAO,CAAC5B,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;IAC5C,MAAM,CAAC,CAAC,EAAEC,mBAAmB,CAAC4B,QAAQ,EAAE,qCAAqC,CAACC,MAAM,CAAC9B,KAAK,EAAE,oBAAoB,CAAC,CAAC8B,MAAM,CAAClB,oBAAoB,CAAC,CAAC;EACnJ;EACA,OAAOZ,KAAK;AAChB;AACA,SAASuB,0BAA0BA,CAACR,YAAY,EAAE;EAC9C,OAAOA,YAAY,CAACO,mBAAmB,IAAI,EAAE;AACjD;AACA,SAASG,qBAAqBA,CAACV,YAAY,EAAE;EACzC,OAAOA,YAAY,CAACgB,UAAU,IAAI,IAAI;AAC1C","ignoreList":[]},"metadata":{},"sourceType":"script"}