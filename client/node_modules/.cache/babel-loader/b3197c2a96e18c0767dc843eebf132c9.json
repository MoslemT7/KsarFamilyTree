{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PROTOCOL_ERROR = exports.SESSION_EXPIRED = exports.SERVICE_UNAVAILABLE = exports.GQLError = exports.Neo4jError = exports.isRetriableError = exports.newGQLError = exports.newError = void 0;\n// A common place for constructing error objects, to keep them\n// uniform across the driver surface.\nvar json = __importStar(require(\"./json\"));\nvar gql_constants_1 = require(\"./gql-constants\");\n/**\n * @typedef { 'DATABASE_ERROR' | 'CLIENT_ERROR' | 'TRANSIENT_ERROR' | 'UNKNOWN' } ErrorClassification\n * @experimental this is part of the preview of GQL-compliant errors\n */\nvar errorClassification = {\n  DATABASE_ERROR: 'DATABASE_ERROR',\n  CLIENT_ERROR: 'CLIENT_ERROR',\n  TRANSIENT_ERROR: 'TRANSIENT_ERROR',\n  UNKNOWN: 'UNKNOWN'\n};\nObject.freeze(errorClassification);\nvar classifications = Object.values(errorClassification);\n/**\n * Error code representing complete loss of service. Used by {@link Neo4jError#code}.\n * @type {string}\n */\nvar SERVICE_UNAVAILABLE = 'ServiceUnavailable';\nexports.SERVICE_UNAVAILABLE = SERVICE_UNAVAILABLE;\n/**\n * Error code representing transient loss of service. Used by {@link Neo4jError#code}.\n * @type {string}\n */\nvar SESSION_EXPIRED = 'SessionExpired';\nexports.SESSION_EXPIRED = SESSION_EXPIRED;\n/**\n * Error code representing serialization/deserialization issue in the Bolt protocol. Used by {@link Neo4jError#code}.\n * @type {string}\n */\nvar PROTOCOL_ERROR = 'ProtocolError';\nexports.PROTOCOL_ERROR = PROTOCOL_ERROR;\n/**\n * Error code representing an no classified error. Used by {@link Neo4jError#code}.\n * @type {string}\n */\nvar NOT_AVAILABLE = 'N/A';\n/// TODO: Remove definitions of this.constructor and this.__proto__\n/**\n * Class for nested errors, to be used as causes in {@link Neo4jError}\n * @experimental this class is part of the preview of GQL-compliant errors\n */\nvar GQLError = /** @class */function (_super) {\n  __extends(GQLError, _super);\n  /**\n   * @constructor\n   * @param {string} message - the error message\n   * @param {string} gqlStatus - the GQL status code of the error\n   * @param {string} gqlStatusDescription - the GQL status description of the error\n   * @param {ErrorDiagnosticRecord} diagnosticRecord - the error diagnostic record\n   * @param {Error} cause - Optional nested error, the cause of the error\n   */\n  function GQLError(message, gqlStatus, gqlStatusDescription, diagnosticRecord, cause) {\n    var _this = this;\n    var _a;\n    // eslint-disable-next-line\n    // @ts-ignore: not available in ES6 yet\n    _this = _super.call(this, message, cause != null ? {\n      cause: cause\n    } : undefined) || this;\n    _this.constructor = GQLError;\n    // eslint-disable-next-line no-proto\n    _this.__proto__ = GQLError.prototype;\n    /**\n     * Optional, nested error which caused the error\n     *\n     * @type {Error?}\n     * @public\n     */\n    _this.cause = cause != null ? cause : undefined;\n    /**\n     * The GQL Status code\n     *\n     * @type {string}\n     * @experimental this property is part of the preview of GQL-compliant errors\n     * @public\n     */\n    _this.gqlStatus = gqlStatus;\n    /**\n     * The GQL Status Description\n     *\n     * @type {string}\n     * @experimental this property is part of the preview of GQL-compliant errors\n     * @public\n     */\n    _this.gqlStatusDescription = gqlStatusDescription;\n    /**\n     * The GQL diagnostic record\n     *\n     * @type {DiagnosticRecord}\n     * @experimental this property is part of the preview of GQL-compliant errors\n     * @public\n     */\n    _this.diagnosticRecord = diagnosticRecord;\n    /**\n     * The GQL error classification, extracted from the diagnostic record\n     *\n     * @type {ErrorClassification}\n     * @experimental this property is part of the preview of GQL-compliant errors\n     * @public\n     */\n    _this.classification = _extractClassification(_this.diagnosticRecord);\n    /**\n     * The GQL error classification, extracted from the diagnostic record as a raw string\n     *\n     * @type {string}\n     * @experimental this property is part of the preview of GQL-compliant errors\n     * @public\n     */\n    _this.rawClassification = (_a = diagnosticRecord === null || diagnosticRecord === void 0 ? void 0 : diagnosticRecord._classification) !== null && _a !== void 0 ? _a : undefined;\n    _this.name = 'GQLError';\n    return _this;\n  }\n  Object.defineProperty(GQLError.prototype, \"diagnosticRecordAsJsonString\", {\n    /**\n     * The json string representation of the diagnostic record.\n     * The goal of this method is provide a serialized object for human inspection.\n     *\n     * @type {string}\n     * @experimental this is part of the preview of GQL-compliant errors\n     * @public\n     */\n    get: function () {\n      return json.stringify(this.diagnosticRecord, {\n        useCustomToString: true\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return GQLError;\n}(Error);\nexports.GQLError = GQLError;\n/**\n * Class for all errors thrown/returned by the driver.\n */\nvar Neo4jError = /** @class */function (_super) {\n  __extends(Neo4jError, _super);\n  /**\n   * @constructor\n   * @param {string} message - the error message\n   * @param {string} code - Optional error code. Will be populated when error originates in the database.\n   * @param {string} gqlStatus - the GQL status code of the error\n   * @param {string} gqlStatusDescription - the GQL status description of the error\n   * @param {DiagnosticRecord} diagnosticRecord - the error diagnostic record\n   * @param {Error} cause - Optional nested error, the cause of the error\n   */\n  function Neo4jError(message, code, gqlStatus, gqlStatusDescription, diagnosticRecord, cause) {\n    var _this = _super.call(this, message, gqlStatus, gqlStatusDescription, diagnosticRecord, cause) || this;\n    _this.constructor = Neo4jError;\n    // eslint-disable-next-line no-proto\n    _this.__proto__ = Neo4jError.prototype;\n    /**\n     * The Neo4j Error code\n     *\n     * @type {string}\n     * @public\n     */\n    _this.code = code;\n    _this.name = 'Neo4jError';\n    _this.retriable = _isRetriableCode(code);\n    return _this;\n  }\n  /**\n   * Verifies if the given error is retriable.\n   *\n   * @param {object|undefined|null} error the error object\n   * @returns {boolean} true if the error is retriable\n   */\n  Neo4jError.isRetriable = function (error) {\n    return error !== null && error !== undefined && error instanceof Neo4jError && error.retriable;\n  };\n  return Neo4jError;\n}(GQLError);\nexports.Neo4jError = Neo4jError;\n/**\n * Create a new error from a message and optional data\n * @param message the error message\n * @param {Neo4jErrorCode} [code] the error code\n * @param {Neo4jError} [cause]\n * @param {String} [gqlStatus]\n * @param {String} [gqlStatusDescription]\n * @param {DiagnosticRecord} diagnosticRecord - the error message\n * @return {Neo4jError} an {@link Neo4jError}\n * @private\n */\nfunction newError(message, code, cause, gqlStatus, gqlStatusDescription, diagnosticRecord) {\n  return new Neo4jError(message, code !== null && code !== void 0 ? code : NOT_AVAILABLE, gqlStatus !== null && gqlStatus !== void 0 ? gqlStatus : '50N42', gqlStatusDescription !== null && gqlStatusDescription !== void 0 ? gqlStatusDescription : 'error: general processing exception - unexpected error. ' + message, diagnosticRecord !== null && diagnosticRecord !== void 0 ? diagnosticRecord : gql_constants_1.rawPolyfilledDiagnosticRecord, cause);\n}\nexports.newError = newError;\n/**\n * Create a new GQL error from a message and optional data\n * @param message the error message\n * @param {Neo4jError} [cause]\n * @param {String} [gqlStatus]\n * @param {String} [gqlStatusDescription]\n * @param {DiagnosticRecord} diagnosticRecord - the error message\n * @return {Neo4jError} an {@link Neo4jError}\n * @experimental this is part of the preview of GQL-compliant errors\n * @private\n */\nfunction newGQLError(message, cause, gqlStatus, gqlStatusDescription, diagnosticRecord) {\n  return new GQLError(message, gqlStatus !== null && gqlStatus !== void 0 ? gqlStatus : '50N42', gqlStatusDescription !== null && gqlStatusDescription !== void 0 ? gqlStatusDescription : 'error: general processing exception - unexpected error. ' + message, diagnosticRecord !== null && diagnosticRecord !== void 0 ? diagnosticRecord : gql_constants_1.rawPolyfilledDiagnosticRecord, cause);\n}\nexports.newGQLError = newGQLError;\n/**\n * Verifies if the given error is retriable.\n *\n * @public\n * @param {object|undefined|null} error the error object\n * @returns {boolean} true if the error is retriable\n */\nvar isRetriableError = Neo4jError.isRetriable;\nexports.isRetriableError = isRetriableError;\n/**\n * @private\n * @param {string} code the error code\n * @returns {boolean} true if the error is a retriable error\n */\nfunction _isRetriableCode(code) {\n  return code === SERVICE_UNAVAILABLE || code === SESSION_EXPIRED || _isAuthorizationExpired(code) || _isTransientError(code);\n}\n/**\n * @private\n * @param {string} code the error to check\n * @return {boolean} true if the error is a transient error\n */\nfunction _isTransientError(code) {\n  return (code === null || code === void 0 ? void 0 : code.includes('TransientError')) === true;\n}\n/**\n * @private\n * @param {string} code the error to check\n * @returns {boolean} true if the error is a service unavailable error\n */\nfunction _isAuthorizationExpired(code) {\n  return code === 'Neo.ClientError.Security.AuthorizationExpired';\n}\n/**\n * extracts a typed classification from the diagnostic record.\n */\nfunction _extractClassification(diagnosticRecord) {\n  if (diagnosticRecord === undefined || diagnosticRecord._classification === undefined) {\n    return 'UNKNOWN';\n  }\n  return classifications.includes(diagnosticRecord._classification) ? diagnosticRecord === null || diagnosticRecord === void 0 ? void 0 : diagnosticRecord._classification : 'UNKNOWN';\n}","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","__createBinding","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","exports","PROTOCOL_ERROR","SESSION_EXPIRED","SERVICE_UNAVAILABLE","GQLError","Neo4jError","isRetriableError","newGQLError","newError","json","require","gql_constants_1","errorClassification","DATABASE_ERROR","CLIENT_ERROR","TRANSIENT_ERROR","UNKNOWN","freeze","classifications","values","NOT_AVAILABLE","_super","message","gqlStatus","gqlStatusDescription","diagnosticRecord","cause","_this","_a","classification","_extractClassification","rawClassification","_classification","name","stringify","useCustomToString","Error","code","retriable","_isRetriableCode","isRetriable","error","rawPolyfilledDiagnosticRecord","_isAuthorizationExpired","_isTransientError","includes"],"sources":["D:/Study/Projects/Copy 4/client/node_modules/neo4j-driver-core/lib/error.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PROTOCOL_ERROR = exports.SESSION_EXPIRED = exports.SERVICE_UNAVAILABLE = exports.GQLError = exports.Neo4jError = exports.isRetriableError = exports.newGQLError = exports.newError = void 0;\n// A common place for constructing error objects, to keep them\n// uniform across the driver surface.\nvar json = __importStar(require(\"./json\"));\nvar gql_constants_1 = require(\"./gql-constants\");\n/**\n * @typedef { 'DATABASE_ERROR' | 'CLIENT_ERROR' | 'TRANSIENT_ERROR' | 'UNKNOWN' } ErrorClassification\n * @experimental this is part of the preview of GQL-compliant errors\n */\nvar errorClassification = {\n    DATABASE_ERROR: 'DATABASE_ERROR',\n    CLIENT_ERROR: 'CLIENT_ERROR',\n    TRANSIENT_ERROR: 'TRANSIENT_ERROR',\n    UNKNOWN: 'UNKNOWN'\n};\nObject.freeze(errorClassification);\nvar classifications = Object.values(errorClassification);\n/**\n * Error code representing complete loss of service. Used by {@link Neo4jError#code}.\n * @type {string}\n */\nvar SERVICE_UNAVAILABLE = 'ServiceUnavailable';\nexports.SERVICE_UNAVAILABLE = SERVICE_UNAVAILABLE;\n/**\n * Error code representing transient loss of service. Used by {@link Neo4jError#code}.\n * @type {string}\n */\nvar SESSION_EXPIRED = 'SessionExpired';\nexports.SESSION_EXPIRED = SESSION_EXPIRED;\n/**\n * Error code representing serialization/deserialization issue in the Bolt protocol. Used by {@link Neo4jError#code}.\n * @type {string}\n */\nvar PROTOCOL_ERROR = 'ProtocolError';\nexports.PROTOCOL_ERROR = PROTOCOL_ERROR;\n/**\n * Error code representing an no classified error. Used by {@link Neo4jError#code}.\n * @type {string}\n */\nvar NOT_AVAILABLE = 'N/A';\n/// TODO: Remove definitions of this.constructor and this.__proto__\n/**\n * Class for nested errors, to be used as causes in {@link Neo4jError}\n * @experimental this class is part of the preview of GQL-compliant errors\n */\nvar GQLError = /** @class */ (function (_super) {\n    __extends(GQLError, _super);\n    /**\n     * @constructor\n     * @param {string} message - the error message\n     * @param {string} gqlStatus - the GQL status code of the error\n     * @param {string} gqlStatusDescription - the GQL status description of the error\n     * @param {ErrorDiagnosticRecord} diagnosticRecord - the error diagnostic record\n     * @param {Error} cause - Optional nested error, the cause of the error\n     */\n    function GQLError(message, gqlStatus, gqlStatusDescription, diagnosticRecord, cause) {\n        var _this = this;\n        var _a;\n        // eslint-disable-next-line\n        // @ts-ignore: not available in ES6 yet\n        _this = _super.call(this, message, cause != null ? { cause: cause } : undefined) || this;\n        _this.constructor = GQLError;\n        // eslint-disable-next-line no-proto\n        _this.__proto__ = GQLError.prototype;\n        /**\n         * Optional, nested error which caused the error\n         *\n         * @type {Error?}\n         * @public\n         */\n        _this.cause = cause != null ? cause : undefined;\n        /**\n         * The GQL Status code\n         *\n         * @type {string}\n         * @experimental this property is part of the preview of GQL-compliant errors\n         * @public\n         */\n        _this.gqlStatus = gqlStatus;\n        /**\n         * The GQL Status Description\n         *\n         * @type {string}\n         * @experimental this property is part of the preview of GQL-compliant errors\n         * @public\n         */\n        _this.gqlStatusDescription = gqlStatusDescription;\n        /**\n         * The GQL diagnostic record\n         *\n         * @type {DiagnosticRecord}\n         * @experimental this property is part of the preview of GQL-compliant errors\n         * @public\n         */\n        _this.diagnosticRecord = diagnosticRecord;\n        /**\n         * The GQL error classification, extracted from the diagnostic record\n         *\n         * @type {ErrorClassification}\n         * @experimental this property is part of the preview of GQL-compliant errors\n         * @public\n         */\n        _this.classification = _extractClassification(_this.diagnosticRecord);\n        /**\n         * The GQL error classification, extracted from the diagnostic record as a raw string\n         *\n         * @type {string}\n         * @experimental this property is part of the preview of GQL-compliant errors\n         * @public\n         */\n        _this.rawClassification = (_a = diagnosticRecord === null || diagnosticRecord === void 0 ? void 0 : diagnosticRecord._classification) !== null && _a !== void 0 ? _a : undefined;\n        _this.name = 'GQLError';\n        return _this;\n    }\n    Object.defineProperty(GQLError.prototype, \"diagnosticRecordAsJsonString\", {\n        /**\n         * The json string representation of the diagnostic record.\n         * The goal of this method is provide a serialized object for human inspection.\n         *\n         * @type {string}\n         * @experimental this is part of the preview of GQL-compliant errors\n         * @public\n         */\n        get: function () {\n            return json.stringify(this.diagnosticRecord, { useCustomToString: true });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return GQLError;\n}(Error));\nexports.GQLError = GQLError;\n/**\n * Class for all errors thrown/returned by the driver.\n */\nvar Neo4jError = /** @class */ (function (_super) {\n    __extends(Neo4jError, _super);\n    /**\n     * @constructor\n     * @param {string} message - the error message\n     * @param {string} code - Optional error code. Will be populated when error originates in the database.\n     * @param {string} gqlStatus - the GQL status code of the error\n     * @param {string} gqlStatusDescription - the GQL status description of the error\n     * @param {DiagnosticRecord} diagnosticRecord - the error diagnostic record\n     * @param {Error} cause - Optional nested error, the cause of the error\n     */\n    function Neo4jError(message, code, gqlStatus, gqlStatusDescription, diagnosticRecord, cause) {\n        var _this = _super.call(this, message, gqlStatus, gqlStatusDescription, diagnosticRecord, cause) || this;\n        _this.constructor = Neo4jError;\n        // eslint-disable-next-line no-proto\n        _this.__proto__ = Neo4jError.prototype;\n        /**\n         * The Neo4j Error code\n         *\n         * @type {string}\n         * @public\n         */\n        _this.code = code;\n        _this.name = 'Neo4jError';\n        _this.retriable = _isRetriableCode(code);\n        return _this;\n    }\n    /**\n     * Verifies if the given error is retriable.\n     *\n     * @param {object|undefined|null} error the error object\n     * @returns {boolean} true if the error is retriable\n     */\n    Neo4jError.isRetriable = function (error) {\n        return error !== null &&\n            error !== undefined &&\n            error instanceof Neo4jError &&\n            error.retriable;\n    };\n    return Neo4jError;\n}(GQLError));\nexports.Neo4jError = Neo4jError;\n/**\n * Create a new error from a message and optional data\n * @param message the error message\n * @param {Neo4jErrorCode} [code] the error code\n * @param {Neo4jError} [cause]\n * @param {String} [gqlStatus]\n * @param {String} [gqlStatusDescription]\n * @param {DiagnosticRecord} diagnosticRecord - the error message\n * @return {Neo4jError} an {@link Neo4jError}\n * @private\n */\nfunction newError(message, code, cause, gqlStatus, gqlStatusDescription, diagnosticRecord) {\n    return new Neo4jError(message, code !== null && code !== void 0 ? code : NOT_AVAILABLE, gqlStatus !== null && gqlStatus !== void 0 ? gqlStatus : '50N42', gqlStatusDescription !== null && gqlStatusDescription !== void 0 ? gqlStatusDescription : 'error: general processing exception - unexpected error. ' + message, diagnosticRecord !== null && diagnosticRecord !== void 0 ? diagnosticRecord : gql_constants_1.rawPolyfilledDiagnosticRecord, cause);\n}\nexports.newError = newError;\n/**\n * Create a new GQL error from a message and optional data\n * @param message the error message\n * @param {Neo4jError} [cause]\n * @param {String} [gqlStatus]\n * @param {String} [gqlStatusDescription]\n * @param {DiagnosticRecord} diagnosticRecord - the error message\n * @return {Neo4jError} an {@link Neo4jError}\n * @experimental this is part of the preview of GQL-compliant errors\n * @private\n */\nfunction newGQLError(message, cause, gqlStatus, gqlStatusDescription, diagnosticRecord) {\n    return new GQLError(message, gqlStatus !== null && gqlStatus !== void 0 ? gqlStatus : '50N42', gqlStatusDescription !== null && gqlStatusDescription !== void 0 ? gqlStatusDescription : 'error: general processing exception - unexpected error. ' + message, diagnosticRecord !== null && diagnosticRecord !== void 0 ? diagnosticRecord : gql_constants_1.rawPolyfilledDiagnosticRecord, cause);\n}\nexports.newGQLError = newGQLError;\n/**\n * Verifies if the given error is retriable.\n *\n * @public\n * @param {object|undefined|null} error the error object\n * @returns {boolean} true if the error is retriable\n */\nvar isRetriableError = Neo4jError.isRetriable;\nexports.isRetriableError = isRetriableError;\n/**\n * @private\n * @param {string} code the error code\n * @returns {boolean} true if the error is a retriable error\n */\nfunction _isRetriableCode(code) {\n    return code === SERVICE_UNAVAILABLE ||\n        code === SESSION_EXPIRED ||\n        _isAuthorizationExpired(code) ||\n        _isTransientError(code);\n}\n/**\n * @private\n * @param {string} code the error to check\n * @return {boolean} true if the error is a transient error\n */\nfunction _isTransientError(code) {\n    return (code === null || code === void 0 ? void 0 : code.includes('TransientError')) === true;\n}\n/**\n * @private\n * @param {string} code the error to check\n * @returns {boolean} true if the error is a service unavailable error\n */\nfunction _isAuthorizationExpired(code) {\n    return code === 'Neo.ClientError.Security.AuthorizationExpired';\n}\n/**\n * extracts a typed classification from the diagnostic record.\n */\nfunction _extractClassification(diagnosticRecord) {\n    if (diagnosticRecord === undefined || diagnosticRecord._classification === undefined) {\n        return 'UNKNOWN';\n    }\n    return classifications.includes(diagnosticRecord._classification) ? diagnosticRecord === null || diagnosticRecord === void 0 ? void 0 : diagnosticRecord._classification : 'UNKNOWN';\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}