{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\Projects\\\\Copy 4\\\\client\\\\src\\\\components\\\\RelationChecker.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Tree from 'react-d3-tree';\nimport './RelationChecker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst translations = require('./translation.json');\nconst compoundNames = require('./compundNames.json');\nrequire('dotenv').config();\nconst neo4jURI = process.env.REACT_APP_NEO4J_URI;\nconst neo4jUser = process.env.REACT_APP_NEO4J_USER;\nconst neo4jPassword = process.env.REACT_APP_NEO4J_PASSWORD;\nconst driver = require('neo4j-driver').driver(neo4jURI, require('neo4j-driver').auth.basic(neo4jUser, neo4jPassword));\nconst session = driver.session();\nfunction countBenAndBent(str) {\n  const matches = str.match(/\\b(ben|bent)\\b/gi);\n  return matches ? matches.length : 0;\n}\nfunction isCompoundName(name) {\n  return Object.values(compoundNames).includes(name);\n}\nfunction splitName(fullName) {\n  const parts = fullName.replace(/\\s+(ben|bent)\\s+/gi, ' ').trim().split(/\\s+/);\n  console.log(parts);\n  const bentCount = countBenAndBent(fullName);\n  console.log(bentCount);\n  let compundName;\n  if (parts.length === 2) {\n    if (bentCount === 0) {\n      if (isCompoundName(parts[0] + \" \" + parts[1])) {\n        compundName = `${parts[0]} ${parts[1]}`;\n        return {\n          personName: compundName,\n          fatherName: \"\",\n          grandfatherName: \"\",\n          familyName: \"\"\n        };\n      } else {\n        return {\n          personName: parts[0],\n          fatherName: \"\",\n          grandfatherName: \"\",\n          familyName: parts[1]\n        };\n      }\n    } else if (bentCount === 1) {\n      return {\n        personName: parts[0],\n        fatherName: parts[1],\n        grandfatherName: \"\",\n        familyName: \"\"\n      };\n    }\n  } else if (parts.length === 3) {\n    if (bentCount === 1) {\n      if (isCompoundName(parts[0] + \" \" + parts[1])) {\n        console.log(\"COMPUND DETECTED\");\n        compundName = `${parts[0]} ${parts[1]}`;\n        return {\n          personName: compundName,\n          fatherName: parts[2],\n          grandfatherName: \"\",\n          familyName: \"\"\n        };\n      } else if (isCompoundName(parts[1] + \" \" + parts[2])) {\n        console.log(\"COMPUND DETECTED\");\n        compundName = `${parts[1]} ${parts[2]}`;\n        return {\n          personName: parts[0],\n          fatherName: compundName,\n          grandfatherName: \"\",\n          familyName: \"\"\n        };\n      } else {\n        return {\n          personName: parts[0],\n          fatherName: parts[1],\n          grandfatherName: \"\",\n          familyName: parts[2]\n        };\n      }\n    } else if (bentCount === 2) {\n      return {\n        personName: parts[0],\n        fatherName: parts[1],\n        grandfatherName: parts[2],\n        familyName: \"\"\n      };\n    }\n  } else if (parts.length === 4) {\n    if (bentCount === 1) {\n      if (isCompoundName(parts[0] + \" \" + parts[1]) && isCompoundName(parts[2] + \" \" + parts[3])) {\n        return {\n          personName: `${parts[0]} ${parts[1]}`,\n          fatherName: `${parts[2]} ${parts[3]}`,\n          grandfatherName: \"\",\n          familyName: \"\"\n        };\n      }\n      if (isCompoundName(parts[0] + \" \" + parts[1])) {\n        return {\n          personName: `${parts[0]} ${parts[1]}`,\n          fatherName: parts[2],\n          grandfatherName: \"\",\n          familyName: parts[3]\n        };\n      }\n      if (isCompoundName(parts[1] + \" \" + parts[2])) {\n        return {\n          personName: parts[0],\n          fatherName: `${parts[1]} ${parts[2]}`,\n          grandfatherName: \"\",\n          familyName: parts[3]\n        };\n      }\n    } else if (bentCount === 2) {\n      if (isCompoundName(parts[0] + \" \" + parts[1])) {\n        return {\n          personName: `${parts[0]} ${parts[1]}`,\n          fatherName: parts[2],\n          grandfatherName: parts[3],\n          familyName: \"\"\n        };\n      }\n      if (isCompoundName(parts[1] + \" \" + parts[2])) {\n        return {\n          personName: parts[0],\n          fatherName: `${parts[1]} ${parts[2]}`,\n          grandfatherName: parts[3],\n          familyName: \"\"\n        };\n      }\n    }\n  } else if (parts.length === 5) {\n    if (bentCount === 2) {\n      if (isCompoundName(parts[0] + \" \" + parts[1])) {\n        return {\n          personName: `${parts[0]} ${parts[1]}`,\n          fatherName: parts[2],\n          grandfatherName: parts[3],\n          familyName: parts[4]\n        };\n      }\n      if (isCompoundName(parts[1] + \" \" + parts[2])) {\n        return {\n          personName: parts[0],\n          fatherName: `${parts[1]} ${parts[2]}`,\n          grandfatherName: parts[3],\n          familyName: parts[4]\n        };\n      }\n      if (isCompoundName(parts[0] + \" \" + parts[1]) && isCompoundName(parts[2] + \" \" + parts[3])) {\n        return {\n          personName: `${parts[0]} ${parts[1]}`,\n          fatherName: `${parts[2]} ${parts[3]}`,\n          grandfatherName: parts[4],\n          familyName: \"\"\n        };\n      }\n    }\n  } else if (parts.length === 6) {\n    if (bentCount === 2) {\n      if (isCompoundName(parts[0] + \" \" + parts[1]) && isCompoundName(parts[2] + \" \" + parts[3]) && isCompoundName(parts[4] + \" \" + parts[5])) {\n        return {\n          personName: `${parts[0]} ${parts[1]}`,\n          fatherName: `${parts[2]} ${parts[3]}`,\n          grandfatherName: `${parts[4]} ${parts[5]}`,\n          familyName: \"\"\n        };\n      }\n    }\n  } else if (parts.length === 7) {\n    if (isCompoundName(parts[0] + \" \" + parts[1]) && isCompoundName(parts[2] + \" \" + parts[3]) && isCompoundName(parts[4] + \" \" + parts[5])) {\n      return {\n        personName: `${parts[0]} ${parts[1]}`,\n        fatherName: `${parts[2]} ${parts[3]}`,\n        grandfatherName: `${parts[4]} ${parts[5]}`,\n        familyName: parts[6]\n      };\n    }\n  }\n  return {\n    personName: parts[0],\n    fatherName: \"\",\n    grandfatherName: \"\",\n    familyName: parts[1] || \"\"\n  };\n}\nfunction buildTreePath(path) {\n  // Handle case where the path is empty\n  if (path.length === 0) return null;\n  return path.reduceRight((acc, person) => {\n    return {\n      id: person.id.toNumber(),\n      name: `${person.name} ${person.lastName}`,\n      children: acc ? [acc] : []\n    };\n  }, null);\n}\nfunction mergePaths(pathToP1, pathToP2) {\n  // Handle empty paths by returning null or an empty object\n  if (pathToP1.length === 0 && pathToP2.length === 0) return null;\n  const ancestor = pathToP1[0]; // Assuming both paths share the same ancestor\n  const branch1 = pathToP1.slice(1);\n  const branch2 = pathToP2.slice(1);\n\n  // Check if any of the branches are empty and handle accordingly\n  const children = [];\n  if (branch1.length > 0) {\n    children.push(buildTreePath(branch1));\n  }\n  if (branch2.length > 0) {\n    children.push(buildTreePath(branch2));\n  }\n\n  // Return the merged structure\n  return {\n    id: ancestor.id.toNumber(),\n    name: `${ancestor.name} ${ancestor.lastName}`,\n    children: children.length > 0 ? children : undefined // Only include children if there are any\n  };\n}\nexport const translateName = (fullName, language = true) => {\n  const reverseTranslations = Object.fromEntries(Object.entries(translations).map(([key, value]) => [value, key]));\n  const reverseCompound = Object.fromEntries(Object.entries(compoundNames).map(([key, value]) => [value, key]));\n  const dict = language ? translations : reverseTranslations;\n  const compoundDict = language ? compoundNames : reverseCompound;\n  const normalized = fullName.trim().replace(/\\s+/g, ' ');\n  if (compoundDict[normalized]) {\n    return compoundDict[normalized];\n  }\n  const nameParts = normalized.split(' ');\n  const translatedParts = nameParts.map(part => dict[part] || part);\n  return translatedParts.join(' ');\n};\nconst RelationPage = () => {\n  _s();\n  var _relationship$relatio, _relationship$relatio2, _relationship$relatio3, _relationship$relatio4, _relationship$relatio5, _relationship$commonA, _relationship$commonA2, _relationship$commonA3, _relationship$commonA4, _relationship$commonA5, _relationship$commonA6, _relationship$commonA7, _relationship$commonA8, _relationship$relatio6, _relationship$relatio7, _relationship$relatio8, _relationship$relatio9;\n  const [person1, setPerson1] = useState('');\n  const [person2, setPerson2] = useState('');\n  const [relationship, setRelationship] = useState('');\n  const [duplicates, setDuplicates] = useState({\n    person1: [],\n    person2: []\n  });\n  const [error, setError] = useState(null);\n  const [selectedPerson1, setSelectedPerson1] = useState(null);\n  const [selectedPerson2, setSelectedPerson2] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState(\"\");\n  const fetchRelationship = async (e, customPerson1 = person1, customPerson2 = person2) => {\n    e.preventDefault();\n    console.log(\"🚀 fetchRelationship START\");\n    console.log(\"➡️ person1:\", customPerson1);\n    console.log(\"➡️ person2:\", customPerson2);\n    if (!customPerson1 || !customPerson2) {\n      console.error(\"❌ One of the names is undefined or empty\");\n      setError(true);\n      setRelationship({\n        relationshipDescription: 'أدخل اسمي الشخصين بشكل صحيح',\n        relationshipScore: null\n      });\n      return;\n    }\n    setLoading(true);\n    setError(false);\n    setLoadingMessage(\"🔎 بداية البحث عن العلاقة...\");\n    try {\n      const result = await getRelationship(customPerson1, customPerson2);\n      console.log(\"✅ Result received:\", result);\n      if (result.error === 'non-unique-name') {\n        var _result$duplicates;\n        setSelectedPerson1(null);\n        setSelectedPerson2(null);\n        setDuplicates((_result$duplicates = result.duplicates) !== null && _result$duplicates !== void 0 ? _result$duplicates : {\n          person1: [],\n          person2: []\n        });\n        setRelationship(result.message);\n        return;\n      } else {\n        var _result$person, _result$person2, _result$score, _result$levelsTuple, _result$generation, _result$explanation$t, _result$explanation, _result$explanation$e, _result$explanation2, _result$relationshipT, _result$ancestor, _result$treeData, _result$person1ID, _result$person2ID;\n        setDuplicates({\n          person1: [],\n          person2: []\n        });\n        setRelationship({\n          relationshipDescription: result.relation,\n          relationshipPerson1Details: (_result$person = result.person1) !== null && _result$person !== void 0 ? _result$person : null,\n          relationshipPerson2Details: (_result$person2 = result.person2) !== null && _result$person2 !== void 0 ? _result$person2 : null,\n          relationshipScore: (_result$score = result.score) !== null && _result$score !== void 0 ? _result$score : null,\n          relationshipLevels: (_result$levelsTuple = result.levelsTuple) !== null && _result$levelsTuple !== void 0 ? _result$levelsTuple : null,\n          relationshipGenerationGap: (_result$generation = result.generation) !== null && _result$generation !== void 0 ? _result$generation : null,\n          relationshipExplanationType: (_result$explanation$t = (_result$explanation = result.explanation) === null || _result$explanation === void 0 ? void 0 : _result$explanation.type) !== null && _result$explanation$t !== void 0 ? _result$explanation$t : null,\n          relationshipExplanationDesc: (_result$explanation$e = (_result$explanation2 = result.explanation) === null || _result$explanation2 === void 0 ? void 0 : _result$explanation2.explanation) !== null && _result$explanation$e !== void 0 ? _result$explanation$e : null,\n          relationshipType: (_result$relationshipT = result.relationshipType) !== null && _result$relationshipT !== void 0 ? _result$relationshipT : null,\n          commonAncestor: (_result$ancestor = result.ancestor) !== null && _result$ancestor !== void 0 ? _result$ancestor : null,\n          ancestorstreeData: (_result$treeData = result.treeData) !== null && _result$treeData !== void 0 ? _result$treeData : null,\n          person1ID: (_result$person1ID = result.person1ID) !== null && _result$person1ID !== void 0 ? _result$person1ID : null,\n          person2ID: (_result$person2ID = result.person2ID) !== null && _result$person2ID !== void 0 ? _result$person2ID : null\n        });\n      }\n    } catch (error) {\n      console.error('❌ Error fetching relationship:', error);\n      setRelationship({\n        relationshipDescription: 'حدث خطأ أثناء البحث',\n        relationshipScore: null\n      });\n      setError(true);\n    } finally {\n      console.log(\"🛑 fetchRelationship END\");\n      setLoading(false);\n    }\n  };\n  const checkMarriage = async (person1ID, person2ID, gender1, gender2) => {\n    if (gender1 === gender2) {\n      return {\n        areMarried: false\n      };\n    }\n    setLoadingMessage(\"جاري البحث عن علاقة زواج\");\n    const result = await session.run(`\n          MATCH (Husband:Person)-[:HUSBAND_OF]->(Wife:Person)\n          MATCH (Wife)-[:WIFE_OF]->(Husband)\n          WHERE (id(Wife) = $person1ID AND id(Husband) = $person2ID) \n            OR (id(Wife) = $person2ID AND id(Husband) = $person1ID)\n          RETURN Husband AS P1, Wife AS P2\n        `, {\n      person1ID,\n      person2ID\n    });\n    if (result.records.length === 0) {\n      return {\n        areMarried: false\n      };\n    }\n    const record = result.records[0];\n    const P1 = record.get(\"P1\").properties;\n    const P2 = record.get(\"P2\").properties;\n    return record.length === 0 ? {\n      areMarried: false\n    } : {\n      areMarried: true,\n      P1,\n      P2\n    };\n  };\n  async function getMarriageRelation(session, person1ID, person2ID, translatedName1, translatedName2, gender1, gender2) {\n    var _ownRecord$get$toNumb, _ownRecord$get, _ownRecord$get$toNumb2, _ownRecord$get2, _ownRecord$get3, _ownRecord$get4, _ownRecord$get5, _ownRecord$get6, _spouseRecord$get$toN, _spouseRecord$get, _spouseRecord$get$toN2, _spouseRecord$get2, _spouseRecord$get3, _spouseRecord$get4, _spouseRecord$get5;\n    console.log('🔍 Checking marriage-based relationship between', translatedName1, 'and', translatedName2);\n\n    // Step 1: Person's own family\n    const ownFamilyQuery = `\n      MATCH (P:Person)\n      WHERE id(P) = $personId\n\n      // Person's Father and Mother\n      OPTIONAL MATCH (Father:Person)-[:FATHER_OF]->(P)\n      OPTIONAL MATCH (Mother:Person)-[:MOTHER_OF]->(P)\n\n      // Person's Siblings\n      OPTIONAL MATCH (Father)-[:FATHER_OF]->(Sibling:Person)\n      WHERE Sibling <> P\n\n      // Spouses of Siblings\n      OPTIONAL MATCH (Sibling)-[:HUSBAND_OF|:WIFE_OF]->(SiblingSpouse:Person)\n\n      // Person's Children\n      OPTIONAL MATCH (P)-[:MOTHER_OF|:FATHER_OF]->(Child:Person)\n\n      // Spouses of Children\n      OPTIONAL MATCH (Child)-[:HUSBAND_OF|:WIFE_OF]->(ChildSpouse:Person)\n\n      RETURN \n        id(Father) AS fatherId,\n        id(Mother) AS motherId,\n        collect(DISTINCT id(Sibling)) AS siblingIds,\n        collect(DISTINCT id(SiblingSpouse)) AS siblingSpouseIds,\n        collect(DISTINCT id(Child)) AS childIds,\n        collect(DISTINCT id(ChildSpouse)) AS childSpouseIds\n    `;\n    const ownResult = await session.run(ownFamilyQuery, {\n      personId: person1ID\n    });\n    const ownRecord = ownResult.records[0];\n    const fatherId = (_ownRecord$get$toNumb = (_ownRecord$get = ownRecord.get(\"fatherId\")) === null || _ownRecord$get === void 0 ? void 0 : _ownRecord$get.toNumber()) !== null && _ownRecord$get$toNumb !== void 0 ? _ownRecord$get$toNumb : null;\n    const motherId = (_ownRecord$get$toNumb2 = (_ownRecord$get2 = ownRecord.get(\"motherId\")) === null || _ownRecord$get2 === void 0 ? void 0 : _ownRecord$get2.toNumber()) !== null && _ownRecord$get$toNumb2 !== void 0 ? _ownRecord$get$toNumb2 : null;\n    const siblingIds = ((_ownRecord$get3 = ownRecord.get(\"siblingIds\")) !== null && _ownRecord$get3 !== void 0 ? _ownRecord$get3 : []).map(id => id.toNumber());\n    const siblingSpouseIds = ((_ownRecord$get4 = ownRecord.get(\"siblingSpouseIds\")) !== null && _ownRecord$get4 !== void 0 ? _ownRecord$get4 : []).map(id => id.toNumber());\n    const childIds = ((_ownRecord$get5 = ownRecord.get(\"childIds\")) !== null && _ownRecord$get5 !== void 0 ? _ownRecord$get5 : []).map(id => id.toNumber());\n    const fchildrenSpouseIds = ((_ownRecord$get6 = ownRecord.get(\"childSpouseIds\")) !== null && _ownRecord$get6 !== void 0 ? _ownRecord$get6 : []).map(id => id.toNumber());\n    console.log('👨‍👩‍👧 Own Family:');\n    console.log('Father ID:', fatherId);\n    console.log('Mother ID:', motherId);\n    console.log('Sibling IDs:', siblingIds);\n    console.log('Sibling Spouse IDs:', siblingSpouseIds);\n    console.log('Childs IDs:', childIds);\n    console.log('Children Spouse IDs:', fchildrenSpouseIds);\n\n    // Step 2: Spouse's family\n    const spouseFamilyQuery = `\n      MATCH (P:Person)-[:HUSBAND_OF|:WIFE_OF]->(Spouse:Person)\n      WHERE id(P) = $personId\n\n      OPTIONAL MATCH (SFather:Person)-[:FATHER_OF]->(Spouse)\n      OPTIONAL MATCH (SMother:Person)-[:MOTHER_OF]->(Spouse)\n      OPTIONAL MATCH (SFather)-[:FATHER_OF]->(SSibling:Person)\n      WHERE SSibling <> Spouse\n\n      OPTIONAL MATCH (SSibling)-[:HUSBAND_OF|:WIFE_OF]->(SSiblingSpouse:Person)\n\n      // Get children of the spouse\n      OPTIONAL MATCH (Spouse)-[:MOTHER_OF|:FATHER_OF]->(Child:Person)\n      OPTIONAL MATCH (Child)-[:HUSBAND_OF|:WIFE_OF]->(ChildSpouse:Person)\n\n      RETURN \n        id(SFather) AS sFatherId,\n        id(SMother) AS sMotherId,\n        collect(DISTINCT id(SSibling)) AS sSiblingIds,\n        collect(DISTINCT id(SSiblingSpouse)) AS sSiblingSpouseIds,\n        collect(DISTINCT id(Child)) AS childIds,\n        collect(DISTINCT id(ChildSpouse)) AS childSpouseIds\n    `;\n    const spouseResult = await session.run(spouseFamilyQuery, {\n      personId: person1ID\n    });\n    const spouseRecord = spouseResult.records[0];\n    const sFatherId = (_spouseRecord$get$toN = spouseRecord === null || spouseRecord === void 0 ? void 0 : (_spouseRecord$get = spouseRecord.get(\"sFatherId\")) === null || _spouseRecord$get === void 0 ? void 0 : _spouseRecord$get.toNumber()) !== null && _spouseRecord$get$toN !== void 0 ? _spouseRecord$get$toN : null;\n    const sMotherId = (_spouseRecord$get$toN2 = spouseRecord === null || spouseRecord === void 0 ? void 0 : (_spouseRecord$get2 = spouseRecord.get(\"sMotherId\")) === null || _spouseRecord$get2 === void 0 ? void 0 : _spouseRecord$get2.toNumber()) !== null && _spouseRecord$get$toN2 !== void 0 ? _spouseRecord$get$toN2 : null;\n    const sSiblingIds = ((_spouseRecord$get3 = spouseRecord === null || spouseRecord === void 0 ? void 0 : spouseRecord.get(\"sSiblingIds\")) !== null && _spouseRecord$get3 !== void 0 ? _spouseRecord$get3 : []).map(id => id.toNumber());\n    const sSiblingSpouseIds = ((_spouseRecord$get4 = spouseRecord === null || spouseRecord === void 0 ? void 0 : spouseRecord.get(\"sSiblingSpouseIds\")) !== null && _spouseRecord$get4 !== void 0 ? _spouseRecord$get4 : []).map(id => id.toNumber());\n    const childrenSpouseIds = ((_spouseRecord$get5 = spouseRecord === null || spouseRecord === void 0 ? void 0 : spouseRecord.get(\"childSpouseIds\")) !== null && _spouseRecord$get5 !== void 0 ? _spouseRecord$get5 : []).map(id => id.toNumber());\n    console.log('🧑‍🤝‍🧑 Spouse Family:');\n    console.log('Spouse Father ID:', sFatherId);\n    console.log('Spouse Mother ID:', sMotherId);\n    console.log('Spouse Sibling IDs:', sSiblingIds);\n    console.log('Spouse Sibling Spouse IDs:', sSiblingSpouseIds);\n    console.log('Children Spouse IDs:', childrenSpouseIds);\n\n    // Step 3: Matching\n    const match = id => {\n      return id !== null && id === person2ID;\n    };\n    const isIn = list => {\n      const result = list.some(id => id === person2ID);\n      return result;\n    };\n\n    // Sibling check\n    if (isIn(sSiblingIds)) {\n      console.log('✅ Match: Sibling');\n      if (gender1 === 'Male') {\n        return `${translatedName1} هو زوج اخت ${translatedName2}`;\n      } else {\n        return `${translatedName1} هي زوجة اخ ${translatedName2}`;\n      }\n    }\n\n    // Sibling Spouse check\n    if (isIn(siblingSpouseIds)) {\n      console.log('✅ Match: Spouse Siblings');\n      // Male person with male sibling-in-law (spouse of the sibling)\n      if (gender1 === 'Male') {\n        if (gender2 === 'Male') {\n          return `${translatedName1} هو اخ زوجة ${translatedName2}`;\n        } else {\n          return `${translatedName1} هو اخ زوج ${translatedName2}`;\n        }\n      } else {\n        // Female person with female sibling-in-law (spouse of the sibling)\n        if (gender2 === 'Male') {\n          return `${translatedName1} هي اخت زوج ${translatedName2}`;\n        } else {\n          return `${translatedName1} هو اخ زوجة ${translatedName2}`;\n        }\n      }\n    }\n\n    // Children Spouses check\n    if (isIn(fchildrenSpouseIds)) {\n      console.log('✅ Match: Children Spouses');\n      if (gender1 === 'Male') {\n        return `${translatedName1} هو أب زوجة ${translatedName2}`;\n      } else {\n        return `${translatedName1} هي أم زوجة ${translatedName2}`;\n      }\n    }\n\n    // Further check for Children Spouses (with childrenSpouseIds mapping and match)\n    if (match(sFatherId) || match(sMotherId)) {\n      console.log('✅ Match: Children Spouses (extended)');\n      if (gender1 === 'Male') {\n        console.log(`${translatedName1} هو زوج ابنة ${translatedName2}`);\n        return `${translatedName1} هو زوج ابنة ${translatedName2}`;\n      } else {\n        console.log(`${translatedName1} هي زوجة ابن ${translatedName2} | ${translatedName1} هي كنة ${translatedName2}`);\n        return `${translatedName1} هي زوجة ابن ${translatedName2} | ${translatedName1} هي كنة ${translatedName2}`;\n      }\n    }\n    return \"لا توجد علاقة واضحة\";\n  }\n  const getAncestors = async (person1ID, person2ID) => {\n    setLoadingMessage(\"جاري البحث عن الأجداد المشتركة\");\n    const result = await session.run(`\n          MATCH path1 = (common:Person)-[:FATHER_OF|MOTHER_OF*0..12]->(p1:Person)\n          WHERE id(p1) = $person1ID\n\n          MATCH path2 = (common)-[:FATHER_OF|MOTHER_OF*0..12]->(p2:Person)\n          WHERE id(p2) = $person2ID\n            AND id(p1) <> id(p2)\n\n          WITH common, path1, path2, length(path1) AS level1, length(path2) AS level2\n\n          // Prioritize father ancestors by explicitly matching FATHER_OF first, then MOTHER_OF\n          OPTIONAL MATCH (cGF:Person)-[:FATHER_OF]->(cF:Person)-[:FATHER_OF]->(common)\n\n          // Check if the common ancestor is married and get the husband if married\n          OPTIONAL MATCH (common)-[:WIFE_OF]->(husband:Person)\n\n          // Include spouse information\n          WITH common, cF, cGF, husband, path1, path2, level1, level2\n\n          ORDER BY (level1 + level2) ASC\n          LIMIT 1\n\n          RETURN \n            // If common ancestor is female and married, return the husband's name\n            common.name AS commonAncestorName,\n            cF.name AS commonAncestorFatherName,\n            cGF.name AS commonAncestorGrandFatherName,\n            common.lastName AS commonAncestorLastName,\n            id(common) AS commonAncestorID,\n\n            common.gender AS commonAncestorGender,\n            level1 AS generationsFromP1,\n            level2 AS generationsFromP2,\n\n            // Include spouse information if married\n            CASE \n              WHEN husband IS NOT NULL THEN { id: id(husband), name: husband.name, lastName: husband.lastName, gender: husband.gender }\n              ELSE null\n            END AS spouseOfAncestor,\n\n            [n IN nodes(path1) | { id: id(n), name: n.name, lastName: n.lastName, gender: n.gender }] AS pathToP1,\n            [n IN nodes(path2) | { id: id(n), name: n.name, lastName: n.lastName, gender: n.gender }] AS pathToP2\n\n\n        `, {\n      person1ID,\n      person2ID\n    });\n    const record = result.records[0];\n    if (result.records.length === 0) {\n      return null;\n    }\n    return {\n      id: record.get('commonAncestorID').toNumber(),\n      name: record.get('commonAncestorName'),\n      lastName: record.get('commonAncestorLastName'),\n      fatherName: record.get('commonAncestorFatherName'),\n      grandfatherName: record.get('commonAncestorGrandFatherName'),\n      gender: record.get('commonAncestorGender'),\n      spouseOfAncestor: record.get('spouseOfAncestor'),\n      levelFromP1: record.get('generationsFromP1').toNumber(),\n      levelFromP2: record.get('generationsFromP2').toNumber(),\n      pathFromAncestorToP1: record.get('pathToP1'),\n      pathFromAncestorToP2: record.get('pathToP2')\n    };\n  };\n  const getPersonMatches = async (personName, fatherName = \"\", grandfatherName = \"\", familyName) => {\n    let cypherQuery = ``;\n    const queryParamsObject = {};\n    if (personName) {\n      if (fatherName) {\n        if (grandfatherName) {\n          if (familyName) {\n            cypherQuery += `\n              MATCH (grandfather:Person)-[:FATHER_OF]->(father:Person)-[:FATHER_OF]->(child:Person)\n              WHERE child.name = $personName AND \n                    father.name = $fatherName AND \n                    grandfather.name = $grandfatherName AND \n                    child.lastName = $familyName\n              RETURN \n                id(child) AS childID,\n                child.name AS childName, \n                father.name AS fatherName, \n                grandfather.name AS grandfatherName, \n                child.lastName AS familyName,\n                child.gender AS gender\n            `;\n            queryParamsObject.personName = personName;\n            queryParamsObject.fatherName = fatherName;\n            queryParamsObject.grandfatherName = grandfatherName;\n            queryParamsObject.familyName = familyName;\n          } else {\n            cypherQuery += `\n              MATCH (grandfather:Person)-[:FATHER_OF]->(father:Person)-[:FATHER_OF]->(child:Person)\n              WHERE child.name = $personName AND \n                    father.name = $fatherName AND\n                    grandfather.name = $grandfatherName\n              RETURN \n                    id(child) AS childID, \n                    child.name AS childName, \n                    father.name AS fatherName, \n                    grandfather.name AS grandfatherName,\n                    child.lastName AS familyName,\n                    child.gender AS gender      \n              `;\n            queryParamsObject.personName = personName;\n            queryParamsObject.fatherName = fatherName;\n            queryParamsObject.grandfatherName = grandfatherName;\n          }\n        } else {\n          if (familyName) {\n            cypherQuery += `\n            MATCH (father:Person)-[:FATHER_OF]->(child:Person)\n            WHERE child.name = $personName AND \n                  father.name = $fatherName AND\n                  child.lastName = $familyName\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\n            RETURN  \n              id(child) AS childID,\n              child.name AS childName, \n              father.name AS fatherName,\n              grandfather.name AS grandfatherName,\n              child.lastName AS familyName,\n              child.gender AS gender\n            `;\n            queryParamsObject.personName = personName;\n            queryParamsObject.fatherName = fatherName;\n            queryParamsObject.familyName = familyName;\n          } else {\n            cypherQuery += `\n            MATCH (father:Person)-[:FATHER_OF]->(child:Person)\n            \n            WHERE child.name = $personName AND \n                  father.name = $fatherName\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\n            RETURN  id(child) AS childID, \n                    child.name AS childName, \n                    father.name AS fatherName, \n                    grandfather.name AS grandfatherName,\n                    child.lastName AS familyName,\n                    child.gender AS gender\n            `;\n            queryParamsObject.personName = personName;\n            queryParamsObject.fatherName = fatherName;\n          }\n        }\n      } else {\n        if (familyName) {\n          cypherQuery += `\n          MATCH (child:Person)\n          WHERE child.name = $personName AND child.lastName = $familyName\n          OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(child)\n          OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\n          RETURN \n            id(child) AS childID,\n            child.name AS childName, \n            father.name AS fatherName,\n            grandfather.name AS grandfatherName,\n            child.lastName AS familyName,\n            child.gender AS gender\n        `;\n          queryParamsObject.personName = personName;\n          queryParamsObject.familyName = familyName;\n        } else {\n          cypherQuery += `\n            MATCH (child:Person)\n            WHERE child.name = $personName\n            OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(child)\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\n            RETURN\n              id(child) AS childID,\n              child.name AS childName, \n              father.name AS fatherName, \n              grandfather.name AS grandfatherName,\n              child.lastName AS familyName,\n              child.gender AS gender\n          `;\n          queryParamsObject.personName = personName;\n        }\n      }\n    }\n    const session = driver.session();\n    try {\n      const result = await session.run(cypherQuery, queryParamsObject);\n      return result.records.map(record => ({\n        id: record.get('childID').toNumber(),\n        gender: record.get('gender'),\n        name: record.get('childName'),\n        father: record.get('fatherName') || \"\",\n        grandfather: record.get('grandfatherName') || \"\",\n        lastName: record.get('familyName')\n      }));\n    } catch (Error) {\n      console.error('Query Error:', Error);\n      setError('حدث خطأ أثناء البحث.');\n    } finally {\n      await session.close();\n    }\n  };\n  const getRelationship = async (person1FullName, person2FullName) => {\n    const isArabic = text => /[\\u0600-\\u06FF]/.test(text);\n    let translatedName1, translatedName2;\n    let gender1, gender2;\n    let relationshipType;\n    let relation = '',\n      score = 0;\n    let explanation;\n    let relationshipExplanation = [{\n      type: \"العائلة\",\n      explanation: \"هؤلاء الشخصين مرتبطين من خلال العائلة ذو الدرجة الأولى.\"\n    }, {\n      type: \"العائلة المقربة\",\n      explanation: \"هؤلاء الشخصين مرتبطين من خلال أعمام وأخوال مشتركين.\"\n    }, {\n      type: \"العائلة الموسعة\",\n      explanation: \"هؤلاء الشخصين مرتبطين من خلال أعمام أو أخوال الأب ، أو أجداد الأب و الأم.\"\n    }, {\n      type: \"قرابة الزواج\",\n      explanation: \"هذان الشخصان مرتبطان من خلال الزواج.\"\n    }, {\n      type: \"صهر / نسيب\",\n      explanation: \"هذان الشخصان مرتبطان عبر الزواج وليس النسب الدموي.\"\n    }, {\n      type: \"لا توجد علاقة\",\n      explanation: \"لم يتم العثور على أي صلة قرابة بين الشخصين في قاعدة البيانات.\"\n    }, {\n      type: \"نفس الشخص\",\n      explanation: \"الاسمين يشيران إلى نفس الشخص.\"\n    }];\n    if (isArabic(person1FullName)) {\n      console.log(person1FullName);\n      // Split the name into parts first\n      const splitPerson1 = splitName(person1FullName);\n\n      // Translate each part individually\n      const translatedName1 = {\n        personName: translateName(splitPerson1.personName, false),\n        fatherName: translateName(splitPerson1.fatherName, false),\n        grandfatherName: translateName(splitPerson1.grandfatherName, false),\n        familyName: translateName(splitPerson1.familyName, false)\n      };\n      console.log(translatedName1);\n    } else {\n      translatedName1 = person1FullName; // If it's not Arabic, just use the original name\n    }\n    if (isArabic(person2FullName)) {\n      console.log(person2FullName);\n      // Split the name into parts first\n      const splitPerson2 = splitName(person2FullName);\n\n      // Translate each part individually\n      const translatedName2 = {\n        personName: translateName(splitPerson2.personName, false),\n        fatherName: translateName(splitPerson2.fatherName, false),\n        grandfatherName: translateName(splitPerson2.grandfatherName, false),\n        familyName: translateName(splitPerson2.familyName, false)\n      };\n      console.log(translatedName2);\n    } else {\n      translatedName2 = person2FullName; // If it's not Arabic, just use the original name\n    }\n    const errorContainer = document.getElementById('error-container');\n    console.log(person1Name);\n    try {\n      const person1Matches = await getPersonMatches(person1Name, person1FatherName, person1GrandfatherName, person1LastName);\n      if (person1Matches.length === 0) {\n        throw new Error(`لا يوجد أشخاص بإسم ${person1FullName} الرجاء التثبت في الإسم جيدا`);\n      }\n      const person2Matches = await getPersonMatches(person2Name, person2FatherName, person2GrandfatherName, person2LastName);\n      if (person2Matches.length === 0) {\n        throw new Error(`لا يوجد أشخاص بإسم ${person2FullName} الرجاء التثبت في الإسم جيدا`);\n      }\n      setLoadingMessage(\"جاري البحث عن الأشخاص\");\n      console.log(\"P1 matches : \", person1Matches);\n      console.log(\"P2 matches : \", person2Matches);\n      let person1ID, person2ID;\n      if (person1Matches.length > 1 || person2Matches.length > 1) {\n        return {\n          error: 'non-unique-name',\n          message: 'تم العثور على عدة أشخاص بنفس الاسم. الرجاء اختيار الصحيح.',\n          duplicates: {\n            person1: person1Matches.length > 1 ? person1Matches : [],\n            person2: person2Matches.length > 1 ? person2Matches : []\n          }\n        };\n      } else {\n        person1ID = person1Matches[0].id;\n        person2ID = person2Matches[0].id;\n        gender1 = person1Matches[0].gender;\n        gender2 = person2Matches[0].gender;\n      }\n      const translatedName1 = translateName(person1Matches[0].name + \" \" + person1Matches[0].lastName);\n      const translatedName2 = translateName(person2Matches[0].name + \" \" + person2Matches[0].lastName);\n      console.log(person1Matches[0], person2Matches[0]);\n      let marraigeRecord = await checkMarriage(person1ID, person2ID, gender1, gender2);\n      if (marraigeRecord.areMarried === true) {\n        let relation = '';\n        let score = 100;\n        if (gender1 === 'Male') {\n          relation = `${translatedName1} هو زوج ${translatedName2}`;\n        } else {\n          relation = `${translatedName1} هي زوجة ${translatedName2}`;\n        }\n        setLoading(false);\n        console.log(relation);\n        relationshipType = \"Marriage\";\n        explanation = relationshipType[4];\n        return {\n          relation,\n          score,\n          relationshipType,\n          explanation,\n          person1: person1Matches[0],\n          person2: person2Matches[0]\n        };\n      } else {\n        console.log(\"Checking relations\");\n        let relationRecord = await getAncestors(person1ID, person2ID);\n        if (relationRecord === null) {\n          console.log(\"There's no common ancestor between these.\");\n          let relation = await getMarriageRelation(session, person1ID, person2ID, translatedName1, translatedName2, gender1, gender2);\n          console.log(relation);\n          if (relation) {\n            console.log(\"Relaition found.\");\n            relationshipType = \"Marriage-related\";\n            explanation = relationshipType[3];\n            return {\n              relation,\n              relationshipType,\n              explanation,\n              person1: person1Matches[0],\n              person2: person2Matches[0]\n            };\n          } else {\n            setError(\"لا يوجد اي قاسم مشترك أو علاقة مشتركة بين هاذين الشخصين.\");\n            setError(true);\n            return 'لا توجد اي علاقة بين هاذين الشخصين';\n          }\n        } else {\n          const ancestorID = relationRecord.id;\n          const ancestorName = relationRecord.name ? translateName(relationRecord.name) : '';\n          const ancestorLastName = relationRecord.lastName ? translateName(relationRecord.lastName) : '';\n          const ancestorFatherName = relationRecord.fatherName ? translateName(relationRecord.fatherName) : '';\n          const ancestorGrandFatherName = relationRecord.grandfatherName ? translateName(relationRecord.grandfatherName) : '';\n          const ancestorGender = relationRecord.gender;\n          let levelFromP1, levelFromP2, pathFromAncestorToP1, pathFromAncestorToP2;\n          let spouseOfAncestor = relationRecord.spouseOfAncestor;\n          const ancestor = {\n            ancestorID,\n            ancestorName,\n            ancestorFatherName,\n            ancestorGrandFatherName,\n            ancestorLastName,\n            ancestorGender\n          };\n          console.log(ancestor);\n          ({\n            levelFromP1,\n            levelFromP2,\n            spouseOfAncestor,\n            pathFromAncestorToP1,\n            pathFromAncestorToP2\n          } = relationRecord);\n          let pathToP1 = pathFromAncestorToP1;\n          let pathToP2 = pathFromAncestorToP2;\n          if (spouseOfAncestor !== null && ancestorID !== person1ID && ancestorID !== person2ID) {\n            pathToP1[0] = {\n              id: spouseOfAncestor.id,\n              name: spouseOfAncestor.name,\n              lastName: spouseOfAncestor.lastName,\n              gender: spouseOfAncestor.gender\n            };\n            pathToP2[0] = {\n              id: spouseOfAncestor.id,\n              name: spouseOfAncestor.name,\n              lastName: spouseOfAncestor.lastName,\n              gender: spouseOfAncestor.gender\n            };\n          }\n          const treeData = mergePaths(pathToP1, pathToP2);\n          console.log(pathFromAncestorToP1.reverse().map(a => a.name).join(\" ben \"));\n          console.log(pathFromAncestorToP2.reverse().map(a => a.name).join(\" ben \"));\n          var p1Level = levelFromP1;\n          var p2Level = levelFromP2;\n          const gender1 = pathToP1[0].gender;\n          const gender2 = pathToP2[0].gender;\n          console.log(`Level: (${p1Level}, ${p2Level})`);\n          setLoadingMessage(\"جاري البحث عن العلاقة بين الشخصين\");\n          if (p1Level === 0 && p2Level === 1) {\n            if (gender1 === 'Male') {\n              relation = `${translatedName1} هو والد ${translatedName2}`;\n            } else {\n              relation = `${translatedName1} هي والدة ${translatedName2}`;\n            }\n            score = 100;\n            explanation = relationshipType[0];\n          } else if (p1Level === 1 && p2Level === 0) {\n            if (gender1 === 'Male') {\n              relation = `${translatedName1} هو ابن ${translatedName2}`;\n            } else {\n              relation = `${translatedName1} هي إبنة ${translatedName2}`;\n            }\n            score = 100;\n            explanation = relationshipExplanation[0];\n          } else if (p1Level === 2 && p2Level === 0) {\n            if (gender1 === 'Male') {\n              relation = `${translatedName1} هو حفيد ${translatedName2}`;\n            } else {\n              relation = `${translatedName1} هي حفيدة ${translatedName2}`;\n            }\n            score = 90;\n            explanation = relationshipExplanation[0];\n          } else if (p1Level === 0 && p2Level === 2) {\n            if (gender1 === 'Male') {\n              relation = `${translatedName1} هو جدّ ${translatedName2}`;\n            } else {\n              relation = `${translatedName1} هي جدّة ${translatedName2}`;\n            }\n            score = 90;\n            explanation = relationshipExplanation[0];\n          } else if (p1Level === 3 && p2Level === 0) {\n            if (gender1 === 'Male') {\n              relation = `${translatedName1} هو إبن حفيد ${translatedName2}`;\n            } else {\n              relation = `${translatedName1} هي إبنة حفيدة ${translatedName2}`;\n            }\n            score = 75;\n            explanation = relationshipExplanation[1];\n          } else if (p1Level === 0 && p2Level === 3) {\n            if (gender1 === 'Male') {\n              relation = `${translatedName1} و جد والد ${translatedName2}`;\n            } else {\n              relation = `${translatedName1} هي جدة والدة ${translatedName2}`;\n            }\n            score = 80;\n            explanation = relationshipExplanation[0];\n          } else if (p1Level === 0 && p2Level === 4) {\n            // ADD FROM MOTHER FROM FATHER GRANDFATHER \n            const p2GreatAncestorGender = pathToP1[2].gender;\n            if (gender1 === 'Male') {\n              if (p2GreatAncestorGender === 'Male') {\n                relation = `${translatedName1} هو جد جد ${translatedName2}`;\n              } else {\n                relation = `${translatedName1} هو جد جدة ${translatedName2}`;\n              }\n            } else {\n              if (p2GreatAncestorGender === 'Male') {\n                relation = `${translatedName1} هي جدة جد ${translatedName2}`;\n              } else {\n                relation = `${translatedName1} هي جدة جدة ${translatedName2}`;\n              }\n            }\n            score = 70;\n            explanation = relationshipExplanation[2];\n          } else if (p1Level === 4 && p2Level === 0) {\n            // ADD FROM MOTHER FROM FATHER GRANDFATHER \n            const p1GreatAncestorGender = pathToP1[2].gender;\n            if (gender1 === 'Male') {\n              if (p1GreatAncestorGender === 'Male') {\n                relation = `${translatedName1} هو حفيد حفيد ${translatedName2}`;\n              } else {\n                relation = `${translatedName1} هو حفيد حفيدة ${translatedName2}`;\n              }\n            } else {\n              if (p1GreatAncestorGender === 'Male') {\n                relation = `${translatedName1} هي حفيدة حفيد ${translatedName2}`;\n              } else {\n                relation = `${translatedName1} هي حفيدة حفيد ${translatedName2}`;\n              }\n            }\n            score = 70;\n            explanation = relationshipExplanation[2];\n          } else if (p1Level === 1 && p2Level === 1) {\n            if (gender1 === 'Male' && gender2 === 'Male') {\n              relation = `${translatedName1} و ${translatedName2} إخوة`;\n            } else if (gender1 === 'Female' && gender2 === 'Female') {\n              relation = `${translatedName1} و ${translatedName2} أخوات`;\n            } else {\n              relation = `${translatedName1} و ${translatedName2} إخوة`;\n            }\n            score = 98;\n            explanation = relationshipExplanation[0];\n          } else if (p1Level === 2 && p2Level === 1) {\n            const p1AncestorGender = pathToP1[1].gender;\n            if (gender1 === 'Male') {\n              if (p1AncestorGender === 'Male') {\n                relation = `${translatedName1} هو ابن أخ ${translatedName2}`;\n              } else {\n                relation = `${translatedName1} هو ابن أخت ${translatedName2}`;\n              }\n              score = 93;\n            } else {\n              if (p1AncestorGender === 'Male') {\n                relation = `${translatedName1} هي ابنة أخ ${translatedName2}`;\n              } else {\n                relation = `${translatedName1} هي ابنة أخت ${translatedName2}`;\n              }\n              score = 93;\n              explanation = relationshipExplanation[1];\n            }\n          } else if (p1Level === 1 && p2Level === 2) {\n            const p2AncestorGender = pathToP2[1].gender;\n            if (gender1 === 'Male') {\n              if (p2AncestorGender === 'Male') {\n                relation = `${translatedName1} هو عم ${translatedName2}`;\n                score = 95;\n              } else {\n                relation = `${translatedName1} هو خال ${translatedName2}`;\n                score = 94;\n              }\n            } else {\n              if (p2AncestorGender === 'Male') {\n                relation = `${translatedName1} هي عمة ${translatedName2}`;\n                score = 95;\n              } else {\n                relation = `${translatedName1} هي خالة ${translatedName2}`;\n                score = 94;\n              }\n            }\n            explanation = relationshipExplanation[1];\n          } else if (p1Level === 1 && p2Level === 3) {\n            const p2AncestorGender = pathToP2[1].gender;\n            const p2GreatAncestorGender = pathToP2[2].gender;\n            if (gender1 === 'Male') {\n              if (p2AncestorGender === 'Male') {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `${translatedName1} هو عم والد ${translatedName2}`;\n                  score = 80;\n                } else {\n                  relation = `${translatedName1} هو خال والد ${translatedName2}`;\n                  score = 75;\n                }\n              } else {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `${translatedName1} هو عم والدة ${translatedName2}`;\n                  score = 80;\n                } else {\n                  relation = `${translatedName1} هو خال والدة ${translatedName2}`;\n                  score = 70;\n                }\n              }\n            } else {\n              if (p2AncestorGender === 'Male') {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `${translatedName1} هي عمة والد ${translatedName2}`;\n                  score = 80;\n                } else {\n                  relation = `${translatedName1} هي خالة والد ${translatedName2}`;\n                  score = 75;\n                }\n              } else {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `${translatedName1} هي عمة والدة ${translatedName2}`;\n                  score = 80;\n                } else {\n                  relation = `${translatedName1} هي خالة والدة ${translatedName2}`;\n                  score = 75;\n                }\n              }\n            }\n            explanation = relationshipExplanation[2];\n          } else if (p1Level === 1 && p2Level === 4) {\n            const p2AncestorGender = pathToP2[1].gender;\n            const p2GreatAncestorGender = pathToP2[2].gender;\n            const p2GreatGrandAncestorGender = pathToP2[3].gender;\n            if (gender1 === 'Male') {\n              if (p2AncestorGender === 'Male') {\n                if (p2GreatAncestorGender === 'Male') {\n                  if (p2GreatGrandAncestorGender === 'Male') {\n                    relation = `${translatedName1} هو عم جد والد ${translatedName2}`;\n                    score = 85;\n                  } else {\n                    relation = `${translatedName1} هو عم جد والد ${translatedName2}`;\n                    score = 80;\n                  }\n                } else {\n                  relation = `${translatedName1} هو خال جد والد ${translatedName2}`;\n                  score = 75;\n                }\n              } else {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `${translatedName1} هو عم جد والدة ${translatedName2}`;\n                  score = 85;\n                } else {\n                  relation = `${translatedName1} هو خال جد والدة ${translatedName2}`;\n                  score = 70;\n                }\n              }\n            } else {\n              if (p2AncestorGender === 'Male') {\n                if (p2GreatAncestorGender === 'Male') {\n                  if (p2GreatGrandAncestorGender === 'Male') {\n                    relation = `${translatedName1} هي عمة جد والد ${translatedName2}`;\n                    score = 85;\n                  } else {\n                    relation = `${translatedName1} هي عمة جد والد ${translatedName2}`;\n                    score = 80;\n                  }\n                } else {\n                  relation = `${translatedName1} هي خالة جد والد ${translatedName2}`;\n                  score = 75;\n                }\n              } else {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `${translatedName1} هي عمة جد والدة ${translatedName2}`;\n                  score = 85;\n                } else {\n                  relation = `${translatedName1} هي خالة جد والدة ${translatedName2}`;\n                  score = 70;\n                }\n              }\n            }\n            explanation = relationshipExplanation[2];\n          } else if (p1Level === 2 && p2Level === 4) {\n            const p2AncestorGender = pathToP2[1].gender;\n            const p2GreatAncestorGender = pathToP2[2].gender;\n            if (gender1 === 'Male') {\n              if (p2AncestorGender === 'Male') {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `${translatedName1} هو جد الأول وجد جد ${translatedName2} إخوة`;\n                  score = 90;\n                } else {\n                  relation = `${translatedName1} هو جد الأول وجدة جد ${translatedName2} إخوة`;\n                  score = 70;\n                }\n              } else {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `${translatedName1} هو جد الأول وجدة جد ${translatedName2} إخوة`;\n                  score = 70;\n                } else {\n                  relation = `${translatedName1} هو جد الأول وجدة جد ${translatedName2} إخوة`;\n                  score = 70;\n                }\n              }\n            } else {\n              if (p2AncestorGender === 'Male') {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `${translatedName1} هي جدة الأول وجد جد ${translatedName2} إخوة`;\n                  score = 70;\n                } else {\n                  relation = `${translatedName1} هي جدة الأول وجدة جد ${translatedName2} إخوة`;\n                  score = 70;\n                }\n              } else {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `${translatedName1} هي جدة الأول وجدة جد ${translatedName2} إخوة`;\n                  score = 70;\n                } else {\n                  relation = `${translatedName1} هي جدة الأول وجدة جد ${translatedName2} إخوة`;\n                  score = 70;\n                }\n              }\n            }\n            explanation = relationshipExplanation[2];\n          } else if (p1Level === 3 && p2Level === 1) {\n            const p1GreatAncestorGender = pathToP1[2].gender;\n            if (gender1 === 'Male') {\n              if (p1GreatAncestorGender === 'Male') {\n                relation = `${translatedName1} هو حفيد اخ ${translatedName2}`;\n                score = 65;\n              } else {\n                relation = `${translatedName1} هو حفيد اخت ${translatedName2}`;\n                score = 65;\n              }\n            } else {\n              if (p1GreatAncestorGender === 'Male') {\n                relation = `${translatedName1} هي حفيدة اخ ${translatedName2}`;\n                score = 65;\n              } else {\n                relation = `${translatedName1} هي حفيدة اخت ${translatedName2}`;\n                score = 65;\n              }\n            }\n            explanation = relationshipExplanation[2];\n          } else if (p1Level === 2 && p2Level === 2) {\n            const p1AncestorGender = pathToP1[1].gender;\n            const p2AncestorGender = pathToP2[1].gender;\n            if (gender1 === 'Male') {\n              if (p2AncestorGender === 'Male') {\n                if (p1AncestorGender === 'Male') {\n                  // ولد عمه\n                  relation = `${translatedName1} إبن عم ${translatedName2}`;\n                  score = 90;\n                } else {\n                  relation = `${translatedName1} هو إبن عمّة ${translatedName2}`;\n                  score = 89;\n                }\n              } else {\n                if (p1AncestorGender === 'Male') {\n                  // ولد خاله\n                  relation = `${translatedName1} هو إبن خال ${translatedName2}`;\n                  score = 88;\n                } else {\n                  relation = `${translatedName1} هو إبن خالة ${translatedName2}`;\n                  score = 86;\n                }\n              }\n            } else {\n              if (p1AncestorGender === 'Male') {\n                if (p2AncestorGender === 'Male') {\n                  // بنت عمه\n                  relation = `${translatedName1} هي إبنة عمّ ${translatedName2}`;\n                  score = 90;\n                } else {\n                  relation = `${translatedName1} هي إبنة عمّة ${translatedName2}`;\n                  score = 89;\n                }\n              } else {\n                if (p2AncestorGender === 'Male') {\n                  // بنت خاله\n                  relation = `${translatedName1} هي إبنة خال ${translatedName2}`;\n                  score = 88;\n                } else {\n                  relation = `${translatedName1} هي إبنة خالة ${translatedName2}`;\n                  score = 86;\n                }\n              }\n            }\n            explanation = relationshipExplanation[1];\n          } else if (p1Level === 2 && p2Level === 3) {\n            const p1AncestorGender = pathToP1[1].gender;\n            const p2AncestorGender = pathToP2[1].gender;\n            if (gender1 === 'Male') {\n              if (p1AncestorGender === 'Male') {\n                if (p2AncestorGender === 'Male') {\n                  relation = `${translatedName1} هو إبن عم والد ${translatedName2}`;\n                  score = 80;\n                } else {\n                  relation = `${translatedName1} هو إبن خال والدة ${translatedName2}`;\n                  score = 78;\n                }\n              } else {\n                // mother's side\n                if (p2AncestorGender === 'Male') {\n                  // mother's brother's son\n                  relation = `${translatedName1} هو إبن عم والد ${translatedName2}.`;\n                  score = 74;\n                } else {\n                  // mother's brother's daughter\n                  relation = `${translatedName1} هو إبن عمّة والدة ${translatedName2}`;\n                  score = 72;\n                }\n              }\n            } else {\n              // If person1 is female\n              if (p1AncestorGender === 'Male') {\n                // father's side\n                if (p2AncestorGender === 'Male') {\n                  // father's brother's son\n                  relation = `${translatedName1} هي إبنة عم والد ${translatedName2}`;\n                  score = 80;\n                } else {\n                  // father's brother's daughter\n                  relation = `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\n                  score = 78;\n                }\n              } else {\n                // mother's side\n                if (p2AncestorGender === 'Male') {\n                  // mother's brother's son\n                  relation = `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\n                  score = 74;\n                } else {\n                  // mother's brother's daughter\n                  relation = `${translatedName1} هي إبنة عمة والدة ${translatedName2}`;\n                  score = 72;\n                }\n              }\n            }\n            explanation = relationshipExplanation[2];\n          } else if (p1Level === 4 && p2Level === 2) {\n            const p1GreatAncestorGender = pathToP1[3].gender; // P1 Great Ancestor\n            const p2AncestorGender = pathToP2[1].gender; // P2 Ancestor\n            if (p1GreatAncestorGender) {\n              if (p2AncestorGender === 'Male') {\n                if (p1GreatAncestorGender === 'Male') {\n                  relation = `جد ${translatedName1} هو إبن عم ${translatedName2}`;\n                  score = 65;\n                } else {\n                  relation = `جد ${translatedName1} هو إبن عمّة ${translatedName2}`;\n                  score = 65;\n                }\n              } else {\n                if (p1GreatAncestorGender === 'Male') {\n                  relation = `جد ${translatedName1} هو إبن خال ${translatedName2}`;\n                  score = 65;\n                } else {\n                  relation = `جد ${translatedName1} هو إبن خالة ${translatedName2}`;\n                  score = 65;\n                }\n              }\n            } else {\n              if (p2AncestorGender === 'Male') {\n                if (p1GreatAncestorGender === 'Male') {\n                  relation = `جدة ${translatedName1} هي إبنة عم ${translatedName2}`;\n                  score = 65;\n                } else {\n                  relation = `جدة ${translatedName1} هي إبنة عمّة ${translatedName2}`;\n                  score = 65;\n                }\n              } else {\n                if (p1GreatAncestorGender === 'Male') {\n                  relation = `جدة ${translatedName1} هي إبنة خال ${translatedName2}`;\n                  score = 65;\n                } else {\n                  relation = `جدة ${translatedName1} هي إبنة خالة ${translatedName2}`;\n                  score = 65;\n                }\n              }\n            }\n            explanation = relationshipExplanation[2];\n          } else if (p1Level === 3 && p2Level === 2) {\n            const p1AncestorGender = pathToP1[1].gender;\n            const p2AncestorGender = pathToP2[1].gender;\n            const p1GreatAncestorGender = pathToP1[2].gender;\n            if (p1AncestorGender === 'Male') {\n              // father's side\n              if (p2AncestorGender === 'Male') {\n                // father's brother's son\n                if (p1GreatAncestorGender === 'Male') {\n                  relation = `والد ${translatedName1} هو إبن عم ${translatedName2}`;\n                } else {\n                  relation = `والد ${translatedName1} هو إبن عمة ${translatedName2}`;\n                }\n              } else {\n                if (p1GreatAncestorGender === 'Male') {\n                  relation = `والد ${translatedName1} هو إبن خال ${translatedName2}`;\n                } else {\n                  relation = `والد ${translatedName1} هو إبن خالة ${translatedName2}`;\n                }\n              }\n            } else {\n              // mother's side\n              if (p2AncestorGender === 'Male') {\n                // mother's brother's son\n                if (p1GreatAncestorGender === 'Male') {\n                  relation = `والدة ${translatedName1} هي إبنة عم ${translatedName2}`;\n                } else {\n                  relation = `والدة ${translatedName1} هي إبنة عمة ${translatedName2}`;\n                }\n              } else {\n                if (p1GreatAncestorGender === 'Male') {\n                  relation = `والدة ${translatedName1} هي إبنة خال ${translatedName2}`;\n                } else {\n                  relation = `والدة ${translatedName1} هي إبنة خالة ${translatedName2}`;\n                }\n              }\n            }\n            score = 60;\n            explanation = relationshipExplanation[2];\n          } else if (p1Level === 3 && p2Level === 3) {\n            const p1AncestorGender = pathToP1[1].gender;\n            const p2AncestorGender = pathToP2[1].gender;\n            const p1GreatAncestorGender = pathToP1[2].gender;\n            const p2GreatAncestorGender = pathToP2[2].gender;\n            if (p1AncestorGender === 'Male') {\n              if (p2AncestorGender === 'Male') {\n                if (p1GreatAncestorGender === 'Male') {\n                  if (p2GreatAncestorGender === 'Male') {\n                    relation = `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\n                  } else {\n                    relation = `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\n                  }\n                } else {\n                  if (p2GreatAncestorGender === 'Male') {\n                    relation = `جدّة ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\n                  } else {\n                    relation = `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\n                  }\n                }\n              } else {\n                if (p1GreatAncestorGender === 'Male') {\n                  if (p2GreatAncestorGender === 'Male') {\n                    relation = `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأم إخوة.`;\n                  } else {\n                    relation = `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\n                  }\n                } else {\n                  if (p2GreatAncestorGender === 'Male') {\n                    relation = `جدّة ${translatedName1} من الأب و جد${translatedName2} من الأم إخوة.`;\n                  } else {\n                    relation = `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\n                  }\n                }\n              }\n            } else {\n              if (p2AncestorGender === 'Male') {\n                if (p1GreatAncestorGender === 'Male') {\n                  if (p2GreatAncestorGender === 'Male') {\n                    relation = `جدّ ${translatedName1} من الأم و جد${translatedName2} من الأب إخوة.`;\n                  } else {\n                    relation = `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\n                  }\n                } else {\n                  if (p2GreatAncestorGender === 'Male') {\n                    relation = `جدّة ${translatedName1} من الأم و جد ${translatedName2} من الأب إخوة.`;\n                  } else {\n                    relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب أخوات.`;\n                  }\n                }\n              } else {\n                if (p1GreatAncestorGender === 'Male') {\n                  if (p2GreatAncestorGender === 'Male') {\n                    relation = `جدّ ${translatedName1} من الأم و جد ${translatedName2} من الأم إخوة.`;\n                  } else {\n                    relation = `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\n                  }\n                } else {\n                  if (p2GreatAncestorGender === 'Male') {\n                    relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\n                  } else {\n                    relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\n                  }\n                }\n              }\n            }\n            explanation = relationshipExplanation[2];\n          } else if (p1Level === 4 && p2Level === 3) {\n            const p1AncestorGender = pathToP2[0].gender; // First ancestor of p2\n            const p2GreatAncestorGender = pathToP2[1].gender; // Second ancestor of p2\n            const p1GreatGreatAncestorGender = pathToP2[2].gender; // Third ancestor of p2\n\n            if (p1GreatGreatAncestorGender === 'Male') {\n              // Case when p1 is male\n              if (p1AncestorGender === 'Male') {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `جد اب ${translatedName1} و جد ${translatedName2} اخوة`;\n                  score = 75;\n                } else {\n                  relation = `جد اب ${translatedName1} و جدة ${translatedName2} اخوة`;\n                  score = 75;\n                }\n              } else {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `جد أم ${translatedName1} و جد ${translatedName2} اخوة`;\n                  score = 75;\n                } else {\n                  relation = `جد أم ${translatedName1} و جدة ${translatedName2} اخوة`;\n                  score = 75;\n                }\n              }\n            } else {\n              // Case when p1 is female\n              if (p1AncestorGender === 'Male') {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `جدة اب ${translatedName1} و جد ${translatedName2} اخوة`;\n                  score = 85;\n                } else {\n                  relation = `جدة اب ${translatedName1} و جدة ${translatedName2} اخوة`;\n                  score = 80;\n                }\n              } else {\n                if (p2GreatAncestorGender === 'Male') {\n                  relation = `جدة أم ${translatedName1} و جد ${translatedName2} اخوة`;\n                  score = 75;\n                } else {\n                  relation = `جدة أم ${translatedName1} و جدة ${translatedName2} اخوة`;\n                  score = 70;\n                }\n              }\n            }\n            explanation = relationshipExplanation[2];\n          } else if (p1Level === 3 && p2Level === 4) {\n            const p2AncestorGender = pathToP2[0].gender; // First ancestor of p2\n            const p1GreatAncestorGender = pathToP2[1].gender; // Second ancestor of p2\n            const p2GreatGreatAncestorGender = pathToP2[2].gender; // Third ancestor of p2\n\n            if (p1GreatAncestorGender === 'Male') {\n              // Case when p1 is male\n              if (p2AncestorGender === 'Male') {\n                if (p2GreatGreatAncestorGender === 'Male') {\n                  relation = `جد ${translatedName1} و جد أب ${translatedName2} اخوة`;\n                  score = 85;\n                } else {\n                  relation = `جد ${translatedName1} و جدة أب ${translatedName2} اخوة`;\n                  score = 80;\n                }\n              } else {\n                if (p2GreatGreatAncestorGender === 'Male') {\n                  relation = `جد ${translatedName1} و جد أم ${translatedName2} اخوة`;\n                  score = 75;\n                } else {\n                  relation = `جد ${translatedName1} و جدة أم ${translatedName2} اخوة`;\n                  score = 70;\n                }\n              }\n            } else {\n              // Case when p1 is female\n              if (p2AncestorGender === 'Male') {\n                if (p2GreatGreatAncestorGender === 'Male') {\n                  relation = `جدة ${translatedName1} و جد أب ${translatedName2} اخوة`;\n                  score = 85;\n                } else {\n                  relation = `جدة ${translatedName1} و جدة أب ${translatedName2} أخوات`;\n                  score = 80;\n                }\n              } else {\n                if (p2GreatGreatAncestorGender === 'Male') {\n                  relation = `جدة ${translatedName1} و جد أم ${translatedName2} اخوة`;\n                  score = 75;\n                } else {\n                  relation = `جدة ${translatedName1} و جدة أم ${translatedName2} أخوات`;\n                  score = 70;\n                }\n              }\n            }\n            explanation = relationshipExplanation[2];\n          } else if (p1Level === 4 && p2Level === 1) {\n            const p1GreatAncestorGender = pathToP1[2].gender;\n            const p1GreatGrandAncestorGender = pathToP1[3].gender;\n            if (gender1 === 'Male') {\n              if (p1GreatAncestorGender === 'Male') {\n                if (p1GreatGrandAncestorGender === 'Male') {\n                  relation = `${translatedName1} هو حفيد إبن أخ ${translatedName2}`;\n                  score = 85;\n                } else {\n                  relation = `${translatedName1} هو حفيد إبن أخت ${translatedName2}`;\n                  score = 80;\n                }\n              } else {\n                if (p1GreatGrandAncestorGender === 'Male') {\n                  relation = `${translatedName1} هو حفيد إبنة أخ ${translatedName2}`;\n                  score = 85;\n                } else {\n                  relation = `${translatedName1} هو حفيد إبنة أخت ${translatedName2}`;\n                  score = 80;\n                }\n              }\n            } else {\n              if (p1GreatAncestorGender === 'Male') {\n                if (p1GreatGrandAncestorGender === 'Male') {\n                  relation = `${translatedName1} هي حفيدة إبن أخ ${translatedName2}`;\n                  score = 85;\n                } else {\n                  relation = `${translatedName1} هي حفيدة إبن أخت ${translatedName2}`;\n                  score = 80;\n                }\n              } else {\n                if (p1GreatGrandAncestorGender === 'Male') {\n                  relation = `${translatedName1} هي حفيدة إبنة أخ ${translatedName2}`;\n                  score = 85;\n                } else {\n                  relation = `${translatedName1} هي حفيدة إبنة أخت ${translatedName2}`;\n                  score = 80;\n                }\n              }\n            }\n            explanation = relationshipExplanation[2];\n          } else if (p1Level === 4 && p2Level === 4) {\n            const p1AncestorGender = pathToP2[1].gender;\n            const p2AncestorGender = pathToP1[1].gender;\n            const p1GreatGreatAncestorGender = pathToP1[3].gender;\n            const p2GreatGreatAncestorGender = pathToP2[3].gender;\n            if (p1GreatGreatAncestorGender === 'Male') {\n              if (p1AncestorGender === 'Male') {\n                if (p2AncestorGender === 'Male') {\n                  if (p2GreatGreatAncestorGender === 'Male') {\n                    relation = `جد أب ${translatedName1} و جد أب ${translatedName2} اخوة`;\n                    score = 85;\n                  } else {\n                    relation = `جد أب ${translatedName1} و جدة أب ${translatedName2} اخوة`;\n                    score = 80;\n                  }\n                } else {\n                  if (p2GreatGreatAncestorGender === 'Male') {\n                    relation = `جد أم ${translatedName1} و جد أم ${translatedName2} اخوة`;\n                    score = 85;\n                  } else {\n                    relation = `جد أم ${translatedName1} و جدة أم ${translatedName2} اخوة`;\n                    score = 80;\n                  }\n                }\n              } else {\n                if (p2AncestorGender === 'Male') {\n                  if (p2GreatGreatAncestorGender === 'Male') {\n                    relation = `جد أب ${translatedName1} و جد أب ${translatedName2} اخوة`;\n                    score = 85;\n                  } else {\n                    relation = `جد أب ${translatedName1} و جدة أب ${translatedName2} اخوة`;\n                    score = 80;\n                  }\n                } else {\n                  if (p2GreatGreatAncestorGender === 'Male') {\n                    relation = `جد أم ${translatedName1} و جد أم ${translatedName2} اخوة`;\n                    score = 85;\n                  } else {\n                    relation = `جد أم ${translatedName1} و جدة أم ${translatedName2} اخوة`;\n                    score = 80;\n                  }\n                }\n              }\n            } else {\n              if (p1AncestorGender === 'Male') {\n                if (p2AncestorGender === 'Male') {\n                  if (p2GreatGreatAncestorGender === 'Male') {\n                    relation = `جدة أب ${translatedName1} و جد أب ${translatedName2} اخوة`;\n                    score = 85;\n                  } else {\n                    relation = `جدة أب ${translatedName1} و جدة أب ${translatedName2} اخوة`;\n                    score = 80;\n                  }\n                } else {\n                  if (p2GreatGreatAncestorGender === 'Male') {\n                    relation = `جدة أم ${translatedName1} و جد أم ${translatedName2} اخوة`;\n                    score = 85;\n                  } else {\n                    relation = `جدة أم ${translatedName1} و جدة أم ${translatedName2} اخوة`;\n                    score = 80;\n                  }\n                }\n              } else {\n                if (p2AncestorGender === 'Male') {\n                  if (p2GreatGreatAncestorGender === 'Male') {\n                    relation = `جدة أب ${translatedName1} و جد أب ${translatedName2} اخوة`;\n                    score = 85;\n                  } else {\n                    relation = `جدة أب ${translatedName1} و جدة أب ${translatedName2} اخوة`;\n                    score = 80;\n                  }\n                } else {\n                  if (p2GreatGreatAncestorGender === 'Male') {\n                    relation = `جدة أم ${translatedName1} و جد أم ${translatedName2} اخوة`;\n                    score = 85;\n                  } else {\n                    relation = `جدة أم ${translatedName1} و جدة أم ${translatedName2} اخوة`;\n                    score = 80;\n                  }\n                }\n              }\n            }\n            explanation = relationshipExplanation[2];\n          } else {\n            setLoading(false);\n            console.log('No direct relation found.');\n            relation = await getMarriageRelation(session, person1ID, person2ID, translatedName1, translatedName2, gender1, gender2);\n            relationshipType = \"Marriage-related\";\n            return {\n              relation,\n              score,\n              generation: Math.abs(p1Level - p2Level),\n              levelsTuple: {\n                levelFromP1,\n                levelFromP2\n              },\n              explanation,\n              ancestor,\n              relationshipType,\n              treeData,\n              person1ID,\n              person2ID,\n              person1: person1Matches[0],\n              person2: person2Matches[0]\n            };\n          }\n          if (relation != '') {\n            setLoading(false);\n            console.log(relation);\n            relationshipType = \"Blood\";\n            return {\n              relation,\n              score,\n              generation: Math.abs(p1Level - p2Level),\n              levelsTuple: {\n                levelFromP1,\n                levelFromP2\n              },\n              explanation,\n              ancestor,\n              relationshipType,\n              treeData,\n              person1ID,\n              person2ID,\n              person1: person1Matches[0],\n              person2: person2Matches[0]\n            };\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error in relationship lookup:', error);\n      setError(`❌ خطأ: ${error.message || error}`);\n      if (errorContainer) {\n        errorContainer.innerText = `❌ خطأ: ${error.message || error}`;\n      }\n      setLoading(false);\n      return '';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relation-page\",\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"relation-form-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"section-title\",\n          children: \"\\u0645\\u0627\\u0647\\u064A \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629 \\u0628\\u064A\\u0646\\u0647\\u0645\\u0627\\u061F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1831,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"DescriptionZone\",\n          children: \"\\u0627\\u0644\\u0647\\u062F\\u0641 \\u0645\\u0646 \\u0647\\u0630\\u0647 \\u0627\\u0644\\u0635\\u0641\\u062D\\u0629 \\u0647\\u0648 \\u062A\\u062D\\u062F\\u064A\\u062F \\u0635\\u0644\\u0629 \\u0627\\u0644\\u0642\\u0631\\u0627\\u0628\\u0629 \\u0628\\u064A\\u0646 \\u0634\\u062E\\u0635\\u064A\\u0646 \\u0628\\u0646\\u0627\\u0621\\u064B\\u0627 \\u0639\\u0644\\u0649 \\u0627\\u0633\\u0645\\u0647\\u0645. \\u0643\\u0644 \\u0645\\u0627\\u0639\\u0644\\u064A\\u0643 \\u0641\\u0639\\u0644\\u0647 \\u0647\\u0648 \\u0627\\u062F\\u062E\\u0627\\u0644 \\u0627\\u0644\\u0627\\u0633\\u0645 \\u0644\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0627\\u0648\\u0644 \\u0648\\u0627\\u0644\\u062B\\u0627\\u0646\\u064A \\u0648\\u062B\\u0645 \\u0627\\u0644\\u0646\\u0642\\u0631 \\u0639\\u0644\\u0649 \\\"\\u0627\\u0644\\u062A\\u062D\\u0642\\u0642 \\u0645\\u0646 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\\\" \\u0633\\u062A\\u0638\\u0647\\u0631 \\u0644\\u0643 \\u0627\\u0644\\u0646\\u062A\\u064A\\u062C\\u0629 \\u0641\\u064A \\u0627\\u0633\\u0647\\u0644 \\u0627\\u0644\\u0635\\u0641\\u062D\\u0629 \\u0648\\u0627\\u0644\\u062A\\u064A \\u064A\\u062A\\u0648\\u0636\\u062D \\u0644\\u0643 \\u0646\\u0648\\u0639 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629 \\u0648\\u0645\\u062F\\u0649 \\u0642\\u0631\\u0627\\u0628\\u062A\\u0647\\u0627\\u061F \\u0641\\u064A \\u062D\\u0627\\u0644 \\u0648\\u062C\\u0648\\u062F \\u0627\\u064A \\u062A\\u0634\\u0627\\u0628\\u0647\\u0627\\u062A \\u0627\\u0648 \\u062A\\u0643\\u0631\\u0627\\u0631\\u0627\\u062A \\u0641\\u064A \\u0627\\u0644\\u0627\\u0633\\u0645\\u0627\\u0621 \\u0633\\u064A\\u0645 \\u062A\\u0648\\u0641\\u064A\\u0631 \\u062E\\u064A\\u0627\\u0631\\u0627\\u062A \\u0644\\u062A\\u062D\\u062F\\u064A\\u062F \\u0627\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0635\\u062D\\u064A\\u062D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1832,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: fetchRelationship,\n          className: \"relation-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"\\u0627\\u0644\\u0625\\u0633\\u0645 \\u0627\\u0644\\u0643\\u0627\\u0645\\u0644 \\u0627\\u0644\\u0623\\u0648\\u0644\",\n              value: person1,\n              onChange: e => setPerson1(e.target.value),\n              className: \"inputNames\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1839,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1838,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"\\u0627\\u0644\\u0625\\u0633\\u0645 \\u0627\\u0644\\u0643\\u0627\\u0645\\u0644 \\u0627\\u0644\\u062B\\u0627\\u0646\\u064A\",\n              value: person2,\n              onChange: e => setPerson2(e.target.value),\n              className: \"inputNames\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1848,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1847,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ButtonSection\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"button checkButton\",\n              children: \"\\u062A\\u062D\\u0642\\u0642 \\u0645\\u0646 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1857,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"reset\",\n              className: \"button resetButton\",\n              children: \"\\u0625\\u0644\\u063A\\u0627\\u0621\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1858,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"button swapButton\",\n              onClick: () => {\n                // Swap the values of person1 and person2\n                setPerson1(person2);\n                setPerson2(person1);\n              },\n              children: \"\\u062A\\u0628\\u062F\\u064A\\u0644 \\u0627\\u0644\\u0623\\u0634\\u062E\\u0627\\u0635\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1859,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1856,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1837,\n          columnNumber: 9\n        }, this), (duplicates.person1.length > 0 || duplicates.person2.length > 0) && /*#__PURE__*/_jsxDEV(\"aside\", {\n          className: \"duplicates-panel\",\n          children: [duplicates.person1.length > 0 && !selectedPerson1 && /*#__PURE__*/_jsxDEV(\"section\", {\n            className: \"duplicates-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"\\uD83E\\uDDE0 \\u0623\\u062E\\u062A\\u0631 \\u0627\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0645\\u0642\\u0635\\u0648\\u062F (\\u0627\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0623\\u0648\\u0644):\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1877,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: duplicates.person1.map((p, idx) => {\n                const fullName = (p.name ? `${translateName(p.name)} بن ` : '') + (p.father ? `${translateName(p.father)} بن ` : '') + (p.grandfather ? `${translateName(p.grandfather)} ` : '') + (p.lastName ? `${translateName(p.lastName)}` : '');\n                return /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"duplicate-button\",\n                    onClick: () => {\n                      console.log(\"👆 Selected person1 fullName:\", fullName);\n                      setSelectedPerson1(fullName); // Save the selected person1\n                    },\n                    children: fullName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1888,\n                    columnNumber: 19\n                  }, this)\n                }, `p1-${idx}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1887,\n                  columnNumber: 17\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1878,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1876,\n            columnNumber: 9\n          }, this), duplicates.person2.length > 0 && !selectedPerson2 && /*#__PURE__*/_jsxDEV(\"section\", {\n            className: \"duplicates-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"\\uD83E\\uDDE0 \\u0623\\u062E\\u062A\\u0631 \\u0627\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u0645\\u0642\\u0635\\u0648\\u062F (\\u0627\\u0644\\u0634\\u062E\\u0635 \\u0627\\u0644\\u062B\\u0627\\u0646\\u064A):\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1907,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: duplicates.person2.map((p, idx) => {\n                const fullName = (p.name ? `${translateName(p.name)} بن ` : '') + (p.father ? `${translateName(p.father)} بن ` : '') + (p.grandfather ? `${translateName(p.grandfather)} ` : '') + (p.lastName ? `${translateName(p.lastName)}` : '');\n                return /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"duplicate-button\",\n                    onClick: e => {\n                      console.log(\"👤 Selected person2 fullName:\", fullName);\n                      setSelectedPerson2(fullName); // Save the selected person2\n                      fetchRelationship(e, selectedPerson1, fullName); // Call with both selected names\n                    },\n                    children: fullName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1918,\n                    columnNumber: 19\n                  }, this)\n                }, `p2-${idx}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1917,\n                  columnNumber: 17\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1908,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1906,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1873,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1830,\n        columnNumber: 7\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1942,\n        columnNumber: 17\n      }, this), \" \", loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1945,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: loadingMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1946,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1944,\n        columnNumber: 9\n      }, this), !loading && relationship && !error && /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"relationship-result\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"foundPersons\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\u0627\\u0644\\u0623\\u0634\\u062E\\u0627\\u0635 \\u0627\\u0644\\u0630\\u064A\\u0646 \\u062A\\u0645 \\u0627\\u0644\\u0628\\u062D\\u062B \\u0639\\u0646\\u0647\\u0645:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1953,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"person-card\",\n            children: /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [translateName(relationship.relationshipPerson1Details.name), relationship.relationshipPerson1Details.father && ` بن ${translateName(relationship.relationshipPerson1Details.father)}`, relationship.relationshipPerson1Details.grandfather && ` بن ${translateName(relationship.relationshipPerson1Details.grandfather)}`, relationship.relationshipPerson1Details.lastName && ` ${translateName(relationship.relationshipPerson1Details.lastName)}`]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1955,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1954,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"person-card\",\n            children: /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [translateName(relationship.relationshipPerson2Details.name), relationship.relationshipPerson2Details.father && ` بن ${translateName(relationship.relationshipPerson2Details.father)}`, relationship.relationshipPerson2Details.grandfather && ` بن ${translateName(relationship.relationshipPerson2Details.grandfather)}`, relationship.relationshipPerson2Details.lastName && ` ${translateName(relationship.relationshipPerson2Details.lastName)}`]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1964,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1963,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1952,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          id: \"resultTitle\",\n          children: \"\\u0646\\u062A\\u064A\\u062C\\u0629 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1974,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"relationText\",\n          children: relationship.relationshipDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1975,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"result-table\",\n            children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"\\u062F\\u0631\\u062C\\u0629 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1980,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"score-cell\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"score-bar-wrapper\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"score-bar-fill\",\n                      style: {\n                        width: `${(_relationship$relatio = relationship.relationshipScore) !== null && _relationship$relatio !== void 0 ? _relationship$relatio : 0}%`\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1983,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1982,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"score-meta\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"score-value\",\n                      children: (_relationship$relatio2 = relationship.relationshipScore) !== null && _relationship$relatio2 !== void 0 ? _relationship$relatio2 : 'N/A'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1986,\n                      columnNumber: 23\n                    }, this), relationship.relationshipScore !== null && relationship.relationshipScore !== undefined && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: relationship.relationshipScore >= 80 ? \"score-category high\" : relationship.relationshipScore >= 60 ? \"score-category medium\" : \"score-category low\",\n                      children: relationship.relationshipScore >= 80 ? \"قوية\" : relationship.relationshipScore >= 60 ? \"متوسطة\" : \"ضعيفة\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1988,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1985,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1981,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1979,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"\\u0646\\u0648\\u0639 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2008,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"relationship-tag\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `tag ${relationship.relationshipType}`,\n                    children: relationship.relationshipType === \"Blood\" ? \"دم\" : relationship.relationshipType === \"Marriage-related\" ? \"زواج مرتبط\" : relationship.relationshipType === \"Marriage\" ? \"زواج\" : relationship.relationshipType\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2010,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2009,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2007,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"\\u062A\\u0641\\u0633\\u064A\\u0631 \\u0625\\u0636\\u0627\\u0641\\u064A\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2020,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"relation-explanation\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"relation-explanation-type\",\n                    children: (_relationship$relatio3 = relationship.relationshipExplanationType) !== null && _relationship$relatio3 !== void 0 ? _relationship$relatio3 : 'نوع التفسير غير متاح'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2022,\n                    columnNumber: 21\n                  }, this), \":\", (_relationship$relatio4 = relationship.relationshipExplanationDesc) !== null && _relationship$relatio4 !== void 0 ? _relationship$relatio4 : \"لا يوجد تفسير متاح.\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2021,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2019,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"\\u0639\\u062F\\u062F \\u0627\\u0644\\u0623\\u062C\\u064A\\u0627\\u0644 \\u0628\\u064A\\u0646\\u0647\\u0645\\u0627 \\u062D\\u0633\\u0628 \\u0627\\u0644\\u062C\\u062F \\u0627\\u0644\\u0645\\u0634\\u062A\\u0631\\u0643\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2030,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"generation-distance\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"tooltip-container\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      id: \"numGen\",\n                      children: (_relationship$relatio5 = relationship.relationshipGenerationGap) !== null && _relationship$relatio5 !== void 0 ? _relationship$relatio5 : '-'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2033,\n                      columnNumber: 23\n                    }, this), \" \\u0623\\u062C\\u064A\\u0627\\u0644\", /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"custom-tooltip\",\n                      children: \"\\u0639\\u062F\\u062F \\u0627\\u0644\\u0623\\u062C\\u064A\\u0627\\u0644 \\u0647\\u0648 \\u0639\\u062F\\u062F \\u0627\\u0644\\u0623\\u0634\\u062E\\u0627\\u0635 \\u0627\\u0644\\u0641\\u0627\\u0635\\u0644\\u064A\\u0646 \\u0641\\u064A \\u0634\\u062C\\u0631\\u0629 \\u0627\\u0644\\u0639\\u0627\\u0626\\u0644\\u0629 \\u0628\\u064A\\u0646 \\u0627\\u0644\\u0634\\u062E\\u0635\\u064A\\u0646.\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2034,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2032,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2031,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2029,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"tooltip-container\",\n                    children: [\"\\u0627\\u0644\\u062C\\u062F \\u0627\\u0644\\u0645\\u0634\\u062A\\u0631\\u0643\", /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"custom-tooltip\",\n                      children: \"\\u0639\\u062F\\u062F \\u0627\\u0644\\u0623\\u062C\\u064A\\u0627\\u0644 \\u0647\\u0648 \\u0639\\u062F\\u062F \\u0627\\u0644\\u0623\\u0634\\u062E\\u0627\\u0635 \\u0627\\u0644\\u0641\\u0627\\u0635\\u0644\\u064A\\u0646 \\u0641\\u064A \\u0634\\u062C\\u0631\\u0629 \\u0627\\u0644\\u0639\\u0627\\u0626\\u0644\\u0629 \\u0628\\u064A\\u0646 \\u0627\\u0644\\u0634\\u062E\\u0635\\u064A\\u0646.\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2044,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2042,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2041,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"generation-distance\",\n                  children: [((_relationship$commonA = relationship.commonAncestor) === null || _relationship$commonA === void 0 ? void 0 : _relationship$commonA.ancestorName) && `${(_relationship$commonA2 = relationship.commonAncestor) === null || _relationship$commonA2 === void 0 ? void 0 : _relationship$commonA2.ancestorName} بن `, ((_relationship$commonA3 = relationship.commonAncestor) === null || _relationship$commonA3 === void 0 ? void 0 : _relationship$commonA3.ancestorFatherName) && `${(_relationship$commonA4 = relationship.commonAncestor) === null || _relationship$commonA4 === void 0 ? void 0 : _relationship$commonA4.ancestorFatherName} بن `, ((_relationship$commonA5 = relationship.commonAncestor) === null || _relationship$commonA5 === void 0 ? void 0 : _relationship$commonA5.ancestorGrandFatherName) && `${(_relationship$commonA6 = relationship.commonAncestor) === null || _relationship$commonA6 === void 0 ? void 0 : _relationship$commonA6.ancestorGrandFatherName} `, ((_relationship$commonA7 = relationship.commonAncestor) === null || _relationship$commonA7 === void 0 ? void 0 : _relationship$commonA7.ancestorLastName) && `${(_relationship$commonA8 = relationship.commonAncestor) === null || _relationship$commonA8 === void 0 ? void 0 : _relationship$commonA8.ancestorLastName}`]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2049,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2040,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1978,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1977,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tree-wrapper\",\n            style: {\n              height: `${Math.max((Math.max((_relationship$relatio6 = (_relationship$relatio7 = relationship.relationshipLevels) === null || _relationship$relatio7 === void 0 ? void 0 : _relationship$relatio7.levelFromP1) !== null && _relationship$relatio6 !== void 0 ? _relationship$relatio6 : 0, (_relationship$relatio8 = (_relationship$relatio9 = relationship.relationshipLevels) === null || _relationship$relatio9 === void 0 ? void 0 : _relationship$relatio9.levelFromP2) !== null && _relationship$relatio8 !== void 0 ? _relationship$relatio8 : 0) + 1) * 100, 100 // Ensure minimum height is 100px\n              ) + 1}px`\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"titleTree\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2065,\n              columnNumber: 17\n            }, this), relationship.ancestorstreeData && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tree-container\",\n              children: /*#__PURE__*/_jsxDEV(Tree, {\n                data: relationship.ancestorstreeData,\n                orientation: \"vertical\",\n                pathFunc: \"step\",\n                nodeSize: {\n                  x: 50,\n                  y: 90\n                },\n                separation: {\n                  siblings: 3,\n                  nonSiblings: 3\n                },\n                translate: {\n                  x: 325,\n                  y: 27\n                },\n                renderCustomNodeElement: ({\n                  nodeDatum\n                }) => /*#__PURE__*/_jsxDEV(\"g\", {\n                  className: \"tree-node\",\n                  children: [/*#__PURE__*/_jsxDEV(\"title\", {\n                    children: nodeDatum.id\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2078,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n                    className: \"tree-node-rect\",\n                    x: \"-50\",\n                    y: \"-20\",\n                    width: \"100\",\n                    height: \"40\",\n                    style: {\n                      fill: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID ? '#d3f9d8' // Leaf node color (light green)\n                      : nodeDatum.id === relationship.commonAncestor.ancestorID ? '#ffe4b5' // Ancestor node color (light yellow)\n                      : '#ffffff',\n                      // Default color for other nodes\n                      stroke: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID ? '#4caf50' // Leaf node border (green)\n                      : nodeDatum.id === relationship.commonAncestor.ancestorID ? '#ffa500' // Ancestor node border (orange)\n                      : '#4a90e2',\n                      // Default border color\n                      strokeWidth: '2.5px',\n                      rx: '10',\n                      // Rounded corners\n                      ry: '10' // Rounded corners\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2079,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                    className: \"tree-node-text\",\n                    x: \"0\",\n                    y: \"5\",\n                    style: {\n                      fontSize: '16px',\n                      fontFamily: 'Cairo',\n                      fill: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID ? '#388e3c' // Leaf node text color (dark green)\n                      : nodeDatum.id === relationship.commonAncestor.ancestorID ? '#ff9800' // Ancestor node text color (orange)\n                      : '#333',\n                      // Default text color (dark gray)\n                      textAnchor: 'middle',\n                      dominantBaseline: 'middle',\n                      letterSpacing: '1px',\n                      strokeWidth: '1px',\n                      pointerEvents: 'none'\n                    },\n                    children: translateName(nodeDatum.name)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2102,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2077,\n                  columnNumber: 22\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2069,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2068,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2058,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1976,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1951,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1828,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1825,\n    columnNumber: 5\n  }, this);\n};\n_s(RelationPage, \"ElnPfDqa3x0mWkcyYxhfN/J1kIA=\");\n_c = RelationPage;\nexport default RelationPage;\nvar _c;\n$RefreshReg$(_c, \"RelationPage\");","map":{"version":3,"names":["React","useEffect","useState","Tree","jsxDEV","_jsxDEV","translations","require","compoundNames","config","neo4jURI","process","env","REACT_APP_NEO4J_URI","neo4jUser","REACT_APP_NEO4J_USER","neo4jPassword","REACT_APP_NEO4J_PASSWORD","driver","auth","basic","session","countBenAndBent","str","matches","match","length","isCompoundName","name","Object","values","includes","splitName","fullName","parts","replace","trim","split","console","log","bentCount","compundName","personName","fatherName","grandfatherName","familyName","buildTreePath","path","reduceRight","acc","person","id","toNumber","lastName","children","mergePaths","pathToP1","pathToP2","ancestor","branch1","slice","branch2","push","undefined","translateName","language","reverseTranslations","fromEntries","entries","map","key","value","reverseCompound","dict","compoundDict","normalized","nameParts","translatedParts","part","join","RelationPage","_s","_relationship$relatio","_relationship$relatio2","_relationship$relatio3","_relationship$relatio4","_relationship$relatio5","_relationship$commonA","_relationship$commonA2","_relationship$commonA3","_relationship$commonA4","_relationship$commonA5","_relationship$commonA6","_relationship$commonA7","_relationship$commonA8","_relationship$relatio6","_relationship$relatio7","_relationship$relatio8","_relationship$relatio9","person1","setPerson1","person2","setPerson2","relationship","setRelationship","duplicates","setDuplicates","error","setError","selectedPerson1","setSelectedPerson1","selectedPerson2","setSelectedPerson2","loading","setLoading","loadingMessage","setLoadingMessage","fetchRelationship","e","customPerson1","customPerson2","preventDefault","relationshipDescription","relationshipScore","result","getRelationship","_result$duplicates","message","_result$person","_result$person2","_result$score","_result$levelsTuple","_result$generation","_result$explanation$t","_result$explanation","_result$explanation$e","_result$explanation2","_result$relationshipT","_result$ancestor","_result$treeData","_result$person1ID","_result$person2ID","relation","relationshipPerson1Details","relationshipPerson2Details","score","relationshipLevels","levelsTuple","relationshipGenerationGap","generation","relationshipExplanationType","explanation","type","relationshipExplanationDesc","relationshipType","commonAncestor","ancestorstreeData","treeData","person1ID","person2ID","checkMarriage","gender1","gender2","areMarried","run","records","record","P1","get","properties","P2","getMarriageRelation","translatedName1","translatedName2","_ownRecord$get$toNumb","_ownRecord$get","_ownRecord$get$toNumb2","_ownRecord$get2","_ownRecord$get3","_ownRecord$get4","_ownRecord$get5","_ownRecord$get6","_spouseRecord$get$toN","_spouseRecord$get","_spouseRecord$get$toN2","_spouseRecord$get2","_spouseRecord$get3","_spouseRecord$get4","_spouseRecord$get5","ownFamilyQuery","ownResult","personId","ownRecord","fatherId","motherId","siblingIds","siblingSpouseIds","childIds","fchildrenSpouseIds","spouseFamilyQuery","spouseResult","spouseRecord","sFatherId","sMotherId","sSiblingIds","sSiblingSpouseIds","childrenSpouseIds","isIn","list","some","getAncestors","gender","spouseOfAncestor","levelFromP1","levelFromP2","pathFromAncestorToP1","pathFromAncestorToP2","getPersonMatches","cypherQuery","queryParamsObject","father","grandfather","Error","close","person1FullName","person2FullName","isArabic","text","test","relationshipExplanation","splitPerson1","splitPerson2","errorContainer","document","getElementById","person1Name","person1Matches","person1FatherName","person1GrandfatherName","person1LastName","person2Matches","person2Name","person2FatherName","person2GrandfatherName","person2LastName","marraigeRecord","relationRecord","ancestorID","ancestorName","ancestorLastName","ancestorFatherName","ancestorGrandFatherName","ancestorGender","reverse","a","p1Level","p2Level","p2GreatAncestorGender","p1GreatAncestorGender","p1AncestorGender","p2AncestorGender","p2GreatGrandAncestorGender","p1GreatGreatAncestorGender","p2GreatGreatAncestorGender","p1GreatGrandAncestorGender","Math","abs","innerText","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","placeholder","onChange","target","onClick","p","idx","class","style","width","height","max","data","orientation","pathFunc","nodeSize","x","y","separation","siblings","nonSiblings","translate","renderCustomNodeElement","nodeDatum","fill","stroke","strokeWidth","rx","ry","fontSize","fontFamily","textAnchor","dominantBaseline","letterSpacing","pointerEvents","_c","$RefreshReg$"],"sources":["D:/Study/Projects/Copy 4/client/src/components/RelationChecker.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Tree from 'react-d3-tree';\r\nimport './RelationChecker.css';\r\nconst translations = require('./translation.json');\r\nconst compoundNames = require('./compundNames.json');\r\nrequire('dotenv').config();\r\n\r\nconst neo4jURI = process.env.REACT_APP_NEO4J_URI;\r\nconst neo4jUser = process.env.REACT_APP_NEO4J_USER;\r\nconst neo4jPassword = process.env.REACT_APP_NEO4J_PASSWORD;\r\n\r\nconst driver = require('neo4j-driver').driver(\r\n    neo4jURI,\r\n    require('neo4j-driver').auth.basic(neo4jUser, neo4jPassword)\r\n);\r\nconst session = driver.session();\r\n\r\nfunction countBenAndBent(str) {\r\n  const matches = str.match(/\\b(ben|bent)\\b/gi);\r\n  return matches ? matches.length : 0;\r\n}\r\n\r\nfunction isCompoundName(name) {\r\n  return Object.values(compoundNames).includes(name);\r\n}\r\n\r\nfunction splitName(fullName) {\r\n  const parts = fullName.replace(/\\s+(ben|bent)\\s+/gi, ' ').trim().split(/\\s+/);\r\n  console.log(parts);\r\n  const bentCount = countBenAndBent(fullName);\r\n  console.log(bentCount);\r\n  let compundName;\r\n\r\n  if (parts.length === 2) {\r\n    if (bentCount === 0) {\r\n      if (isCompoundName(parts[0]+ \" \" + parts[1])){\r\n        compundName = `${parts[0]} ${parts[1]}`;\r\n        return {\r\n          personName: compundName,\r\n          fatherName: \"\",\r\n          grandfatherName: \"\",\r\n          familyName: \"\"\r\n        };\r\n      }\r\n      else{\r\n        return {\r\n          personName: parts[0],\r\n          fatherName: \"\",\r\n          grandfatherName: \"\",\r\n          familyName: parts[1]\r\n        };\r\n      }\r\n    } \r\n    else if (bentCount === 1) {\r\n      return {\r\n        personName: parts[0],\r\n        fatherName: parts[1],\r\n        grandfatherName: \"\",\r\n        familyName: \"\"\r\n      };\r\n    }\r\n  } \r\n\r\n  else if (parts.length === 3) {\r\n    if (bentCount === 1) {\r\n      if (isCompoundName(parts[0]+ \" \" + parts[1])){\r\n        console.log(\"COMPUND DETECTED\");\r\n        compundName = `${parts[0]} ${parts[1]}`;\r\n        return {\r\n          personName: compundName,\r\n          fatherName: parts[2],\r\n          grandfatherName: \"\",\r\n          familyName: \"\"\r\n        };\r\n      }\r\n      else if (isCompoundName(parts[1]+ \" \" + parts[2])){\r\n          console.log(\"COMPUND DETECTED\");\r\n          compundName = `${parts[1]} ${parts[2]}`;\r\n          return {\r\n            personName: parts[0],\r\n            fatherName: compundName,\r\n            grandfatherName: \"\",\r\n            familyName: \"\"\r\n          };\r\n        }\r\n      else{\r\n        return {\r\n          personName: parts[0],\r\n          fatherName: parts[1],\r\n          grandfatherName: \"\",\r\n          familyName: parts[2]\r\n        };}\r\n        \r\n    }\r\n    else if (bentCount === 2) {\r\n      return {\r\n        personName: parts[0],\r\n        fatherName: parts[1],\r\n        grandfatherName: parts[2],\r\n        familyName: \"\"\r\n      };\r\n    }\r\n  }\r\n\r\n  else if (parts.length === 4) {\r\n    if (bentCount === 1) {\r\n      if (isCompoundName(parts[0]+ \" \" + parts[1]) && isCompoundName(parts[2]+ \" \" + parts[3])){\r\n        return {\r\n          personName: `${parts[0]} ${parts[1]}`,\r\n          fatherName: `${parts[2]} ${parts[3]}`,\r\n          grandfatherName: \"\",\r\n          familyName: \"\"\r\n        };\r\n      }\r\n      if (isCompoundName(parts[0]+ \" \" + parts[1])){\r\n        return {\r\n          personName: `${parts[0]} ${parts[1]}`,\r\n          fatherName: parts[2],\r\n          grandfatherName: \"\",\r\n          familyName: parts[3]\r\n        };\r\n      }\r\n      if (isCompoundName(parts[1]+ \" \" + parts[2])){\r\n        return {\r\n          personName: parts[0],\r\n          fatherName: `${parts[1]} ${parts[2]}`,\r\n          grandfatherName: \"\",\r\n          familyName: parts[3]\r\n        };\r\n      }\r\n    }\r\n    else if (bentCount === 2){\r\n        if (isCompoundName(parts[0]+ \" \" + parts[1])){\r\n          return {\r\n            personName: `${parts[0]} ${parts[1]}`,\r\n            fatherName: parts[2],\r\n            grandfatherName: parts[3],\r\n            familyName: \"\"\r\n          };\r\n        }\r\n        if (isCompoundName(parts[1] + \" \" + parts[2])){\r\n          return {\r\n            personName: parts[0],\r\n            fatherName: `${parts[1]} ${parts[2]}`,\r\n            grandfatherName: parts[3],\r\n            familyName: \"\"\r\n          };\r\n        }\r\n    }\r\n  }\r\n  else if (parts.length === 5) {\r\n    if (bentCount === 2){\r\n      if (isCompoundName(parts[0]+ \" \" + parts[1])){\r\n        return {\r\n          personName: `${parts[0]} ${parts[1]}`,\r\n          fatherName: parts[2],\r\n          grandfatherName: parts[3],\r\n          familyName: parts[4]\r\n        };\r\n      }\r\n      if (isCompoundName(parts[1] + \" \" + parts[2])){\r\n        return {\r\n          personName: parts[0],\r\n          fatherName: `${parts[1]} ${parts[2]}`,\r\n          grandfatherName: parts[3],\r\n          familyName: parts[4]\r\n        };\r\n      }\r\n      if (isCompoundName(parts[0] + \" \" + parts[1]) && isCompoundName(parts[2]+ \" \" + parts[3])){\r\n        return {\r\n          personName: `${parts[0]} ${parts[1]}`,\r\n          fatherName: `${parts[2]} ${parts[3]}`,\r\n          grandfatherName: parts[4],\r\n          familyName: \"\"\r\n        };\r\n      }\r\n    }\r\n  }\r\n  else if (parts.length === 6) {\r\n    if (bentCount === 2){\r\n      if (isCompoundName(parts[0] + \" \" + parts[1]) && isCompoundName(parts[2]+ \" \" + parts[3]) && isCompoundName(parts[4]+ \" \" + parts[5])){\r\n        return {\r\n          personName: `${parts[0]} ${parts[1]}`,\r\n          fatherName: `${parts[2]} ${parts[3]}`,\r\n          grandfatherName: `${parts[4]} ${parts[5]}`,\r\n          familyName: \"\"\r\n        };\r\n      }\r\n    }\r\n  }\r\n  else if (parts.length === 7) {\r\n      if (isCompoundName(parts[0] + \" \" + parts[1]) && isCompoundName(parts[2]+ \" \" + parts[3]) && isCompoundName(parts[4]+ \" \" + parts[5])){\r\n        return {\r\n          personName: `${parts[0]} ${parts[1]}`,\r\n          fatherName: `${parts[2]} ${parts[3]}`,\r\n          grandfatherName: `${parts[4]} ${parts[5]}`,\r\n          familyName: parts[6]\r\n        };\r\n      }\r\n  }\r\n  return { personName: parts[0], fatherName: \"\", grandfatherName: \"\", familyName: parts[1] || \"\" };\r\n}\r\n\r\nfunction buildTreePath(path) {\r\n  // Handle case where the path is empty\r\n  if (path.length === 0) return null;\r\n\r\n  return path.reduceRight((acc, person) => {\r\n    return {\r\n      id: (person.id).toNumber(),\r\n      name: `${person.name} ${person.lastName}`,\r\n      children: acc ? [acc] : []\r\n    };\r\n  }, null);\r\n}\r\n\r\nfunction mergePaths(pathToP1, pathToP2) {\r\n  // Handle empty paths by returning null or an empty object\r\n  if (pathToP1.length === 0 && pathToP2.length === 0) return null;\r\n\r\n  const ancestor = pathToP1[0]; // Assuming both paths share the same ancestor\r\n  const branch1 = pathToP1.slice(1);\r\n  const branch2 = pathToP2.slice(1);\r\n\r\n  // Check if any of the branches are empty and handle accordingly\r\n  const children = [];\r\n  if (branch1.length > 0) {\r\n    children.push(buildTreePath(branch1));\r\n  }\r\n  if (branch2.length > 0) {\r\n    children.push(buildTreePath(branch2));\r\n  }\r\n\r\n  // Return the merged structure\r\n  return {\r\n    id: (ancestor.id).toNumber(),\r\n    name: `${ancestor.name} ${ancestor.lastName}`,\r\n    children: children.length > 0 ? children : undefined // Only include children if there are any\r\n  };\r\n}\r\n\r\nexport const translateName = (fullName, language = true) => {\r\n  const reverseTranslations = Object.fromEntries(\r\n    Object.entries(translations).map(([key, value]) => [value, key])\r\n  );\r\n  const reverseCompound = Object.fromEntries(\r\n    Object.entries(compoundNames).map(([key, value]) => [value, key])\r\n  );\r\n\r\n  const dict = language ? translations : reverseTranslations;\r\n  const compoundDict = language ? compoundNames : reverseCompound;\r\n\r\n  const normalized = fullName.trim().replace(/\\s+/g, ' ');\r\n  if (compoundDict[normalized]) {\r\n    return compoundDict[normalized];\r\n  }\r\n\r\n  const nameParts = normalized.split(' ');\r\n  const translatedParts = nameParts.map(part => dict[part] || part);\r\n\r\n  return translatedParts.join(' ');\r\n};\r\n\r\n\r\nconst RelationPage = () => {\r\n  const [person1, setPerson1] = useState('');\r\n  const [person2, setPerson2] = useState('');\r\n  const [relationship, setRelationship] = useState('');\r\n  const [duplicates, setDuplicates] = useState({ person1: [], person2: [] });\r\n  const [error, setError] = useState(null);\r\n  const [selectedPerson1, setSelectedPerson1] = useState(null);\r\n  const [selectedPerson2, setSelectedPerson2] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingMessage, setLoadingMessage] = useState(\"\");\r\n\r\n  const fetchRelationship = async (e, customPerson1 = person1, customPerson2 = person2) => {\r\n    e.preventDefault();\r\n\r\n    console.log(\"🚀 fetchRelationship START\");\r\n    console.log(\"➡️ person1:\", customPerson1);\r\n    console.log(\"➡️ person2:\", customPerson2);\r\n\r\n    if (!customPerson1 || !customPerson2) {\r\n      console.error(\"❌ One of the names is undefined or empty\");\r\n      setError(true);\r\n      setRelationship({ relationshipDescription: 'أدخل اسمي الشخصين بشكل صحيح', relationshipScore: null });\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(false);\r\n    setLoadingMessage(\"🔎 بداية البحث عن العلاقة...\");\r\n\r\n    try {\r\n      const result = await getRelationship(customPerson1, customPerson2);\r\n\r\n      console.log(\"✅ Result received:\", result);\r\n\r\n      if (result.error === 'non-unique-name') {\r\n        setSelectedPerson1(null);\r\n        setSelectedPerson2(null);\r\n        setDuplicates(result.duplicates ?? { person1: [], person2: [] });\r\n        setRelationship(result.message);\r\n        return;\r\n      }\r\n      else {\r\n        setDuplicates({ person1: [], person2: [] });\r\n        setRelationship({\r\n          relationshipDescription: result.relation,\r\n          relationshipPerson1Details : result.person1 ?? null,\r\n          relationshipPerson2Details : result.person2 ?? null,\r\n          relationshipScore: result.score ?? null,\r\n          relationshipLevels: result.levelsTuple ?? null,\r\n          relationshipGenerationGap: result.generation ?? null,\r\n          relationshipExplanationType: result.explanation?.type ?? null,\r\n          relationshipExplanationDesc: result.explanation?.explanation ?? null,\r\n          relationshipType: result.relationshipType ?? null,\r\n          commonAncestor: result.ancestor ?? null,\r\n          ancestorstreeData: result.treeData ?? null,\r\n          person1ID: result.person1ID ?? null,\r\n          person2ID: result.person2ID ?? null\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error fetching relationship:', error);\r\n      setRelationship({ relationshipDescription: 'حدث خطأ أثناء البحث', relationshipScore: null });\r\n      setError(true);\r\n    } finally {\r\n      console.log(\"🛑 fetchRelationship END\");\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const checkMarriage = async (person1ID, person2ID, gender1, gender2) => {\r\n    if (gender1 === gender2) {return {areMarried : false}}\r\n        setLoadingMessage(\"جاري البحث عن علاقة زواج\");\r\n        const result = await session.run(`\r\n          MATCH (Husband:Person)-[:HUSBAND_OF]->(Wife:Person)\r\n          MATCH (Wife)-[:WIFE_OF]->(Husband)\r\n          WHERE (id(Wife) = $person1ID AND id(Husband) = $person2ID) \r\n            OR (id(Wife) = $person2ID AND id(Husband) = $person1ID)\r\n          RETURN Husband AS P1, Wife AS P2\r\n        `, { person1ID, person2ID });\r\n\r\n        if (result.records.length === 0) {\r\n          return { areMarried: false };\r\n        }\r\n        const record = result.records[0];\r\n        const P1 = record.get(\"P1\").properties;\r\n        const P2 = record.get(\"P2\").properties;\r\n        return record.length === 0 ? {areMarried : false} : {areMarried : true, P1, P2};\r\n  };\r\n\r\n  async function getMarriageRelation(session, person1ID, person2ID, translatedName1, translatedName2, gender1, gender2) {\r\n    console.log('🔍 Checking marriage-based relationship between', translatedName1, 'and', translatedName2);\r\n\r\n    // Step 1: Person's own family\r\n    const ownFamilyQuery = `\r\n      MATCH (P:Person)\r\n      WHERE id(P) = $personId\r\n\r\n      // Person's Father and Mother\r\n      OPTIONAL MATCH (Father:Person)-[:FATHER_OF]->(P)\r\n      OPTIONAL MATCH (Mother:Person)-[:MOTHER_OF]->(P)\r\n\r\n      // Person's Siblings\r\n      OPTIONAL MATCH (Father)-[:FATHER_OF]->(Sibling:Person)\r\n      WHERE Sibling <> P\r\n\r\n      // Spouses of Siblings\r\n      OPTIONAL MATCH (Sibling)-[:HUSBAND_OF|:WIFE_OF]->(SiblingSpouse:Person)\r\n\r\n      // Person's Children\r\n      OPTIONAL MATCH (P)-[:MOTHER_OF|:FATHER_OF]->(Child:Person)\r\n\r\n      // Spouses of Children\r\n      OPTIONAL MATCH (Child)-[:HUSBAND_OF|:WIFE_OF]->(ChildSpouse:Person)\r\n\r\n      RETURN \r\n        id(Father) AS fatherId,\r\n        id(Mother) AS motherId,\r\n        collect(DISTINCT id(Sibling)) AS siblingIds,\r\n        collect(DISTINCT id(SiblingSpouse)) AS siblingSpouseIds,\r\n        collect(DISTINCT id(Child)) AS childIds,\r\n        collect(DISTINCT id(ChildSpouse)) AS childSpouseIds\r\n    `;\r\n\r\n    const ownResult = await session.run(ownFamilyQuery, { personId: person1ID });\r\n    const ownRecord = ownResult.records[0];\r\n\r\n    const fatherId = ownRecord.get(\"fatherId\")?.toNumber() ?? null;\r\n    const motherId = ownRecord.get(\"motherId\")?.toNumber() ?? null;\r\n    const siblingIds = (ownRecord.get(\"siblingIds\") ?? []).map(id => id.toNumber());\r\n    const siblingSpouseIds = (ownRecord.get(\"siblingSpouseIds\") ?? []).map(id => id.toNumber());\r\n    const childIds = (ownRecord.get(\"childIds\") ?? []).map(id => id.toNumber());\r\n    const fchildrenSpouseIds = (ownRecord.get(\"childSpouseIds\") ?? []).map(id => id.toNumber());\r\n\r\n    console.log('👨‍👩‍👧 Own Family:');\r\n    console.log('Father ID:', fatherId);\r\n    console.log('Mother ID:', motherId);\r\n    console.log('Sibling IDs:', siblingIds);\r\n    console.log('Sibling Spouse IDs:', siblingSpouseIds);\r\n    console.log('Childs IDs:', childIds);\r\n    console.log('Children Spouse IDs:', fchildrenSpouseIds);\r\n\r\n    // Step 2: Spouse's family\r\n    const spouseFamilyQuery = `\r\n      MATCH (P:Person)-[:HUSBAND_OF|:WIFE_OF]->(Spouse:Person)\r\n      WHERE id(P) = $personId\r\n\r\n      OPTIONAL MATCH (SFather:Person)-[:FATHER_OF]->(Spouse)\r\n      OPTIONAL MATCH (SMother:Person)-[:MOTHER_OF]->(Spouse)\r\n      OPTIONAL MATCH (SFather)-[:FATHER_OF]->(SSibling:Person)\r\n      WHERE SSibling <> Spouse\r\n\r\n      OPTIONAL MATCH (SSibling)-[:HUSBAND_OF|:WIFE_OF]->(SSiblingSpouse:Person)\r\n\r\n      // Get children of the spouse\r\n      OPTIONAL MATCH (Spouse)-[:MOTHER_OF|:FATHER_OF]->(Child:Person)\r\n      OPTIONAL MATCH (Child)-[:HUSBAND_OF|:WIFE_OF]->(ChildSpouse:Person)\r\n\r\n      RETURN \r\n        id(SFather) AS sFatherId,\r\n        id(SMother) AS sMotherId,\r\n        collect(DISTINCT id(SSibling)) AS sSiblingIds,\r\n        collect(DISTINCT id(SSiblingSpouse)) AS sSiblingSpouseIds,\r\n        collect(DISTINCT id(Child)) AS childIds,\r\n        collect(DISTINCT id(ChildSpouse)) AS childSpouseIds\r\n    `;\r\n\r\n    const spouseResult = await session.run(spouseFamilyQuery, { personId: person1ID });\r\n    const spouseRecord = spouseResult.records[0];\r\n\r\n    const sFatherId = spouseRecord?.get(\"sFatherId\")?.toNumber() ?? null;\r\n    const sMotherId = spouseRecord?.get(\"sMotherId\")?.toNumber() ?? null;\r\n    const sSiblingIds = (spouseRecord?.get(\"sSiblingIds\") ?? []).map(id => id.toNumber());\r\n    const sSiblingSpouseIds = (spouseRecord?.get(\"sSiblingSpouseIds\") ?? []).map(id => id.toNumber());\r\n    const childrenSpouseIds = (spouseRecord?.get(\"childSpouseIds\") ?? []).map(id => id.toNumber());\r\n\r\n    console.log('🧑‍🤝‍🧑 Spouse Family:');\r\n    console.log('Spouse Father ID:', sFatherId);\r\n    console.log('Spouse Mother ID:', sMotherId);\r\n    console.log('Spouse Sibling IDs:', sSiblingIds);\r\n    console.log('Spouse Sibling Spouse IDs:', sSiblingSpouseIds);\r\n    console.log('Children Spouse IDs:', childrenSpouseIds);\r\n\r\n    // Step 3: Matching\r\n    const match = (id) => {\r\n      return id !== null && id === person2ID;\r\n    };\r\n\r\n    const isIn = (list) => {\r\n      const result = list.some(id => id === person2ID);\r\n      return result;\r\n    };\r\n\r\n\r\n    // Sibling check\r\n    if (isIn(sSiblingIds)) {\r\n      console.log('✅ Match: Sibling');\r\n      if (gender1 === 'Male') {\r\n        return `${translatedName1} هو زوج اخت ${translatedName2}`;\r\n      } else {\r\n        return `${translatedName1} هي زوجة اخ ${translatedName2}`;\r\n      }\r\n    }\r\n\r\n    // Sibling Spouse check\r\n    if (isIn(siblingSpouseIds)) {\r\n      console.log('✅ Match: Spouse Siblings');\r\n      // Male person with male sibling-in-law (spouse of the sibling)\r\n      if (gender1 === 'Male') {\r\n        if(gender2 === 'Male'){\r\n          return `${translatedName1} هو اخ زوجة ${translatedName2}`;\r\n        }\r\n        else{\r\n          return `${translatedName1} هو اخ زوج ${translatedName2}`;\r\n        }\r\n      } else {\r\n        // Female person with female sibling-in-law (spouse of the sibling)\r\n        if(gender2 === 'Male'){\r\n        return `${translatedName1} هي اخت زوج ${translatedName2}`;\r\n        }\r\n        else{\r\n          return `${translatedName1} هو اخ زوجة ${translatedName2}`;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Children Spouses check\r\n    if (isIn(fchildrenSpouseIds)) {\r\n      console.log('✅ Match: Children Spouses');\r\n      if (gender1 === 'Male') {\r\n        return `${translatedName1} هو أب زوجة ${translatedName2}`;\r\n      } else {\r\n        return `${translatedName1} هي أم زوجة ${translatedName2}`;\r\n      }\r\n    }\r\n\r\n    // Further check for Children Spouses (with childrenSpouseIds mapping and match)\r\n    if (match(sFatherId) || match(sMotherId)) {\r\n      console.log('✅ Match: Children Spouses (extended)');\r\n      if (gender1 === 'Male') {\r\n        console.log(`${translatedName1} هو زوج ابنة ${translatedName2}`);\r\n        return `${translatedName1} هو زوج ابنة ${translatedName2}`;\r\n      } else {\r\n        console.log(`${translatedName1} هي زوجة ابن ${translatedName2} | ${translatedName1} هي كنة ${translatedName2}`);\r\n        return `${translatedName1} هي زوجة ابن ${translatedName2} | ${translatedName1} هي كنة ${translatedName2}`;\r\n      }\r\n    }\r\n    \r\n    return \"لا توجد علاقة واضحة\";\r\n  }\r\n\r\n  const getAncestors = async (person1ID, person2ID) => {\r\n        setLoadingMessage(\"جاري البحث عن الأجداد المشتركة\");\r\n        const result = await session.run(`\r\n          MATCH path1 = (common:Person)-[:FATHER_OF|MOTHER_OF*0..12]->(p1:Person)\r\n          WHERE id(p1) = $person1ID\r\n\r\n          MATCH path2 = (common)-[:FATHER_OF|MOTHER_OF*0..12]->(p2:Person)\r\n          WHERE id(p2) = $person2ID\r\n            AND id(p1) <> id(p2)\r\n\r\n          WITH common, path1, path2, length(path1) AS level1, length(path2) AS level2\r\n\r\n          // Prioritize father ancestors by explicitly matching FATHER_OF first, then MOTHER_OF\r\n          OPTIONAL MATCH (cGF:Person)-[:FATHER_OF]->(cF:Person)-[:FATHER_OF]->(common)\r\n\r\n          // Check if the common ancestor is married and get the husband if married\r\n          OPTIONAL MATCH (common)-[:WIFE_OF]->(husband:Person)\r\n\r\n          // Include spouse information\r\n          WITH common, cF, cGF, husband, path1, path2, level1, level2\r\n\r\n          ORDER BY (level1 + level2) ASC\r\n          LIMIT 1\r\n\r\n          RETURN \r\n            // If common ancestor is female and married, return the husband's name\r\n            common.name AS commonAncestorName,\r\n            cF.name AS commonAncestorFatherName,\r\n            cGF.name AS commonAncestorGrandFatherName,\r\n            common.lastName AS commonAncestorLastName,\r\n            id(common) AS commonAncestorID,\r\n\r\n            common.gender AS commonAncestorGender,\r\n            level1 AS generationsFromP1,\r\n            level2 AS generationsFromP2,\r\n\r\n            // Include spouse information if married\r\n            CASE \r\n              WHEN husband IS NOT NULL THEN { id: id(husband), name: husband.name, lastName: husband.lastName, gender: husband.gender }\r\n              ELSE null\r\n            END AS spouseOfAncestor,\r\n\r\n            [n IN nodes(path1) | { id: id(n), name: n.name, lastName: n.lastName, gender: n.gender }] AS pathToP1,\r\n            [n IN nodes(path2) | { id: id(n), name: n.name, lastName: n.lastName, gender: n.gender }] AS pathToP2\r\n\r\n\r\n        `, { person1ID, person2ID });\r\n\r\n        const record = result.records[0];\r\n        if (result.records.length === 0){\r\n            return null;\r\n        }\r\n        return {\r\n            id: record.get('commonAncestorID').toNumber(),\r\n            name: record.get('commonAncestorName'),\r\n            lastName: record.get('commonAncestorLastName'),\r\n            fatherName: record.get('commonAncestorFatherName'),\r\n            grandfatherName: record.get('commonAncestorGrandFatherName'),\r\n            gender: record.get('commonAncestorGender'),\r\n            spouseOfAncestor: record.get('spouseOfAncestor'),\r\n            levelFromP1: record.get('generationsFromP1').toNumber(),\r\n            levelFromP2: record.get('generationsFromP2').toNumber(),\r\n            pathFromAncestorToP1: record.get('pathToP1'),\r\n            pathFromAncestorToP2: record.get('pathToP2')\r\n        };\r\n  };\r\n\r\n  const getPersonMatches = async (personName, fatherName = \"\", grandfatherName = \"\", familyName) => {\r\n\r\n    let cypherQuery = ``;\r\n    const queryParamsObject = {};\r\n  \r\n    if (personName){\r\n      if (fatherName) {\r\n        if (grandfatherName) {\r\n          if (familyName) {\r\n            cypherQuery += `\r\n              MATCH (grandfather:Person)-[:FATHER_OF]->(father:Person)-[:FATHER_OF]->(child:Person)\r\n              WHERE child.name = $personName AND \r\n                    father.name = $fatherName AND \r\n                    grandfather.name = $grandfatherName AND \r\n                    child.lastName = $familyName\r\n              RETURN \r\n                id(child) AS childID,\r\n                child.name AS childName, \r\n                father.name AS fatherName, \r\n                grandfather.name AS grandfatherName, \r\n                child.lastName AS familyName,\r\n                child.gender AS gender\r\n            `;\r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n            queryParamsObject.grandfatherName = grandfatherName;\r\n            queryParamsObject.familyName = familyName;\r\n          } \r\n          else {\r\n            cypherQuery += `\r\n              MATCH (grandfather:Person)-[:FATHER_OF]->(father:Person)-[:FATHER_OF]->(child:Person)\r\n              WHERE child.name = $personName AND \r\n                    father.name = $fatherName AND\r\n                    grandfather.name = $grandfatherName\r\n              RETURN \r\n                    id(child) AS childID, \r\n                    child.name AS childName, \r\n                    father.name AS fatherName, \r\n                    grandfather.name AS grandfatherName,\r\n                    child.lastName AS familyName,\r\n                    child.gender AS gender      \r\n              `;\r\n            \r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n            queryParamsObject.grandfatherName = grandfatherName;\r\n          }\r\n          \r\n        } else {\r\n          if (familyName){\r\n            cypherQuery += `\r\n            MATCH (father:Person)-[:FATHER_OF]->(child:Person)\r\n            WHERE child.name = $personName AND \r\n                  father.name = $fatherName AND\r\n                  child.lastName = $familyName\r\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n            RETURN  \r\n              id(child) AS childID,\r\n              child.name AS childName, \r\n              father.name AS fatherName,\r\n              grandfather.name AS grandfatherName,\r\n              child.lastName AS familyName,\r\n              child.gender AS gender\r\n            `;\r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n            queryParamsObject.familyName = familyName;\r\n          }\r\n          else{\r\n            cypherQuery += `\r\n            MATCH (father:Person)-[:FATHER_OF]->(child:Person)\r\n            \r\n            WHERE child.name = $personName AND \r\n                  father.name = $fatherName\r\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n            RETURN  id(child) AS childID, \r\n                    child.name AS childName, \r\n                    father.name AS fatherName, \r\n                    grandfather.name AS grandfatherName,\r\n                    child.lastName AS familyName,\r\n                    child.gender AS gender\r\n            `;\r\n            queryParamsObject.personName = personName;\r\n            queryParamsObject.fatherName = fatherName;\r\n          }\r\n          }\r\n      }\r\n      else {\r\n        if (familyName){\r\n          cypherQuery += `\r\n          MATCH (child:Person)\r\n          WHERE child.name = $personName AND child.lastName = $familyName\r\n          OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(child)\r\n          OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n          RETURN \r\n            id(child) AS childID,\r\n            child.name AS childName, \r\n            father.name AS fatherName,\r\n            grandfather.name AS grandfatherName,\r\n            child.lastName AS familyName,\r\n            child.gender AS gender\r\n        `;\r\n        queryParamsObject.personName = personName;\r\n        queryParamsObject.familyName = familyName;\r\n        }\r\n        else{\r\n          cypherQuery += `\r\n            MATCH (child:Person)\r\n            WHERE child.name = $personName\r\n            OPTIONAL MATCH (father:Person)-[:FATHER_OF]->(child)\r\n            OPTIONAL MATCH (grandfather:Person)-[:FATHER_OF]->(father)\r\n            RETURN\r\n              id(child) AS childID,\r\n              child.name AS childName, \r\n              father.name AS fatherName, \r\n              grandfather.name AS grandfatherName,\r\n              child.lastName AS familyName,\r\n              child.gender AS gender\r\n          `;\r\n          queryParamsObject.personName = personName;\r\n        }\r\n      }\r\n    }\r\n\r\n    const session = driver.session();\r\n    try {\r\n      const result = await session.run(cypherQuery, queryParamsObject);\r\n  \r\n      return result.records.map(record => ({\r\n        id: record.get('childID').toNumber(),\r\n        gender: record.get('gender'),\r\n        name: record.get('childName'),\r\n        father: record.get('fatherName') || \"\",\r\n        grandfather: record.get('grandfatherName') || \"\",\r\n        lastName: record.get('familyName')\r\n      }));\r\n    } \r\n    catch (Error) {\r\n      console.error('Query Error:', Error);\r\n      setError('حدث خطأ أثناء البحث.');\r\n    } \r\n    finally {\r\n      await session.close();\r\n    }\r\n  };\r\n\r\n  const getRelationship = async (person1FullName, person2FullName) => {\r\n    const isArabic = (text) => /[\\u0600-\\u06FF]/.test(text);\r\n    let translatedName1, translatedName2;\r\n    let gender1, gender2;\r\n    let relationshipType;\r\n    let relation = '', score = 0;\r\n    let explanation;\r\n    let relationshipExplanation = [\r\n      {\r\n        type: \"العائلة\",\r\n        explanation: \"هؤلاء الشخصين مرتبطين من خلال العائلة ذو الدرجة الأولى.\"\r\n      },\r\n      {\r\n        type: \"العائلة المقربة\",\r\n        explanation: \"هؤلاء الشخصين مرتبطين من خلال أعمام وأخوال مشتركين.\"\r\n      },\r\n      {\r\n        type: \"العائلة الموسعة\",\r\n        explanation: \"هؤلاء الشخصين مرتبطين من خلال أعمام أو أخوال الأب ، أو أجداد الأب و الأم.\"\r\n      },\r\n      {\r\n        type: \"قرابة الزواج\",\r\n        explanation: \"هذان الشخصان مرتبطان من خلال الزواج.\"\r\n      },\r\n      {\r\n        type: \"صهر / نسيب\",\r\n        explanation: \"هذان الشخصان مرتبطان عبر الزواج وليس النسب الدموي.\"\r\n      },\r\n      {\r\n        type: \"لا توجد علاقة\",\r\n        explanation: \"لم يتم العثور على أي صلة قرابة بين الشخصين في قاعدة البيانات.\"\r\n      },\r\n      {\r\n        type: \"نفس الشخص\",\r\n        explanation: \"الاسمين يشيران إلى نفس الشخص.\"\r\n      }\r\n    ];\r\n\r\n    if (isArabic(person1FullName)){\r\n      console.log(person1FullName);\r\n      // Split the name into parts first\r\n      const splitPerson1 = splitName(person1FullName);\r\n      \r\n      // Translate each part individually\r\n      const translatedName1 = {\r\n        personName: translateName(splitPerson1.personName, false),\r\n        fatherName: translateName(splitPerson1.fatherName, false),\r\n        grandfatherName: translateName(splitPerson1.grandfatherName, false),\r\n        familyName: translateName(splitPerson1.familyName, false),\r\n      };\r\n\r\n      console.log(translatedName1);\r\n    } else {\r\n      translatedName1 = person1FullName; // If it's not Arabic, just use the original name\r\n    }\r\n\r\n    if (isArabic(person2FullName)){\r\n      console.log(person2FullName);\r\n      // Split the name into parts first\r\n      const splitPerson2 = splitName(person2FullName);\r\n      \r\n      // Translate each part individually\r\n      const translatedName2 = {\r\n        personName: translateName(splitPerson2.personName, false),\r\n        fatherName: translateName(splitPerson2.fatherName, false),\r\n        grandfatherName: translateName(splitPerson2.grandfatherName, false),\r\n        familyName: translateName(splitPerson2.familyName, false),\r\n      };\r\n\r\n      console.log(translatedName2);\r\n    } else {\r\n      translatedName2 = person2FullName; // If it's not Arabic, just use the original name\r\n    }\r\n    const errorContainer = document.getElementById('error-container');\r\n    console.log(person1Name);\r\n    try {\r\n      const person1Matches = await getPersonMatches(person1Name, person1FatherName, person1GrandfatherName, person1LastName);\r\n      if (person1Matches.length === 0) {\r\n        throw new Error(`لا يوجد أشخاص بإسم ${person1FullName} الرجاء التثبت في الإسم جيدا`);\r\n      }\r\n      const person2Matches = await getPersonMatches(person2Name, person2FatherName, person2GrandfatherName, person2LastName);\r\n      if (person2Matches.length === 0) {\r\n        throw new Error(`لا يوجد أشخاص بإسم ${person2FullName} الرجاء التثبت في الإسم جيدا`);\r\n      }\r\n      setLoadingMessage(\"جاري البحث عن الأشخاص\");\r\n\r\n      console.log(\"P1 matches : \", person1Matches);\r\n      console.log(\"P2 matches : \", person2Matches);\r\n      \r\n      let person1ID, person2ID;\r\n      if (person1Matches.length > 1 || person2Matches.length > 1) {\r\n      return {\r\n        error: 'non-unique-name',\r\n        message: 'تم العثور على عدة أشخاص بنفس الاسم. الرجاء اختيار الصحيح.',\r\n        duplicates: {\r\n          person1: person1Matches.length > 1 ? person1Matches : [],\r\n          person2: person2Matches.length > 1 ? person2Matches : []\r\n        }\r\n      };\r\n      }\r\n      else{\r\n        person1ID = person1Matches[0].id;\r\n        person2ID = person2Matches[0].id;\r\n        gender1 = person1Matches[0].gender;\r\n        gender2 = person2Matches[0].gender;\r\n      }\r\n\r\n      const translatedName1 = translateName(person1Matches[0].name + \" \" + person1Matches[0].lastName);\r\n      const translatedName2 = translateName(person2Matches[0].name + \" \" + person2Matches[0].lastName);\r\n      \r\n      console.log(person1Matches[0], person2Matches[0]);\r\n      let marraigeRecord = await checkMarriage(person1ID, person2ID, gender1, gender2);\r\n      if (marraigeRecord.areMarried === true){\r\n        let relation = '';\r\n        let score = 100;\r\n        if (gender1 === 'Male'){\r\n          relation = `${translatedName1} هو زوج ${translatedName2}`;\r\n        }\r\n        else{\r\n          relation = `${translatedName1} هي زوجة ${translatedName2}`;\r\n        }\r\n        setLoading(false);\r\n        console.log(relation);\r\n        relationshipType = \"Marriage\";\r\n        explanation = relationshipType[4];\r\n        return {relation, score, relationshipType, explanation, person1: person1Matches[0], person2: person2Matches[0]}\r\n      } \r\n      else {\r\n        console.log(\"Checking relations\");\r\n        let relationRecord = await getAncestors(person1ID, person2ID);\r\n        if (relationRecord === null){\r\n          console.log(\"There's no common ancestor between these.\");\r\n          let relation = await getMarriageRelation(session, person1ID, person2ID, translatedName1, translatedName2, gender1, gender2);\r\n          console.log(relation);\r\n          if (relation){\r\n            console.log(\"Relaition found.\");\r\n            relationshipType = \"Marriage-related\";\r\n            explanation = relationshipType[3];\r\n            return {relation, relationshipType, explanation, person1: person1Matches[0], person2: person2Matches[0]};\r\n          }\r\n          else {\r\n            setError(\"لا يوجد اي قاسم مشترك أو علاقة مشتركة بين هاذين الشخصين.\");\r\n            setError(true);\r\n            return 'لا توجد اي علاقة بين هاذين الشخصين';\r\n          } \r\n        }\r\n        else{\r\n          const ancestorID = relationRecord.id;\r\n          const ancestorName = relationRecord.name ? translateName(relationRecord.name) : '';\r\n          const ancestorLastName = relationRecord.lastName ? translateName(relationRecord.lastName) : '';\r\n          const ancestorFatherName = relationRecord.fatherName ? translateName(relationRecord.fatherName) : '';\r\n          const ancestorGrandFatherName = relationRecord.grandfatherName ? translateName(relationRecord.grandfatherName) : '';\r\n          const ancestorGender = relationRecord.gender;\r\n          let levelFromP1, levelFromP2, pathFromAncestorToP1, pathFromAncestorToP2;\r\n          let spouseOfAncestor = relationRecord.spouseOfAncestor;\r\n          const ancestor = {ancestorID, \r\n                          ancestorName, ancestorFatherName, ancestorGrandFatherName, ancestorLastName, ancestorGender};\r\n          console.log(ancestor);\r\n          ({\r\n            levelFromP1, \r\n            levelFromP2,\r\n            spouseOfAncestor,\r\n            pathFromAncestorToP1, \r\n            pathFromAncestorToP2 \r\n          } = relationRecord);\r\n          let pathToP1 = pathFromAncestorToP1;\r\n          let pathToP2 = pathFromAncestorToP2;\r\n          if ((spouseOfAncestor !== null) && (ancestorID !== person1ID) && (ancestorID !== person2ID)) {\r\n              pathToP1[0] = {\r\n                  id: spouseOfAncestor.id,\r\n                  name: spouseOfAncestor.name,\r\n                  lastName: spouseOfAncestor.lastName,\r\n                  gender: spouseOfAncestor.gender\r\n              };\r\n              pathToP2[0] = {\r\n                  id: spouseOfAncestor.id,\r\n                  name: spouseOfAncestor.name,\r\n                  lastName: spouseOfAncestor.lastName,\r\n                  gender: spouseOfAncestor.gender\r\n              };\r\n          }\r\n          \r\n          const treeData = mergePaths(pathToP1, pathToP2);\r\n          console.log(pathFromAncestorToP1.reverse().map(a => a.name).join(\" ben \"));\r\n          console.log(pathFromAncestorToP2.reverse().map(a => a.name).join(\" ben \"));\r\n      \r\n          var p1Level = levelFromP1;\r\n          var p2Level = levelFromP2;\r\n          const gender1 = pathToP1[0].gender;\r\n          const gender2 = pathToP2[0].gender;\r\n          \r\n          console.log(`Level: (${p1Level}, ${p2Level})`);\r\n          setLoadingMessage(\"جاري البحث عن العلاقة بين الشخصين\");\r\n          if (p1Level === 0 && p2Level === 1) {\r\n            if (gender1 === 'Male'){\r\n              relation = `${translatedName1} هو والد ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي والدة ${translatedName2}`;\r\n            }\r\n            score = 100;\r\n            explanation = relationshipType[0];\r\n          }\r\n      \r\n          else if (p1Level === 1 && p2Level === 0) {\r\n            if (gender1 === 'Male'){\r\n              relation = `${translatedName1} هو ابن ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي إبنة ${translatedName2}`;\r\n            }\r\n            score = 100;\r\n            explanation = relationshipExplanation[0];\r\n          } \r\n      \r\n          else if (p1Level === 2 && p2Level === 0) {\r\n            if (gender1 === 'Male'){\r\n              relation = `${translatedName1} هو حفيد ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي حفيدة ${translatedName2}`;\r\n            }\r\n            score = 90;\r\n            explanation = relationshipExplanation[0];\r\n          }\r\n\r\n          else if (p1Level === 0 && p2Level === 2) {\r\n            if (gender1 === 'Male'){\r\n              relation = `${translatedName1} هو جدّ ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي جدّة ${translatedName2}`;\r\n            }\r\n            score = 90;\r\n            explanation = relationshipExplanation[0];\r\n          }\r\n      \r\n          else if (p1Level === 3 && p2Level === 0) {\r\n            if (gender1 === 'Male'){\r\n              relation = `${translatedName1} هو إبن حفيد ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي إبنة حفيدة ${translatedName2}`;\r\n            }\r\n            score = 75;\r\n            explanation = relationshipExplanation[1];\r\n          }\r\n      \r\n          else if (p1Level === 0 && p2Level === 3) {\r\n            if (gender1 === 'Male'){\r\n              relation = `${translatedName1} و جد والد ${translatedName2}`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} هي جدة والدة ${translatedName2}`;\r\n            }\r\n            score = 80;\r\n            explanation = relationshipExplanation[0];\r\n          } \r\n          \r\n          else if (p1Level === 0 && p2Level === 4){ // ADD FROM MOTHER FROM FATHER GRANDFATHER \r\n            const p2GreatAncestorGender = pathToP1[2].gender;\r\n            if (gender1 === 'Male'){\r\n              if (p2GreatAncestorGender === 'Male'){\r\n                relation = `${translatedName1} هو جد جد ${translatedName2}`;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هو جد جدة ${translatedName2}`;\r\n              }\r\n            }\r\n            else{\r\n              if (p2GreatAncestorGender === 'Male'){\r\n                relation = `${translatedName1} هي جدة جد ${translatedName2}`;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هي جدة جدة ${translatedName2}`;\r\n              }\r\n            }\r\n            score = 70;\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n\r\n          else if (p1Level === 4 && p2Level === 0){ // ADD FROM MOTHER FROM FATHER GRANDFATHER \r\n            const p1GreatAncestorGender = pathToP1[2].gender;\r\n            if (gender1 === 'Male'){\r\n              if (p1GreatAncestorGender === 'Male'){\r\n                relation = `${translatedName1} هو حفيد حفيد ${translatedName2}`;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هو حفيد حفيدة ${translatedName2}`;\r\n              }\r\n            }\r\n            else{\r\n              if (p1GreatAncestorGender === 'Male'){\r\n                relation = `${translatedName1} هي حفيدة حفيد ${translatedName2}`;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هي حفيدة حفيد ${translatedName2}`;\r\n              }\r\n            }\r\n            score = 70;\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n\r\n          else if (p1Level === 1 && p2Level === 1) {\r\n            if (gender1 === 'Male' && gender2 === 'Male'){\r\n              relation = `${translatedName1} و ${translatedName2} إخوة`;\r\n            }\r\n            else if (gender1 === 'Female' && gender2 === 'Female'){\r\n              relation = `${translatedName1} و ${translatedName2} أخوات`;\r\n            }\r\n            else{\r\n              relation = `${translatedName1} و ${translatedName2} إخوة`;\r\n            }\r\n            score = 98;\r\n            explanation = relationshipExplanation[0];\r\n          } \r\n          \r\n          else if (p1Level === 2 && p2Level === 1) {\r\n            const p1AncestorGender = pathToP1[1].gender;\r\n            if (gender1 === 'Male'){\r\n              if (p1AncestorGender === 'Male'){\r\n                relation = `${translatedName1} هو ابن أخ ${translatedName2}`;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هو ابن أخت ${translatedName2}`;\r\n              }\r\n              score = 93;\r\n            }\r\n            else{\r\n              if (p1AncestorGender === 'Male'){\r\n                relation = `${translatedName1} هي ابنة أخ ${translatedName2}`;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هي ابنة أخت ${translatedName2}`;\r\n              }\r\n              score = 93;\r\n              explanation = relationshipExplanation[1];\r\n            }\r\n          } \r\n          \r\n          else if (p1Level === 1 && p2Level === 2) {\r\n            const p2AncestorGender = pathToP2[1].gender;\r\n            if (gender1 === 'Male'){\r\n              if (p2AncestorGender === 'Male'){\r\n                relation = `${translatedName1} هو عم ${translatedName2}`;\r\n                score = 95;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هو خال ${translatedName2}`;\r\n                score = 94;\r\n              }\r\n            }\r\n            else{\r\n              if (p2AncestorGender === 'Male'){\r\n                relation = `${translatedName1} هي عمة ${translatedName2}`;\r\n                score = 95;\r\n              }\r\n              else{\r\n                relation = `${translatedName1} هي خالة ${translatedName2}`;\r\n                score = 94;\r\n              }\r\n            }\r\n            explanation = relationshipExplanation[1];\r\n          }\r\n          \r\n          else if (p1Level === 1 && p2Level === 3){\r\n            const p2AncestorGender = pathToP2[1].gender;\r\n            const p2GreatAncestorGender = pathToP2[2].gender;\r\n\r\n            if (gender1 === 'Male'){\r\n              if (p2AncestorGender === 'Male'){\r\n                if (p2GreatAncestorGender === 'Male'){\r\n                  relation = `${translatedName1} هو عم والد ${translatedName2}`;\r\n                  score = 80;\r\n                }\r\n                else {\r\n                  relation = `${translatedName1} هو خال والد ${translatedName2}`;\r\n                  score = 75;\r\n                }\r\n              }\r\n              else{\r\n                if (p2GreatAncestorGender === 'Male'){\r\n                  relation = `${translatedName1} هو عم والدة ${translatedName2}`;\r\n                  score = 80;\r\n                }\r\n                else {\r\n                  relation = `${translatedName1} هو خال والدة ${translatedName2}`;\r\n                  score = 70;\r\n                }\r\n              }\r\n            } \r\n            else{\r\n              if (p2AncestorGender === 'Male'){\r\n                if (p2GreatAncestorGender === 'Male'){\r\n                  relation = `${translatedName1} هي عمة والد ${translatedName2}`;\r\n                  score = 80;\r\n                }\r\n                else {\r\n                  relation = `${translatedName1} هي خالة والد ${translatedName2}`;\r\n                  score = 75\r\n                }\r\n              }\r\n              else{\r\n                if (p2GreatAncestorGender === 'Male'){\r\n                  relation = `${translatedName1} هي عمة والدة ${translatedName2}`;\r\n                  score = 80;\r\n                }\r\n                else {\r\n                  relation = `${translatedName1} هي خالة والدة ${translatedName2}`;\r\n                  score = 75;\r\n                }\r\n              }\r\n            }\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n\r\n          else if (p1Level === 1 && p2Level === 4) {\r\n            const p2AncestorGender = pathToP2[1].gender;\r\n            const p2GreatAncestorGender = pathToP2[2].gender;\r\n            const p2GreatGrandAncestorGender = pathToP2[3].gender;\r\n            \r\n            if (gender1 === 'Male') {\r\n              if (p2AncestorGender === 'Male') {\r\n                if (p2GreatAncestorGender === 'Male') {\r\n                  if (p2GreatGrandAncestorGender === 'Male') {\r\n                    relation = `${translatedName1} هو عم جد والد ${translatedName2}`;\r\n                    score = 85;\r\n                  } else {\r\n                    relation = `${translatedName1} هو عم جد والد ${translatedName2}`;\r\n                    score = 80;\r\n                  }\r\n                } else {\r\n                  relation = `${translatedName1} هو خال جد والد ${translatedName2}`;\r\n                  score = 75;\r\n                }\r\n              } else {\r\n                if (p2GreatAncestorGender === 'Male') {\r\n                  relation = `${translatedName1} هو عم جد والدة ${translatedName2}`;\r\n                  score = 85;\r\n                } else {\r\n                  relation = `${translatedName1} هو خال جد والدة ${translatedName2}`;\r\n                  score = 70;\r\n                }\r\n              }\r\n            } else {\r\n              if (p2AncestorGender === 'Male') {\r\n                if (p2GreatAncestorGender === 'Male') {\r\n                  if (p2GreatGrandAncestorGender === 'Male') {\r\n                    relation = `${translatedName1} هي عمة جد والد ${translatedName2}`;\r\n                    score = 85;\r\n                  } else {\r\n                    relation = `${translatedName1} هي عمة جد والد ${translatedName2}`;\r\n                    score = 80;\r\n                  }\r\n                } else {\r\n                  relation = `${translatedName1} هي خالة جد والد ${translatedName2}`;\r\n                  score = 75;\r\n                }\r\n              } else {\r\n                if (p2GreatAncestorGender === 'Male') {\r\n                  relation = `${translatedName1} هي عمة جد والدة ${translatedName2}`;\r\n                  score = 85;\r\n                } else {\r\n                  relation = `${translatedName1} هي خالة جد والدة ${translatedName2}`;\r\n                  score = 70;\r\n                }\r\n              }\r\n            }\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n          \r\n          else if (p1Level === 2 && p2Level === 4) {\r\n            const p2AncestorGender = pathToP2[1].gender;\r\n            const p2GreatAncestorGender = pathToP2[2].gender; \r\n\r\n            if (gender1 === 'Male') {\r\n              if (p2AncestorGender === 'Male') {\r\n                if (p2GreatAncestorGender === 'Male') {\r\n                  relation = `${translatedName1} هو جد الأول وجد جد ${translatedName2} إخوة`;\r\n                  score = 90;\r\n                } else {\r\n                  relation = `${translatedName1} هو جد الأول وجدة جد ${translatedName2} إخوة`;\r\n                  score = 70;\r\n                }\r\n              } else {\r\n                if (p2GreatAncestorGender === 'Male') {\r\n                  relation = `${translatedName1} هو جد الأول وجدة جد ${translatedName2} إخوة`;\r\n                  score = 70;\r\n                } else {\r\n                  relation = `${translatedName1} هو جد الأول وجدة جد ${translatedName2} إخوة`;\r\n                  score = 70;\r\n                }\r\n              }\r\n            } \r\n            else {\r\n              if (p2AncestorGender === 'Male') {\r\n                if (p2GreatAncestorGender === 'Male') {\r\n                  relation = `${translatedName1} هي جدة الأول وجد جد ${translatedName2} إخوة`;\r\n                  score = 70;\r\n                } else {\r\n                  relation = `${translatedName1} هي جدة الأول وجدة جد ${translatedName2} إخوة`;\r\n                  score = 70;\r\n                }\r\n              } else {\r\n                if (p2GreatAncestorGender === 'Male') {\r\n                  relation = `${translatedName1} هي جدة الأول وجدة جد ${translatedName2} إخوة`;\r\n                  score = 70;\r\n                } else {\r\n                  relation = `${translatedName1} هي جدة الأول وجدة جد ${translatedName2} إخوة`;\r\n                  score = 70;\r\n                }\r\n              }\r\n            }\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n\r\n          else if (p1Level === 3 && p2Level === 1){\r\n            const p1GreatAncestorGender = pathToP1[2].gender;\r\n            if (gender1 === 'Male'){\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  relation = `${translatedName1} هو حفيد اخ ${translatedName2}`;\r\n                  score = 65;\r\n                }\r\n                else {\r\n                  relation = `${translatedName1} هو حفيد اخت ${translatedName2}`;\r\n                  score = 65;\r\n                }\r\n            } \r\n            else{\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  relation = `${translatedName1} هي حفيدة اخ ${translatedName2}`;\r\n                  score = 65;\r\n                }\r\n                else {\r\n                  relation = `${translatedName1} هي حفيدة اخت ${translatedName2}`;\r\n                  score = 65;\r\n                }\r\n            }\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n\r\n          else if (p1Level === 2 && p2Level === 2) {    \r\n            const p1AncestorGender = pathToP1[1].gender;\r\n            const p2AncestorGender = pathToP2[1].gender;\r\n      \r\n            if (gender1 === 'Male') { \r\n              if (p2AncestorGender === 'Male') { \r\n                if (p1AncestorGender === 'Male'){  // ولد عمه\r\n                  relation = `${translatedName1} إبن عم ${translatedName2}`;\r\n                  score = 90;\r\n                }\r\n                else{\r\n                  relation = `${translatedName1} هو إبن عمّة ${translatedName2}`;\r\n                  score = 89;\r\n\r\n                }\r\n              } \r\n              else {  \r\n                if (p1AncestorGender === 'Male'){  // ولد خاله\r\n                  relation = `${translatedName1} هو إبن خال ${translatedName2}`;\r\n                  score = 88;\r\n                }\r\n                else{\r\n                  relation = `${translatedName1} هو إبن خالة ${translatedName2}`;\r\n                  score = 86;\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (p1AncestorGender === 'Male') { \r\n                if (p2AncestorGender === 'Male'){  // بنت عمه\r\n                  relation = `${translatedName1} هي إبنة عمّ ${translatedName2}`;\r\n                  score = 90;\r\n                }\r\n                else{\r\n                  relation = `${translatedName1} هي إبنة عمّة ${translatedName2}`;\r\n                  score = 89;\r\n                }\r\n              } \r\n              else {  \r\n                if (p2AncestorGender === 'Male'){  // بنت خاله\r\n                  relation = `${translatedName1} هي إبنة خال ${translatedName2}`;\r\n                  score = 88;\r\n                }\r\n                else{\r\n                  relation = `${translatedName1} هي إبنة خالة ${translatedName2}`;\r\n                  score = 86;\r\n                }\r\n              }\r\n            }\r\n            explanation = relationshipExplanation[1];\r\n          }\r\n      \r\n          else if (p1Level === 2 && p2Level === 3) {         \r\n      \r\n            const p1AncestorGender = pathToP1[1].gender;\r\n            const p2AncestorGender = pathToP2[1].gender;\r\n\r\n            if (gender1 === 'Male') { \r\n              if (p1AncestorGender === 'Male') {\r\n                if (p2AncestorGender === 'Male') {\r\n                  relation = `${translatedName1} هو إبن عم والد ${translatedName2}`;\r\n                  score = 80;\r\n                } \r\n                else { \r\n                  relation = `${translatedName1} هو إبن خال والدة ${translatedName2}`;\r\n                  score = 78;\r\n                }\r\n              } \r\n              else {  // mother's side\r\n                if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                  relation = `${translatedName1} هو إبن عم والد ${translatedName2}.`;\r\n                  score = 74;\r\n                } \r\n                else {  // mother's brother's daughter\r\n                  relation = `${translatedName1} هو إبن عمّة والدة ${translatedName2}`;\r\n                  score = 72;\r\n                }\r\n              }\r\n            } \r\n            else {  // If person1 is female\r\n              if (p1AncestorGender === 'Male') {  // father's side\r\n                if (p2AncestorGender === 'Male') {  // father's brother's son\r\n                  relation = `${translatedName1} هي إبنة عم والد ${translatedName2}`;\r\n                  score = 80;\r\n                } else {  // father's brother's daughter\r\n                  relation = `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\r\n                  score = 78;\r\n                }\r\n              } else {  // mother's side\r\n                if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                  relation = `${translatedName1} هي إبنة عم والدة ${translatedName2}`;\r\n                  score = 74;\r\n                } else {  // mother's brother's daughter\r\n                  relation = `${translatedName1} هي إبنة عمة والدة ${translatedName2}`;\r\n                  score = 72;\r\n                }\r\n              }\r\n            }\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n          \r\n          else if (p1Level === 4 && p2Level === 2) {\r\n            const p1GreatAncestorGender = pathToP1[3].gender;  // P1 Great Ancestor\r\n            const p2AncestorGender = pathToP2[1].gender;  // P2 Ancestor\r\n            if (p1GreatAncestorGender){\r\n                  if (p2AncestorGender === 'Male') {\r\n                      if (p1GreatAncestorGender === 'Male') {\r\n                          relation = `جد ${translatedName1} هو إبن عم ${translatedName2}`;\r\n                          score = 65;\r\n                      } else {\r\n                          relation = `جد ${translatedName1} هو إبن عمّة ${translatedName2}`;\r\n                          score = 65;\r\n                      }\r\n                  } else {\r\n                      if (p1GreatAncestorGender === 'Male') {\r\n                          relation = `جد ${translatedName1} هو إبن خال ${translatedName2}`;\r\n                          score = 65;\r\n                      } else {\r\n                          relation = `جد ${translatedName1} هو إبن خالة ${translatedName2}`;\r\n                          score = 65;\r\n                      }\r\n                  }\r\n            } \r\n            else {\r\n                if (p2AncestorGender === 'Male') {\r\n                    if (p1GreatAncestorGender === 'Male') {\r\n                        relation = `جدة ${translatedName1} هي إبنة عم ${translatedName2}`;\r\n                        score = 65;\r\n                    } else {\r\n                        relation = `جدة ${translatedName1} هي إبنة عمّة ${translatedName2}`;\r\n                        score = 65;\r\n                    }\r\n                } else {\r\n                    if (p1GreatAncestorGender === 'Male') {\r\n                        relation = `جدة ${translatedName1} هي إبنة خال ${translatedName2}`;\r\n                        score = 65;\r\n                    } else {\r\n                        relation = `جدة ${translatedName1} هي إبنة خالة ${translatedName2}`;\r\n                        score = 65;\r\n                    }\r\n                }\r\n            }\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n          \r\n          else if (p1Level === 3 && p2Level === 2) {          \r\n            const p1AncestorGender = pathToP1[1].gender;\r\n            const p2AncestorGender = pathToP2[1].gender;\r\n            const p1GreatAncestorGender = pathToP1[2].gender;\r\n\r\n            if (p1AncestorGender === 'Male') {  // father's side\r\n              if (p2AncestorGender === 'Male') {  // father's brother's son\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  relation = `والد ${translatedName1} هو إبن عم ${translatedName2}`;\r\n                }\r\n                else{\r\n                  relation = `والد ${translatedName1} هو إبن عمة ${translatedName2}`;\r\n                }\r\n              } else { \r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  relation = `والد ${translatedName1} هو إبن خال ${translatedName2}`;\r\n                }\r\n                else{\r\n                  relation = `والد ${translatedName1} هو إبن خالة ${translatedName2}`;\r\n                }\r\n              }\r\n            } \r\n            else {  // mother's side\r\n              if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  relation = `والدة ${translatedName1} هي إبنة عم ${translatedName2}`;\r\n                }\r\n                else{\r\n                  relation = `والدة ${translatedName1} هي إبنة عمة ${translatedName2}`;\r\n                }\r\n                \r\n              } else {\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  relation = `والدة ${translatedName1} هي إبنة خال ${translatedName2}`;\r\n                }\r\n                else{\r\n                  relation = `والدة ${translatedName1} هي إبنة خالة ${translatedName2}`;\r\n                }\r\n              }\r\n            }\r\n            score = 60;\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n\r\n          else if (p1Level === 3 && p2Level === 3) {          \r\n            \r\n            const p1AncestorGender = pathToP1[1].gender;\r\n            const p2AncestorGender = pathToP2[1].gender;\r\n            const p1GreatAncestorGender = pathToP1[2].gender;\r\n            const p2GreatAncestorGender = pathToP2[2].gender;\r\n\r\n            if (p1AncestorGender === 'Male') { \r\n              if (p2AncestorGender === 'Male'){\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّة ${translatedName1} من الأب و جد ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                }\r\n              }\r\n              else {\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّ ${translatedName1} من الأب و جد ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّ ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّة ${translatedName1} من الأب و جد${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّة ${translatedName1} من الأب و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (p2AncestorGender === 'Male'){\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّ ${translatedName1} من الأم و جد${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّة ${translatedName1} من الأم و جد ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب أخوات.`;\r\n                  }\r\n                }\r\n              }\r\n              else {\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّ ${translatedName1} من الأم و جد ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّ ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأب إخوة.`;\r\n                  }\r\n                  else{\r\n                    relation = `جدّة ${translatedName1} من الأم و جدة ${translatedName2} من الأم إخوة.`;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n\r\n          else if (p1Level === 4 && p2Level === 3) {\r\n            const p1AncestorGender = pathToP2[0].gender;  // First ancestor of p2\r\n            const p2GreatAncestorGender = pathToP2[1].gender;  // Second ancestor of p2\r\n            const p1GreatGreatAncestorGender = pathToP2[2].gender;  // Third ancestor of p2\r\n\r\n            if (p1GreatGreatAncestorGender === 'Male') {\r\n                // Case when p1 is male\r\n                if (p1AncestorGender === 'Male') {\r\n                    if (p2GreatAncestorGender === 'Male') {\r\n                        relation = `جد اب ${translatedName1} و جد ${translatedName2} اخوة`;\r\n                        score = 75;\r\n                    } else {\r\n                        relation = `جد اب ${translatedName1} و جدة ${translatedName2} اخوة`;\r\n                        score = 75;\r\n                    }\r\n                } else {\r\n                    if (p2GreatAncestorGender === 'Male') {\r\n                        relation = `جد أم ${translatedName1} و جد ${translatedName2} اخوة`;\r\n                        score = 75;\r\n                    } else {\r\n                        relation = `جد أم ${translatedName1} و جدة ${translatedName2} اخوة`;\r\n                        score = 75;\r\n                    }\r\n                }\r\n            } \r\n            else {\r\n                // Case when p1 is female\r\n                if (p1AncestorGender === 'Male') {\r\n                    if (p2GreatAncestorGender === 'Male') {\r\n                        relation = `جدة اب ${translatedName1} و جد ${translatedName2} اخوة`;\r\n                        score = 85;\r\n                    } else {\r\n                        relation = `جدة اب ${translatedName1} و جدة ${translatedName2} اخوة`;\r\n                        score = 80;\r\n                    }\r\n                } else {\r\n                    if (p2GreatAncestorGender === 'Male') {\r\n                        relation = `جدة أم ${translatedName1} و جد ${translatedName2} اخوة`;\r\n                        score = 75;\r\n                    } else {\r\n                        relation = `جدة أم ${translatedName1} و جدة ${translatedName2} اخوة`;\r\n                        score = 70;\r\n                    }\r\n                }\r\n            }\r\n          explanation = relationshipExplanation[2];\r\n          }\r\n\r\n          else if (p1Level === 3 && p2Level === 4) {\r\n            const p2AncestorGender = pathToP2[0].gender;  // First ancestor of p2\r\n            const p1GreatAncestorGender = pathToP2[1].gender;  // Second ancestor of p2\r\n            const p2GreatGreatAncestorGender = pathToP2[2].gender;  // Third ancestor of p2\r\n\r\n            if (p1GreatAncestorGender === 'Male') {\r\n                // Case when p1 is male\r\n                if (p2AncestorGender === 'Male') {\r\n                    if (p2GreatGreatAncestorGender === 'Male') {\r\n                        relation = `جد ${translatedName1} و جد أب ${translatedName2} اخوة`;\r\n                        score = 85;\r\n                    } else {\r\n                        relation = `جد ${translatedName1} و جدة أب ${translatedName2} اخوة`;\r\n                        score = 80;\r\n                    }\r\n                } else {\r\n                    if (p2GreatGreatAncestorGender === 'Male') {\r\n                        relation = `جد ${translatedName1} و جد أم ${translatedName2} اخوة`;\r\n                        score = 75;\r\n                    } else {\r\n                        relation = `جد ${translatedName1} و جدة أم ${translatedName2} اخوة`;\r\n                        score = 70;\r\n                    }\r\n                }\r\n            } \r\n            else {\r\n                // Case when p1 is female\r\n                if (p2AncestorGender === 'Male') {\r\n                    if (p2GreatGreatAncestorGender === 'Male') {\r\n                        relation = `جدة ${translatedName1} و جد أب ${translatedName2} اخوة`;\r\n                        score = 85;\r\n                    } else {\r\n                        relation = `جدة ${translatedName1} و جدة أب ${translatedName2} أخوات`;\r\n                        score = 80;\r\n                    }\r\n                } else {\r\n                    if (p2GreatGreatAncestorGender === 'Male') {\r\n                        relation = `جدة ${translatedName1} و جد أم ${translatedName2} اخوة`;\r\n                        score = 75;\r\n                    } else {\r\n                        relation = `جدة ${translatedName1} و جدة أم ${translatedName2} أخوات`;\r\n                        score = 70;\r\n                    }\r\n                }\r\n            }\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n\r\n          else if (p1Level === 4 && p2Level === 1) {\r\n            const p1GreatAncestorGender = pathToP1[2].gender;\r\n            const p1GreatGrandAncestorGender = pathToP1[3].gender;\r\n            \r\n            if (gender1 === 'Male'){\r\n                if (p1GreatAncestorGender === 'Male') {\r\n                  if (p1GreatGrandAncestorGender === 'Male') {\r\n                    relation = `${translatedName1} هو حفيد إبن أخ ${translatedName2}`;\r\n                    score = 85;\r\n                  } else {\r\n                    relation = `${translatedName1} هو حفيد إبن أخت ${translatedName2}`;\r\n                    score = 80;\r\n                  }\r\n                } \r\n                else {\r\n                  if (p1GreatGrandAncestorGender === 'Male') {\r\n                    relation = `${translatedName1} هو حفيد إبنة أخ ${translatedName2}`;\r\n                    score = 85;\r\n                  } else {\r\n                    relation = `${translatedName1} هو حفيد إبنة أخت ${translatedName2}`;\r\n                    score = 80;\r\n                  }\r\n                }\r\n            } \r\n            else {\r\n              if (p1GreatAncestorGender === 'Male') {\r\n                  if (p1GreatGrandAncestorGender === 'Male') {\r\n                    relation = `${translatedName1} هي حفيدة إبن أخ ${translatedName2}`;\r\n                    score = 85;\r\n                  } else {\r\n                    relation = `${translatedName1} هي حفيدة إبن أخت ${translatedName2}`;\r\n                    score = 80;\r\n                  }\r\n                } \r\n                else {\r\n                  if (p1GreatGrandAncestorGender === 'Male') {\r\n                    relation = `${translatedName1} هي حفيدة إبنة أخ ${translatedName2}`;\r\n                    score = 85;\r\n                  } else {\r\n                    relation = `${translatedName1} هي حفيدة إبنة أخت ${translatedName2}`;\r\n                    score = 80;\r\n                  }\r\n                }\r\n            }\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n\r\n          else if (p1Level === 4 && p2Level === 4) {\r\n            const p1AncestorGender = pathToP2[1].gender;\r\n            const p2AncestorGender = pathToP1[1].gender;\r\n            const p1GreatGreatAncestorGender = pathToP1[3].gender;\r\n            const p2GreatGreatAncestorGender = pathToP2[3].gender;\r\n\r\n            if (p1GreatGreatAncestorGender === 'Male') {\r\n              if (p1AncestorGender === 'Male') {\r\n                  if (p2AncestorGender === 'Male') {\r\n                    if (p2GreatGreatAncestorGender === 'Male'){\r\n                      relation = `جد أب ${translatedName1} و جد أب ${translatedName2} اخوة`;\r\n                      score = 85;\r\n                    } else {\r\n                        relation = `جد أب ${translatedName1} و جدة أب ${translatedName2} اخوة`;\r\n                        score = 80;\r\n                    }\r\n                  } \r\n                  else{\r\n                    if (p2GreatGreatAncestorGender === 'Male'){\r\n                      relation = `جد أم ${translatedName1} و جد أم ${translatedName2} اخوة`;\r\n                      score = 85;\r\n                    } else {\r\n                        relation = `جد أم ${translatedName1} و جدة أم ${translatedName2} اخوة`;\r\n                        score = 80;\r\n                    }\r\n                  } \r\n              } \r\n              else {\r\n                if (p2AncestorGender === 'Male') {\r\n                  if (p2GreatGreatAncestorGender === 'Male'){\r\n                    relation = `جد أب ${translatedName1} و جد أب ${translatedName2} اخوة`;\r\n                    score = 85;\r\n                  } else {\r\n                      relation = `جد أب ${translatedName1} و جدة أب ${translatedName2} اخوة`;\r\n                      score = 80;\r\n                  }\r\n                } \r\n                else{\r\n                  if (p2GreatGreatAncestorGender === 'Male'){\r\n                    relation = `جد أم ${translatedName1} و جد أم ${translatedName2} اخوة`;\r\n                    score = 85;\r\n                  } \r\n                  else {\r\n                    relation = `جد أم ${translatedName1} و جدة أم ${translatedName2} اخوة`;\r\n                    score = 80;\r\n                }\r\n              }\r\n          }\r\n      } \r\n      else {\r\n          if (p1AncestorGender === 'Male') {\r\n              if (p2AncestorGender === 'Male') {\r\n                if (p2GreatGreatAncestorGender === 'Male'){\r\n                  relation = `جدة أب ${translatedName1} و جد أب ${translatedName2} اخوة`;\r\n                  score = 85;\r\n                } else {\r\n                    relation = `جدة أب ${translatedName1} و جدة أب ${translatedName2} اخوة`;\r\n                    score = 80;\r\n                }\r\n              } else{\r\n                if (p2GreatGreatAncestorGender === 'Male'){\r\n                  relation = `جدة أم ${translatedName1} و جد أم ${translatedName2} اخوة`;\r\n                  score = 85;\r\n                } else {\r\n                    relation = `جدة أم ${translatedName1} و جدة أم ${translatedName2} اخوة`;\r\n                    score = 80;\r\n                }\r\n              } \r\n          } else {\r\n              if (p2AncestorGender === 'Male') {\r\n                if (p2GreatGreatAncestorGender === 'Male'){\r\n                  relation = `جدة أب ${translatedName1} و جد أب ${translatedName2} اخوة`;\r\n                  score = 85;\r\n                } else {\r\n                    relation = `جدة أب ${translatedName1} و جدة أب ${translatedName2} اخوة`;\r\n                    score = 80;\r\n                }\r\n              } else{\r\n                if (p2GreatGreatAncestorGender === 'Male'){\r\n                  relation = `جدة أم ${translatedName1} و جد أم ${translatedName2} اخوة`;\r\n                  score = 85;\r\n                } else {\r\n                    relation = `جدة أم ${translatedName1} و جدة أم ${translatedName2} اخوة`;\r\n                    score = 80;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            explanation = relationshipExplanation[2];\r\n          }\r\n\r\n          else {\r\n            setLoading(false);\r\n            console.log('No direct relation found.');\r\n            relation = await getMarriageRelation(session, person1ID, person2ID, translatedName1, translatedName2, gender1, gender2);\r\n            relationshipType = \"Marriage-related\";\r\n            return {  relation, score, \r\n                      generation:Math.abs(p1Level-p2Level), \r\n                      levelsTuple: {levelFromP1, levelFromP2},\r\n                      explanation,\r\n                      ancestor,\r\n                      relationshipType,\r\n                      treeData,\r\n                      person1ID,\r\n                      person2ID,\r\n                      person1: person1Matches[0], person2: person2Matches[0]};\r\n          }\r\n          if (relation != ''){\r\n              setLoading(false);\r\n              console.log(relation);\r\n              relationshipType = \"Blood\";\r\n              return {relation, score, \r\n                      generation:Math.abs(p1Level-p2Level), \r\n                      levelsTuple: {levelFromP1, levelFromP2},\r\n                      explanation,\r\n                      ancestor,\r\n                      relationshipType,\r\n                      treeData,\r\n                      person1ID,\r\n                      person2ID,\r\n                      person1: person1Matches[0], person2: person2Matches[0]};\r\n            }\r\n        }\r\n      }  \r\n    } catch (error) {\r\n      console.error('Error in relationship lookup:', error);\r\n    \r\n      setError(`❌ خطأ: ${error.message || error}`);\r\n    \r\n      if (errorContainer) {\r\n        errorContainer.innerText = `❌ خطأ: ${error.message || error}`;\r\n      }\r\n      setLoading(false);\r\n      return '';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"relation-page\">\r\n    \r\n    {/* Main Panel: Form + Result */}\r\n    <main className=\"main-panel\">\r\n      \r\n      <section className=\"relation-form-section\">\r\n        <h2 className=\"section-title\">ماهي العلاقة بينهما؟</h2>\r\n        <p id=\"DescriptionZone\">\r\n          الهدف من هذه الصفحة هو تحديد صلة القرابة بين شخصين بناءًا على اسمهم. كل ماعليك فعله\r\n          هو ادخال الاسم للشخص الاول والثاني وثم النقر على \"التحقق من العلاقة\" ستظهر لك النتيجة في اسهل الصفحة\r\n          والتي يتوضح لك نوع العلاقة ومدى قرابتها؟ في حال وجود اي تشابهات او تكرارات في الاسماء سيم توفير خيارات لتحديد الشخص الصحيح\r\n        </p>\r\n        <form onSubmit={fetchRelationship} className=\"relation-form\">\r\n          <div className=\"input-group\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"الإسم الكامل الأول\"\r\n              value={person1}\r\n              onChange={(e) => setPerson1(e.target.value)}\r\n              className=\"inputNames\"\r\n            />\r\n          </div>\r\n          <div className=\"input-group\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"الإسم الكامل الثاني\"\r\n              value={person2}\r\n              onChange={(e) => setPerson2(e.target.value)}\r\n              className=\"inputNames\"\r\n            />\r\n          </div>\r\n          <div className='ButtonSection'>\r\n            <button type=\"submit\" className=\"button checkButton\">تحقق من العلاقة</button>\r\n            <button type=\"reset\" className=\"button resetButton\">إلغاء</button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"button swapButton\"\r\n              onClick={() => {\r\n                // Swap the values of person1 and person2\r\n                setPerson1(person2);\r\n                setPerson2(person1);\r\n              }}\r\n            >\r\n              تبديل الأشخاص\r\n            </button>\r\n          </div>  \r\n        </form>\r\n        {(duplicates.person1.length > 0 || duplicates.person2.length > 0) && (\r\n    <aside className=\"duplicates-panel\">\r\n      {/* Handle non-unique person1 */}\r\n      {duplicates.person1.length > 0 && !selectedPerson1 && (\r\n        <section className=\"duplicates-group\">\r\n          <h3>🧠 أختر الشخص المقصود (الشخص الأول):</h3>\r\n          <ul>\r\n            {duplicates.person1.map((p, idx) => {\r\n              const fullName =\r\n                (p.name ? `${translateName(p.name)} بن ` : '') +\r\n                (p.father ? `${translateName(p.father)} بن ` : '') +\r\n                (p.grandfather ? `${translateName(p.grandfather)} ` : '') +\r\n                (p.lastName ? `${translateName(p.lastName)}` : '');\r\n\r\n              return (\r\n                <li key={`p1-${idx}`}>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"duplicate-button\"\r\n                    onClick={() => {\r\n                      console.log(\"👆 Selected person1 fullName:\", fullName);\r\n                      setSelectedPerson1(fullName); // Save the selected person1\r\n                    }}\r\n                  >\r\n                    {fullName}\r\n                  </button>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </section>\r\n      )}\r\n\r\n      {duplicates.person2.length > 0 && !selectedPerson2 && (\r\n        <section className=\"duplicates-group\">\r\n          <h3>🧠 أختر الشخص المقصود (الشخص الثاني):</h3>\r\n          <ul>\r\n            {duplicates.person2.map((p, idx) => {\r\n              const fullName =\r\n                (p.name ? `${translateName(p.name)} بن ` : '') +\r\n                (p.father ? `${translateName(p.father)} بن ` : '') +\r\n                (p.grandfather ? `${translateName(p.grandfather)} ` : '') +\r\n                (p.lastName ? `${translateName(p.lastName)}` : '');\r\n\r\n              return (\r\n                <li key={`p2-${idx}`}>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"duplicate-button\"\r\n                    onClick={(e) => {\r\n                      console.log(\"👤 Selected person2 fullName:\", fullName);\r\n                      setSelectedPerson2(fullName); // Save the selected person2\r\n                      fetchRelationship(e, selectedPerson1, fullName); // Call with both selected names\r\n                    }}\r\n                  >\r\n                    {fullName}\r\n                  </button>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </section>\r\n      )}\r\n\r\n\r\n    </aside>\r\n    )}\r\n\r\n      </section>\r\n\r\n      {error && <div className=\"error-message\">{error}</div>} {/* Show the error message */}\r\n      {loading && (\r\n        <div className=\"loading-message\">\r\n          <div className=\"spinner\"></div>\r\n          <p>{loadingMessage}</p>\r\n        </div>\r\n      )}\r\n      {}\r\n      {!loading && relationship && !error  && (\r\n        <section className=\"relationship-result\">\r\n          <div className=\"foundPersons\">\r\n          <h3>الأشخاص الذين تم البحث عنهم:</h3>\r\n          <div class=\"person-card\">\r\n            <h4>\r\n              {translateName(relationship.relationshipPerson1Details.name)} \r\n              {relationship.relationshipPerson1Details.father && ` بن ${translateName(relationship.relationshipPerson1Details.father)}`} \r\n              {relationship.relationshipPerson1Details.grandfather && ` بن ${translateName(relationship.relationshipPerson1Details.grandfather)}`} \r\n              {relationship.relationshipPerson1Details.lastName && ` ${translateName(relationship.relationshipPerson1Details.lastName)}`}\r\n            </h4>\r\n          </div>\r\n\r\n          <div class=\"person-card\">\r\n            <h4>\r\n              {translateName(relationship.relationshipPerson2Details.name)} \r\n              {relationship.relationshipPerson2Details.father && ` بن ${translateName(relationship.relationshipPerson2Details.father)}`} \r\n              {relationship.relationshipPerson2Details.grandfather && ` بن ${translateName(relationship.relationshipPerson2Details.grandfather)}`} \r\n              {relationship.relationshipPerson2Details.lastName && ` ${translateName(relationship.relationshipPerson2Details.lastName)}`}\r\n            </h4>\r\n          </div>\r\n        </div>\r\n\r\n\r\n          <h2 id=\"resultTitle\">نتيجة العلاقة</h2>\r\n          <p className=\"relationText\">{relationship.relationshipDescription}</p>\r\n          <div className=\"result-details\">\r\n            <table className=\"result-table\">\r\n              <tbody>\r\n                <tr>\r\n                  <th>درجة العلاقة</th>\r\n                  <td className=\"score-cell\">\r\n                    <div className=\"score-bar-wrapper\">\r\n                      <div className=\"score-bar-fill\" style={{ width: `${relationship.relationshipScore ?? 0}%` }}></div>\r\n                    </div>\r\n                    <div className=\"score-meta\">\r\n                      <span className=\"score-value\">{relationship.relationshipScore ?? 'N/A'}</span>\r\n                      {relationship.relationshipScore !== null && relationship.relationshipScore !== undefined && (\r\n                        <span className={\r\n                          relationship.relationshipScore >= 80\r\n                            ? \"score-category high\"\r\n                            : relationship.relationshipScore >= 60\r\n                            ? \"score-category medium\"\r\n                            : \"score-category low\"\r\n                        }>\r\n                          {\r\n                            relationship.relationshipScore >= 80\r\n                              ? \"قوية\"\r\n                              : relationship.relationshipScore >= 60\r\n                              ? \"متوسطة\"\r\n                              : \"ضعيفة\"\r\n                          }\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>نوع العلاقة</th>\r\n                  <td className=\"relationship-tag\">\r\n                    <span className={`tag ${relationship.relationshipType}`}>\r\n                      {relationship.relationshipType === \"Blood\" ? \"دم\" :\r\n                      relationship.relationshipType === \"Marriage-related\" ? \"زواج مرتبط\" :\r\n                      relationship.relationshipType === \"Marriage\" ? \"زواج\" :\r\n                      relationship.relationshipType}\r\n                    </span>\r\n                  </td>\r\n\r\n                </tr>\r\n                <tr>\r\n                  <th>تفسير إضافي</th>\r\n                  <td className=\"relation-explanation\">\r\n                    <span className='relation-explanation-type'>\r\n                      {relationship.relationshipExplanationType ?? 'نوع التفسير غير متاح'}\r\n                    </span>: \r\n                    {relationship.relationshipExplanationDesc ?? \"لا يوجد تفسير متاح.\"}\r\n                  </td>\r\n\r\n                </tr>\r\n                <tr>\r\n                  <th>عدد الأجيال بينهما حسب الجد المشترك</th>\r\n                  <td className=\"generation-distance\">\r\n                    <div className=\"tooltip-container\">\r\n                      <span id=\"numGen\">{relationship.relationshipGenerationGap ?? '-'}</span> أجيال\r\n                      <div className=\"custom-tooltip\">\r\n                        عدد الأجيال هو عدد الأشخاص الفاصلين في شجرة العائلة بين الشخصين.\r\n                      </div>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>\r\n                    <div className=\"tooltip-container\">\r\n                      الجد المشترك\r\n                      <span className=\"custom-tooltip\">\r\n                        عدد الأجيال هو عدد الأشخاص الفاصلين في شجرة العائلة بين الشخصين.\r\n                      </span>\r\n                    </div>\r\n                  </th>\r\n                  <td className=\"generation-distance\">\r\n                    {relationship.commonAncestor?.ancestorName && `${relationship.commonAncestor?.ancestorName} بن `}\r\n                    {relationship.commonAncestor?.ancestorFatherName && `${relationship.commonAncestor?.ancestorFatherName} بن `}\r\n                    {relationship.commonAncestor?.ancestorGrandFatherName && `${relationship.commonAncestor?.ancestorGrandFatherName} `}\r\n                    {relationship.commonAncestor?.ancestorLastName && `${relationship.commonAncestor?.ancestorLastName}`}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n            <div className=\"tree-wrapper\" style={{\r\n              height: `${Math.max(\r\n                ((Math.max(relationship.relationshipLevels?.levelFromP1 ?? 0, relationship.relationshipLevels?.levelFromP2 ?? 0)) + 1) * 100,\r\n                100 // Ensure minimum height is 100px\r\n              ) + 1}px`\r\n            }}>\r\n\r\n                <div className='titleTree'>\r\n                </div>\r\n                {relationship.ancestorstreeData && (\r\n                <div className=\"tree-container\">\r\n                  <Tree\r\n                    data={relationship.ancestorstreeData}\r\n                    orientation=\"vertical\"\r\n                    pathFunc=\"step\"\r\n                    nodeSize={{ x: 50, y: 90 }}\r\n                    separation={{ siblings: 3, nonSiblings: 3 }}\r\n                    translate={{ x: 325, y: 27 }} \r\n                    renderCustomNodeElement={({ nodeDatum }) => (\r\n                     <g className=\"tree-node\">\r\n                        <title>{nodeDatum.id}</title>\r\n                        <rect\r\n                          className=\"tree-node-rect\"\r\n                          x=\"-50\"\r\n                          y=\"-20\"\r\n                          width=\"100\"\r\n                          \r\n                          height=\"40\"\r\n                          style={{\r\n                            fill: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID\r\n                              ? '#d3f9d8'  // Leaf node color (light green)\r\n                              : nodeDatum.id === relationship.commonAncestor.ancestorID\r\n                              ? '#ffe4b5'  // Ancestor node color (light yellow)\r\n                              : '#ffffff', // Default color for other nodes\r\n                            stroke: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID\r\n                              ? '#4caf50'  // Leaf node border (green)\r\n                              : nodeDatum.id === relationship.commonAncestor.ancestorID\r\n                              ? '#ffa500'  // Ancestor node border (orange)\r\n                              : '#4a90e2', // Default border color\r\n                            strokeWidth: '2.5px',\r\n                            rx: '10',  // Rounded corners\r\n                            ry: '10',  // Rounded corners\r\n                          }}\r\n                        />\r\n                        <text\r\n                          className=\"tree-node-text\"\r\n                          x=\"0\"\r\n                          y=\"5\"\r\n                          style={{\r\n                            fontSize: '16px',\r\n                            fontFamily: 'Cairo',\r\n                            fill: nodeDatum.id === relationship.person1ID || nodeDatum.id === relationship.person2ID\r\n                              ? '#388e3c'  // Leaf node text color (dark green)\r\n                              : nodeDatum.id === relationship.commonAncestor.ancestorID\r\n                              ? '#ff9800'  // Ancestor node text color (orange)\r\n                              : '#333',    // Default text color (dark gray)\r\n                            textAnchor: 'middle',\r\n                            dominantBaseline: 'middle',\r\n                            letterSpacing: '1px',\r\n                            strokeWidth: '1px',\r\n                            pointerEvents: 'none',\r\n                          }}\r\n                        >\r\n                          {translateName(nodeDatum.name)}\r\n                        </text>\r\n                      </g>\r\n                    )}\r\n                  />\r\n                </div>\r\n              )}\r\n               </div>\r\n          </div>\r\n        </section>\r\n      )}\r\n    </main>\r\n  </div>\r\n  \r\n  );\r\n};\r\n\r\nexport default RelationPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}