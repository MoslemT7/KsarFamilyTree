{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar rxjs_1 = require(\"rxjs\");\nvar operators_1 = require(\"rxjs/operators\");\nvar result_rx_1 = __importDefault(require(\"./result-rx\"));\n// eslint-disable-next-line no-unused-vars\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar transaction_rx_1 = __importDefault(require(\"./transaction-rx\"));\nvar transaction_managed_rx_1 = __importDefault(require(\"./transaction-managed-rx\"));\nvar retry_logic_rx_1 = __importDefault(require(\"./internal/retry-logic-rx\"));\nvar _a = neo4j_driver_core_1.internal.constants,\n  ACCESS_MODE_READ = _a.ACCESS_MODE_READ,\n  ACCESS_MODE_WRITE = _a.ACCESS_MODE_WRITE,\n  TELEMETRY_APIS = _a.TELEMETRY_APIS,\n  TxConfig = neo4j_driver_core_1.internal.txConfig.TxConfig;\n/**\n * A Reactive session, which provides the same functionality as {@link Session} but through a Reactive API.\n */\nvar RxSession = /** @class */function () {\n  /**\n   * Constructs a reactive session with given default session instance and provided driver configuration.\n   *\n   * @protected\n   * @param {Object} param - Object parameter\n   * @param {Session} param.session - The underlying session instance to relay requests\n   */\n  function RxSession(_a) {\n    var _b = _a === void 0 ? {} : _a,\n      session = _b.session,\n      config = _b.config,\n      log = _b.log;\n    this._session = session;\n    this._retryLogic = _createRetryLogic(config);\n    this._log = log;\n  }\n  /**\n   * Creates a reactive result that will execute the  query with the provided parameters and the provided\n   * transaction configuration that applies to the underlying auto-commit transaction.\n   *\n   * @public\n   * @param {string} query - Query to be executed.\n   * @param {Object} parameters - Parameter values to use in query execution.\n   * @param {TransactionConfig} transactionConfig - Configuration for the new auto-commit transaction.\n   * @returns {RxResult} - A reactive result\n   */\n  RxSession.prototype.run = function (query, parameters, transactionConfig) {\n    var _this = this;\n    return new result_rx_1.default(new rxjs_1.Observable(function (observer) {\n      try {\n        observer.next(_this._session.run(query, parameters, transactionConfig));\n        observer.complete();\n      } catch (err) {\n        observer.error(err);\n      }\n      return function () {};\n    }));\n  };\n  /**\n   * Starts a new explicit transaction with the provided transaction configuration.\n   *\n   * @public\n   * @param {TransactionConfig} transactionConfig - Configuration for the new transaction.\n   * @returns {Observable<RxTransaction>} - A reactive stream that will generate at most **one** RxTransaction instance.\n   */\n  RxSession.prototype.beginTransaction = function (transactionConfig) {\n    return this._beginTransaction(this._session._mode, transactionConfig, {\n      api: TELEMETRY_APIS.UNMANAGED_TRANSACTION\n    });\n  };\n  /**\n   * Executes the provided unit of work in a {@link READ} reactive transaction which is created with the provided\n   * transaction configuration.\n   * @public\n   * @deprecated This method will be removed in version 6.0. Please, use {@link RxSession#executeRead} instead.\n   * @param {function(txc: RxTransaction): Observable} work - A unit of work to be executed.\n   * @param {TransactionConfig} transactionConfig - Configuration for the enclosing transaction created by the driver.\n   * @returns {Observable} - A reactive stream returned by the unit of work.\n   */\n  RxSession.prototype.readTransaction = function (work, transactionConfig) {\n    return this._runTransaction(ACCESS_MODE_READ, work, transactionConfig);\n  };\n  /**\n   * Executes the provided unit of work in a {@link WRITE} reactive transaction which is created with the provided\n   * transaction configuration.\n   * @public\n   * @deprecated This method will be removed in version 6.0. Please, use {@link RxSession#executeWrite} instead.\n   * @param {function(txc: RxTransaction): Observable} work - A unit of work to be executed.\n   * @param {TransactionConfig} transactionConfig - Configuration for the enclosing transaction created by the driver.\n   * @returns {Observable} - A reactive stream returned by the unit of work.\n   */\n  RxSession.prototype.writeTransaction = function (work, transactionConfig) {\n    return this._runTransaction(ACCESS_MODE_WRITE, work, transactionConfig);\n  };\n  /**\n   * Executes the provided unit of work in a {@link READ} reactive transaction which is created with the provided\n   * transaction configuration.\n   * @public\n   * @param {function(txc: RxManagedTransaction): Observable} work - A unit of work to be executed.\n   * @param {TransactionConfig} transactionConfig - Configuration for the enclosing transaction created by the driver.\n   * @returns {Observable} - A reactive stream returned by the unit of work.\n   */\n  RxSession.prototype.executeRead = function (work, transactionConfig) {\n    return this._executeInTransaction(ACCESS_MODE_READ, work, transactionConfig);\n  };\n  /**\n   * Executes the provided unit of work in a {@link WRITE} reactive transaction which is created with the provided\n   * transaction configuration.\n   * @public\n   * @param {function(txc: RxManagedTransaction): Observable} work - A unit of work to be executed.\n   * @param {TransactionConfig} transactionConfig - Configuration for the enclosing transaction created by the driver.\n   * @returns {Observable} - A reactive stream returned by the unit of work.\n   */\n  RxSession.prototype.executeWrite = function (work, transactionConfig) {\n    return this._executeInTransaction(ACCESS_MODE_WRITE, work, transactionConfig);\n  };\n  /**\n   * @private\n   * @param {function(txc: RxManagedTransaction): Observable} work\n   * @param {TransactionConfig} transactionConfig\n   * @returns {Observable}\n   */\n  RxSession.prototype._executeInTransaction = function (accessMode, work, transactionConfig) {\n    var wrapper = function (txc) {\n      return new transaction_managed_rx_1.default({\n        run: txc.run.bind(txc)\n      });\n    };\n    return this._runTransaction(accessMode, work, transactionConfig, wrapper);\n  };\n  /**\n   * Closes this reactive session.\n   *\n   * @public\n   * @returns {Observable} - An empty reactive stream\n   */\n  RxSession.prototype.close = function () {\n    var _this = this;\n    return new rxjs_1.Observable(function (observer) {\n      _this._session.close().then(function () {\n        observer.complete();\n      }).catch(function (err) {\n        return observer.error(err);\n      });\n    });\n  };\n  RxSession.prototype[Symbol.asyncDispose] = function () {\n    return this.close();\n  };\n  /**\n   * Returns the bookmarks received following the last successfully completed query, which is executed\n   * either in an {@link RxTransaction} obtained from this session instance or directly through one of\n   * the {@link RxSession#run} method of this session instance.\n   *\n   * If no bookmarks were received or if this transaction was rolled back, the bookmarks value will not be\n   * changed.\n   *\n   * @deprecated This method will be removed in 6.0 version. Please, use {@link RxSession#lastBookmarks} instead.\n   *\n   * @public\n   * @returns {string[]}\n   */\n  RxSession.prototype.lastBookmark = function () {\n    return this.lastBookmarks();\n  };\n  /**\n   * Returns the bookmarks received following the last successfully completed query, which is executed\n   * either in an {@link RxTransaction} obtained from this session instance or directly through one of\n   * the {@link RxSession#run} method of this session instance.\n   *\n   * If no bookmarks were received or if this transaction was rolled back, the bookmarks value will not be\n   * changed.\n   *\n   * @public\n   * @returns {string[]}\n   */\n  RxSession.prototype.lastBookmarks = function () {\n    return this._session.lastBookmarks();\n  };\n  /**\n   * @private\n   */\n  RxSession.prototype._beginTransaction = function (accessMode, transactionConfig, apiTelemetryConfig) {\n    var _this = this;\n    var txConfig = TxConfig.empty();\n    if (transactionConfig) {\n      txConfig = new TxConfig(transactionConfig, this._log);\n    }\n    return new rxjs_1.Observable(function (observer) {\n      try {\n        _this._session._beginTransaction(accessMode, txConfig, apiTelemetryConfig).then(function (tx) {\n          observer.next(new transaction_rx_1.default(tx));\n          observer.complete();\n        }).catch(function (err) {\n          return observer.error(err);\n        });\n      } catch (err) {\n        observer.error(err);\n      }\n      return function () {};\n    });\n  };\n  /**\n   * @private\n   */\n  RxSession.prototype._runTransaction = function (accessMode, work, transactionConfig, transactionWrapper) {\n    var _this = this;\n    if (transactionWrapper === void 0) {\n      transactionWrapper = function (tx) {\n        return tx;\n      };\n    }\n    var txConfig = TxConfig.empty();\n    if (transactionConfig) {\n      txConfig = new TxConfig(transactionConfig);\n    }\n    var context = {\n      apiTelemetryConfig: {\n        api: TELEMETRY_APIS.MANAGED_TRANSACTION,\n        onTelemetrySuccess: function () {\n          context.apiTelemetryConfig = undefined;\n        }\n      }\n    };\n    return this._retryLogic.retry((0, rxjs_1.of)(1).pipe((0, operators_1.mergeMap)(function () {\n      return _this._beginTransaction(accessMode, txConfig, context.apiTelemetryConfig);\n    }), (0, operators_1.mergeMap)(function (txc) {\n      return (0, rxjs_1.defer)(function () {\n        try {\n          return work(transactionWrapper(txc));\n        } catch (err) {\n          return (0, rxjs_1.throwError)(function () {\n            return err;\n          });\n        }\n      }).pipe((0, operators_1.catchError)(function (err) {\n        return txc.rollback().pipe((0, operators_1.concatWith)((0, rxjs_1.throwError)(function () {\n          return err;\n        })));\n      }), (0, operators_1.concatWith)(txc.commit()));\n    })));\n  };\n  return RxSession;\n}();\nexports.default = RxSession;\nfunction _createRetryLogic(config) {\n  var maxRetryTimeout = config && config.maxTransactionRetryTime ? config.maxTransactionRetryTime : null;\n  return new retry_logic_rx_1.default({\n    maxRetryTimeout: maxRetryTimeout\n  });\n}","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","rxjs_1","require","operators_1","result_rx_1","neo4j_driver_core_1","transaction_rx_1","transaction_managed_rx_1","retry_logic_rx_1","_a","internal","constants","ACCESS_MODE_READ","ACCESS_MODE_WRITE","TELEMETRY_APIS","TxConfig","txConfig","RxSession","_b","session","config","log","_session","_retryLogic","_createRetryLogic","_log","prototype","run","query","parameters","transactionConfig","_this","default","Observable","observer","next","complete","err","error","beginTransaction","_beginTransaction","_mode","api","UNMANAGED_TRANSACTION","readTransaction","work","_runTransaction","writeTransaction","executeRead","_executeInTransaction","executeWrite","accessMode","wrapper","txc","bind","close","then","catch","Symbol","asyncDispose","lastBookmark","lastBookmarks","apiTelemetryConfig","empty","tx","transactionWrapper","context","MANAGED_TRANSACTION","onTelemetrySuccess","undefined","retry","of","pipe","mergeMap","defer","throwError","catchError","rollback","concatWith","commit","maxRetryTimeout","maxTransactionRetryTime"],"sources":["D:/Study/Projects/El-Kasr Family Tree/client/node_modules/neo4j-driver/lib/session-rx.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar rxjs_1 = require(\"rxjs\");\nvar operators_1 = require(\"rxjs/operators\");\nvar result_rx_1 = __importDefault(require(\"./result-rx\"));\n// eslint-disable-next-line no-unused-vars\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar transaction_rx_1 = __importDefault(require(\"./transaction-rx\"));\nvar transaction_managed_rx_1 = __importDefault(require(\"./transaction-managed-rx\"));\nvar retry_logic_rx_1 = __importDefault(require(\"./internal/retry-logic-rx\"));\nvar _a = neo4j_driver_core_1.internal.constants, ACCESS_MODE_READ = _a.ACCESS_MODE_READ, ACCESS_MODE_WRITE = _a.ACCESS_MODE_WRITE, TELEMETRY_APIS = _a.TELEMETRY_APIS, TxConfig = neo4j_driver_core_1.internal.txConfig.TxConfig;\n/**\n * A Reactive session, which provides the same functionality as {@link Session} but through a Reactive API.\n */\nvar RxSession = /** @class */ (function () {\n    /**\n     * Constructs a reactive session with given default session instance and provided driver configuration.\n     *\n     * @protected\n     * @param {Object} param - Object parameter\n     * @param {Session} param.session - The underlying session instance to relay requests\n     */\n    function RxSession(_a) {\n        var _b = _a === void 0 ? {} : _a, session = _b.session, config = _b.config, log = _b.log;\n        this._session = session;\n        this._retryLogic = _createRetryLogic(config);\n        this._log = log;\n    }\n    /**\n     * Creates a reactive result that will execute the  query with the provided parameters and the provided\n     * transaction configuration that applies to the underlying auto-commit transaction.\n     *\n     * @public\n     * @param {string} query - Query to be executed.\n     * @param {Object} parameters - Parameter values to use in query execution.\n     * @param {TransactionConfig} transactionConfig - Configuration for the new auto-commit transaction.\n     * @returns {RxResult} - A reactive result\n     */\n    RxSession.prototype.run = function (query, parameters, transactionConfig) {\n        var _this = this;\n        return new result_rx_1.default(new rxjs_1.Observable(function (observer) {\n            try {\n                observer.next(_this._session.run(query, parameters, transactionConfig));\n                observer.complete();\n            }\n            catch (err) {\n                observer.error(err);\n            }\n            return function () { };\n        }));\n    };\n    /**\n     * Starts a new explicit transaction with the provided transaction configuration.\n     *\n     * @public\n     * @param {TransactionConfig} transactionConfig - Configuration for the new transaction.\n     * @returns {Observable<RxTransaction>} - A reactive stream that will generate at most **one** RxTransaction instance.\n     */\n    RxSession.prototype.beginTransaction = function (transactionConfig) {\n        return this._beginTransaction(this._session._mode, transactionConfig, { api: TELEMETRY_APIS.UNMANAGED_TRANSACTION });\n    };\n    /**\n     * Executes the provided unit of work in a {@link READ} reactive transaction which is created with the provided\n     * transaction configuration.\n     * @public\n     * @deprecated This method will be removed in version 6.0. Please, use {@link RxSession#executeRead} instead.\n     * @param {function(txc: RxTransaction): Observable} work - A unit of work to be executed.\n     * @param {TransactionConfig} transactionConfig - Configuration for the enclosing transaction created by the driver.\n     * @returns {Observable} - A reactive stream returned by the unit of work.\n     */\n    RxSession.prototype.readTransaction = function (work, transactionConfig) {\n        return this._runTransaction(ACCESS_MODE_READ, work, transactionConfig);\n    };\n    /**\n     * Executes the provided unit of work in a {@link WRITE} reactive transaction which is created with the provided\n     * transaction configuration.\n     * @public\n     * @deprecated This method will be removed in version 6.0. Please, use {@link RxSession#executeWrite} instead.\n     * @param {function(txc: RxTransaction): Observable} work - A unit of work to be executed.\n     * @param {TransactionConfig} transactionConfig - Configuration for the enclosing transaction created by the driver.\n     * @returns {Observable} - A reactive stream returned by the unit of work.\n     */\n    RxSession.prototype.writeTransaction = function (work, transactionConfig) {\n        return this._runTransaction(ACCESS_MODE_WRITE, work, transactionConfig);\n    };\n    /**\n     * Executes the provided unit of work in a {@link READ} reactive transaction which is created with the provided\n     * transaction configuration.\n     * @public\n     * @param {function(txc: RxManagedTransaction): Observable} work - A unit of work to be executed.\n     * @param {TransactionConfig} transactionConfig - Configuration for the enclosing transaction created by the driver.\n     * @returns {Observable} - A reactive stream returned by the unit of work.\n     */\n    RxSession.prototype.executeRead = function (work, transactionConfig) {\n        return this._executeInTransaction(ACCESS_MODE_READ, work, transactionConfig);\n    };\n    /**\n     * Executes the provided unit of work in a {@link WRITE} reactive transaction which is created with the provided\n     * transaction configuration.\n     * @public\n     * @param {function(txc: RxManagedTransaction): Observable} work - A unit of work to be executed.\n     * @param {TransactionConfig} transactionConfig - Configuration for the enclosing transaction created by the driver.\n     * @returns {Observable} - A reactive stream returned by the unit of work.\n     */\n    RxSession.prototype.executeWrite = function (work, transactionConfig) {\n        return this._executeInTransaction(ACCESS_MODE_WRITE, work, transactionConfig);\n    };\n    /**\n     * @private\n     * @param {function(txc: RxManagedTransaction): Observable} work\n     * @param {TransactionConfig} transactionConfig\n     * @returns {Observable}\n     */\n    RxSession.prototype._executeInTransaction = function (accessMode, work, transactionConfig) {\n        var wrapper = function (txc) { return new transaction_managed_rx_1.default({\n            run: txc.run.bind(txc)\n        }); };\n        return this._runTransaction(accessMode, work, transactionConfig, wrapper);\n    };\n    /**\n     * Closes this reactive session.\n     *\n     * @public\n     * @returns {Observable} - An empty reactive stream\n     */\n    RxSession.prototype.close = function () {\n        var _this = this;\n        return new rxjs_1.Observable(function (observer) {\n            _this._session\n                .close()\n                .then(function () {\n                observer.complete();\n            })\n                .catch(function (err) { return observer.error(err); });\n        });\n    };\n    RxSession.prototype[Symbol.asyncDispose] = function () {\n        return this.close();\n    };\n    /**\n     * Returns the bookmarks received following the last successfully completed query, which is executed\n     * either in an {@link RxTransaction} obtained from this session instance or directly through one of\n     * the {@link RxSession#run} method of this session instance.\n     *\n     * If no bookmarks were received or if this transaction was rolled back, the bookmarks value will not be\n     * changed.\n     *\n     * @deprecated This method will be removed in 6.0 version. Please, use {@link RxSession#lastBookmarks} instead.\n     *\n     * @public\n     * @returns {string[]}\n     */\n    RxSession.prototype.lastBookmark = function () {\n        return this.lastBookmarks();\n    };\n    /**\n     * Returns the bookmarks received following the last successfully completed query, which is executed\n     * either in an {@link RxTransaction} obtained from this session instance or directly through one of\n     * the {@link RxSession#run} method of this session instance.\n     *\n     * If no bookmarks were received or if this transaction was rolled back, the bookmarks value will not be\n     * changed.\n     *\n     * @public\n     * @returns {string[]}\n     */\n    RxSession.prototype.lastBookmarks = function () {\n        return this._session.lastBookmarks();\n    };\n    /**\n     * @private\n     */\n    RxSession.prototype._beginTransaction = function (accessMode, transactionConfig, apiTelemetryConfig) {\n        var _this = this;\n        var txConfig = TxConfig.empty();\n        if (transactionConfig) {\n            txConfig = new TxConfig(transactionConfig, this._log);\n        }\n        return new rxjs_1.Observable(function (observer) {\n            try {\n                _this._session._beginTransaction(accessMode, txConfig, apiTelemetryConfig)\n                    .then(function (tx) {\n                    observer.next(new transaction_rx_1.default(tx));\n                    observer.complete();\n                })\n                    .catch(function (err) { return observer.error(err); });\n            }\n            catch (err) {\n                observer.error(err);\n            }\n            return function () { };\n        });\n    };\n    /**\n     * @private\n     */\n    RxSession.prototype._runTransaction = function (accessMode, work, transactionConfig, transactionWrapper) {\n        var _this = this;\n        if (transactionWrapper === void 0) { transactionWrapper = function (tx) { return tx; }; }\n        var txConfig = TxConfig.empty();\n        if (transactionConfig) {\n            txConfig = new TxConfig(transactionConfig);\n        }\n        var context = {\n            apiTelemetryConfig: {\n                api: TELEMETRY_APIS.MANAGED_TRANSACTION,\n                onTelemetrySuccess: function () {\n                    context.apiTelemetryConfig = undefined;\n                }\n            }\n        };\n        return this._retryLogic.retry((0, rxjs_1.of)(1).pipe((0, operators_1.mergeMap)(function () { return _this._beginTransaction(accessMode, txConfig, context.apiTelemetryConfig); }), (0, operators_1.mergeMap)(function (txc) {\n            return (0, rxjs_1.defer)(function () {\n                try {\n                    return work(transactionWrapper(txc));\n                }\n                catch (err) {\n                    return (0, rxjs_1.throwError)(function () { return err; });\n                }\n            }).pipe((0, operators_1.catchError)(function (err) { return txc.rollback().pipe((0, operators_1.concatWith)((0, rxjs_1.throwError)(function () { return err; }))); }), (0, operators_1.concatWith)(txc.commit()));\n        })));\n    };\n    return RxSession;\n}());\nexports.default = RxSession;\nfunction _createRetryLogic(config) {\n    var maxRetryTimeout = config && config.maxTransactionRetryTime\n        ? config.maxTransactionRetryTime\n        : null;\n    return new retry_logic_rx_1.default({ maxRetryTimeout: maxRetryTimeout });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}