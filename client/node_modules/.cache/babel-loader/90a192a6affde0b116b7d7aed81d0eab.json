{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Stats = exports.QueryStatistics = exports.ProfiledPlan = exports.Plan = exports.ServerInfo = exports.queryType = void 0;\nvar internal_1 = require(\"./internal\");\nvar notification_1 = require(\"./notification\");\n/**\n * A ResultSummary instance contains structured metadata for a {@link Result}.\n * @access public\n */\nvar ResultSummary = /** @class */function () {\n  /**\n   * @constructor\n   * @param {string} query - The query this summary is for\n   * @param {Object} parameters - Parameters for the query\n   * @param {Object} metadata - Query metadata\n   * @param {number|undefined} protocolVersion - Bolt Protocol Version\n   */\n  function ResultSummary(query, parameters, metadata, protocolVersion) {\n    var _a, _b, _c;\n    /**\n     * The query and parameters this summary is for.\n     * @type {{text: string, parameters: Object}}\n     * @public\n     */\n    this.query = {\n      text: query,\n      parameters: parameters\n    };\n    /**\n     * The type of query executed. Can be \"r\" for read-only query, \"rw\" for read-write query,\n     * \"w\" for write-only query and \"s\" for schema-write query.\n     * String constants are available in {@link queryType} object.\n     * @type {string}\n     * @public\n     */\n    this.queryType = metadata.type;\n    /**\n     * Counters for operations the query triggered.\n     * @type {QueryStatistics}\n     * @public\n     */\n    this.counters = new QueryStatistics((_a = metadata.stats) !== null && _a !== void 0 ? _a : {});\n    // for backwards compatibility, remove in future version\n    /**\n     * Use {@link ResultSummary.counters} instead.\n     * @type {QueryStatistics}\n     * @deprecated\n     */\n    this.updateStatistics = this.counters;\n    /**\n     * This describes how the database will execute the query.\n     * Query plan for the executed query if available, otherwise undefined.\n     * Will only be populated for queries that start with \"EXPLAIN\".\n     * @type {Plan|false}\n     * @public\n     */\n    this.plan = metadata.plan != null || metadata.profile != null ? new Plan((_b = metadata.plan) !== null && _b !== void 0 ? _b : metadata.profile) : false;\n    /**\n     * This describes how the database did execute your query. This will contain detailed information about what\n     * each step of the plan did. Profiled query plan for the executed query if available, otherwise undefined.\n     * Will only be populated for queries that start with \"PROFILE\".\n     * @type {ProfiledPlan}\n     * @public\n     */\n    this.profile = metadata.profile != null ? new ProfiledPlan(metadata.profile) : false;\n    /**\n     * An array of notifications that might arise when executing the query. Notifications can be warnings about\n     * problematic queries or other valuable information that can be presented in a client. Unlike failures\n     * or errors, notifications do not affect the execution of a query.\n     * @type {Array<Notification>}\n     * @public\n     */\n    this.notifications = (0, notification_1.buildNotificationsFromMetadata)(metadata);\n    /**\n     * A list of GqlStatusObjects that arise when executing the query.\n     *\n     * The list always contains at least 1 status representing the Success, No Data or Omitted Result.\n     *\n     * When discarding records while connected to a non-gql aware server and using a RxSession,\n     * the driver might not be able to tell apart Success and No Data.\n     *\n     * All other status are notifications like warnings about problematic queries or other valuable\n     * information that can be presented in a client.\n     *\n     * The GqlStatusObjects will be presented in the following order:\n     *\n     * - A “no data” (02xxx) has precedence over a warning;\n     * - A warning (01xxx) has precedence over a success.\n     * - A success (00xxx) has precedence over anything informational (03xxx)\n     *\n     * @type {Array<GqlStatusObject>}\n     * @public\n     * @experimental\n     */\n    this.gqlStatusObjects = (0, notification_1.buildGqlStatusObjectFromMetadata)(metadata);\n    /**\n     * The basic information of the server where the result is obtained from.\n     * @type {ServerInfo}\n     * @public\n     */\n    this.server = new ServerInfo(metadata.server, protocolVersion);\n    /**\n     * The time it took the server to consume the result.\n     * @type {number}\n     * @public\n     */\n    this.resultConsumedAfter = metadata.result_consumed_after;\n    /**\n     * The time it took the server to make the result available for consumption in milliseconds.\n     * @type {number}\n     * @public\n     */\n    this.resultAvailableAfter = metadata.result_available_after;\n    /**\n     * The database name where this summary is obtained from.\n     * @type {{name: string}}\n     * @public\n     */\n    this.database = {\n      name: (_c = metadata.db) !== null && _c !== void 0 ? _c : null\n    };\n  }\n  /**\n   * Check if the result summary has a plan\n   * @return {boolean}\n   */\n  ResultSummary.prototype.hasPlan = function () {\n    return this.plan instanceof Plan;\n  };\n  /**\n   * Check if the result summary has a profile\n   * @return {boolean}\n   */\n  ResultSummary.prototype.hasProfile = function () {\n    return this.profile instanceof ProfiledPlan;\n  };\n  return ResultSummary;\n}();\n/**\n * Class for execution plan received by prepending Cypher with EXPLAIN.\n * @access public\n */\nvar Plan = /** @class */function () {\n  /**\n   * Create a Plan instance\n   * @constructor\n   * @param {Object} plan - Object with plan data\n   */\n  function Plan(plan) {\n    this.operatorType = plan.operatorType;\n    this.identifiers = plan.identifiers;\n    this.arguments = plan.args;\n    this.children = plan.children != null ? plan.children.map(function (child) {\n      return new Plan(child);\n    }) : [];\n  }\n  return Plan;\n}();\nexports.Plan = Plan;\n/**\n * Class for execution plan received by prepending Cypher with PROFILE.\n * @access public\n */\nvar ProfiledPlan = /** @class */function () {\n  /**\n   * Create a ProfiledPlan instance\n   * @constructor\n   * @param {Object} profile - Object with profile data\n   */\n  function ProfiledPlan(profile) {\n    this.operatorType = profile.operatorType;\n    this.identifiers = profile.identifiers;\n    this.arguments = profile.args;\n    this.dbHits = valueOrDefault('dbHits', profile);\n    this.rows = valueOrDefault('rows', profile);\n    this.pageCacheMisses = valueOrDefault('pageCacheMisses', profile);\n    this.pageCacheHits = valueOrDefault('pageCacheHits', profile);\n    this.pageCacheHitRatio = valueOrDefault('pageCacheHitRatio', profile);\n    this.time = valueOrDefault('time', profile);\n    this.children = profile.children != null ? profile.children.map(function (child) {\n      return new ProfiledPlan(child);\n    }) : [];\n  }\n  ProfiledPlan.prototype.hasPageCacheStats = function () {\n    return this.pageCacheMisses > 0 || this.pageCacheHits > 0 || this.pageCacheHitRatio > 0;\n  };\n  return ProfiledPlan;\n}();\nexports.ProfiledPlan = ProfiledPlan;\n/**\n * Stats Query statistics dictionary for a {@link QueryStatistics}\n * @public\n */\nvar Stats = /** @class */function () {\n  /**\n   * @constructor\n   * @private\n   */\n  function Stats() {\n    /**\n     * nodes created\n     * @type {number}\n     * @public\n     */\n    this.nodesCreated = 0;\n    /**\n     * nodes deleted\n     * @type {number}\n     * @public\n     */\n    this.nodesDeleted = 0;\n    /**\n     * relationships created\n     * @type {number}\n     * @public\n     */\n    this.relationshipsCreated = 0;\n    /**\n     * relationships deleted\n     * @type {number}\n     * @public\n     */\n    this.relationshipsDeleted = 0;\n    /**\n     * properties set\n     * @type {number}\n     * @public\n     */\n    this.propertiesSet = 0;\n    /**\n     * labels added\n     * @type {number}\n     * @public\n     */\n    this.labelsAdded = 0;\n    /**\n     * labels removed\n     * @type {number}\n     * @public\n     */\n    this.labelsRemoved = 0;\n    /**\n     * indexes added\n     * @type {number}\n     * @public\n     */\n    this.indexesAdded = 0;\n    /**\n     * indexes removed\n     * @type {number}\n     * @public\n     */\n    this.indexesRemoved = 0;\n    /**\n     * constraints added\n     * @type {number}\n     * @public\n     */\n    this.constraintsAdded = 0;\n    /**\n     * constraints removed\n     * @type {number}\n     * @public\n     */\n    this.constraintsRemoved = 0;\n  }\n  return Stats;\n}();\nexports.Stats = Stats;\n/**\n * Get statistical information for a {@link Result}.\n * @access public\n */\nvar QueryStatistics = /** @class */function () {\n  /**\n   * Structurize the statistics\n   * @constructor\n   * @param {Object} statistics - Result statistics\n   */\n  function QueryStatistics(statistics) {\n    var _this = this;\n    this._stats = {\n      nodesCreated: 0,\n      nodesDeleted: 0,\n      relationshipsCreated: 0,\n      relationshipsDeleted: 0,\n      propertiesSet: 0,\n      labelsAdded: 0,\n      labelsRemoved: 0,\n      indexesAdded: 0,\n      indexesRemoved: 0,\n      constraintsAdded: 0,\n      constraintsRemoved: 0\n    };\n    this._systemUpdates = 0;\n    Object.keys(statistics).forEach(function (index) {\n      // To camelCase\n      var camelCaseIndex = index.replace(/(-\\w)/g, function (m) {\n        return m[1].toUpperCase();\n      });\n      if (camelCaseIndex in _this._stats) {\n        _this._stats[camelCaseIndex] = internal_1.util.toNumber(statistics[index]);\n      } else if (camelCaseIndex === 'systemUpdates') {\n        _this._systemUpdates = internal_1.util.toNumber(statistics[index]);\n      } else if (camelCaseIndex === 'containsSystemUpdates') {\n        _this._containsSystemUpdates = statistics[index];\n      } else if (camelCaseIndex === 'containsUpdates') {\n        _this._containsUpdates = statistics[index];\n      }\n    });\n    this._stats = Object.freeze(this._stats);\n  }\n  /**\n   * Did the database get updated?\n   * @return {boolean}\n   */\n  QueryStatistics.prototype.containsUpdates = function () {\n    var _this = this;\n    return this._containsUpdates !== undefined ? this._containsUpdates : Object.keys(this._stats).reduce(function (last, current) {\n      return last + _this._stats[current];\n    }, 0) > 0;\n  };\n  /**\n   * Returns the query statistics updates in a dictionary.\n   * @returns {Stats}\n   */\n  QueryStatistics.prototype.updates = function () {\n    return this._stats;\n  };\n  /**\n   * Return true if the system database get updated, otherwise false\n   * @returns {boolean} - If the system database get updated or not.\n   */\n  QueryStatistics.prototype.containsSystemUpdates = function () {\n    return this._containsSystemUpdates !== undefined ? this._containsSystemUpdates : this._systemUpdates > 0;\n  };\n  /**\n   * @returns {number} - Number of system updates\n   */\n  QueryStatistics.prototype.systemUpdates = function () {\n    return this._systemUpdates;\n  };\n  return QueryStatistics;\n}();\nexports.QueryStatistics = QueryStatistics;\n/**\n * Class for exposing server info from a result.\n * @access public\n */\nvar ServerInfo = /** @class */function () {\n  /**\n   * Create a ServerInfo instance\n   * @constructor\n   * @param {Object} serverMeta - Object with serverMeta data\n   * @param {Object} connectionInfo - Bolt connection info\n   * @param {number} protocolVersion - Bolt Protocol Version\n   */\n  function ServerInfo(serverMeta, protocolVersion) {\n    if (serverMeta != null) {\n      /**\n       * The server adress\n       * @type {string}\n       * @public\n       */\n      this.address = serverMeta.address;\n      /**\n       * The server user agent string\n       * @type {string}\n       * @public\n       */\n      this.agent = serverMeta.version;\n    }\n    /**\n     * The protocol version used by the connection\n     * @type {number}\n     * @public\n     */\n    this.protocolVersion = protocolVersion;\n  }\n  return ServerInfo;\n}();\nexports.ServerInfo = ServerInfo;\nfunction valueOrDefault(key, values, defaultValue) {\n  if (defaultValue === void 0) {\n    defaultValue = 0;\n  }\n  if (values !== false && key in values) {\n    var value = values[key];\n    return internal_1.util.toNumber(value);\n  } else {\n    return defaultValue;\n  }\n}\n/**\n * The constants for query types\n * @type {{SCHEMA_WRITE: string, WRITE_ONLY: string, READ_ONLY: string, READ_WRITE: string}}\n */\nvar queryType = {\n  READ_ONLY: 'r',\n  READ_WRITE: 'rw',\n  WRITE_ONLY: 'w',\n  SCHEMA_WRITE: 's'\n};\nexports.queryType = queryType;\nexports.default = ResultSummary;","map":{"version":3,"names":["Object","defineProperty","exports","value","Stats","QueryStatistics","ProfiledPlan","Plan","ServerInfo","queryType","internal_1","require","notification_1","ResultSummary","query","parameters","metadata","protocolVersion","_a","_b","_c","text","type","counters","stats","updateStatistics","plan","profile","notifications","buildNotificationsFromMetadata","gqlStatusObjects","buildGqlStatusObjectFromMetadata","server","resultConsumedAfter","result_consumed_after","resultAvailableAfter","result_available_after","database","name","db","prototype","hasPlan","hasProfile","operatorType","identifiers","arguments","args","children","map","child","dbHits","valueOrDefault","rows","pageCacheMisses","pageCacheHits","pageCacheHitRatio","time","hasPageCacheStats","nodesCreated","nodesDeleted","relationshipsCreated","relationshipsDeleted","propertiesSet","labelsAdded","labelsRemoved","indexesAdded","indexesRemoved","constraintsAdded","constraintsRemoved","statistics","_this","_stats","_systemUpdates","keys","forEach","index","camelCaseIndex","replace","m","toUpperCase","util","toNumber","_containsSystemUpdates","_containsUpdates","freeze","containsUpdates","undefined","reduce","last","current","updates","containsSystemUpdates","systemUpdates","serverMeta","address","agent","version","key","values","defaultValue","READ_ONLY","READ_WRITE","WRITE_ONLY","SCHEMA_WRITE","default"],"sources":["D:/Study/Projects/Copy 4/client/node_modules/neo4j-driver-core/lib/result-summary.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Stats = exports.QueryStatistics = exports.ProfiledPlan = exports.Plan = exports.ServerInfo = exports.queryType = void 0;\nvar internal_1 = require(\"./internal\");\nvar notification_1 = require(\"./notification\");\n/**\n * A ResultSummary instance contains structured metadata for a {@link Result}.\n * @access public\n */\nvar ResultSummary = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {string} query - The query this summary is for\n     * @param {Object} parameters - Parameters for the query\n     * @param {Object} metadata - Query metadata\n     * @param {number|undefined} protocolVersion - Bolt Protocol Version\n     */\n    function ResultSummary(query, parameters, metadata, protocolVersion) {\n        var _a, _b, _c;\n        /**\n         * The query and parameters this summary is for.\n         * @type {{text: string, parameters: Object}}\n         * @public\n         */\n        this.query = { text: query, parameters: parameters };\n        /**\n         * The type of query executed. Can be \"r\" for read-only query, \"rw\" for read-write query,\n         * \"w\" for write-only query and \"s\" for schema-write query.\n         * String constants are available in {@link queryType} object.\n         * @type {string}\n         * @public\n         */\n        this.queryType = metadata.type;\n        /**\n         * Counters for operations the query triggered.\n         * @type {QueryStatistics}\n         * @public\n         */\n        this.counters = new QueryStatistics((_a = metadata.stats) !== null && _a !== void 0 ? _a : {});\n        // for backwards compatibility, remove in future version\n        /**\n         * Use {@link ResultSummary.counters} instead.\n         * @type {QueryStatistics}\n         * @deprecated\n         */\n        this.updateStatistics = this.counters;\n        /**\n         * This describes how the database will execute the query.\n         * Query plan for the executed query if available, otherwise undefined.\n         * Will only be populated for queries that start with \"EXPLAIN\".\n         * @type {Plan|false}\n         * @public\n         */\n        this.plan =\n            metadata.plan != null || metadata.profile != null\n                ? new Plan((_b = metadata.plan) !== null && _b !== void 0 ? _b : metadata.profile)\n                : false;\n        /**\n         * This describes how the database did execute your query. This will contain detailed information about what\n         * each step of the plan did. Profiled query plan for the executed query if available, otherwise undefined.\n         * Will only be populated for queries that start with \"PROFILE\".\n         * @type {ProfiledPlan}\n         * @public\n         */\n        this.profile = metadata.profile != null ? new ProfiledPlan(metadata.profile) : false;\n        /**\n         * An array of notifications that might arise when executing the query. Notifications can be warnings about\n         * problematic queries or other valuable information that can be presented in a client. Unlike failures\n         * or errors, notifications do not affect the execution of a query.\n         * @type {Array<Notification>}\n         * @public\n         */\n        this.notifications = (0, notification_1.buildNotificationsFromMetadata)(metadata);\n        /**\n         * A list of GqlStatusObjects that arise when executing the query.\n         *\n         * The list always contains at least 1 status representing the Success, No Data or Omitted Result.\n         *\n         * When discarding records while connected to a non-gql aware server and using a RxSession,\n         * the driver might not be able to tell apart Success and No Data.\n         *\n         * All other status are notifications like warnings about problematic queries or other valuable\n         * information that can be presented in a client.\n         *\n         * The GqlStatusObjects will be presented in the following order:\n         *\n         * - A “no data” (02xxx) has precedence over a warning;\n         * - A warning (01xxx) has precedence over a success.\n         * - A success (00xxx) has precedence over anything informational (03xxx)\n         *\n         * @type {Array<GqlStatusObject>}\n         * @public\n         * @experimental\n         */\n        this.gqlStatusObjects = (0, notification_1.buildGqlStatusObjectFromMetadata)(metadata);\n        /**\n         * The basic information of the server where the result is obtained from.\n         * @type {ServerInfo}\n         * @public\n         */\n        this.server = new ServerInfo(metadata.server, protocolVersion);\n        /**\n         * The time it took the server to consume the result.\n         * @type {number}\n         * @public\n         */\n        this.resultConsumedAfter = metadata.result_consumed_after;\n        /**\n         * The time it took the server to make the result available for consumption in milliseconds.\n         * @type {number}\n         * @public\n         */\n        this.resultAvailableAfter = metadata.result_available_after;\n        /**\n         * The database name where this summary is obtained from.\n         * @type {{name: string}}\n         * @public\n         */\n        this.database = { name: (_c = metadata.db) !== null && _c !== void 0 ? _c : null };\n    }\n    /**\n     * Check if the result summary has a plan\n     * @return {boolean}\n     */\n    ResultSummary.prototype.hasPlan = function () {\n        return this.plan instanceof Plan;\n    };\n    /**\n     * Check if the result summary has a profile\n     * @return {boolean}\n     */\n    ResultSummary.prototype.hasProfile = function () {\n        return this.profile instanceof ProfiledPlan;\n    };\n    return ResultSummary;\n}());\n/**\n * Class for execution plan received by prepending Cypher with EXPLAIN.\n * @access public\n */\nvar Plan = /** @class */ (function () {\n    /**\n     * Create a Plan instance\n     * @constructor\n     * @param {Object} plan - Object with plan data\n     */\n    function Plan(plan) {\n        this.operatorType = plan.operatorType;\n        this.identifiers = plan.identifiers;\n        this.arguments = plan.args;\n        this.children = plan.children != null\n            ? plan.children.map(function (child) { return new Plan(child); })\n            : [];\n    }\n    return Plan;\n}());\nexports.Plan = Plan;\n/**\n * Class for execution plan received by prepending Cypher with PROFILE.\n * @access public\n */\nvar ProfiledPlan = /** @class */ (function () {\n    /**\n     * Create a ProfiledPlan instance\n     * @constructor\n     * @param {Object} profile - Object with profile data\n     */\n    function ProfiledPlan(profile) {\n        this.operatorType = profile.operatorType;\n        this.identifiers = profile.identifiers;\n        this.arguments = profile.args;\n        this.dbHits = valueOrDefault('dbHits', profile);\n        this.rows = valueOrDefault('rows', profile);\n        this.pageCacheMisses = valueOrDefault('pageCacheMisses', profile);\n        this.pageCacheHits = valueOrDefault('pageCacheHits', profile);\n        this.pageCacheHitRatio = valueOrDefault('pageCacheHitRatio', profile);\n        this.time = valueOrDefault('time', profile);\n        this.children = profile.children != null\n            ? profile.children.map(function (child) { return new ProfiledPlan(child); })\n            : [];\n    }\n    ProfiledPlan.prototype.hasPageCacheStats = function () {\n        return (this.pageCacheMisses > 0 ||\n            this.pageCacheHits > 0 ||\n            this.pageCacheHitRatio > 0);\n    };\n    return ProfiledPlan;\n}());\nexports.ProfiledPlan = ProfiledPlan;\n/**\n * Stats Query statistics dictionary for a {@link QueryStatistics}\n * @public\n */\nvar Stats = /** @class */ (function () {\n    /**\n     * @constructor\n     * @private\n     */\n    function Stats() {\n        /**\n         * nodes created\n         * @type {number}\n         * @public\n         */\n        this.nodesCreated = 0;\n        /**\n         * nodes deleted\n         * @type {number}\n         * @public\n         */\n        this.nodesDeleted = 0;\n        /**\n         * relationships created\n         * @type {number}\n         * @public\n         */\n        this.relationshipsCreated = 0;\n        /**\n         * relationships deleted\n         * @type {number}\n         * @public\n         */\n        this.relationshipsDeleted = 0;\n        /**\n         * properties set\n         * @type {number}\n         * @public\n         */\n        this.propertiesSet = 0;\n        /**\n         * labels added\n         * @type {number}\n         * @public\n         */\n        this.labelsAdded = 0;\n        /**\n         * labels removed\n         * @type {number}\n         * @public\n         */\n        this.labelsRemoved = 0;\n        /**\n         * indexes added\n         * @type {number}\n         * @public\n         */\n        this.indexesAdded = 0;\n        /**\n         * indexes removed\n         * @type {number}\n         * @public\n         */\n        this.indexesRemoved = 0;\n        /**\n         * constraints added\n         * @type {number}\n         * @public\n         */\n        this.constraintsAdded = 0;\n        /**\n         * constraints removed\n         * @type {number}\n         * @public\n         */\n        this.constraintsRemoved = 0;\n    }\n    return Stats;\n}());\nexports.Stats = Stats;\n/**\n * Get statistical information for a {@link Result}.\n * @access public\n */\nvar QueryStatistics = /** @class */ (function () {\n    /**\n     * Structurize the statistics\n     * @constructor\n     * @param {Object} statistics - Result statistics\n     */\n    function QueryStatistics(statistics) {\n        var _this = this;\n        this._stats = {\n            nodesCreated: 0,\n            nodesDeleted: 0,\n            relationshipsCreated: 0,\n            relationshipsDeleted: 0,\n            propertiesSet: 0,\n            labelsAdded: 0,\n            labelsRemoved: 0,\n            indexesAdded: 0,\n            indexesRemoved: 0,\n            constraintsAdded: 0,\n            constraintsRemoved: 0\n        };\n        this._systemUpdates = 0;\n        Object.keys(statistics).forEach(function (index) {\n            // To camelCase\n            var camelCaseIndex = index.replace(/(-\\w)/g, function (m) { return m[1].toUpperCase(); });\n            if (camelCaseIndex in _this._stats) {\n                _this._stats[camelCaseIndex] = internal_1.util.toNumber(statistics[index]);\n            }\n            else if (camelCaseIndex === 'systemUpdates') {\n                _this._systemUpdates = internal_1.util.toNumber(statistics[index]);\n            }\n            else if (camelCaseIndex === 'containsSystemUpdates') {\n                _this._containsSystemUpdates = statistics[index];\n            }\n            else if (camelCaseIndex === 'containsUpdates') {\n                _this._containsUpdates = statistics[index];\n            }\n        });\n        this._stats = Object.freeze(this._stats);\n    }\n    /**\n     * Did the database get updated?\n     * @return {boolean}\n     */\n    QueryStatistics.prototype.containsUpdates = function () {\n        var _this = this;\n        return this._containsUpdates !== undefined\n            ? this._containsUpdates\n            : (Object.keys(this._stats).reduce(function (last, current) {\n                return last + _this._stats[current];\n            }, 0) > 0);\n    };\n    /**\n     * Returns the query statistics updates in a dictionary.\n     * @returns {Stats}\n     */\n    QueryStatistics.prototype.updates = function () {\n        return this._stats;\n    };\n    /**\n     * Return true if the system database get updated, otherwise false\n     * @returns {boolean} - If the system database get updated or not.\n     */\n    QueryStatistics.prototype.containsSystemUpdates = function () {\n        return this._containsSystemUpdates !== undefined\n            ? this._containsSystemUpdates\n            : this._systemUpdates > 0;\n    };\n    /**\n     * @returns {number} - Number of system updates\n     */\n    QueryStatistics.prototype.systemUpdates = function () {\n        return this._systemUpdates;\n    };\n    return QueryStatistics;\n}());\nexports.QueryStatistics = QueryStatistics;\n/**\n * Class for exposing server info from a result.\n * @access public\n */\nvar ServerInfo = /** @class */ (function () {\n    /**\n     * Create a ServerInfo instance\n     * @constructor\n     * @param {Object} serverMeta - Object with serverMeta data\n     * @param {Object} connectionInfo - Bolt connection info\n     * @param {number} protocolVersion - Bolt Protocol Version\n     */\n    function ServerInfo(serverMeta, protocolVersion) {\n        if (serverMeta != null) {\n            /**\n             * The server adress\n             * @type {string}\n             * @public\n             */\n            this.address = serverMeta.address;\n            /**\n             * The server user agent string\n             * @type {string}\n             * @public\n             */\n            this.agent = serverMeta.version;\n        }\n        /**\n         * The protocol version used by the connection\n         * @type {number}\n         * @public\n         */\n        this.protocolVersion = protocolVersion;\n    }\n    return ServerInfo;\n}());\nexports.ServerInfo = ServerInfo;\nfunction valueOrDefault(key, values, defaultValue) {\n    if (defaultValue === void 0) { defaultValue = 0; }\n    if (values !== false && key in values) {\n        var value = values[key];\n        return internal_1.util.toNumber(value);\n    }\n    else {\n        return defaultValue;\n    }\n}\n/**\n * The constants for query types\n * @type {{SCHEMA_WRITE: string, WRITE_ONLY: string, READ_ONLY: string, READ_WRITE: string}}\n */\nvar queryType = {\n    READ_ONLY: 'r',\n    READ_WRITE: 'rw',\n    WRITE_ONLY: 'w',\n    SCHEMA_WRITE: 's'\n};\nexports.queryType = queryType;\nexports.default = ResultSummary;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}