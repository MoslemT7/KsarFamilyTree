{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\Projects\\\\El-Kasr Family Tree\\\\client\\\\src\\\\components\\\\RelationChecker.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './RelationChecker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst neo4j = require('neo4j-driver');\nconst translations = require('./translation.json');\nconst driver = neo4j.driver('neo4j+s://2cd0ce39.databases.neo4j.io',\n// URI of the Neo4j server\nneo4j.auth.basic('neo4j', 'nW1azrzTK-lrTOO5G1uOkUVFwelcQlEmKPHggPUB7xQ'));\nconst getRelationship = async (person1FullName, person2FullName) => {\n  const session = driver.session();\n  const gender1 = await getGender(person1FullName);\n  const gender2 = await getGender(person2FullName);\n  try {\n    const [person1Name, person1LastName] = person1FullName.trim().split(' ');\n    const [person2Name, person2LastName] = person2FullName.trim().split(' ');\n    console.log(`Looking up relationship between: ${person1FullName} and ${person2FullName}`);\n\n    // Function to get the parents/ancestors of a person\n    const getAncestors = async (personName, personLastName, maxLevels) => {\n      const ancestors = [];\n      let currentPersonName = personName;\n      let currentPersonLastName = personLastName;\n      for (let level = 0; level < maxLevels; level++) {\n        // Query the parents of the current person\n        const parentResult = await session.run(`\n          MATCH (parent)-[:FATHER_OF|MOTHER_OF*]->(p:Person {name: $currentPersonName, lastName: $currentPersonLastName})\n          RETURN parent\n        `, {\n          currentPersonName,\n          currentPersonLastName\n        });\n        if (parentResult.records.length > 0) {\n          const parent = parentResult.records[0].get('parent');\n          ancestors.push(parent);\n          currentPersonName = parent.properties.name;\n          currentPersonLastName = parent.properties.lastName;\n        } else {\n          break; // If no parent is found, stop the search\n        }\n      }\n      return ancestors;\n    };\n\n    // Get the ancestors for both persons\n    const maxLevels = 4; // Adjust the maximum levels to go up the tree\n    let person1Ancestors = await getAncestors(person1Name, person1LastName, maxLevels);\n    let person2Ancestors = await getAncestors(person2Name, person2LastName, maxLevels);\n    console.log(`Person 1 Ancestors: ${person1Ancestors.map(a => a.properties.name).join(' ben ')}`);\n    console.log(`Person 2 Ancestors: ${person2Ancestors.map(a => a.properties.name).join(' ben ')}`);\n    const translatedName1 = translateName(person1FullName);\n    const translatedName2 = translateName(person2FullName);\n\n    // Check for common ancestors between the two persons\n    for (let i = 0; i < person1Ancestors.length; i++) {\n      for (let j = 0; j < person2Ancestors.length; j++) {\n        if (person1Ancestors[i].identity.equals(person2Ancestors[j].identity)) {\n          // Found a common ancestor, calculate their relationship\n          var p1Level = i;\n          var p2Level = j;\n          console.log(`Level: (${p1Level}, ${p2Level})`);\n\n          // Check for the relationship based on levels and gender\n\n          if (p1Level === 0 && p2Level === 1) {\n            if (gender1 === 'Male') {\n              console.log(`${translatedName1} هو والد ${translatedName2}`);\n              return `${translatedName1} هو والد ${translatedName2}`;\n            } else {\n              console.log(`${translatedName1} هي والدة ${translatedName2}`);\n              return `${translatedName1} هي والدة ${translatedName2}`;\n            }\n          } else if (p1Level === 1 && p2Level === 0) {\n            if (gender1 === 'Male') {\n              console.log(`${translatedName1} هو ابن ${translatedName2}`);\n              return `${translatedName1} هو ابن ${translatedName2}`;\n            } else {\n              console.log(`${person1FullName} هي إبنة ${person2FullName}`);\n              return `${person1FullName} هي إبنة ${person2FullName}`;\n            }\n          } else if (p1Level === 2 && p2Level === 0) {\n            if (gender1 === 'Male') {\n              console.log(`${person1FullName} هو حفيد ${person2FullName}`);\n              return `${person1FullName} هو حفيد ${person2FullName}`;\n            } else {\n              console.log(`${person1FullName} هي حفيدة ${person2FullName}.`);\n              return `${person1FullName} هي حفيدة ${person2FullName}`;\n            }\n          } else if (p1Level === 0 && p2Level === 2) {\n            if (gender1 === 'Male') {\n              console.log(`${person1FullName} هو جدّ ${person2FullName}'.`);\n              return `${person1FullName} هو جدّ ${person2FullName}`;\n            } else {\n              console.log(`${person1FullName} هي جدّة ${person2FullName}.`);\n              return `${person1FullName} هي جدّة ${person2FullName}`;\n            }\n          } else if (p1Level === 3 && p2Level === 0) {\n            if (gender1 === 'Male') {\n              console.log(`${person1FullName} هو إبن حفيد ${person2FullName}.`);\n              return `${person1FullName} هو إبن حفيد ${person2FullName}`;\n            } else {\n              console.log(`${person1FullName} هي إبنة حفيدة ${person2FullName}.`);\n              return `${person1FullName} هي إبنة حفيدة ${person2FullName}`;\n            }\n          } else if (p1Level === 0 && p2Level === 3) {\n            if (gender1 === 'Male') {\n              console.log(`${person1FullName} هو جد والد ${person2FullName}'s great-grandfather.`);\n              return `${person1FullName} و جد والد ${person2FullName}'s great-grandfather`;\n            } else {\n              console.log(`${person1FullName}هي جدة والدة ${person2FullName}'s great-grandmother.`);\n              return `${person1FullName} هي جدة والدة ${person2FullName}'s great-grandmother`;\n            }\n          } else if (p1Level === 1 && p2Level === 1) {\n            if (gender1 === 'Male' && gender2 === 'Male') {\n              console.log(`${person1FullName} و ${person2FullName} إخوة.`);\n              return `${person1FullName} و ${person2FullName} إخوة`;\n            } else if (gender1 === 'Female' && gender2 === 'Female') {\n              console.log(`${person1FullName} و ${person2FullName} أخوات.`);\n              return `${person1FullName} و ${person2FullName} أخوات`;\n            } else {\n              console.log(`${person1FullName} و ${person2FullName} إخوة.`);\n              return `${person1FullName} و ${person2FullName} إخوة`;\n            }\n          } else if (p1Level === 2 && p2Level === 1) {\n            if (gender1 === 'Male') {\n              console.log(`${translatedName1} هو ابن اخ ${translatedName2}`);\n              return `${translatedName1} هو ابن اخ ${translatedName2}`;\n            } else {\n              console.log(`${person1FullName} is ${person2FullName}'s niece.`);\n              return `${person1FullName} is ${person2FullName}'s niece`;\n            }\n          } else if (p1Level === 1 && p2Level === 2) {\n            if (gender1 === 'Male') {\n              console.log(`${person1FullName} is ${person2FullName}'s uncle.`);\n              return `${person1FullName} is ${person2FullName}'s uncle`;\n            } else {\n              console.log(`${person1FullName} is ${person2FullName}'s aunt.`);\n              return `${person1FullName} is ${person2FullName}'s aunt`;\n            }\n          } else if (p1Level === 2 && p2Level === 2) {\n            console.log(`${person1FullName} and ${person2FullName} are cousins.`);\n            const p1AncestorFullName = getAncestorFullName(person1Ancestors, 1);\n            const p1AncestorGender = await getGender(p1AncestorFullName);\n            const p2AncestorFullName = getAncestorFullName(person2Ancestors, 1);\n            const p2AncestorGender = await getGender(p2AncestorFullName);\n            if (gender1 === 'Male') {\n              if (p1AncestorGender === 'Male') {\n                if (p2AncestorGender === 'Male') {\n                  // ولد عمه\n                  console.log(`${person1FullName} is ${person2FullName}'s paternal uncle's son.`);\n                  return `${person1FullName} is ${person2FullName}'s paternal uncle's son`;\n                } else {\n                  // ولد عمته\n                  console.log(`${person1FullName} is ${person2FullName}'s paternal aunt's son.`);\n                  return `${person1FullName} is ${person2FullName}'s paternal aunt's son`;\n                }\n              } else {\n                if (p2AncestorGender === 'Male') {\n                  // ولد خاله\n                  console.log(`${person1FullName} is ${person2FullName}'s maternal uncle's son.`);\n                  return `${person1FullName} is ${person2FullName}'s maternal uncle's son`;\n                } else {\n                  // ولد خالته\n                  console.log(`${person1FullName} is ${person2FullName}'s maternal aunt's son.`);\n                  return `${person1FullName} is ${person2FullName}'s maternal aunt's son`;\n                }\n              }\n            } else {\n              if (p1AncestorGender === 'Male') {\n                if (p2AncestorGender === 'Male') {\n                  // بنت عمه\n                  console.log(`${person1FullName} is ${person2FullName}'s paternal uncle's daughter.`);\n                  return `${person1FullName} is ${person2FullName}'s paternal uncle's daughter`;\n                } else {\n                  // بنت عمته\n                  console.log(`${person1FullName} is ${person2FullName}'s paternal aunt's daughter.`);\n                  return `${person1FullName} is ${person2FullName}'s paternal aunt's daughter`;\n                }\n              } else {\n                if (p2AncestorGender === 'Male') {\n                  // بنت خاله\n                  console.log(`${person1FullName} is ${person2FullName}'s maternal uncle's daughter.`);\n                  return `${person1FullName} is ${person2FullName}'s maternal uncle's daughter`;\n                } else {\n                  // بنت خالته\n                  console.log(`${person1FullName} is ${person2FullName}'s maternal aunt's daughter.`);\n                  return `${person1FullName} is ${person2FullName}'s maternal aunt's daughter`;\n                }\n              }\n            }\n          } else if (p1Level === 2 && p2Level === 3) {\n            const p1AncestorFullName = getAncestorFullName(person1Ancestors, 1);\n            const p1AncestorGender = await getGender(p1AncestorFullName);\n            const p2AncestorFullName = getAncestorFullName(person2Ancestors, 1);\n            const p2AncestorGender = await getGender(p2AncestorFullName);\n            if (gender1 === 'Male') {\n              if (p1AncestorGender === 'Male') {\n                // father's side\n                if (p2AncestorGender === 'Male') {\n                  // father's brother's son\n                  console.log(`${person1FullName} is ${person2FullName}'s father paternal uncle's son.`);\n                  return `${person1FullName} is ${person2FullName}'s father paternal uncle's son`;\n                } else {\n                  // father's brother's daughter\n                  console.log(`${person1FullName} is ${person2FullName}'s father paternal uncle's son.`);\n                  return `${person1FullName} is ${person2FullName}'s father paternal uncle's son`;\n                }\n              } else {\n                // mother's side\n                if (p2AncestorGender === 'Male') {\n                  // mother's brother's son\n                  console.log(`${person1FullName} is ${person2FullName}'s father paternal uncle's son.`);\n                  return `${person1FullName} is ${person2FullName}'s father paternal uncle's son.`;\n                } else {\n                  // mother's brother's daughter\n                  console.log(`${person1FullName} is ${person2FullName}'s maternal aunt's son.`);\n                  return `${person1FullName} is ${person2FullName}'s maternal aunt's son`;\n                }\n              }\n            } else {\n              // If person1 is female\n\n              if (p1AncestorGender === 'Male') {\n                // father's side\n                if (p2AncestorGender === 'Male') {\n                  // father's brother's son\n                  console.log(`${person1FullName} is ${person2FullName}'s paternal uncle's daughter.`);\n                  return `${person1FullName} is ${person2FullName}'s paternal uncle's daughter`;\n                } else {\n                  // father's brother's daughter\n                  console.log(`${person1FullName} is ${person2FullName}'s paternal aunt's daughter.`);\n                  return `${person1FullName} is ${person2FullName}'s paternal aunt's daughter`;\n                }\n              } else {\n                // mother's side\n                if (p2AncestorGender === 'Male') {\n                  // mother's brother's son\n                  console.log(`${person1FullName} is ${person2FullName}'s maternal uncle's daughter.`);\n                  return `${person1FullName} is ${person2FullName}'s maternal uncle's daughter`;\n                } else {\n                  // mother's brother's daughter\n                  console.log(`${person1FullName} is ${person2FullName}'s maternal aunt's daughter.`);\n                  return `${person1FullName} is ${person2FullName}'s maternal aunt's daughter`;\n                }\n              }\n            }\n          } else if (p1Level === 3 && p2Level === 2) {\n            const p1AncestorFullName = getAncestorFullName(person1Ancestors, 1);\n            const p1AncestorGender = await getGender(p1AncestorFullName);\n            const p2AncestorFullName = getAncestorFullName(person2Ancestors, 1);\n            const p2AncestorGender = await getGender(p2AncestorFullName);\n            if (gender1 === 'Male') {\n              if (p1AncestorGender === 'Male') {\n                // father's side\n                if (p2AncestorGender === 'Male') {\n                  // father's brother's son\n                  console.log(`${person1FullName}'s father is ${person2FullName}'s paternal uncle's son.`);\n                  return `${person1FullName}'s father is ${person2FullName}'s paternal uncle's son`;\n                } else {\n                  // father's brother's daughter\n                  console.log(`${person1FullName}'s father is ${person2FullName}'s paternal uncle's son.`);\n                  return `${person1FullName}'s father is ${person2FullName}'s paternal uncle's son`;\n                }\n              } else {\n                // mother's side\n                if (p2AncestorGender === 'Male') {\n                  // mother's brother's son\n                  console.log(`${person1FullName}'s father is ${person2FullName}'s maternal uncle's son.`);\n                  return `${person1FullName}'s father is ${person2FullName}'s maternal uncle's son.`;\n                } else {\n                  // mother's brother's daughter\n                  console.log(`${person1FullName}'s mother is ${person2FullName}'s maternal aunt's son.`);\n                  return `${person1FullName}'s mother is ${person2FullName}'s maternal aunt's son`;\n                }\n              }\n            } else {\n              // If person1 is female\n              if (p1AncestorGender === 'Male') {\n                // father's side\n                if (p2AncestorGender === 'Male') {\n                  // father's brother's son\n                  console.log(`${person1FullName}'s father is ${person2FullName}'s paternal uncle's daughter.`);\n                  return `${person1FullName}'s father is ${person2FullName}'s paternal uncle's daughter`;\n                } else {\n                  // father's brother's daughter\n                  console.log(`${person1FullName}'s father is ${person2FullName}'s paternal aunt's daughter.`);\n                  return `${person1FullName}'s father is ${person2FullName}'s paternal aunt's daughter`;\n                }\n              } else {\n                // mother's side\n                if (p2AncestorGender === 'Male') {\n                  // mother's brother's son\n                  console.log(`${person1FullName}'s mother is ${person2FullName}'s maternal uncle's daughter.`);\n                  return `${person1FullName}'s mother is ${person2FullName}'s maternal uncle's daughter`;\n                } else {\n                  // mother's brother's daughter\n                  console.log(`${person1FullName}'s mother is ${person2FullName}'s maternal aunt's daughter.`);\n                  return `${person1FullName}'s mother is ${person2FullName}'s maternal aunt's daughter`;\n                }\n              }\n            }\n          }\n\n          // Their father are cousins OR Their Grandfathers/grandmothers are siblings.\n          else if (p1Level === 3 && p2Level === 3) {\n            const p1AncestorFullName = getAncestorFullName(person1Ancestors, 1);\n            const p1AncestorGender = await getGender(p1AncestorFullName);\n            const p1GreatAncestorFullName = getAncestorFullName(person1Ancestors, 2);\n            const p1GreatAncestorGender = await getGender(p1GreatAncestorFullName);\n            const p2AncestorFullName = getAncestorFullName(person2Ancestors, 1);\n            const p2AncestorGender = await getGender(p2AncestorFullName);\n            const p2GreatAncestorFullName = getAncestorFullName(person2Ancestors, 2);\n            const p2GreatAncestorGender = await getGender(p2GreatAncestorFullName);\n            // Ancestor changes paternal/maternal\n            // Great Ancestor changes grandfather/grandmother\n            if (p1AncestorGender === 'Male') {\n              if (p2AncestorGender === 'Male') {\n                if (p1GreatAncestorGender === 'Male') {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s paternal grandfather are brothers.`);\n                    return `${person1FullName}'s grandfather and ${person2FullName}'s grandfather are brothers.`;\n                  } else {\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s paternal grandmother are siblings.`);\n                    return `${person1FullName}'s grandfather and ${person2FullName}'s grandmother are brothers.`;\n                  }\n                } else {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s paternal grandfather are siblings.`);\n                    return `${person1FullName}'s grandmother and ${person2FullName}'s grandfather are brothers.`;\n                  } else {\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s paternal grandmother are sisters.`);\n                    return `${person1FullName}'s grandmother and ${person2FullName}'s grandmother are brothers.`;\n                  }\n                }\n              } else {\n                if (p1GreatAncestorGender === 'Male') {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s maternal grandfather are brothers.`);\n                    return `${person1FullName}'s grandfather and ${person2FullName}'s grandfather are brothers.`;\n                  } else {\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s maternal grandmother are siblings.`);\n                    return `${person1FullName}'s grandfather and ${person2FullName}'s grandmother are brothers.`;\n                  }\n                } else {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s maternal grandfather are siblings.`);\n                    return `${person1FullName}'s grandmother and ${person2FullName}'s grandfather are brothers.`;\n                  } else {\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s maternal grandmother are sisters.`);\n                    return `${person1FullName}'s grandmother and ${person2FullName}'s grandmother are brothers.`;\n                  }\n                }\n              }\n            } else {\n              if (p2AncestorGender === 'Male') {\n                if (p1GreatAncestorGender === 'Male') {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s paternal grandfather are brothers.`);\n                    return `${person1FullName}'s grandfather and ${person2FullName}'s grandfather are brothers.`;\n                  } else {\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s paternal grandmother are siblings.`);\n                    return `${person1FullName}'s grandfather and ${person2FullName}'s grandmother are brothers.`;\n                  }\n                } else {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s paternal grandfather are siblings.`);\n                    return `${person1FullName}'s grandmother and ${person2FullName}'s grandfather are brothers.`;\n                  } else {\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s paternal grandmother are sisters.`);\n                    return `${person1FullName}'s grandmother and ${person2FullName}'s grandmother are brothers.`;\n                  }\n                }\n              } else {\n                if (p1GreatAncestorGender === 'Male') {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s maternal grandfather are brothers.`);\n                    return `${person1FullName}'s grandfather and ${person2FullName}'s grandfather are brothers.`;\n                  } else {\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s maternal grandmother are siblings.`);\n                    return `${person1FullName}'s grandfather and ${person2FullName}'s grandmother are brothers.`;\n                  }\n                } else {\n                  if (p2GreatAncestorGender === 'Male') {\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s maternal grandfather are siblings.`);\n                    return `${person1FullName}'s grandmother and ${person2FullName}'s grandfather are brothers.`;\n                  } else {\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s maternal grandmother are sisters.`);\n                    return `${person1FullName}'s grandmother and ${person2FullName}'s grandmother are brothers.`;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    console.log('No direct relation found.');\n    return 'No direct relation found';\n  } catch (error) {\n    console.error('Error in relationship lookup:', error);\n    return 'Error in relationship lookup';\n  }\n};\nconst getGender = async fullName => {\n  const session = driver.session(); // Open a session\n\n  try {\n    // Split the full name into first and last name\n    const [firstName, lastName] = fullName.split(\" \");\n\n    // Run the query using both first name and last name\n    const result = await session.run(`MATCH (p:Person) WHERE toLower(p.name) = toLower($firstName) AND toLower(p.lastName) = toLower($lastName) RETURN p.gender AS gender`, {\n      firstName,\n      lastName\n    });\n    if (result.records.length > 0) {\n      const gender = result.records[0].get('gender');\n      // console.log(`Gender of ${fullName}: ${gender}`);\n      return gender; // Return the gender value\n    } else {\n      console.log(`No person found with the name ${fullName}`);\n      return null; // Return null when no person is found\n    }\n  } catch (error) {\n    console.error('Error retrieving gender:', error);\n    return null; // Return null in case of an error\n  } finally {\n    await session.close(); // Always close the session after the query\n  }\n};\nconst getAncestorFullName = (personAncestors, level) => {\n  // Check if the ancestor exists at the given level\n  if (!personAncestors[level - 1] || !personAncestors[level - 1].properties) {\n    return `Unknown (Level: ${level})`;\n  }\n  const ancestor = personAncestors[level - 1].properties;\n  const name = ancestor.name || \"Unknown\"; // Default to \"Unknown\" if name is missing\n  const lastName = ancestor.lastName || \"Unknown\"; // Default to \"Unknown\" if lastName is missing\n\n  return `${name} ${lastName}`;\n};\nexport const translateName = fullName => {\n  // Split the full name into parts (first name and last name)\n  const nameParts = fullName.split(' ');\n\n  // The first part is the first name, and the last part is the last name\n  const firstName = nameParts[0];\n  const lastName = nameParts[nameParts.length - 1];\n\n  // Translate the first and last names using the translations object\n  const translatedFirstName = translations[firstName] || firstName;\n  const translatedLastName = translations[lastName] || lastName;\n\n  // Return the translated full name\n  return `${translatedFirstName} ${translatedLastName}`;\n};\nconst RelationPage = () => {\n  _s();\n  const [person1, setPerson1] = useState('');\n  const [person2, setPerson2] = useState('');\n  const [relationship, setRelationship] = useState('');\n  const fetchRelationship = async (name1, name2) => {\n    const relationshipResult = await getRelationship(name1, name2);\n    console.log(relationshipResult);\n    return relationshipResult;\n  };\n  const FetchRelationship = async e => {\n    e.preventDefault();\n    const translatedName1 = translateName(person1);\n    const translatedName2 = translateName(person2);\n    const result = await fetchRelationship(person1, person2);\n    setRelationship(result);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relation-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u0645\\u0627\\u0647\\u064A \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629 \\u0628\\u064A\\u0646\\u0647\\u0645\\u0627\\u061F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: FetchRelationship,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"name1\",\n        type: \"text\",\n        placeholder: \"\\u0627\\u0644\\u0625\\u0633\\u0645 \\u0627\\u0644\\u0643\\u0627\\u0645\\u0644 \\u0627\\u0644\\u0623\\u0648\\u0644\",\n        value: person1,\n        onChange: e => setPerson1(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"name2\",\n        type: \"text\",\n        placeholder: \"\\u0627\\u0644\\u0625\\u0633\\u0645 \\u0627\\u0644\\u0643\\u0627\\u0645\\u0644 \\u0627\\u0644\\u062B\\u0627\\u0646\\u064A\",\n        value: person2,\n        onChange: e => setPerson2(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"\\u062A\\u062D\\u0642\\u0642 \\u0645\\u0646 \\u0627\\u0644\\u0639\\u0644\\u0627\\u0642\\u0629\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 55\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"relationHolder\",\n      children: relationship\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 535,\n    columnNumber: 5\n  }, this);\n};\n_s(RelationPage, \"ZmRqID8YiZUdpMqUYaZJShqvLKk=\");\n_c = RelationPage;\nexport default RelationPage;\nvar _c;\n$RefreshReg$(_c, \"RelationPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","neo4j","require","translations","driver","auth","basic","getRelationship","person1FullName","person2FullName","session","gender1","getGender","gender2","person1Name","person1LastName","trim","split","person2Name","person2LastName","console","log","getAncestors","personName","personLastName","maxLevels","ancestors","currentPersonName","currentPersonLastName","level","parentResult","run","records","length","parent","get","push","properties","name","lastName","person1Ancestors","person2Ancestors","map","a","join","translatedName1","translateName","translatedName2","i","j","identity","equals","p1Level","p2Level","p1AncestorFullName","getAncestorFullName","p1AncestorGender","p2AncestorFullName","p2AncestorGender","p1GreatAncestorFullName","p1GreatAncestorGender","p2GreatAncestorFullName","p2GreatAncestorGender","error","fullName","firstName","result","gender","close","personAncestors","ancestor","nameParts","translatedFirstName","translatedLastName","RelationPage","_s","person1","setPerson1","person2","setPerson2","relationship","setRelationship","fetchRelationship","name1","name2","relationshipResult","FetchRelationship","e","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","id","type","placeholder","value","onChange","target","_c","$RefreshReg$"],"sources":["D:/Study/Projects/El-Kasr Family Tree/client/src/components/RelationChecker.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './RelationChecker.css';\r\nconst neo4j = require('neo4j-driver');\r\nconst translations = require('./translation.json');\r\n\r\n\r\nconst driver = neo4j.driver(\r\n  'neo4j+s://2cd0ce39.databases.neo4j.io',  // URI of the Neo4j server\r\n  neo4j.auth.basic('neo4j', 'nW1azrzTK-lrTOO5G1uOkUVFwelcQlEmKPHggPUB7xQ'));\r\n\r\n\r\nconst getRelationship = async (person1FullName, person2FullName) => {\r\n  \r\n  const session = driver.session();\r\n\r\n  const gender1 = await getGender(person1FullName);\r\n  const gender2 = await getGender(person2FullName);\r\n  try {\r\n    const [person1Name, person1LastName] = person1FullName.trim().split(' ');\r\n    const [person2Name, person2LastName] = person2FullName.trim().split(' ');\r\n\r\n    console.log(`Looking up relationship between: ${person1FullName} and ${person2FullName}`);\r\n\r\n    // Function to get the parents/ancestors of a person\r\n    const getAncestors = async (personName, personLastName, maxLevels) => {\r\n      const ancestors = [];\r\n      let currentPersonName = personName;\r\n      let currentPersonLastName = personLastName;\r\n\r\n      for (let level = 0; level < maxLevels; level++) {\r\n        // Query the parents of the current person\r\n        const parentResult = await session.run(`\r\n          MATCH (parent)-[:FATHER_OF|MOTHER_OF*]->(p:Person {name: $currentPersonName, lastName: $currentPersonLastName})\r\n          RETURN parent\r\n        `, { currentPersonName, currentPersonLastName });\r\n\r\n        if (parentResult.records.length > 0) {\r\n          const parent = parentResult.records[0].get('parent');\r\n          ancestors.push(parent);\r\n          currentPersonName = parent.properties.name;\r\n          currentPersonLastName = parent.properties.lastName;\r\n        } else {\r\n          break; // If no parent is found, stop the search\r\n        }\r\n      }\r\n\r\n      return ancestors;\r\n    };\r\n\r\n    // Get the ancestors for both persons\r\n    const maxLevels = 4; // Adjust the maximum levels to go up the tree\r\n    let person1Ancestors = await getAncestors(person1Name, person1LastName, maxLevels);\r\n    let person2Ancestors = await getAncestors(person2Name, person2LastName, maxLevels);\r\n\r\n    console.log(`Person 1 Ancestors: ${person1Ancestors.map(a => a.properties.name).join(' ben ')}`);\r\n    console.log(`Person 2 Ancestors: ${person2Ancestors.map(a => a.properties.name).join(' ben ')}`);\r\n\r\n    const translatedName1 = translateName(person1FullName);\r\n    const translatedName2 = translateName(person2FullName);\r\n\r\n\r\n    // Check for common ancestors between the two persons\r\n    for (let i = 0; i < person1Ancestors.length; i++) {\r\n      for (let j = 0; j < person2Ancestors.length; j++) {\r\n        if (person1Ancestors[i].identity.equals(person2Ancestors[j].identity)) {\r\n          // Found a common ancestor, calculate their relationship\r\n          var p1Level = i;\r\n          var p2Level = j;\r\n          \r\n          console.log(`Level: (${p1Level}, ${p2Level})`);\r\n\r\n          // Check for the relationship based on levels and gender\r\n\r\n          if (p1Level === 0 && p2Level === 1) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${translatedName1} هو والد ${translatedName2}`);\r\n              return `${translatedName1} هو والد ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${translatedName1} هي والدة ${translatedName2}`);\r\n              return `${translatedName1} هي والدة ${translatedName2}`;\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 1 && p2Level === 0) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${translatedName1} هو ابن ${translatedName2}`);\r\n              return `${translatedName1} هو ابن ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} هي إبنة ${person2FullName}`);\r\n              return `${person1FullName} هي إبنة ${person2FullName}`;\r\n            }\r\n          } \r\n\r\n          else if (p1Level === 2 && p2Level === 0) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${person1FullName} هو حفيد ${person2FullName}`);\r\n              return `${person1FullName} هو حفيد ${person2FullName}`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} هي حفيدة ${person2FullName}.`);\r\n              return `${person1FullName} هي حفيدة ${person2FullName}`;\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 0 && p2Level === 2) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${person1FullName} هو جدّ ${person2FullName}'.`);\r\n              return `${person1FullName} هو جدّ ${person2FullName}`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} هي جدّة ${person2FullName}.`);\r\n              return `${person1FullName} هي جدّة ${person2FullName}`;\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 3 && p2Level === 0) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${person1FullName} هو إبن حفيد ${person2FullName}.`);\r\n              return `${person1FullName} هو إبن حفيد ${person2FullName}`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} هي إبنة حفيدة ${person2FullName}.`);\r\n              return `${person1FullName} هي إبنة حفيدة ${person2FullName}`;\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 0 && p2Level === 3) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${person1FullName} هو جد والد ${person2FullName}'s great-grandfather.`);\r\n              return `${person1FullName} و جد والد ${person2FullName}'s great-grandfather`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName}هي جدة والدة ${person2FullName}'s great-grandmother.`);\r\n              return `${person1FullName} هي جدة والدة ${person2FullName}'s great-grandmother`;\r\n            }\r\n          } \r\n          \r\n          else if (p1Level === 1 && p2Level === 1) {\r\n            if (gender1 === 'Male' && gender2 === 'Male'){\r\n              console.log(`${person1FullName} و ${person2FullName} إخوة.`);\r\n              return `${person1FullName} و ${person2FullName} إخوة`;\r\n            }\r\n            else if (gender1 === 'Female' && gender2 === 'Female'){\r\n              console.log(`${person1FullName} و ${person2FullName} أخوات.`);\r\n              return `${person1FullName} و ${person2FullName} أخوات`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} و ${person2FullName} إخوة.`);\r\n              return `${person1FullName} و ${person2FullName} إخوة`;\r\n            }\r\n          } \r\n          \r\n          else if (p1Level === 2 && p2Level === 1) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${translatedName1} هو ابن اخ ${translatedName2}`);\r\n              return `${translatedName1} هو ابن اخ ${translatedName2}`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} is ${person2FullName}'s niece.`);\r\n              return `${person1FullName} is ${person2FullName}'s niece`;\r\n            }\r\n          } \r\n          \r\n          else if (p1Level === 1 && p2Level === 2) {\r\n            if (gender1 === 'Male'){\r\n              console.log(`${person1FullName} is ${person2FullName}'s uncle.`);\r\n              return `${person1FullName} is ${person2FullName}'s uncle`;\r\n            }\r\n            else{\r\n              console.log(`${person1FullName} is ${person2FullName}'s aunt.`);\r\n              return `${person1FullName} is ${person2FullName}'s aunt`;\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 2 && p2Level === 2) {\r\n            console.log(`${person1FullName} and ${person2FullName} are cousins.`);\r\n          \r\n            const p1AncestorFullName = getAncestorFullName(person1Ancestors, 1);\r\n            const p1AncestorGender = await getGender(p1AncestorFullName);\r\n\r\n            const p2AncestorFullName = getAncestorFullName(person2Ancestors, 1);\r\n            const p2AncestorGender = await getGender(p2AncestorFullName);\r\n\r\n            if (gender1 === 'Male') { \r\n              if (p1AncestorGender === 'Male') { \r\n                if (p2AncestorGender === 'Male'){  // ولد عمه\r\n                  console.log(`${person1FullName} is ${person2FullName}'s paternal uncle's son.`);\r\n                  return `${person1FullName} is ${person2FullName}'s paternal uncle's son`;\r\n                }\r\n                else{ // ولد عمته\r\n                  console.log(`${person1FullName} is ${person2FullName}'s paternal aunt's son.`);\r\n                  return `${person1FullName} is ${person2FullName}'s paternal aunt's son`;\r\n                }\r\n              } \r\n              else {  \r\n                if (p2AncestorGender === 'Male'){  // ولد خاله\r\n                  console.log(`${person1FullName} is ${person2FullName}'s maternal uncle's son.`);\r\n                  return `${person1FullName} is ${person2FullName}'s maternal uncle's son`;\r\n                }\r\n                else{ // ولد خالته\r\n                  console.log(`${person1FullName} is ${person2FullName}'s maternal aunt's son.`);\r\n                  return `${person1FullName} is ${person2FullName}'s maternal aunt's son`;\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (p1AncestorGender === 'Male') { \r\n                if (p2AncestorGender === 'Male'){  // بنت عمه\r\n                  console.log(`${person1FullName} is ${person2FullName}'s paternal uncle's daughter.`);\r\n                  return `${person1FullName} is ${person2FullName}'s paternal uncle's daughter`;\r\n                }\r\n                else{ // بنت عمته\r\n                  console.log(`${person1FullName} is ${person2FullName}'s paternal aunt's daughter.`);\r\n                  return `${person1FullName} is ${person2FullName}'s paternal aunt's daughter`;\r\n                }\r\n              } \r\n              else {  \r\n                if (p2AncestorGender === 'Male'){  // بنت خاله\r\n                  console.log(`${person1FullName} is ${person2FullName}'s maternal uncle's daughter.`);\r\n                  return `${person1FullName} is ${person2FullName}'s maternal uncle's daughter`;\r\n                }\r\n                else{ // بنت خالته\r\n                  console.log(`${person1FullName} is ${person2FullName}'s maternal aunt's daughter.`);\r\n                  return `${person1FullName} is ${person2FullName}'s maternal aunt's daughter`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          else if (p1Level === 2 && p2Level === 3) {          \r\n            const p1AncestorFullName = getAncestorFullName(person1Ancestors, 1);\r\n            const p1AncestorGender = await getGender(p1AncestorFullName);\r\n\r\n            const p2AncestorFullName = getAncestorFullName(person2Ancestors, 1);\r\n            const p2AncestorGender = await getGender(p2AncestorFullName);\r\n\r\n            if (gender1 === 'Male') { \r\n              \r\n              if (p1AncestorGender === 'Male') {  // father's side\r\n                if (p2AncestorGender === 'Male') {  // father's brother's son\r\n                  console.log(`${person1FullName} is ${person2FullName}'s father paternal uncle's son.`);\r\n                  return `${person1FullName} is ${person2FullName}'s father paternal uncle's son`;\r\n                } else {  // father's brother's daughter\r\n                  console.log(`${person1FullName} is ${person2FullName}'s father paternal uncle's son.`);\r\n                  return `${person1FullName} is ${person2FullName}'s father paternal uncle's son`;\r\n                }\r\n              } else {  // mother's side\r\n                if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                  console.log(`${person1FullName} is ${person2FullName}'s father paternal uncle's son.`);\r\n                  return `${person1FullName} is ${person2FullName}'s father paternal uncle's son.`;\r\n                } else {  // mother's brother's daughter\r\n                  console.log(`${person1FullName} is ${person2FullName}'s maternal aunt's son.`);\r\n                  return `${person1FullName} is ${person2FullName}'s maternal aunt's son`;\r\n                }\r\n              }\r\n            } else {  // If person1 is female\r\n            \r\n              if (p1AncestorGender === 'Male') {  // father's side\r\n                if (p2AncestorGender === 'Male') {  // father's brother's son\r\n                  console.log(`${person1FullName} is ${person2FullName}'s paternal uncle's daughter.`);\r\n                  return `${person1FullName} is ${person2FullName}'s paternal uncle's daughter`;\r\n                } else {  // father's brother's daughter\r\n                  console.log(`${person1FullName} is ${person2FullName}'s paternal aunt's daughter.`);\r\n                  return `${person1FullName} is ${person2FullName}'s paternal aunt's daughter`;\r\n                }\r\n              } else {  // mother's side\r\n                if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                  console.log(`${person1FullName} is ${person2FullName}'s maternal uncle's daughter.`);\r\n                  return `${person1FullName} is ${person2FullName}'s maternal uncle's daughter`;\r\n                } else {  // mother's brother's daughter\r\n                  console.log(`${person1FullName} is ${person2FullName}'s maternal aunt's daughter.`);\r\n                  return `${person1FullName} is ${person2FullName}'s maternal aunt's daughter`;\r\n                }\r\n              }\r\n            }\r\n            \r\n          }\r\n          \r\n          else if (p1Level === 3 && p2Level === 2) {          \r\n            const p1AncestorFullName = getAncestorFullName(person1Ancestors, 1);\r\n            const p1AncestorGender = await getGender(p1AncestorFullName);\r\n\r\n            const p2AncestorFullName = getAncestorFullName(person2Ancestors, 1);\r\n            const p2AncestorGender = await getGender(p2AncestorFullName);\r\n\r\n            if (gender1 === 'Male') { \r\n              if (p1AncestorGender === 'Male') {  // father's side\r\n                if (p2AncestorGender === 'Male') {  // father's brother's son\r\n                  console.log(`${person1FullName}'s father is ${person2FullName}'s paternal uncle's son.`);\r\n                  return `${person1FullName}'s father is ${person2FullName}'s paternal uncle's son`;\r\n                } else {  // father's brother's daughter\r\n                  console.log(`${person1FullName}'s father is ${person2FullName}'s paternal uncle's son.`);\r\n                  return `${person1FullName}'s father is ${person2FullName}'s paternal uncle's son`;\r\n                }\r\n              } else {  // mother's side\r\n                if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                  console.log(`${person1FullName}'s father is ${person2FullName}'s maternal uncle's son.`);\r\n                  return `${person1FullName}'s father is ${person2FullName}'s maternal uncle's son.`;\r\n                } else {  // mother's brother's daughter\r\n                  console.log(`${person1FullName}'s mother is ${person2FullName}'s maternal aunt's son.`);\r\n                  return `${person1FullName}'s mother is ${person2FullName}'s maternal aunt's son`;\r\n                }\r\n              }\r\n            } else {  // If person1 is female\r\n              if (p1AncestorGender === 'Male') {  // father's side\r\n                if (p2AncestorGender === 'Male') {  // father's brother's son\r\n                  console.log(`${person1FullName}'s father is ${person2FullName}'s paternal uncle's daughter.`);\r\n                  return `${person1FullName}'s father is ${person2FullName}'s paternal uncle's daughter`;\r\n                } else {  // father's brother's daughter\r\n                  console.log(`${person1FullName}'s father is ${person2FullName}'s paternal aunt's daughter.`);\r\n                  return `${person1FullName}'s father is ${person2FullName}'s paternal aunt's daughter`;\r\n                }\r\n              } else {  // mother's side\r\n                if (p2AncestorGender === 'Male') {  // mother's brother's son\r\n                  console.log(`${person1FullName}'s mother is ${person2FullName}'s maternal uncle's daughter.`);\r\n                  return `${person1FullName}'s mother is ${person2FullName}'s maternal uncle's daughter`;\r\n                } else {  // mother's brother's daughter\r\n                  console.log(`${person1FullName}'s mother is ${person2FullName}'s maternal aunt's daughter.`);\r\n                  return `${person1FullName}'s mother is ${person2FullName}'s maternal aunt's daughter`;\r\n                }\r\n              }\r\n            }\r\n            \r\n            \r\n          }\r\n\r\n          // Their father are cousins OR Their Grandfathers/grandmothers are siblings.\r\n          else if (p1Level === 3 && p2Level === 3) {          \r\n            \r\n            const p1AncestorFullName = getAncestorFullName(person1Ancestors, 1);\r\n            const p1AncestorGender = await getGender(p1AncestorFullName);\r\n\r\n            const p1GreatAncestorFullName = getAncestorFullName(person1Ancestors, 2);\r\n            const p1GreatAncestorGender = await getGender(p1GreatAncestorFullName);\r\n\r\n            const p2AncestorFullName = getAncestorFullName(person2Ancestors, 1);\r\n            const p2AncestorGender = await getGender(p2AncestorFullName);\r\n\r\n            const p2GreatAncestorFullName = getAncestorFullName(person2Ancestors, 2);\r\n            const p2GreatAncestorGender = await getGender(p2GreatAncestorFullName);\r\n            // Ancestor changes paternal/maternal\r\n            // Great Ancestor changes grandfather/grandmother\r\n            if (p1AncestorGender === 'Male') { \r\n              if (p2AncestorGender === 'Male'){\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s paternal grandfather are brothers.`);\r\n                    return `${person1FullName}'s grandfather and ${person2FullName}'s grandfather are brothers.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s paternal grandmother are siblings.`);\r\n                    return `${person1FullName}'s grandfather and ${person2FullName}'s grandmother are brothers.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s paternal grandfather are siblings.`);\r\n                    return `${person1FullName}'s grandmother and ${person2FullName}'s grandfather are brothers.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s paternal grandmother are sisters.`);\r\n                    return `${person1FullName}'s grandmother and ${person2FullName}'s grandmother are brothers.`;\r\n                  }\r\n                }\r\n              }\r\n              else {\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s maternal grandfather are brothers.`);\r\n                    return `${person1FullName}'s grandfather and ${person2FullName}'s grandfather are brothers.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s paternal grandfather and ${person2FullName}'s maternal grandmother are siblings.`);\r\n                    return `${person1FullName}'s grandfather and ${person2FullName}'s grandmother are brothers.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s maternal grandfather are siblings.`);\r\n                    return `${person1FullName}'s grandmother and ${person2FullName}'s grandfather are brothers.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s paternal grandmother and ${person2FullName}'s maternal grandmother are sisters.`);\r\n                    return `${person1FullName}'s grandmother and ${person2FullName}'s grandmother are brothers.`;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (p2AncestorGender === 'Male'){\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s paternal grandfather are brothers.`);\r\n                    return `${person1FullName}'s grandfather and ${person2FullName}'s grandfather are brothers.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s paternal grandmother are siblings.`);\r\n                    return `${person1FullName}'s grandfather and ${person2FullName}'s grandmother are brothers.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s paternal grandfather are siblings.`);\r\n                    return `${person1FullName}'s grandmother and ${person2FullName}'s grandfather are brothers.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s paternal grandmother are sisters.`);\r\n                    return `${person1FullName}'s grandmother and ${person2FullName}'s grandmother are brothers.`;\r\n                  }\r\n                }\r\n              }\r\n              else {\r\n                if (p1GreatAncestorGender === 'Male'){\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s maternal grandfather are brothers.`);\r\n                    return `${person1FullName}'s grandfather and ${person2FullName}'s grandfather are brothers.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s maternal grandfather and ${person2FullName}'s maternal grandmother are siblings.`);\r\n                    return `${person1FullName}'s grandfather and ${person2FullName}'s grandmother are brothers.`;\r\n                  }\r\n                }\r\n                else {\r\n                  if (p2GreatAncestorGender === 'Male'){\r\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s maternal grandfather are siblings.`);\r\n                    return `${person1FullName}'s grandmother and ${person2FullName}'s grandfather are brothers.`;\r\n                  }\r\n                  else{\r\n                    console.log(`${person1FullName}'s maternal grandmother and ${person2FullName}'s maternal grandmother are sisters.`);\r\n                    return `${person1FullName}'s grandmother and ${person2FullName}'s grandmother are brothers.`;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            \r\n          }\r\n\r\n\r\n        }\r\n      }\r\n    }\r\n    console.log('No direct relation found.');\r\n    return 'No direct relation found';\r\n  } catch (error) {\r\n    console.error('Error in relationship lookup:', error);\r\n    return 'Error in relationship lookup';\r\n  }\r\n};\r\n\r\nconst getGender = async (fullName) => {\r\n  const session = driver.session(); // Open a session\r\n\r\n  try {\r\n    // Split the full name into first and last name\r\n    const [firstName, lastName] = fullName.split(\" \");\r\n\r\n    // Run the query using both first name and last name\r\n    const result = await session.run(\r\n      `MATCH (p:Person) WHERE toLower(p.name) = toLower($firstName) AND toLower(p.lastName) = toLower($lastName) RETURN p.gender AS gender`,\r\n      { firstName, lastName }\r\n    );\r\n    \r\n    if (result.records.length > 0) {\r\n      const gender = result.records[0].get('gender');\r\n      // console.log(`Gender of ${fullName}: ${gender}`);\r\n      return gender; // Return the gender value\r\n    } else {\r\n      console.log(`No person found with the name ${fullName}`);\r\n      return null; // Return null when no person is found\r\n    }\r\n  } catch (error) {\r\n    console.error('Error retrieving gender:', error);\r\n    return null; // Return null in case of an error\r\n  } finally {\r\n    await session.close(); // Always close the session after the query\r\n  }\r\n};\r\n\r\nconst getAncestorFullName = (personAncestors, level) => {\r\n  // Check if the ancestor exists at the given level\r\n  if (!personAncestors[level - 1] || !personAncestors[level - 1].properties) {\r\n    return `Unknown (Level: ${level})`;\r\n  }\r\n\r\n  const ancestor = personAncestors[level - 1].properties;\r\n  const name = ancestor.name || \"Unknown\"; // Default to \"Unknown\" if name is missing\r\n  const lastName = ancestor.lastName || \"Unknown\"; // Default to \"Unknown\" if lastName is missing\r\n\r\n  return `${name} ${lastName}`;\r\n};\r\n\r\nexport const translateName = (fullName) => {\r\n  // Split the full name into parts (first name and last name)\r\n  const nameParts = fullName.split(' ');\r\n\r\n  // The first part is the first name, and the last part is the last name\r\n  const firstName = nameParts[0];\r\n  const lastName = nameParts[nameParts.length - 1];\r\n\r\n  // Translate the first and last names using the translations object\r\n  const translatedFirstName = translations[firstName] || firstName;\r\n  const translatedLastName = translations[lastName] || lastName;\r\n\r\n  // Return the translated full name\r\n  return `${translatedFirstName} ${translatedLastName}`;\r\n};\r\n\r\n\r\nconst RelationPage = () => {\r\n  const [person1, setPerson1] = useState('');\r\n  const [person2, setPerson2] = useState('');\r\n  const [relationship, setRelationship] = useState('');\r\n\r\n  const fetchRelationship = async (name1, name2) => {\r\n    \r\n\r\n\r\n    const relationshipResult = await getRelationship(name1, name2);\r\n    console.log(relationshipResult);\r\n    return relationshipResult;\r\n  };\r\n\r\n  const FetchRelationship = async (e) => {\r\n    e.preventDefault();\r\n    const translatedName1 = translateName(person1);\r\n    const translatedName2 = translateName(person2);\r\n\r\n    const result = await fetchRelationship(person1, person2);\r\n    setRelationship(result);\r\n  };\r\n\r\n  return (\r\n    <div className=\"relation-page\">\r\n      <h2>ماهي العلاقة بينهما؟</h2>\r\n      <form onSubmit={FetchRelationship}>\r\n        <input\r\n          id=\"name1\"\r\n          type=\"text\"\r\n          placeholder=\"الإسم الكامل الأول\"\r\n          value={person1}\r\n          onChange={(e) => setPerson1(e.target.value)}\r\n        />\r\n        <input\r\n          id=\"name2\"\r\n          type=\"text\"\r\n          placeholder=\"الإسم الكامل الثاني\"\r\n          value={person2}\r\n          onChange={(e) => setPerson2(e.target.value)}\r\n        />\r\n        <button type=\"submit\">تحقق من العلاقة</button><br></br>\r\n      </form>\r\n      <p id=\"relationHolder\">{relationship}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RelationPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}