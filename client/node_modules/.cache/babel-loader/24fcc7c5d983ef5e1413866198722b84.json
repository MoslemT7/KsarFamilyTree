{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\n// Signature bytes for each response message type\nvar SUCCESS = 0x70; // 0111 0000 // SUCCESS <metadata>\nvar RECORD = 0x71; // 0111 0001 // RECORD <value>\nvar IGNORED = 0x7e; // 0111 1110 // IGNORED <metadata>\nvar FAILURE = 0x7f; // 0111 1111 // FAILURE <metadata>\nfunction NO_OP() {}\nfunction NO_OP_IDENTITY(subject) {\n  return subject;\n}\nvar NO_OP_OBSERVER = {\n  onNext: NO_OP,\n  onCompleted: NO_OP,\n  onError: NO_OP\n};\n/**\n * Treat the protocol responses and notify the observers\n */\nvar ResponseHandler = /** @class */function () {\n  /**\n   * Called when something went wrong with the connectio\n   * @callback ResponseHandler~Observer~OnErrorApplyTransformation\n   * @param {any} error The error\n   * @returns {any} The new error\n   */\n  /**\n   * Called when something went wrong with the connectio\n   * @callback ResponseHandler~Observer~OnError\n   * @param {any} error The error\n   */\n  /**\n   * Called when something went wrong with the connectio\n   * @callback ResponseHandler~MetadataTransformer\n   * @param {any} metadata The metadata got onSuccess\n   * @returns {any} The transformed metadata\n   */\n  /**\n   * @typedef {Object} ResponseHandler~Observer\n   * @property {ResponseHandler~Observer~OnError} onError Invoke when a connection error occurs\n   * @property {ResponseHandler~Observer~OnError} onFailure Invoke when a protocol failure occurs\n   * @property {ResponseHandler~Observer~OnErrorApplyTransformation} onErrorApplyTransformation Invoke just after the failure occurs,\n   *  before notify to respective observer. This method should transform the failure reason to the approprited one.\n   */\n  /**\n   * Constructor\n   * @param {Object} param The params\n   * @param {ResponseHandler~MetadataTransformer} transformMetadata Transform metadata when the SUCCESS is received.\n   * @param {Channel} channel The channel used to exchange messages\n   * @param {Logger} log The logger\n   * @param {ResponseHandler~Observer} observer Object which will be notified about errors\n   */\n  function ResponseHandler(_a) {\n    var _b = _a === void 0 ? {} : _a,\n      transformMetadata = _b.transformMetadata,\n      enrichErrorMetadata = _b.enrichErrorMetadata,\n      log = _b.log,\n      observer = _b.observer;\n    this._pendingObservers = [];\n    this._log = log;\n    this._transformMetadata = transformMetadata || NO_OP_IDENTITY;\n    this._enrichErrorMetadata = enrichErrorMetadata || NO_OP_IDENTITY;\n    this._observer = Object.assign({\n      onObserversCountChange: NO_OP,\n      onError: NO_OP,\n      onFailure: NO_OP,\n      onErrorApplyTransformation: NO_OP_IDENTITY\n    }, observer);\n  }\n  Object.defineProperty(ResponseHandler.prototype, \"currentFailure\", {\n    get: function () {\n      return this._currentFailure;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ResponseHandler.prototype.handleResponse = function (msg) {\n    var payload = msg.fields[0];\n    switch (msg.signature) {\n      case RECORD:\n        if (this._log.isDebugEnabled()) {\n          this._log.debug(\"S: RECORD \".concat(neo4j_driver_core_1.json.stringify(msg)));\n        }\n        this._currentObserver.onNext(payload);\n        break;\n      case SUCCESS:\n        if (this._log.isDebugEnabled()) {\n          this._log.debug(\"S: SUCCESS \".concat(neo4j_driver_core_1.json.stringify(msg)));\n        }\n        try {\n          var metadata = this._transformMetadata(payload);\n          this._currentObserver.onCompleted(metadata);\n        } finally {\n          this._updateCurrentObserver();\n        }\n        break;\n      case FAILURE:\n        if (this._log.isDebugEnabled()) {\n          this._log.debug(\"S: FAILURE \".concat(neo4j_driver_core_1.json.stringify(msg)));\n        }\n        try {\n          this._currentFailure = this._handleErrorPayload(this._enrichErrorMetadata(payload));\n          this._currentObserver.onError(this._currentFailure);\n        } finally {\n          this._updateCurrentObserver();\n          // Things are now broken. Pending observers will get FAILURE messages routed until we are done handling this failure.\n          this._observer.onFailure(this._currentFailure);\n        }\n        break;\n      case IGNORED:\n        if (this._log.isDebugEnabled()) {\n          this._log.debug(\"S: IGNORED \".concat(neo4j_driver_core_1.json.stringify(msg)));\n        }\n        try {\n          if (this._currentFailure && this._currentObserver.onError) {\n            this._currentObserver.onError(this._currentFailure);\n          } else if (this._currentObserver.onError) {\n            this._currentObserver.onError((0, neo4j_driver_core_1.newError)('Ignored either because of an error or RESET'));\n          }\n        } finally {\n          this._updateCurrentObserver();\n        }\n        break;\n      default:\n        this._observer.onError((0, neo4j_driver_core_1.newError)('Unknown Bolt protocol message: ' + msg));\n    }\n  };\n  /*\n   * Pop next pending observer form the list of observers and make it current observer.\n   * @protected\n   */\n  ResponseHandler.prototype._updateCurrentObserver = function () {\n    this._currentObserver = this._pendingObservers.shift();\n    this._observer.onObserversCountChange(this._observersCount);\n  };\n  Object.defineProperty(ResponseHandler.prototype, \"_observersCount\", {\n    get: function () {\n      return this._currentObserver == null ? this._pendingObservers.length : this._pendingObservers.length + 1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ResponseHandler.prototype._queueObserver = function (observer) {\n    observer = observer || NO_OP_OBSERVER;\n    observer.onCompleted = observer.onCompleted || NO_OP;\n    observer.onError = observer.onError || NO_OP;\n    observer.onNext = observer.onNext || NO_OP;\n    if (this._currentObserver === undefined) {\n      this._currentObserver = observer;\n    } else {\n      this._pendingObservers.push(observer);\n    }\n    this._observer.onObserversCountChange(this._observersCount);\n    return true;\n  };\n  ResponseHandler.prototype._notifyErrorToObservers = function (error) {\n    if (this._currentObserver && this._currentObserver.onError) {\n      this._currentObserver.onError(error);\n    }\n    while (this._pendingObservers.length > 0) {\n      var observer = this._pendingObservers.shift();\n      if (observer && observer.onError) {\n        observer.onError(error);\n      }\n    }\n  };\n  ResponseHandler.prototype.hasOngoingObservableRequests = function () {\n    return this._currentObserver != null || this._pendingObservers.length > 0;\n  };\n  ResponseHandler.prototype._resetFailure = function () {\n    this._currentFailure = null;\n  };\n  ResponseHandler.prototype._handleErrorPayload = function (payload) {\n    var standardizedCode = _standardizeCode(payload.code);\n    var cause = payload.cause != null ? this._handleErrorCause(payload.cause) : undefined;\n    var error = (0, neo4j_driver_core_1.newError)(payload.message, standardizedCode, cause, payload.gql_status, payload.description, payload.diagnostic_record);\n    return this._observer.onErrorApplyTransformation(error);\n  };\n  ResponseHandler.prototype._handleErrorCause = function (payload) {\n    var cause = payload.cause != null ? this._handleErrorCause(payload.cause) : undefined;\n    var error = (0, neo4j_driver_core_1.newGQLError)(payload.message, cause, payload.gql_status, payload.description, payload.diagnostic_record);\n    return this._observer.onErrorApplyTransformation(error);\n  };\n  return ResponseHandler;\n}();\nexports.default = ResponseHandler;\n/**\n * Standardize error classification that are different between 5.x and previous versions.\n *\n * The transient error were clean-up for being retrieable and because of this\n * `Terminated` and `LockClientStopped` were reclassified as `ClientError`.\n *\n * @param {string} code\n * @returns {string} the standardized error code\n */\nfunction _standardizeCode(code) {\n  if (code === 'Neo.TransientError.Transaction.Terminated') {\n    return 'Neo.ClientError.Transaction.Terminated';\n  } else if (code === 'Neo.TransientError.Transaction.LockClientStopped') {\n    return 'Neo.ClientError.Transaction.LockClientStopped';\n  }\n  return code;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","neo4j_driver_core_1","require","SUCCESS","RECORD","IGNORED","FAILURE","NO_OP","NO_OP_IDENTITY","subject","NO_OP_OBSERVER","onNext","onCompleted","onError","ResponseHandler","_a","_b","transformMetadata","enrichErrorMetadata","log","observer","_pendingObservers","_log","_transformMetadata","_enrichErrorMetadata","_observer","assign","onObserversCountChange","onFailure","onErrorApplyTransformation","prototype","get","_currentFailure","enumerable","configurable","handleResponse","msg","payload","fields","signature","isDebugEnabled","debug","concat","json","stringify","_currentObserver","metadata","_updateCurrentObserver","_handleErrorPayload","newError","shift","_observersCount","length","_queueObserver","undefined","push","_notifyErrorToObservers","error","hasOngoingObservableRequests","_resetFailure","standardizedCode","_standardizeCode","code","cause","_handleErrorCause","message","gql_status","description","diagnostic_record","newGQLError","default"],"sources":["D:/Study/Projects/Copy 4/client/node_modules/neo4j-driver-bolt-connection/lib/bolt/response-handler.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\n// Signature bytes for each response message type\nvar SUCCESS = 0x70; // 0111 0000 // SUCCESS <metadata>\nvar RECORD = 0x71; // 0111 0001 // RECORD <value>\nvar IGNORED = 0x7e; // 0111 1110 // IGNORED <metadata>\nvar FAILURE = 0x7f; // 0111 1111 // FAILURE <metadata>\nfunction NO_OP() { }\nfunction NO_OP_IDENTITY(subject) {\n    return subject;\n}\nvar NO_OP_OBSERVER = {\n    onNext: NO_OP,\n    onCompleted: NO_OP,\n    onError: NO_OP\n};\n/**\n * Treat the protocol responses and notify the observers\n */\nvar ResponseHandler = /** @class */ (function () {\n    /**\n     * Called when something went wrong with the connectio\n     * @callback ResponseHandler~Observer~OnErrorApplyTransformation\n     * @param {any} error The error\n     * @returns {any} The new error\n     */\n    /**\n     * Called when something went wrong with the connectio\n     * @callback ResponseHandler~Observer~OnError\n     * @param {any} error The error\n     */\n    /**\n     * Called when something went wrong with the connectio\n     * @callback ResponseHandler~MetadataTransformer\n     * @param {any} metadata The metadata got onSuccess\n     * @returns {any} The transformed metadata\n     */\n    /**\n     * @typedef {Object} ResponseHandler~Observer\n     * @property {ResponseHandler~Observer~OnError} onError Invoke when a connection error occurs\n     * @property {ResponseHandler~Observer~OnError} onFailure Invoke when a protocol failure occurs\n     * @property {ResponseHandler~Observer~OnErrorApplyTransformation} onErrorApplyTransformation Invoke just after the failure occurs,\n     *  before notify to respective observer. This method should transform the failure reason to the approprited one.\n     */\n    /**\n     * Constructor\n     * @param {Object} param The params\n     * @param {ResponseHandler~MetadataTransformer} transformMetadata Transform metadata when the SUCCESS is received.\n     * @param {Channel} channel The channel used to exchange messages\n     * @param {Logger} log The logger\n     * @param {ResponseHandler~Observer} observer Object which will be notified about errors\n     */\n    function ResponseHandler(_a) {\n        var _b = _a === void 0 ? {} : _a, transformMetadata = _b.transformMetadata, enrichErrorMetadata = _b.enrichErrorMetadata, log = _b.log, observer = _b.observer;\n        this._pendingObservers = [];\n        this._log = log;\n        this._transformMetadata = transformMetadata || NO_OP_IDENTITY;\n        this._enrichErrorMetadata = enrichErrorMetadata || NO_OP_IDENTITY;\n        this._observer = Object.assign({\n            onObserversCountChange: NO_OP,\n            onError: NO_OP,\n            onFailure: NO_OP,\n            onErrorApplyTransformation: NO_OP_IDENTITY\n        }, observer);\n    }\n    Object.defineProperty(ResponseHandler.prototype, \"currentFailure\", {\n        get: function () {\n            return this._currentFailure;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ResponseHandler.prototype.handleResponse = function (msg) {\n        var payload = msg.fields[0];\n        switch (msg.signature) {\n            case RECORD:\n                if (this._log.isDebugEnabled()) {\n                    this._log.debug(\"S: RECORD \".concat(neo4j_driver_core_1.json.stringify(msg)));\n                }\n                this._currentObserver.onNext(payload);\n                break;\n            case SUCCESS:\n                if (this._log.isDebugEnabled()) {\n                    this._log.debug(\"S: SUCCESS \".concat(neo4j_driver_core_1.json.stringify(msg)));\n                }\n                try {\n                    var metadata = this._transformMetadata(payload);\n                    this._currentObserver.onCompleted(metadata);\n                }\n                finally {\n                    this._updateCurrentObserver();\n                }\n                break;\n            case FAILURE:\n                if (this._log.isDebugEnabled()) {\n                    this._log.debug(\"S: FAILURE \".concat(neo4j_driver_core_1.json.stringify(msg)));\n                }\n                try {\n                    this._currentFailure = this._handleErrorPayload(this._enrichErrorMetadata(payload));\n                    this._currentObserver.onError(this._currentFailure);\n                }\n                finally {\n                    this._updateCurrentObserver();\n                    // Things are now broken. Pending observers will get FAILURE messages routed until we are done handling this failure.\n                    this._observer.onFailure(this._currentFailure);\n                }\n                break;\n            case IGNORED:\n                if (this._log.isDebugEnabled()) {\n                    this._log.debug(\"S: IGNORED \".concat(neo4j_driver_core_1.json.stringify(msg)));\n                }\n                try {\n                    if (this._currentFailure && this._currentObserver.onError) {\n                        this._currentObserver.onError(this._currentFailure);\n                    }\n                    else if (this._currentObserver.onError) {\n                        this._currentObserver.onError((0, neo4j_driver_core_1.newError)('Ignored either because of an error or RESET'));\n                    }\n                }\n                finally {\n                    this._updateCurrentObserver();\n                }\n                break;\n            default:\n                this._observer.onError((0, neo4j_driver_core_1.newError)('Unknown Bolt protocol message: ' + msg));\n        }\n    };\n    /*\n     * Pop next pending observer form the list of observers and make it current observer.\n     * @protected\n     */\n    ResponseHandler.prototype._updateCurrentObserver = function () {\n        this._currentObserver = this._pendingObservers.shift();\n        this._observer.onObserversCountChange(this._observersCount);\n    };\n    Object.defineProperty(ResponseHandler.prototype, \"_observersCount\", {\n        get: function () {\n            return this._currentObserver == null ? this._pendingObservers.length : this._pendingObservers.length + 1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ResponseHandler.prototype._queueObserver = function (observer) {\n        observer = observer || NO_OP_OBSERVER;\n        observer.onCompleted = observer.onCompleted || NO_OP;\n        observer.onError = observer.onError || NO_OP;\n        observer.onNext = observer.onNext || NO_OP;\n        if (this._currentObserver === undefined) {\n            this._currentObserver = observer;\n        }\n        else {\n            this._pendingObservers.push(observer);\n        }\n        this._observer.onObserversCountChange(this._observersCount);\n        return true;\n    };\n    ResponseHandler.prototype._notifyErrorToObservers = function (error) {\n        if (this._currentObserver && this._currentObserver.onError) {\n            this._currentObserver.onError(error);\n        }\n        while (this._pendingObservers.length > 0) {\n            var observer = this._pendingObservers.shift();\n            if (observer && observer.onError) {\n                observer.onError(error);\n            }\n        }\n    };\n    ResponseHandler.prototype.hasOngoingObservableRequests = function () {\n        return this._currentObserver != null || this._pendingObservers.length > 0;\n    };\n    ResponseHandler.prototype._resetFailure = function () {\n        this._currentFailure = null;\n    };\n    ResponseHandler.prototype._handleErrorPayload = function (payload) {\n        var standardizedCode = _standardizeCode(payload.code);\n        var cause = payload.cause != null ? this._handleErrorCause(payload.cause) : undefined;\n        var error = (0, neo4j_driver_core_1.newError)(payload.message, standardizedCode, cause, payload.gql_status, payload.description, payload.diagnostic_record);\n        return this._observer.onErrorApplyTransformation(error);\n    };\n    ResponseHandler.prototype._handleErrorCause = function (payload) {\n        var cause = payload.cause != null ? this._handleErrorCause(payload.cause) : undefined;\n        var error = (0, neo4j_driver_core_1.newGQLError)(payload.message, cause, payload.gql_status, payload.description, payload.diagnostic_record);\n        return this._observer.onErrorApplyTransformation(error);\n    };\n    return ResponseHandler;\n}());\nexports.default = ResponseHandler;\n/**\n * Standardize error classification that are different between 5.x and previous versions.\n *\n * The transient error were clean-up for being retrieable and because of this\n * `Terminated` and `LockClientStopped` were reclassified as `ClientError`.\n *\n * @param {string} code\n * @returns {string} the standardized error code\n */\nfunction _standardizeCode(code) {\n    if (code === 'Neo.TransientError.Transaction.Terminated') {\n        return 'Neo.ClientError.Transaction.Terminated';\n    }\n    else if (code === 'Neo.TransientError.Transaction.LockClientStopped') {\n        return 'Neo.ClientError.Transaction.LockClientStopped';\n    }\n    return code;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}